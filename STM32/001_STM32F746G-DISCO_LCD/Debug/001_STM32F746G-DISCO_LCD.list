
001_STM32F746G-DISCO_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000524c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00049ed0  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804f2e4  0804f2e4  00060040  2**0
                  CONTENTS
  4 .ARM          00000008  0804f2e4  0804f2e4  0005f2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804f2ec  0804f2ec  00060040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804f2ec  0804f2ec  0005f2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804f2f0  0804f2f0  0005f2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0804f2f4  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000040  0804f334  00060040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  0804f334  000603e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cc0  00000000  00000000  00060070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003251  00000000  00000000  00074d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00077f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  000790c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028043  00000000  00000000  0007a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c5c  00000000  00000000  000a20bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f292f  00000000  00000000  000b6d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a9646  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004664  00000000  00000000  001a969c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000040 	.word	0x20000040
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080053fc 	.word	0x080053fc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000044 	.word	0x20000044
 8000204:	080053fc 	.word	0x080053fc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000504:	f3bf 8f4f 	dsb	sy
}
 8000508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800050a:	f3bf 8f6f 	isb	sy
}
 800050e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <SCB_EnableICache+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy
}
 8000522:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <SCB_EnableICache+0x48>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <SCB_EnableICache+0x48>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000530:	f3bf 8f4f 	dsb	sy
}
 8000534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000536:	f3bf 8f6f 	isb	sy
}
 800053a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800055a:	f3bf 8f4f 	dsb	sy
}
 800055e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SCB_EnableDCache+0x84>)
 8000562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000566:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	0b5b      	lsrs	r3, r3, #13
 800056c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000570:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	08db      	lsrs	r3, r3, #3
 8000576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800057a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	015a      	lsls	r2, r3, #5
 8000580:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000584:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000586:	68ba      	ldr	r2, [r7, #8]
 8000588:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800058a:	4911      	ldr	r1, [pc, #68]	; (80005d0 <SCB_EnableDCache+0x84>)
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	60ba      	str	r2, [r7, #8]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1ef      	bne.n	800057c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	60fa      	str	r2, [r7, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e5      	bne.n	8000572 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SCB_EnableDCache+0x84>)
 80005b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005b8:	f3bf 8f4f 	dsb	sy
}
 80005bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005be:	f3bf 8f6f 	isb	sy
}
 80005c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	/* Enable the CPU Cache */
	/* Enable I-Cache */
	SCB_EnableICache();
 80005da:	f7ff ff91 	bl	8000500 <SCB_EnableICache>
	/* Enable D-Cache */
	SCB_EnableDCache();
 80005de:	f7ff ffb5 	bl	800054c <SCB_EnableDCache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fa48 	bl	8000a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f835 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f8f5 	bl	80007d8 <MX_GPIO_Init>
  MX_CRC_Init();
 80005ee:	f000 f89f 	bl	8000730 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005f2:	f000 f8bf 	bl	8000774 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 80005f6:	f004 fcdf 	bl	8004fb8 <BSP_SDRAM_Init>
	__HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <main+0x7c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <main+0x7c>)
 8000600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <main+0x7c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

	BSP_TS_Init(480, 272);
 8000612:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000616:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800061a:	f004 fe83 	bl	8005324 <BSP_TS_Init>

	BSP_LCD_Init();
 800061e:	f004 f9bf 	bl	80049a0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000622:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000626:	2000      	movs	r0, #0
 8000628:	f004 fa52 	bl	8004ad0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 800062c:	f004 fb64 	bl	8004cf8 <BSP_LCD_DisplayOn>

	BSP_LCD_SelectLayer(0);
 8000630:	2000      	movs	r0, #0
 8000632:	f004 faad 	bl	8004b90 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000636:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800063a:	f004 faed 	bl	8004c18 <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800063e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000642:	f004 fab5 	bl	8004bb0 <BSP_LCD_SetBackColor>
// 	uint16_t textPosY = (ySize - TEXT_HEIGHT) / 2;
//
// 	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTPINK);
// 	BSP_LCD_DisplayStringAt(textPosX, textPosY, (uint8_t *)"BLACKPINK", LEFT_MODE);

 	displayImageWithOffset(104, 0);
 8000646:	2100      	movs	r1, #0
 8000648:	2068      	movs	r0, #104	; 0x68
 800064a:	f000 f903 	bl	8000854 <displayImageWithOffset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0x7a>
 8000650:	40023800 	.word	0x40023800

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fec2 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a2a      	ldr	r2, [pc, #168]	; (8000728 <SystemClock_Config+0xd4>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xd4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a25      	ldr	r2, [pc, #148]	; (800072c <SystemClock_Config+0xd8>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <SystemClock_Config+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006bc:	2319      	movs	r3, #25
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006c0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fbfe 	bl	8002ed4 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006de:	f000 f8f1 	bl	80008c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e2:	f002 fba7 	bl	8002e34 <HAL_PWREx_EnableOverDrive>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006ec:	f000 f8ea 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2107      	movs	r1, #7
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fe84 	bl	800341c <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800071a:	f000 f8d3 	bl	80008c4 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_CRC_Init+0x3c>)
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MX_CRC_Init+0x40>)
 8000738:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_CRC_Init+0x3c>)
 800073c:	2200      	movs	r2, #0
 800073e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_CRC_Init+0x3c>)
 8000742:	2200      	movs	r2, #0
 8000744:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_CRC_Init+0x3c>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_CRC_Init+0x3c>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_CRC_Init+0x3c>)
 8000754:	2201      	movs	r2, #1
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_CRC_Init+0x3c>)
 800075a:	f000 fb1f 	bl	8000d9c <HAL_CRC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000764:	f000 f8ae 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000230 	.word	0x20000230
 8000770:	40023000 	.word	0x40023000

08000774 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <MX_DMA2D_Init+0x60>)
 800077c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007aa:	f000 fd9f 	bl	80012ec <HAL_DMA2D_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007b4:	f000 f886 	bl	80008c4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007b8:	2101      	movs	r1, #1
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_DMA2D_Init+0x5c>)
 80007bc:	f000 fef4 	bl	80015a8 <HAL_DMA2D_ConfigLayer>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007c6:	f000 f87d 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200002c0 	.word	0x200002c0
 80007d4:	4002b000 	.word	0x4002b000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_GPIO_Init+0x74>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a16      	ldr	r2, [pc, #88]	; (800084c <MX_GPIO_Init+0x74>)
 80007f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_GPIO_Init+0x74>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_GPIO_Init+0x74>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <MX_GPIO_Init+0x74>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_GPIO_Init+0x74>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2102      	movs	r1, #2
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <MX_GPIO_Init+0x78>)
 8000824:	f001 f99a 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000828:	2302      	movs	r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_GPIO_Init+0x78>)
 8000840:	f000 ffe0 	bl	8001804 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40022000 	.word	0x40022000

08000854 <displayImageWithOffset>:

/* USER CODE BEGIN 4 */
void displayImageWithOffset(int xOffset, int yOffset)
{
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  for (uint16_t i = 0; i < PIC_HEIGHT; i++)
 800085e:	2300      	movs	r3, #0
 8000860:	81fb      	strh	r3, [r7, #14]
 8000862:	e024      	b.n	80008ae <displayImageWithOffset+0x5a>
  {
    for (uint16_t j = 0; j < PIC_WIDTH; j++)
 8000864:	2300      	movs	r3, #0
 8000866:	81bb      	strh	r3, [r7, #12]
 8000868:	e01a      	b.n	80008a0 <displayImageWithOffset+0x4c>
    {
      BSP_LCD_DrawPixel(j + xOffset, i + yOffset, argb_img[i][j]);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	b29a      	uxth	r2, r3
 800086e:	89bb      	ldrh	r3, [r7, #12]
 8000870:	4413      	add	r3, r2
 8000872:	b298      	uxth	r0, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b29a      	uxth	r2, r3
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	4413      	add	r3, r2
 800087c:	b29c      	uxth	r4, r3
 800087e:	89fa      	ldrh	r2, [r7, #14]
 8000880:	89b9      	ldrh	r1, [r7, #12]
 8000882:	4d0f      	ldr	r5, [pc, #60]	; (80008c0 <displayImageWithOffset+0x6c>)
 8000884:	4613      	mov	r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	4413      	add	r3, r2
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	440b      	add	r3, r1
 800088e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000892:	461a      	mov	r2, r3
 8000894:	4621      	mov	r1, r4
 8000896:	f004 f9e7 	bl	8004c68 <BSP_LCD_DrawPixel>
    for (uint16_t j = 0; j < PIC_WIDTH; j++)
 800089a:	89bb      	ldrh	r3, [r7, #12]
 800089c:	3301      	adds	r3, #1
 800089e:	81bb      	strh	r3, [r7, #12]
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80008a6:	d3e0      	bcc.n	800086a <displayImageWithOffset+0x16>
  for (uint16_t i = 0; i < PIC_HEIGHT; i++)
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	3301      	adds	r3, #1
 80008ac:	81fb      	strh	r3, [r7, #14]
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80008b4:	d3d6      	bcc.n	8000864 <displayImageWithOffset+0x10>
    }
  }
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bdb0      	pop	{r4, r5, r7, pc}
 80008c0:	08005414 	.word	0x08005414

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x44>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_MspInit+0x44>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_MspInit+0x44>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x44>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x44>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x44>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_CRC_MspInit+0x38>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10b      	bne.n	8000942 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_CRC_MspInit+0x3c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <HAL_CRC_MspInit+0x3c>)
 8000930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <HAL_CRC_MspInit+0x3c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023000 	.word	0x40023000
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_DMA2D_MspInit+0x38>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d10b      	bne.n	8000982 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_DMA2D_MspInit+0x3c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <HAL_DMA2D_MspInit+0x3c>)
 8000970:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_DMA2D_MspInit+0x3c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	4002b000 	.word	0x4002b000
 8000994:	40023800 	.word	0x40023800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f884 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <LTDC_IRQHandler>:
/******************************************************************************/

/* USER CODE BEGIN 1 */

void LTDC_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hLtdcHandler);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <LTDC_IRQHandler+0x10>)
 80009f2:	f001 ff69 	bl	80028c8 <HAL_LTDC_IRQHandler>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000304 	.word	0x20000304

08000a00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd7 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f004 fca7 	bl	80053a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fdbd 	bl	80005d4 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000a68:	0804f2f4 	.word	0x0804f2f4
  ldr r2, =_sbss
 8000a6c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000a70:	200003e0 	.word	0x200003e0

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>

08000a76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	f000 f94c 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 f805 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a86:	f7ff ff23 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f967 	bl	8000d82 <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f92f 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000300 	.word	0x20000300

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000300 	.word	0x20000300

08000b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff ffee 	bl	8000b18 <HAL_GetTick>
 8000b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d005      	beq.n	8000b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_Delay+0x44>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b56:	bf00      	nop
 8000b58:	f7ff ffde 	bl	8000b18 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d8f7      	bhi.n	8000b58 <HAL_Delay+0x28>
  {
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008

08000b78 <__NVIC_SetPriorityGrouping>:
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	05fa0000 	.word	0x05fa0000

08000bc0 <__NVIC_GetPriorityGrouping>:
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff3e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff31 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e054      	b.n	8000e58 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7f5b      	ldrb	r3, [r3, #29]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d105      	bne.n	8000dc4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fdaa 	bl	8000918 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	791b      	ldrb	r3, [r3, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10c      	bne.n	8000dec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_CRC_Init+0xc4>)
 8000dd8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0218 	bic.w	r2, r2, #24
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	e00c      	b.n	8000e06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6899      	ldr	r1, [r3, #8]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	461a      	mov	r2, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f834 	bl	8000e64 <HAL_CRCEx_Polynomial_Set>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e028      	b.n	8000e58 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d105      	bne.n	8000e1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	e004      	b.n	8000e24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6912      	ldr	r2, [r2, #16]
 8000e22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695a      	ldr	r2, [r3, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	699a      	ldr	r2, [r3, #24]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	04c11db7 	.word	0x04c11db7

08000e64 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000e74:	231f      	movs	r3, #31
 8000e76:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000e78:	bf00      	nop
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1e5a      	subs	r2, r3, #1
 8000e7e:	613a      	str	r2, [r7, #16]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <HAL_CRCEx_Polynomial_Set+0x34>
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f0      	beq.n	8000e7a <HAL_CRCEx_Polynomial_Set+0x16>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b18      	cmp	r3, #24
 8000e9c:	d846      	bhi.n	8000f2c <HAL_CRCEx_Polynomial_Set+0xc8>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000f33 	.word	0x08000f33
 8000ea8:	08000f2d 	.word	0x08000f2d
 8000eac:	08000f2d 	.word	0x08000f2d
 8000eb0:	08000f2d 	.word	0x08000f2d
 8000eb4:	08000f2d 	.word	0x08000f2d
 8000eb8:	08000f2d 	.word	0x08000f2d
 8000ebc:	08000f2d 	.word	0x08000f2d
 8000ec0:	08000f2d 	.word	0x08000f2d
 8000ec4:	08000f21 	.word	0x08000f21
 8000ec8:	08000f2d 	.word	0x08000f2d
 8000ecc:	08000f2d 	.word	0x08000f2d
 8000ed0:	08000f2d 	.word	0x08000f2d
 8000ed4:	08000f2d 	.word	0x08000f2d
 8000ed8:	08000f2d 	.word	0x08000f2d
 8000edc:	08000f2d 	.word	0x08000f2d
 8000ee0:	08000f2d 	.word	0x08000f2d
 8000ee4:	08000f15 	.word	0x08000f15
 8000ee8:	08000f2d 	.word	0x08000f2d
 8000eec:	08000f2d 	.word	0x08000f2d
 8000ef0:	08000f2d 	.word	0x08000f2d
 8000ef4:	08000f2d 	.word	0x08000f2d
 8000ef8:	08000f2d 	.word	0x08000f2d
 8000efc:	08000f2d 	.word	0x08000f2d
 8000f00:	08000f2d 	.word	0x08000f2d
 8000f04:	08000f09 	.word	0x08000f09
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d913      	bls.n	8000f36 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000f12:	e010      	b.n	8000f36 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	2b07      	cmp	r3, #7
 8000f18:	d90f      	bls.n	8000f3a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000f1e:	e00c      	b.n	8000f3a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2b0f      	cmp	r3, #15
 8000f24:	d90b      	bls.n	8000f3e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000f2a:	e008      	b.n	8000f3e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8000f30:	e006      	b.n	8000f40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000f32:	bf00      	nop
 8000f34:	e004      	b.n	8000f40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000f36:	bf00      	nop
 8000f38:	e002      	b.n	8000f40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000f3a:	bf00      	nop
 8000f3c:	e000      	b.n	8000f40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000f3e:	bf00      	nop
  }
  if (status == HAL_OK)
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10d      	bne.n	8000f62 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f023 0118 	bic.w	r1, r3, #24
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fdcc 	bl	8000b18 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e099      	b.n	80010c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fac:	e00f      	b.n	8000fce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fae:	f7ff fdb3 	bl	8000b18 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b05      	cmp	r3, #5
 8000fba:	d908      	bls.n	8000fce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e078      	b.n	80010c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e8      	bne.n	8000fae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	4b38      	ldr	r3, [pc, #224]	; (80010c8 <HAL_DMA_Init+0x158>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4313      	orrs	r3, r2
 800101e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	2b04      	cmp	r3, #4
 8001026:	d107      	bne.n	8001038 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4313      	orrs	r3, r2
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4313      	orrs	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f023 0307 	bic.w	r3, r3, #7
 800104e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4313      	orrs	r3, r2
 8001058:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	2b04      	cmp	r3, #4
 8001060:	d117      	bne.n	8001092 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4313      	orrs	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00e      	beq.n	8001092 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f8bd 	bl	80011f4 <DMA_CheckFifoParam>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2240      	movs	r2, #64	; 0x40
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800108e:	2301      	movs	r3, #1
 8001090:	e016      	b.n	80010c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f874 	bl	8001188 <DMA_CalcBaseAndBitshift>
 80010a0:	4603      	mov	r3, r0
 80010a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a8:	223f      	movs	r2, #63	; 0x3f
 80010aa:	409a      	lsls	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	f010803f 	.word	0xf010803f

080010cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e050      	b.n	8001180 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d101      	bne.n	80010ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80010ea:	2302      	movs	r3, #2
 80010ec:	e048      	b.n	8001180 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0201 	bic.w	r2, r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2221      	movs	r2, #33	; 0x21
 800112c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f82a 	bl	8001188 <DMA_CalcBaseAndBitshift>
 8001134:	4603      	mov	r3, r0
 8001136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113c:	223f      	movs	r2, #63	; 0x3f
 800113e:	409a      	lsls	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	3b10      	subs	r3, #16
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <DMA_CalcBaseAndBitshift+0x60>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <DMA_CalcBaseAndBitshift+0x64>)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d908      	bls.n	80011c8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <DMA_CalcBaseAndBitshift+0x68>)
 80011be:	4013      	ands	r3, r2
 80011c0:	1d1a      	adds	r2, r3, #4
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	659a      	str	r2, [r3, #88]	; 0x58
 80011c6:	e006      	b.n	80011d6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <DMA_CalcBaseAndBitshift+0x68>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	aaaaaaab 	.word	0xaaaaaaab
 80011ec:	0804d824 	.word	0x0804d824
 80011f0:	fffffc00 	.word	0xfffffc00

080011f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d11f      	bne.n	800124e <DMA_CheckFifoParam+0x5a>
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d856      	bhi.n	80012c2 <DMA_CheckFifoParam+0xce>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <DMA_CheckFifoParam+0x28>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	0800122d 	.word	0x0800122d
 8001220:	0800123f 	.word	0x0800123f
 8001224:	0800122d 	.word	0x0800122d
 8001228:	080012c3 	.word	0x080012c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d046      	beq.n	80012c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800123c:	e043      	b.n	80012c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001246:	d140      	bne.n	80012ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800124c:	e03d      	b.n	80012ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001256:	d121      	bne.n	800129c <DMA_CheckFifoParam+0xa8>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d837      	bhi.n	80012ce <DMA_CheckFifoParam+0xda>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <DMA_CheckFifoParam+0x70>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	08001275 	.word	0x08001275
 8001268:	0800127b 	.word	0x0800127b
 800126c:	08001275 	.word	0x08001275
 8001270:	0800128d 	.word	0x0800128d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
      break;
 8001278:	e030      	b.n	80012dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d025      	beq.n	80012d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800128a:	e022      	b.n	80012d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001294:	d11f      	bne.n	80012d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800129a:	e01c      	b.n	80012d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d903      	bls.n	80012aa <DMA_CheckFifoParam+0xb6>
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d003      	beq.n	80012b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80012a8:	e018      	b.n	80012dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
      break;
 80012ae:	e015      	b.n	80012dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00e      	beq.n	80012da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
      break;
 80012c0:	e00b      	b.n	80012da <DMA_CheckFifoParam+0xe6>
      break;
 80012c2:	bf00      	nop
 80012c4:	e00a      	b.n	80012dc <DMA_CheckFifoParam+0xe8>
      break;
 80012c6:	bf00      	nop
 80012c8:	e008      	b.n	80012dc <DMA_CheckFifoParam+0xe8>
      break;
 80012ca:	bf00      	nop
 80012cc:	e006      	b.n	80012dc <DMA_CheckFifoParam+0xe8>
      break;
 80012ce:	bf00      	nop
 80012d0:	e004      	b.n	80012dc <DMA_CheckFifoParam+0xe8>
      break;
 80012d2:	bf00      	nop
 80012d4:	e002      	b.n	80012dc <DMA_CheckFifoParam+0xe8>
      break;   
 80012d6:	bf00      	nop
 80012d8:	e000      	b.n	80012dc <DMA_CheckFifoParam+0xe8>
      break;
 80012da:	bf00      	nop
    }
  } 
  
  return status; 
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop

080012ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e039      	b.n	8001372 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fb20 	bl	8000958 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133c:	f023 0107 	bic.w	r1, r3, #7
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_DMA2D_Init+0x90>)
 8001354:	4013      	ands	r3, r2
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68d1      	ldr	r1, [r2, #12]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6812      	ldr	r2, [r2, #0]
 800135e:	430b      	orrs	r3, r1
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	ffffc000 	.word	0xffffc000

08001380 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001394:	2b01      	cmp	r3, #1
 8001396:	d101      	bne.n	800139c <HAL_DMA2D_Start+0x1c>
 8001398:	2302      	movs	r3, #2
 800139a:	e018      	b.n	80013ce <HAL_DMA2D_Start+0x4e>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2202      	movs	r2, #2
 80013a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f988 	bl	80016cc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d056      	beq.n	80014a0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80013f2:	f7ff fb91 	bl	8000b18 <HAL_GetTick>
 80013f6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80013f8:	e04b      	b.n	8001492 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001408:	2b00      	cmp	r3, #0
 800140a:	d023      	beq.n	8001454 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141a:	f043 0202 	orr.w	r2, r3, #2
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001430:	f043 0201 	orr.w	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2221      	movs	r2, #33	; 0x21
 800143e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2204      	movs	r2, #4
 8001444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0a5      	b.n	80015a0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145a:	d01a      	beq.n	8001492 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800145c:	f7ff fb5c 	bl	8000b18 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d302      	bcc.n	8001472 <HAL_DMA2D_PollForTransfer+0x9c>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10f      	bne.n	8001492 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001476:	f043 0220 	orr.w	r2, r3, #32
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2203      	movs	r2, #3
 8001482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e086      	b.n	80015a0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ac      	beq.n	80013fa <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	f003 0320 	and.w	r3, r3, #32
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d061      	beq.n	8001586 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014c2:	f7ff fb29 	bl	8000b18 <HAL_GetTick>
 80014c6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80014c8:	e056      	b.n	8001578 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d02e      	beq.n	800153a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ea:	f043 0204 	orr.w	r2, r3, #4
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f003 0320 	and.w	r3, r3, #32
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	f043 0202 	orr.w	r2, r3, #2
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2229      	movs	r2, #41	; 0x29
 8001524:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2204      	movs	r2, #4
 800152a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e032      	b.n	80015a0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d01a      	beq.n	8001578 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001542:	f7ff fae9 	bl	8000b18 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d302      	bcc.n	8001558 <HAL_DMA2D_PollForTransfer+0x182>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10f      	bne.n	8001578 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155c:	f043 0220 	orr.w	r2, r3, #32
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2203      	movs	r2, #3
 8001568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e013      	b.n	80015a0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0a1      	beq.n	80014ca <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2212      	movs	r2, #18
 800158c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_DMA2D_ConfigLayer+0x20>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e079      	b.n	80016bc <HAL_DMA2D_ConfigLayer+0x114>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2202      	movs	r2, #2
 80015d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	3318      	adds	r3, #24
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	041b      	lsls	r3, r3, #16
 80015ee:	4313      	orrs	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80015f2:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <HAL_DMA2D_ConfigLayer+0x120>)
 80015f4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b0a      	cmp	r3, #10
 80015fc:	d003      	beq.n	8001606 <HAL_DMA2D_ConfigLayer+0x5e>
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b09      	cmp	r3, #9
 8001604:	d107      	bne.n	8001616 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e005      	b.n	8001622 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	061b      	lsls	r3, r3, #24
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	4313      	orrs	r3, r2
 8001620:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d120      	bne.n	800166a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	ea02 0103 	and.w	r1, r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	430a      	orrs	r2, r1
 800163e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b0a      	cmp	r3, #10
 8001650:	d003      	beq.n	800165a <HAL_DMA2D_ConfigLayer+0xb2>
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b09      	cmp	r3, #9
 8001658:	d127      	bne.n	80016aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
 8001668:	e01f      	b.n	80016aa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	69da      	ldr	r2, [r3, #28]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	ea02 0103 	and.w	r1, r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	430a      	orrs	r2, r1
 8001680:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b0a      	cmp	r3, #10
 8001692:	d003      	beq.n	800169c <HAL_DMA2D_ConfigLayer+0xf4>
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b09      	cmp	r3, #9
 800169a:	d106      	bne.n	80016aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80016a8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	ff03000f 	.word	0xff03000f

080016cc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b08b      	sub	sp, #44	; 0x2c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	041a      	lsls	r2, r3, #16
 80016e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ea:	431a      	orrs	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001704:	d174      	bne.n	80017f0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800170c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001714:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800171c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d108      	bne.n	800173e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	431a      	orrs	r2, r3
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	4313      	orrs	r3, r2
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	e053      	b.n	80017e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d106      	bne.n	8001754 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	4313      	orrs	r3, r2
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4313      	orrs	r3, r2
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
 8001752:	e048      	b.n	80017e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d111      	bne.n	8001780 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	0cdb      	lsrs	r3, r3, #19
 8001760:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	0a9b      	lsrs	r3, r3, #10
 8001766:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	02db      	lsls	r3, r3, #11
 8001776:	4313      	orrs	r3, r2
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4313      	orrs	r3, r2
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
 800177e:	e032      	b.n	80017e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d117      	bne.n	80017b8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	0fdb      	lsrs	r3, r3, #31
 800178c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	0cdb      	lsrs	r3, r3, #19
 8001792:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	0adb      	lsrs	r3, r3, #11
 8001798:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	431a      	orrs	r2, r3
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	03db      	lsls	r3, r3, #15
 80017ae:	4313      	orrs	r3, r2
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	e016      	b.n	80017e6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	0f1b      	lsrs	r3, r3, #28
 80017bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	0d1b      	lsrs	r3, r3, #20
 80017c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	0b1b      	lsrs	r3, r3, #12
 80017c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	011a      	lsls	r2, r3, #4
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	431a      	orrs	r2, r3
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	031b      	lsls	r3, r3, #12
 80017de:	4313      	orrs	r3, r2
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80017ee:	e003      	b.n	80017f8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	60da      	str	r2, [r3, #12]
}
 80017f8:	bf00      	nop
 80017fa:	372c      	adds	r7, #44	; 0x2c
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e175      	b.n	8001b10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8164 	bne.w	8001b0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d005      	beq.n	800185a <HAL_GPIO_Init+0x56>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d130      	bne.n	80018bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d017      	beq.n	80018f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80be 	beq.w	8001b0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_GPIO_Init+0x324>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a65      	ldr	r2, [pc, #404]	; (8001b28 <HAL_GPIO_Init+0x324>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_GPIO_Init+0x324>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019a6:	4a61      	ldr	r2, [pc, #388]	; (8001b2c <HAL_GPIO_Init+0x328>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_GPIO_Init+0x32c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d037      	beq.n	8001a42 <HAL_GPIO_Init+0x23e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a57      	ldr	r2, [pc, #348]	; (8001b34 <HAL_GPIO_Init+0x330>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d031      	beq.n	8001a3e <HAL_GPIO_Init+0x23a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a56      	ldr	r2, [pc, #344]	; (8001b38 <HAL_GPIO_Init+0x334>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d02b      	beq.n	8001a3a <HAL_GPIO_Init+0x236>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a55      	ldr	r2, [pc, #340]	; (8001b3c <HAL_GPIO_Init+0x338>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d025      	beq.n	8001a36 <HAL_GPIO_Init+0x232>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a54      	ldr	r2, [pc, #336]	; (8001b40 <HAL_GPIO_Init+0x33c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01f      	beq.n	8001a32 <HAL_GPIO_Init+0x22e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a53      	ldr	r2, [pc, #332]	; (8001b44 <HAL_GPIO_Init+0x340>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d019      	beq.n	8001a2e <HAL_GPIO_Init+0x22a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_GPIO_Init+0x344>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <HAL_GPIO_Init+0x348>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00d      	beq.n	8001a26 <HAL_GPIO_Init+0x222>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <HAL_GPIO_Init+0x34c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d007      	beq.n	8001a22 <HAL_GPIO_Init+0x21e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_GPIO_Init+0x21a>
 8001a1a:	2309      	movs	r3, #9
 8001a1c:	e012      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a1e:	230a      	movs	r3, #10
 8001a20:	e010      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a22:	2308      	movs	r3, #8
 8001a24:	e00e      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00c      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e00a      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a42:	2300      	movs	r3, #0
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a54:	4935      	ldr	r1, [pc, #212]	; (8001b2c <HAL_GPIO_Init+0x328>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a86:	4a34      	ldr	r2, [pc, #208]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab0:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ada:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	f67f ae86 	bls.w	8001824 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40021400 	.word	0x40021400
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	40021c00 	.word	0x40021c00
 8001b50:	40022000 	.word	0x40022000
 8001b54:	40022400 	.word	0x40022400
 8001b58:	40013c00 	.word	0x40013c00

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b78:	e003      	b.n	8001b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	041a      	lsls	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e07f      	b.n	8001ca2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f8a9 	bl	8001d0e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	; 0x24
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d107      	bne.n	8001c0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	e006      	b.n	8001c18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d104      	bne.n	8001c2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_I2C_Init+0x11c>)
 8001c36:	430b      	orrs	r3, r1
 8001c38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69d9      	ldr	r1, [r3, #28]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1a      	ldr	r2, [r3, #32]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	02008000 	.word	0x02008000

08001cb0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e021      	b.n	8001d06 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2224      	movs	r2, #36	; 0x24
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f821 	bl	8001d22 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	817b      	strh	r3, [r7, #10]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	813b      	strh	r3, [r7, #8]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	f040 80f9 	bne.w	8001f52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <HAL_I2C_Mem_Write+0x34>
 8001d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0ed      	b.n	8001f54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Mem_Write+0x4e>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e0e6      	b.n	8001f54 <HAL_I2C_Mem_Write+0x21c>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d8e:	f7fe fec3 	bl	8000b18 <HAL_GetTick>
 8001d92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2319      	movs	r3, #25
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 fad1 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0d1      	b.n	8001f54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2221      	movs	r2, #33	; 0x21
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dd8:	88f8      	ldrh	r0, [r7, #6]
 8001dda:	893a      	ldrh	r2, [r7, #8]
 8001ddc:	8979      	ldrh	r1, [r7, #10]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4603      	mov	r3, r0
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f9e1 	bl	80021b0 <I2C_RequestMemoryWrite>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0a9      	b.n	8001f54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2bff      	cmp	r3, #255	; 0xff
 8001e08:	d90e      	bls.n	8001e28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	22ff      	movs	r2, #255	; 0xff
 8001e0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	8979      	ldrh	r1, [r7, #10]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fc39 	bl	8002698 <I2C_TransferConfig>
 8001e26:	e00f      	b.n	8001e48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	8979      	ldrh	r1, [r7, #10]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 fc28 	bl	8002698 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fabb 	bl	80023c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e07b      	b.n	8001f54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d034      	beq.n	8001f00 <HAL_I2C_Mem_Write+0x1c8>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d130      	bne.n	8001f00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 fa4d 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e04d      	b.n	8001f54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2bff      	cmp	r3, #255	; 0xff
 8001ec0:	d90e      	bls.n	8001ee0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	22ff      	movs	r2, #255	; 0xff
 8001ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	8979      	ldrh	r1, [r7, #10]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fbdd 	bl	8002698 <I2C_TransferConfig>
 8001ede:	e00f      	b.n	8001f00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fbcc 	bl	8002698 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d19e      	bne.n	8001e48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fa9a 	bl	8002448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e01a      	b.n	8001f54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2220      	movs	r2, #32
 8001f24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_I2C_Mem_Write+0x224>)
 8001f32:	400b      	ands	r3, r1
 8001f34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
  }
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	fe00e800 	.word	0xfe00e800

08001f60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	817b      	strh	r3, [r7, #10]
 8001f72:	460b      	mov	r3, r1
 8001f74:	813b      	strh	r3, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	f040 80fd 	bne.w	8002182 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_I2C_Mem_Read+0x34>
 8001f8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0f1      	b.n	8002184 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_I2C_Mem_Read+0x4e>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e0ea      	b.n	8002184 <HAL_I2C_Mem_Read+0x224>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fb6:	f7fe fdaf 	bl	8000b18 <HAL_GetTick>
 8001fba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2319      	movs	r3, #25
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f9bd 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0d5      	b.n	8002184 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2222      	movs	r2, #34	; 0x22
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2240      	movs	r2, #64	; 0x40
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a3a      	ldr	r2, [r7, #32]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002000:	88f8      	ldrh	r0, [r7, #6]
 8002002:	893a      	ldrh	r2, [r7, #8]
 8002004:	8979      	ldrh	r1, [r7, #10]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4603      	mov	r3, r0
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f921 	bl	8002258 <I2C_RequestMemoryRead>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0ad      	b.n	8002184 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2bff      	cmp	r3, #255	; 0xff
 8002030:	d90e      	bls.n	8002050 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	22ff      	movs	r2, #255	; 0xff
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203c:	b2da      	uxtb	r2, r3
 800203e:	8979      	ldrh	r1, [r7, #10]
 8002040:	4b52      	ldr	r3, [pc, #328]	; (800218c <HAL_I2C_Mem_Read+0x22c>)
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 fb25 	bl	8002698 <I2C_TransferConfig>
 800204e:	e00f      	b.n	8002070 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	b2da      	uxtb	r2, r3
 8002060:	8979      	ldrh	r1, [r7, #10]
 8002062:	4b4a      	ldr	r3, [pc, #296]	; (800218c <HAL_I2C_Mem_Read+0x22c>)
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 fb14 	bl	8002698 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002076:	2200      	movs	r2, #0
 8002078:	2104      	movs	r1, #4
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f964 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07c      	b.n	8002184 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d034      	beq.n	8002130 <HAL_I2C_Mem_Read+0x1d0>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d130      	bne.n	8002130 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	2200      	movs	r2, #0
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f935 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e04d      	b.n	8002184 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2bff      	cmp	r3, #255	; 0xff
 80020f0:	d90e      	bls.n	8002110 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	22ff      	movs	r2, #255	; 0xff
 80020f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	8979      	ldrh	r1, [r7, #10]
 8002100:	2300      	movs	r3, #0
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fac5 	bl	8002698 <I2C_TransferConfig>
 800210e:	e00f      	b.n	8002130 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	b2da      	uxtb	r2, r3
 8002120:	8979      	ldrh	r1, [r7, #10]
 8002122:	2300      	movs	r3, #0
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fab4 	bl	8002698 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d19a      	bne.n	8002070 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f982 	bl	8002448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e01a      	b.n	8002184 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2220      	movs	r2, #32
 8002154:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_I2C_Mem_Read+0x230>)
 8002162:	400b      	ands	r3, r1
 8002164:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
  }
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	80002400 	.word	0x80002400
 8002190:	fe00e800 	.word	0xfe00e800

08002194 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a2:	b2db      	uxtb	r3, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	4608      	mov	r0, r1
 80021ba:	4611      	mov	r1, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	817b      	strh	r3, [r7, #10]
 80021c2:	460b      	mov	r3, r1
 80021c4:	813b      	strh	r3, [r7, #8]
 80021c6:	4613      	mov	r3, r2
 80021c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	8979      	ldrh	r1, [r7, #10]
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <I2C_RequestMemoryWrite+0xa4>)
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fa5d 	bl	8002698 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	69b9      	ldr	r1, [r7, #24]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f8f0 	bl	80023c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e02c      	b.n	800224c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021f8:	893b      	ldrh	r3, [r7, #8]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	629a      	str	r2, [r3, #40]	; 0x28
 8002202:	e015      	b.n	8002230 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	b29b      	uxth	r3, r3
 800220a:	b2da      	uxtb	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	69b9      	ldr	r1, [r7, #24]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f8d6 	bl	80023c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e012      	b.n	800224c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002226:	893b      	ldrh	r3, [r7, #8]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2200      	movs	r2, #0
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f884 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	80002000 	.word	0x80002000

08002258 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af02      	add	r7, sp, #8
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	4608      	mov	r0, r1
 8002262:	4611      	mov	r1, r2
 8002264:	461a      	mov	r2, r3
 8002266:	4603      	mov	r3, r0
 8002268:	817b      	strh	r3, [r7, #10]
 800226a:	460b      	mov	r3, r1
 800226c:	813b      	strh	r3, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	8979      	ldrh	r1, [r7, #10]
 8002278:	4b20      	ldr	r3, [pc, #128]	; (80022fc <I2C_RequestMemoryRead+0xa4>)
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2300      	movs	r3, #0
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fa0a 	bl	8002698 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f89d 	bl	80023c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e02c      	b.n	80022f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800229e:	893b      	ldrh	r3, [r7, #8]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
 80022a8:	e015      	b.n	80022d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022aa:	893b      	ldrh	r3, [r7, #8]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	69b9      	ldr	r1, [r7, #24]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f883 	bl	80023c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e012      	b.n	80022f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022cc:	893b      	ldrh	r3, [r7, #8]
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2200      	movs	r2, #0
 80022de:	2140      	movs	r1, #64	; 0x40
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f831 	bl	8002348 <I2C_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	80002000 	.word	0x80002000

08002300 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d103      	bne.n	800231e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d007      	beq.n	800233c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	619a      	str	r2, [r3, #24]
  }
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	4613      	mov	r3, r2
 8002356:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002358:	e022      	b.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d01e      	beq.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002362:	f7fe fbd9 	bl	8000b18 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d302      	bcc.n	8002378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d113      	bne.n	80023a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e00f      	b.n	80023c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4013      	ands	r3, r2
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d0cd      	beq.n	800235a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023d4:	e02c      	b.n	8002430 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f870 	bl	80024c0 <I2C_IsErrorOccurred>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e02a      	b.n	8002440 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d01e      	beq.n	8002430 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7fe fb91 	bl	8000b18 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d113      	bne.n	8002430 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	f043 0220 	orr.w	r2, r3, #32
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e007      	b.n	8002440 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d1cb      	bne.n	80023d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002454:	e028      	b.n	80024a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f830 	bl	80024c0 <I2C_IsErrorOccurred>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e026      	b.n	80024b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246a:	f7fe fb55 	bl	8000b18 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d113      	bne.n	80024a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f043 0220 	orr.w	r2, r3, #32
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e007      	b.n	80024b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d1cf      	bne.n	8002456 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d075      	beq.n	80025d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2210      	movs	r2, #16
 80024f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024f4:	e056      	b.n	80025a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d052      	beq.n	80025a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024fe:	f7fe fb0b 	bl	8000b18 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	429a      	cmp	r2, r3
 800250c:	d302      	bcc.n	8002514 <I2C_IsErrorOccurred+0x54>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d147      	bne.n	80025a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002526:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002536:	d12e      	bne.n	8002596 <I2C_IsErrorOccurred+0xd6>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800253e:	d02a      	beq.n	8002596 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b20      	cmp	r3, #32
 8002544:	d027      	beq.n	8002596 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002554:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002556:	f7fe fadf 	bl	8000b18 <HAL_GetTick>
 800255a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800255c:	e01b      	b.n	8002596 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800255e:	f7fe fadb 	bl	8000b18 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b19      	cmp	r3, #25
 800256a:	d914      	bls.n	8002596 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f043 0220 	orr.w	r2, r3, #32
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d1dc      	bne.n	800255e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d003      	beq.n	80025ba <I2C_IsErrorOccurred+0xfa>
 80025b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d09d      	beq.n	80024f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2220      	movs	r2, #32
 80025c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800261c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01c      	beq.n	8002688 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f7ff fe56 	bl	8002300 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <I2C_IsErrorOccurred+0x1d4>)
 8002660:	400b      	ands	r3, r1
 8002662:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	431a      	orrs	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800268c:	4618      	mov	r0, r3
 800268e:	3728      	adds	r7, #40	; 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	fe00e800 	.word	0xfe00e800

08002698 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	817b      	strh	r3, [r7, #10]
 80026a6:	4613      	mov	r3, r2
 80026a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026b0:	7a7b      	ldrb	r3, [r7, #9]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026b8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026c6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	0d5b      	lsrs	r3, r3, #21
 80026d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <I2C_TransferConfig+0x60>)
 80026d8:	430b      	orrs	r3, r1
 80026da:	43db      	mvns	r3, r3
 80026dc:	ea02 0103 	and.w	r1, r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	03ff63ff 	.word	0x03ff63ff

080026fc <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0c7      	b.n	80028a6 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8c2 	bl	80028b4 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002746:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6999      	ldr	r1, [r3, #24]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800275c:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b4e      	ldr	r3, [pc, #312]	; (80028b0 <HAL_LTDC_Init+0x1b4>)
 8002778:	400b      	ands	r3, r1
 800277a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b42      	ldr	r3, [pc, #264]	; (80028b0 <HAL_LTDC_Init+0x1b4>)
 80027a6:	400b      	ands	r3, r1
 80027a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68d9      	ldr	r1, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1a      	ldr	r2, [r3, #32]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6919      	ldr	r1, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <HAL_LTDC_Init+0x1b4>)
 80027d4:	400b      	ands	r3, r1
 80027d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6919      	ldr	r1, [r3, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6959      	ldr	r1, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_LTDC_Init+0x1b4>)
 8002802:	400b      	ands	r3, r1
 8002804:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6959      	ldr	r1, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0204 	orr.w	r2, r2, #4
 8002872:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0202 	orr.w	r2, r2, #2
 8002882:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	f000f800 	.word	0xf000f800

080028b4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */ 
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d025      	beq.n	800292a <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01e      	beq.n	800292a <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2204      	movs	r2, #4
 8002902:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800290a:	f043 0201 	orr.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2204      	movs	r2, #4
 8002918:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f87b 	bl	8002a20 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d025      	beq.n	8002984 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01e      	beq.n	8002984 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0202 	bic.w	r2, r2, #2
 8002954:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2202      	movs	r2, #2
 800295c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002964:	f043 0202 	orr.w	r2, r3, #2
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2204      	movs	r2, #4
 8002972:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f84e 	bl	8002a20 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01d      	beq.n	80029ce <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d016      	beq.n	80029ce <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2201      	movs	r2, #1
 80029b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f833 	bl	8002a34 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01d      	beq.n	8002a18 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0208 	bic.w	r2, r2, #8
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2208      	movs	r2, #8
 8002a00:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f818 	bl	8002a48 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_LTDC_ConfigLayer+0x1a>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e02c      	b.n	8002ad0 <HAL_LTDC_ConfigLayer+0x74>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2134      	movs	r1, #52	; 0x34
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4614      	mov	r4, r2
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f81f 	bl	8002af4 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2201      	movs	r2, #1
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdb0      	pop	{r4, r5, r7, pc}

08002ad8 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002ae6:	b2db      	uxtb	r3, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	4413      	add	r3, r2
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	01db      	lsls	r3, r3, #7
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3384      	adds	r3, #132	; 0x84
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	4611      	mov	r1, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	01d2      	lsls	r2, r2, #7
 8002b3c:	440a      	add	r2, r1
 8002b3e:	3284      	adds	r2, #132	; 0x84
 8002b40:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002b44:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b56:	4413      	add	r3, r2
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	01db      	lsls	r3, r3, #7
 8002b64:	440b      	add	r3, r1
 8002b66:	3384      	adds	r3, #132	; 0x84
 8002b68:	4619      	mov	r1, r3
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b7e:	4413      	add	r3, r2
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	01db      	lsls	r3, r3, #7
 8002b8e:	4413      	add	r3, r2
 8002b90:	3384      	adds	r3, #132	; 0x84
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	01d2      	lsls	r2, r2, #7
 8002b9e:	440a      	add	r2, r1
 8002ba0:	3284      	adds	r2, #132	; 0x84
 8002ba2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002ba6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb6:	4413      	add	r3, r2
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3384      	adds	r3, #132	; 0x84
 8002bc8:	4619      	mov	r1, r3
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	01db      	lsls	r3, r3, #7
 8002bda:	4413      	add	r3, r2
 8002bdc:	3384      	adds	r3, #132	; 0x84
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	4611      	mov	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	01d2      	lsls	r2, r2, #7
 8002bea:	440a      	add	r2, r1
 8002bec:	3284      	adds	r2, #132	; 0x84
 8002bee:	f023 0307 	bic.w	r3, r3, #7
 8002bf2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	01db      	lsls	r3, r3, #7
 8002bfe:	4413      	add	r3, r2
 8002c00:	3384      	adds	r3, #132	; 0x84
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	061b      	lsls	r3, r3, #24
 8002c24:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	01db      	lsls	r3, r3, #7
 8002c30:	4413      	add	r3, r2
 8002c32:	3384      	adds	r3, #132	; 0x84
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	01db      	lsls	r3, r3, #7
 8002c40:	4413      	add	r3, r2
 8002c42:	3384      	adds	r3, #132	; 0x84
 8002c44:	461a      	mov	r2, r3
 8002c46:	2300      	movs	r3, #0
 8002c48:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c50:	461a      	mov	r2, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	01db      	lsls	r3, r3, #7
 8002c64:	440b      	add	r3, r1
 8002c66:	3384      	adds	r3, #132	; 0x84
 8002c68:	4619      	mov	r1, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3384      	adds	r3, #132	; 0x84
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	4611      	mov	r1, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	01d2      	lsls	r2, r2, #7
 8002c8a:	440a      	add	r2, r1
 8002c8c:	3284      	adds	r2, #132	; 0x84
 8002c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c92:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	01db      	lsls	r3, r3, #7
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3384      	adds	r3, #132	; 0x84
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	01db      	lsls	r3, r3, #7
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3384      	adds	r3, #132	; 0x84
 8002cb8:	69da      	ldr	r2, [r3, #28]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	01db      	lsls	r3, r3, #7
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3384      	adds	r3, #132	; 0x84
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4b58      	ldr	r3, [pc, #352]	; (8002e2c <LTDC_SetConfig+0x338>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	68f9      	ldr	r1, [r7, #12]
 8002cda:	6809      	ldr	r1, [r1, #0]
 8002cdc:	4608      	mov	r0, r1
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	01c9      	lsls	r1, r1, #7
 8002ce2:	4401      	add	r1, r0
 8002ce4:	3184      	adds	r1, #132	; 0x84
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	01db      	lsls	r3, r3, #7
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3384      	adds	r3, #132	; 0x84
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	01db      	lsls	r3, r3, #7
 8002d04:	4413      	add	r3, r2
 8002d06:	3384      	adds	r3, #132	; 0x84
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	01db      	lsls	r3, r3, #7
 8002d18:	4413      	add	r3, r2
 8002d1a:	3384      	adds	r3, #132	; 0x84
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	e01b      	b.n	8002d6a <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e014      	b.n	8002d6a <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d00b      	beq.n	8002d60 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d007      	beq.n	8002d60 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d003      	beq.n	8002d60 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002d5c:	2b07      	cmp	r3, #7
 8002d5e:	d102      	bne.n	8002d66 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61fb      	str	r3, [r7, #28]
 8002d64:	e001      	b.n	8002d6a <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	01db      	lsls	r3, r3, #7
 8002d74:	4413      	add	r3, r2
 8002d76:	3384      	adds	r3, #132	; 0x84
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	4611      	mov	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	01d2      	lsls	r2, r2, #7
 8002d84:	440a      	add	r2, r1
 8002d86:	3284      	adds	r2, #132	; 0x84
 8002d88:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	fb02 f303 	mul.w	r3, r2, r3
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	1acb      	subs	r3, r1, r3
 8002da4:	69f9      	ldr	r1, [r7, #28]
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	3303      	adds	r3, #3
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	6809      	ldr	r1, [r1, #0]
 8002db0:	4608      	mov	r0, r1
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	01c9      	lsls	r1, r1, #7
 8002db6:	4401      	add	r1, r0
 8002db8:	3184      	adds	r1, #132	; 0x84
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	01db      	lsls	r3, r3, #7
 8002dc8:	4413      	add	r3, r2
 8002dca:	3384      	adds	r3, #132	; 0x84
 8002dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	01db      	lsls	r3, r3, #7
 8002dd8:	440b      	add	r3, r1
 8002dda:	3384      	adds	r3, #132	; 0x84
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <LTDC_SetConfig+0x33c>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	01db      	lsls	r3, r3, #7
 8002dee:	4413      	add	r3, r2
 8002df0:	3384      	adds	r3, #132	; 0x84
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	01db      	lsls	r3, r3, #7
 8002e04:	4413      	add	r3, r2
 8002e06:	3384      	adds	r3, #132	; 0x84
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	01d2      	lsls	r2, r2, #7
 8002e14:	440a      	add	r2, r1
 8002e16:	3284      	adds	r2, #132	; 0x84
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6013      	str	r3, [r2, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	fffff8f8 	.word	0xfffff8f8
 8002e30:	fffff800 	.word	0xfffff800

08002e34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e62:	f7fd fe59 	bl	8000b18 <HAL_GetTick>
 8002e66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e68:	e009      	b.n	8002e7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e6a:	f7fd fe55 	bl	8000b18 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e78:	d901      	bls.n	8002e7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e022      	b.n	8002ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8a:	d1ee      	bne.n	8002e6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0f      	ldr	r2, [pc, #60]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e98:	f7fd fe3e 	bl	8000b18 <HAL_GetTick>
 8002e9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e9e:	e009      	b.n	8002eb4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ea0:	f7fd fe3a 	bl	8000b18 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eae:	d901      	bls.n	8002eb4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e007      	b.n	8002ec4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40007000 	.word	0x40007000

08002ed4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002edc:	2300      	movs	r3, #0
 8002ede:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e291      	b.n	800340e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8087 	beq.w	8003006 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef8:	4b96      	ldr	r3, [pc, #600]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d00c      	beq.n	8002f1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f04:	4b93      	ldr	r3, [pc, #588]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d112      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62>
 8002f10:	4b90      	ldr	r3, [pc, #576]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1c:	d10b      	bne.n	8002f36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1e:	4b8d      	ldr	r3, [pc, #564]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d06c      	beq.n	8003004 <HAL_RCC_OscConfig+0x130>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d168      	bne.n	8003004 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e26b      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x7a>
 8002f40:	4b84      	ldr	r3, [pc, #528]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a83      	ldr	r2, [pc, #524]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	e02e      	b.n	8002fac <HAL_RCC_OscConfig+0xd8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x9c>
 8002f56:	4b7f      	ldr	r3, [pc, #508]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7e      	ldr	r2, [pc, #504]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b7c      	ldr	r3, [pc, #496]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7b      	ldr	r2, [pc, #492]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xd8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0xc0>
 8002f7a:	4b76      	ldr	r3, [pc, #472]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a75      	ldr	r2, [pc, #468]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a72      	ldr	r2, [pc, #456]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xd8>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6e      	ldr	r2, [pc, #440]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6b      	ldr	r2, [pc, #428]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fd fdb0 	bl	8000b18 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fd fdac 	bl	8000b18 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e21f      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b61      	ldr	r3, [pc, #388]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xe8>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fd fd9c 	bl	8000b18 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fd fd98 	bl	8000b18 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e20b      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b57      	ldr	r3, [pc, #348]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x110>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d069      	beq.n	80030e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003012:	4b50      	ldr	r3, [pc, #320]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d11c      	bne.n	8003064 <HAL_RCC_OscConfig+0x190>
 800302a:	4b4a      	ldr	r3, [pc, #296]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	4b47      	ldr	r3, [pc, #284]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x17a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e1df      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	493d      	ldr	r1, [pc, #244]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	e040      	b.n	80030e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d023      	beq.n	80030b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a38      	ldr	r2, [pc, #224]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fd fd4e 	bl	8000b18 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003080:	f7fd fd4a 	bl	8000b18 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1bd      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b30      	ldr	r3, [pc, #192]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4929      	ldr	r1, [pc, #164]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
 80030b2:	e018      	b.n	80030e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fd fd2a 	bl	8000b18 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fd fd26 	bl	8000b18 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e199      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d038      	beq.n	8003164 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d019      	beq.n	800312e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 80030fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fe:	4a15      	ldr	r2, [pc, #84]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fd fd07 	bl	8000b18 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310e:	f7fd fd03 	bl	8000b18 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e176      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x23a>
 800312c:	e01a      	b.n	8003164 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003132:	4a08      	ldr	r2, [pc, #32]	; (8003154 <HAL_RCC_OscConfig+0x280>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fd fced 	bl	8000b18 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003142:	f7fd fce9 	bl	8000b18 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d903      	bls.n	8003158 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e15c      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
 8003154:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	4b91      	ldr	r3, [pc, #580]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ee      	bne.n	8003142 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a4 	beq.w	80032ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003172:	4b8b      	ldr	r3, [pc, #556]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10d      	bne.n	800319a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a87      	ldr	r2, [pc, #540]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
 800318a:	4b85      	ldr	r3, [pc, #532]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319a:	4b82      	ldr	r3, [pc, #520]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d118      	bne.n	80031d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031a6:	4b7f      	ldr	r3, [pc, #508]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a7e      	ldr	r2, [pc, #504]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b2:	f7fd fcb1 	bl	8000b18 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ba:	f7fd fcad 	bl	8000b18 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b64      	cmp	r3, #100	; 0x64
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e120      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031cc:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <HAL_RCC_OscConfig+0x4d0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x31a>
 80031e0:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	4a6e      	ldr	r2, [pc, #440]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6713      	str	r3, [r2, #112]	; 0x70
 80031ec:	e02d      	b.n	800324a <HAL_RCC_OscConfig+0x376>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x33c>
 80031f6:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a69      	ldr	r2, [pc, #420]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
 8003202:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a66      	ldr	r2, [pc, #408]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	6713      	str	r3, [r2, #112]	; 0x70
 800320e:	e01c      	b.n	800324a <HAL_RCC_OscConfig+0x376>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b05      	cmp	r3, #5
 8003216:	d10c      	bne.n	8003232 <HAL_RCC_OscConfig+0x35e>
 8003218:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a60      	ldr	r2, [pc, #384]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	4b5e      	ldr	r3, [pc, #376]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003228:	4a5d      	ldr	r2, [pc, #372]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6713      	str	r3, [r2, #112]	; 0x70
 8003230:	e00b      	b.n	800324a <HAL_RCC_OscConfig+0x376>
 8003232:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a5a      	ldr	r2, [pc, #360]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
 800323e:	4b58      	ldr	r3, [pc, #352]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	4a57      	ldr	r2, [pc, #348]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003244:	f023 0304 	bic.w	r3, r3, #4
 8003248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d015      	beq.n	800327e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fd fc61 	bl	8000b18 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fd fc5d 	bl	8000b18 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0ce      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003270:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ee      	beq.n	800325a <HAL_RCC_OscConfig+0x386>
 800327c:	e014      	b.n	80032a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327e:	f7fd fc4b 	bl	8000b18 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7fd fc47 	bl	8000b18 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0b8      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329c:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ee      	bne.n	8003286 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d105      	bne.n	80032ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ae:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	4a3b      	ldr	r2, [pc, #236]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80032b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80a4 	beq.w	800340c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c4:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d06b      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d149      	bne.n	800336c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a30      	ldr	r2, [pc, #192]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 80032de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fd fc18 	bl	8000b18 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fd fc14 	bl	8000b18 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e087      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	3b01      	subs	r3, #1
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	4313      	orrs	r3, r2
 8003330:	4a1b      	ldr	r2, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003332:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003336:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 800333e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fd fbe8 	bl	8000b18 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fd fbe4 	bl	8000b18 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e057      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x478>
 800336a:	e04f      	b.n	800340c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fd fbce 	bl	8000b18 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd fbca 	bl	8000b18 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e03d      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x4ac>
 800339e:	e035      	b.n	800340c <HAL_RCC_OscConfig+0x538>
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_RCC_OscConfig+0x544>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d028      	beq.n	8003408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d121      	bne.n	8003408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d11a      	bne.n	8003408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d111      	bne.n	8003408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ee:	085b      	lsrs	r3, r3, #1
 80033f0:	3b01      	subs	r3, #1
 80033f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0d0      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d910      	bls.n	8003464 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 020f 	bic.w	r2, r3, #15
 800344a:	4965      	ldr	r1, [pc, #404]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b8      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800347c:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003486:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003494:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800349a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	494d      	ldr	r1, [pc, #308]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d040      	beq.n	8003540 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d115      	bne.n	80034fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e073      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	4b3d      	ldr	r3, [pc, #244]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e06b      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4936      	ldr	r1, [pc, #216]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003510:	f7fd fb02 	bl	8000b18 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fd fafe 	bl	8000b18 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e053      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d210      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 020f 	bic.w	r2, r3, #15
 8003556:	4922      	ldr	r1, [pc, #136]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e032      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4916      	ldr	r1, [pc, #88]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	490e      	ldr	r1, [pc, #56]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ae:	f000 f821 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_ClockConfig+0x1c8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490a      	ldr	r1, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x1cc>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1d0>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1d4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fa5e 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00
 80035e4:	40023800 	.word	0x40023800
 80035e8:	0804d814 	.word	0x0804d814
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000004 	.word	0x20000004

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	b5b0      	push	{r4, r5, r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035fa:	2100      	movs	r1, #0
 80035fc:	6079      	str	r1, [r7, #4]
 80035fe:	2100      	movs	r1, #0
 8003600:	60f9      	str	r1, [r7, #12]
 8003602:	2100      	movs	r1, #0
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003606:	2100      	movs	r1, #0
 8003608:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360a:	4952      	ldr	r1, [pc, #328]	; (8003754 <HAL_RCC_GetSysClockFreq+0x160>)
 800360c:	6889      	ldr	r1, [r1, #8]
 800360e:	f001 010c 	and.w	r1, r1, #12
 8003612:	2908      	cmp	r1, #8
 8003614:	d00d      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0x3e>
 8003616:	2908      	cmp	r1, #8
 8003618:	f200 8094 	bhi.w	8003744 <HAL_RCC_GetSysClockFreq+0x150>
 800361c:	2900      	cmp	r1, #0
 800361e:	d002      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x32>
 8003620:	2904      	cmp	r1, #4
 8003622:	d003      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x38>
 8003624:	e08e      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003626:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <HAL_RCC_GetSysClockFreq+0x164>)
 8003628:	60bb      	str	r3, [r7, #8]
      break;
 800362a:	e08e      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362c:	4b4b      	ldr	r3, [pc, #300]	; (800375c <HAL_RCC_GetSysClockFreq+0x168>)
 800362e:	60bb      	str	r3, [r7, #8]
      break;
 8003630:	e08b      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003632:	4948      	ldr	r1, [pc, #288]	; (8003754 <HAL_RCC_GetSysClockFreq+0x160>)
 8003634:	6849      	ldr	r1, [r1, #4]
 8003636:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800363a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800363c:	4945      	ldr	r1, [pc, #276]	; (8003754 <HAL_RCC_GetSysClockFreq+0x160>)
 800363e:	6849      	ldr	r1, [r1, #4]
 8003640:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003644:	2900      	cmp	r1, #0
 8003646:	d024      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003648:	4942      	ldr	r1, [pc, #264]	; (8003754 <HAL_RCC_GetSysClockFreq+0x160>)
 800364a:	6849      	ldr	r1, [r1, #4]
 800364c:	0989      	lsrs	r1, r1, #6
 800364e:	4608      	mov	r0, r1
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003658:	f04f 0500 	mov.w	r5, #0
 800365c:	ea00 0204 	and.w	r2, r0, r4
 8003660:	ea01 0305 	and.w	r3, r1, r5
 8003664:	493d      	ldr	r1, [pc, #244]	; (800375c <HAL_RCC_GetSysClockFreq+0x168>)
 8003666:	fb01 f003 	mul.w	r0, r1, r3
 800366a:	2100      	movs	r1, #0
 800366c:	fb01 f102 	mul.w	r1, r1, r2
 8003670:	1844      	adds	r4, r0, r1
 8003672:	493a      	ldr	r1, [pc, #232]	; (800375c <HAL_RCC_GetSysClockFreq+0x168>)
 8003674:	fba2 0101 	umull	r0, r1, r2, r1
 8003678:	1863      	adds	r3, r4, r1
 800367a:	4619      	mov	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	f7fc fdc0 	bl	8000208 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e04a      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003692:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_RCC_GetSysClockFreq+0x160>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	461a      	mov	r2, r3
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	ea02 0400 	and.w	r4, r2, r0
 80036aa:	ea03 0501 	and.w	r5, r3, r1
 80036ae:	4620      	mov	r0, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	014b      	lsls	r3, r1, #5
 80036bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036c0:	0142      	lsls	r2, r0, #5
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	1b00      	subs	r0, r0, r4
 80036c8:	eb61 0105 	sbc.w	r1, r1, r5
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	018b      	lsls	r3, r1, #6
 80036d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036da:	0182      	lsls	r2, r0, #6
 80036dc:	1a12      	subs	r2, r2, r0
 80036de:	eb63 0301 	sbc.w	r3, r3, r1
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	00d9      	lsls	r1, r3, #3
 80036ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036f0:	00d0      	lsls	r0, r2, #3
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	1912      	adds	r2, r2, r4
 80036f8:	eb45 0303 	adc.w	r3, r5, r3
 80036fc:	f04f 0000 	mov.w	r0, #0
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	0299      	lsls	r1, r3, #10
 8003706:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800370a:	0290      	lsls	r0, r2, #10
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	461a      	mov	r2, r3
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	f7fc fd74 	bl	8000208 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4613      	mov	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <HAL_RCC_GetSysClockFreq+0x160>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	60bb      	str	r3, [r7, #8]
      break;
 8003742:	e002      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <HAL_RCC_GetSysClockFreq+0x164>)
 8003746:	60bb      	str	r3, [r7, #8]
      break;
 8003748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800374a:	68bb      	ldr	r3, [r7, #8]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bdb0      	pop	{r4, r5, r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	00f42400 	.word	0x00f42400
 800375c:	017d7840 	.word	0x017d7840

08003760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d012      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003788:	4b69      	ldr	r3, [pc, #420]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a68      	ldr	r2, [pc, #416]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003792:	6093      	str	r3, [r2, #8]
 8003794:	4b66      	ldr	r3, [pc, #408]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379c:	4964      	ldr	r1, [pc, #400]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d017      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037ba:	4b5d      	ldr	r3, [pc, #372]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c8:	4959      	ldr	r1, [pc, #356]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d8:	d101      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80037e6:	2301      	movs	r3, #1
 80037e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d017      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037f6:	4b4e      	ldr	r3, [pc, #312]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	494a      	ldr	r1, [pc, #296]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003814:	d101      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003822:	2301      	movs	r3, #1
 8003824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003832:	2301      	movs	r3, #1
 8003834:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 808b 	beq.w	800395a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003844:	4b3a      	ldr	r3, [pc, #232]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	4a39      	ldr	r2, [pc, #228]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384e:	6413      	str	r3, [r2, #64]	; 0x40
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800385c:	4b35      	ldr	r3, [pc, #212]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a34      	ldr	r2, [pc, #208]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003868:	f7fd f956 	bl	8000b18 <HAL_GetTick>
 800386c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003870:	f7fd f952 	bl	8000b18 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e357      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003882:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800388e:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d035      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d02e      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ac:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038c2:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80038ce:	4a18      	ldr	r2, [pc, #96]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038d4:	4b16      	ldr	r3, [pc, #88]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d114      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fd f91a 	bl	8000b18 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e6:	e00a      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e8:	f7fd f916 	bl	8000b18 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e319      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0ee      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003916:	d111      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003926:	400b      	ands	r3, r1
 8003928:	4901      	ldr	r1, [pc, #4]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
 800392e:	e00b      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000
 8003938:	0ffffcff 	.word	0x0ffffcff
 800393c:	4bb1      	ldr	r3, [pc, #708]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4ab0      	ldr	r2, [pc, #704]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003942:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003946:	6093      	str	r3, [r2, #8]
 8003948:	4bae      	ldr	r3, [pc, #696]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800394a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003954:	49ab      	ldr	r1, [pc, #684]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d010      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003966:	4ba7      	ldr	r3, [pc, #668]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396c:	4aa5      	ldr	r2, [pc, #660]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800396e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003972:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003976:	4ba3      	ldr	r3, [pc, #652]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003978:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	49a0      	ldr	r1, [pc, #640]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003994:	4b9b      	ldr	r3, [pc, #620]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a2:	4998      	ldr	r1, [pc, #608]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039b6:	4b93      	ldr	r3, [pc, #588]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039c4:	498f      	ldr	r1, [pc, #572]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039d8:	4b8a      	ldr	r3, [pc, #552]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039e6:	4987      	ldr	r1, [pc, #540]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039fa:	4b82      	ldr	r3, [pc, #520]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	497e      	ldr	r1, [pc, #504]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f023 0203 	bic.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	4976      	ldr	r1, [pc, #472]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a3e:	4b71      	ldr	r3, [pc, #452]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	f023 020c 	bic.w	r2, r3, #12
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4c:	496d      	ldr	r1, [pc, #436]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	4965      	ldr	r1, [pc, #404]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a82:	4b60      	ldr	r3, [pc, #384]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a90:	495c      	ldr	r1, [pc, #368]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	4954      	ldr	r1, [pc, #336]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ac6:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	494b      	ldr	r1, [pc, #300]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ae8:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	4943      	ldr	r1, [pc, #268]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b0a:	4b3e      	ldr	r3, [pc, #248]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b18:	493a      	ldr	r1, [pc, #232]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b2c:	4b35      	ldr	r3, [pc, #212]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b3a:	4932      	ldr	r1, [pc, #200]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d011      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b4e:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b5c:	4929      	ldr	r1, [pc, #164]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9c:	4919      	ldr	r1, [pc, #100]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc0:	4910      	ldr	r1, [pc, #64]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d006      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80d9 	beq.w	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7fc ff96 	bl	8000b18 <HAL_GetTick>
 8003bec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bee:	e00b      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bf0:	f7fc ff92 	bl	8000b18 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d904      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e197      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c08:	4b6c      	ldr	r3, [pc, #432]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ed      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d021      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11d      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c28:	4b64      	ldr	r3, [pc, #400]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c36:	4b61      	ldr	r3, [pc, #388]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c3c:	0e1b      	lsrs	r3, r3, #24
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	019a      	lsls	r2, r3, #6
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	061b      	lsls	r3, r3, #24
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	071b      	lsls	r3, r3, #28
 8003c5c:	4957      	ldr	r1, [pc, #348]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c78:	d00a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d02e      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c8e:	d129      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c90:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c9e:	4b47      	ldr	r3, [pc, #284]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca4:	0f1b      	lsrs	r3, r3, #28
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	019a      	lsls	r2, r3, #6
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	071b      	lsls	r3, r3, #28
 8003cc4:	493d      	ldr	r1, [pc, #244]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd2:	f023 021f 	bic.w	r2, r3, #31
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	4937      	ldr	r1, [pc, #220]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01d      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cf0:	4b32      	ldr	r3, [pc, #200]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf6:	0e1b      	lsrs	r3, r3, #24
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cfe:	4b2f      	ldr	r3, [pc, #188]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d04:	0f1b      	lsrs	r3, r3, #28
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	019a      	lsls	r2, r3, #6
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	071b      	lsls	r3, r3, #28
 8003d24:	4925      	ldr	r1, [pc, #148]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d011      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	019a      	lsls	r2, r3, #6
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	061b      	lsls	r3, r3, #24
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	071b      	lsls	r3, r3, #28
 8003d54:	4919      	ldr	r1, [pc, #100]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d5c:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d68:	f7fc fed6 	bl	8000b18 <HAL_GetTick>
 8003d6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d70:	f7fc fed2 	bl	8000b18 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0d7      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	f040 80cd 	bne.w	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da2:	f7fc feb9 	bl	8000b18 <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003daa:	f7fc feb5 	bl	8000b18 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b64      	cmp	r3, #100	; 0x64
 8003db6:	d903      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0ba      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003dbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dc0:	4b5e      	ldr	r3, [pc, #376]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dcc:	d0ed      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02e      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d12a      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003df6:	4b51      	ldr	r3, [pc, #324]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e04:	4b4d      	ldr	r3, [pc, #308]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	0f1b      	lsrs	r3, r3, #28
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	019a      	lsls	r2, r3, #6
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	041b      	lsls	r3, r3, #16
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	071b      	lsls	r3, r3, #28
 8003e2a:	4944      	ldr	r1, [pc, #272]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e32:	4b42      	ldr	r3, [pc, #264]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	493d      	ldr	r1, [pc, #244]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d022      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e60:	d11d      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e62:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	0e1b      	lsrs	r3, r3, #24
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e70:	4b32      	ldr	r3, [pc, #200]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	0f1b      	lsrs	r3, r3, #28
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	019a      	lsls	r2, r3, #6
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	071b      	lsls	r3, r3, #28
 8003e96:	4929      	ldr	r1, [pc, #164]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d028      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eaa:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	0e1b      	lsrs	r3, r3, #24
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eb8:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	0c1b      	lsrs	r3, r3, #16
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	019a      	lsls	r2, r3, #6
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	071b      	lsls	r3, r3, #28
 8003ede:	4917      	ldr	r1, [pc, #92]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ee6:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	4911      	ldr	r1, [pc, #68]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f08:	f7fc fe06 	bl	8000b18 <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f10:	f7fc fe02 	bl	8000b18 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e007      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f2e:	d1ef      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800

08003f40 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e025      	b.n	8003fa0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f81d 	bl	8003fa8 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f000 f867 	bl	8004054 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6839      	ldr	r1, [r7, #0]
 8003f92:	f000 f8d1 	bl	8004138 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e018      	b.n	800400a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f925 	bl	8004238 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d104      	bne.n	8004000 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2205      	movs	r2, #5
 8003ffa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003ffe:	e003      	b.n	8004008 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d101      	bne.n	800402c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
 800402a:	e00e      	b.n	800404a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6839      	ldr	r1, [r7, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f91d 	bl	800427a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d027      	beq.n	80040be <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <FMC_SDRAM_Init+0xe0>)
 8004078:	4013      	ands	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004084:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800408a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8004090:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8004096:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800409c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80040a2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80040a8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80040ae:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e032      	b.n	8004124 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040ca:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80040d4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80040da:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <FMC_SDRAM_Init+0xe0>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80040f8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80040fe:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8004104:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800410a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8004110:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	ffff8000 	.word	0xffff8000

08004138 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d02e      	beq.n	80041b0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800415e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800416e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	3b01      	subs	r3, #1
 8004176:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004178:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	3b01      	subs	r3, #1
 8004180:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004182:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	3b01      	subs	r3, #1
 800418a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800418c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	3b01      	subs	r3, #1
 8004194:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004196:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	3b01      	subs	r3, #1
 800419e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80041a0:	4313      	orrs	r3, r2
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	609a      	str	r2, [r3, #8]
 80041ae:	e039      	b.n	8004224 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <FMC_SDRAM_Timing_Init+0xfc>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80041ce:	4313      	orrs	r3, r2
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80041e2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80041f2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80041fc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	3b01      	subs	r3, #1
 8004204:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004206:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	3b01      	subs	r3, #1
 800420e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004210:	4313      	orrs	r3, r2
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	ff0f0fff 	.word	0xff0f0fff

08004238 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004250:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	3b01      	subs	r3, #1
 8004258:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800425a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80042aa:	20c8      	movs	r0, #200	; 0xc8
 80042ac:	f000 fb6c 	bl	8004988 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80042b0:	f000 f9b4 	bl	800461c <ft5336_I2C_InitializeIfRequired>
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80042e4:	2300      	movs	r3, #0
 80042e6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80042e8:	f000 f998 	bl	800461c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	e010      	b.n	8004314 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	21a8      	movs	r1, #168	; 0xa8
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fb27 	bl	800494c <TS_IO_Read>
 80042fe:	4603      	mov	r3, r0
 8004300:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8004302:	7b7b      	ldrb	r3, [r7, #13]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b51      	cmp	r3, #81	; 0x51
 8004308:	d101      	bne.n	800430e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	3301      	adds	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d802      	bhi.n	8004320 <ft5336_ReadID+0x4e>
 800431a:	7bbb      	ldrb	r3, [r7, #14]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0e8      	beq.n	80042f2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8004320:	7b7b      	ldrb	r3, [r7, #13]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	b29b      	uxth	r3, r3
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b082      	sub	sp, #8
 8004332:	af00      	add	r7, sp, #0
 8004334:	4603      	mov	r3, r0
 8004336:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f97e 	bl	800463c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f932 	bl	80045ac <ft5336_TS_DisableIT>
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 faf1 	bl	800494c <TS_IO_Read>
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	b2db      	uxtb	r3, r3
 8004378:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b05      	cmp	r3, #5
 8004380:	d901      	bls.n	8004386 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <ft5336_TS_DetectTouch+0x50>)
 800438c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <ft5336_TS_DetectTouch+0x50>)
 8004390:	2200      	movs	r2, #0
 8004392:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	b2db      	uxtb	r3, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	2000005c 	.word	0x2000005c

080043a4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80043c6:	4b6d      	ldr	r3, [pc, #436]	; (800457c <ft5336_TS_GetXY+0x1d8>)
 80043c8:	789a      	ldrb	r2, [r3, #2]
 80043ca:	4b6c      	ldr	r3, [pc, #432]	; (800457c <ft5336_TS_GetXY+0x1d8>)
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	f080 80cf 	bcs.w	8004572 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80043d4:	4b69      	ldr	r3, [pc, #420]	; (800457c <ft5336_TS_GetXY+0x1d8>)
 80043d6:	789b      	ldrb	r3, [r3, #2]
 80043d8:	2b09      	cmp	r3, #9
 80043da:	d871      	bhi.n	80044c0 <ft5336_TS_GetXY+0x11c>
 80043dc:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <ft5336_TS_GetXY+0x40>)
 80043de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e2:	bf00      	nop
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	0800441f 	.word	0x0800441f
 80043ec:	08004431 	.word	0x08004431
 80043f0:	08004443 	.word	0x08004443
 80043f4:	08004455 	.word	0x08004455
 80043f8:	08004467 	.word	0x08004467
 80043fc:	08004479 	.word	0x08004479
 8004400:	0800448b 	.word	0x0800448b
 8004404:	0800449d 	.word	0x0800449d
 8004408:	080044af 	.word	0x080044af
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800440c:	2304      	movs	r3, #4
 800440e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8004410:	2303      	movs	r3, #3
 8004412:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8004414:	2306      	movs	r3, #6
 8004416:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8004418:	2305      	movs	r3, #5
 800441a:	753b      	strb	r3, [r7, #20]
      break;
 800441c:	e051      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800441e:	230a      	movs	r3, #10
 8004420:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8004422:	2309      	movs	r3, #9
 8004424:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8004426:	230c      	movs	r3, #12
 8004428:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800442a:	230b      	movs	r3, #11
 800442c:	753b      	strb	r3, [r7, #20]
      break;
 800442e:	e048      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8004430:	2310      	movs	r3, #16
 8004432:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8004434:	230f      	movs	r3, #15
 8004436:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8004438:	2312      	movs	r3, #18
 800443a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800443c:	2311      	movs	r3, #17
 800443e:	753b      	strb	r3, [r7, #20]
      break;
 8004440:	e03f      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8004442:	2316      	movs	r3, #22
 8004444:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8004446:	2315      	movs	r3, #21
 8004448:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800444a:	2318      	movs	r3, #24
 800444c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800444e:	2317      	movs	r3, #23
 8004450:	753b      	strb	r3, [r7, #20]
      break;
 8004452:	e036      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8004454:	231c      	movs	r3, #28
 8004456:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8004458:	231b      	movs	r3, #27
 800445a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800445c:	231e      	movs	r3, #30
 800445e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8004460:	231d      	movs	r3, #29
 8004462:	753b      	strb	r3, [r7, #20]
      break;
 8004464:	e02d      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8004466:	2322      	movs	r3, #34	; 0x22
 8004468:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800446a:	2321      	movs	r3, #33	; 0x21
 800446c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800446e:	2324      	movs	r3, #36	; 0x24
 8004470:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8004472:	2323      	movs	r3, #35	; 0x23
 8004474:	753b      	strb	r3, [r7, #20]
      break;
 8004476:	e024      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8004478:	2328      	movs	r3, #40	; 0x28
 800447a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800447c:	2327      	movs	r3, #39	; 0x27
 800447e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8004480:	232a      	movs	r3, #42	; 0x2a
 8004482:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8004484:	2329      	movs	r3, #41	; 0x29
 8004486:	753b      	strb	r3, [r7, #20]
      break;
 8004488:	e01b      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800448a:	232e      	movs	r3, #46	; 0x2e
 800448c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800448e:	232d      	movs	r3, #45	; 0x2d
 8004490:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8004492:	2330      	movs	r3, #48	; 0x30
 8004494:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8004496:	232f      	movs	r3, #47	; 0x2f
 8004498:	753b      	strb	r3, [r7, #20]
      break;
 800449a:	e012      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800449c:	2334      	movs	r3, #52	; 0x34
 800449e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80044a0:	2333      	movs	r3, #51	; 0x33
 80044a2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80044a4:	2336      	movs	r3, #54	; 0x36
 80044a6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80044a8:	2335      	movs	r3, #53	; 0x35
 80044aa:	753b      	strb	r3, [r7, #20]
      break;
 80044ac:	e009      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80044ae:	233a      	movs	r3, #58	; 0x3a
 80044b0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80044b2:	2339      	movs	r3, #57	; 0x39
 80044b4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80044b6:	233c      	movs	r3, #60	; 0x3c
 80044b8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80044ba:	233b      	movs	r3, #59	; 0x3b
 80044bc:	753b      	strb	r3, [r7, #20]
      break;
 80044be:	e000      	b.n	80044c2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80044c0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80044c2:	89fb      	ldrh	r3, [r7, #14]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	7dfa      	ldrb	r2, [r7, #23]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fa3e 	bl	800494c <TS_IO_Read>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	b29a      	uxth	r2, r3
 80044da:	4b29      	ldr	r3, [pc, #164]	; (8004580 <ft5336_TS_GetXY+0x1dc>)
 80044dc:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80044de:	89fb      	ldrh	r3, [r7, #14]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	7dba      	ldrb	r2, [r7, #22]
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa30 	bl	800494c <TS_IO_Read>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044fa:	b21a      	sxth	r2, r3
 80044fc:	4b20      	ldr	r3, [pc, #128]	; (8004580 <ft5336_TS_GetXY+0x1dc>)
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b21b      	sxth	r3, r3
 8004502:	4313      	orrs	r3, r2
 8004504:	b21b      	sxth	r3, r3
 8004506:	b29a      	uxth	r2, r3
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <ft5336_TS_GetXY+0x1dc>)
 800450a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <ft5336_TS_GetXY+0x1dc>)
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	7d7a      	ldrb	r2, [r7, #21]
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fa15 	bl	800494c <TS_IO_Read>
 8004522:	4603      	mov	r3, r0
 8004524:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004526:	7cfb      	ldrb	r3, [r7, #19]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	b29a      	uxth	r2, r3
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <ft5336_TS_GetXY+0x1dc>)
 800452e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004530:	89fb      	ldrh	r3, [r7, #14]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	7d3a      	ldrb	r2, [r7, #20]
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fa07 	bl	800494c <TS_IO_Read>
 800453e:	4603      	mov	r3, r0
 8004540:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004542:	7cfb      	ldrb	r3, [r7, #19]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800454c:	b21a      	sxth	r2, r3
 800454e:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <ft5336_TS_GetXY+0x1dc>)
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b21b      	sxth	r3, r3
 8004554:	4313      	orrs	r3, r2
 8004556:	b21b      	sxth	r3, r3
 8004558:	b29a      	uxth	r2, r3
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <ft5336_TS_GetXY+0x1dc>)
 800455c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800455e:	4b08      	ldr	r3, [pc, #32]	; (8004580 <ft5336_TS_GetXY+0x1dc>)
 8004560:	881a      	ldrh	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <ft5336_TS_GetXY+0x1d8>)
 8004568:	789b      	ldrb	r3, [r3, #2]
 800456a:	3301      	adds	r3, #1
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4b03      	ldr	r3, [pc, #12]	; (800457c <ft5336_TS_GetXY+0x1d8>)
 8004570:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8004572:	bf00      	nop
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	2000005c 	.word	0x2000005c
 8004580:	20000060 	.word	0x20000060

08004584 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	21a4      	movs	r1, #164	; 0xa4
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f9ba 	bl	8004918 <TS_IO_Write>
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	7bfa      	ldrb	r2, [r7, #15]
 80045c4:	21a4      	movs	r1, #164	; 0xa4
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f9a6 	bl	8004918 <TS_IO_Write>
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800460a:	781b      	ldrb	r3, [r3, #0]
}
 800460c:	4618      	mov	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000005c 	.word	0x2000005c

0800461c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004620:	f7ff fff0 	bl	8004604 <ft5336_Get_I2C_InitializedStatus>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800462a:	f000 f96b 	bl	8004904 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800462e:	4b02      	ldr	r3, [pc, #8]	; (8004638 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
  }
}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	2000005c 	.word	0x2000005c

0800463c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08c      	sub	sp, #48	; 0x30
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a51      	ldr	r2, [pc, #324]	; (80047a8 <I2Cx_MspInit+0x150>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d14d      	bne.n	8004704 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004668:	4b50      	ldr	r3, [pc, #320]	; (80047ac <I2Cx_MspInit+0x154>)
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	4a4f      	ldr	r2, [pc, #316]	; (80047ac <I2Cx_MspInit+0x154>)
 800466e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004672:	6313      	str	r3, [r2, #48]	; 0x30
 8004674:	4b4d      	ldr	r3, [pc, #308]	; (80047ac <I2Cx_MspInit+0x154>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004684:	2312      	movs	r3, #18
 8004686:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004688:	2300      	movs	r3, #0
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800468c:	2302      	movs	r3, #2
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004690:	2304      	movs	r3, #4
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004694:	f107 031c 	add.w	r3, r7, #28
 8004698:	4619      	mov	r1, r3
 800469a:	4845      	ldr	r0, [pc, #276]	; (80047b0 <I2Cx_MspInit+0x158>)
 800469c:	f7fd f8b2 	bl	8001804 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80046a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80046a6:	f107 031c 	add.w	r3, r7, #28
 80046aa:	4619      	mov	r1, r3
 80046ac:	4840      	ldr	r0, [pc, #256]	; (80047b0 <I2Cx_MspInit+0x158>)
 80046ae:	f7fd f8a9 	bl	8001804 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80046b2:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <I2Cx_MspInit+0x154>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	4a3d      	ldr	r2, [pc, #244]	; (80047ac <I2Cx_MspInit+0x154>)
 80046b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046bc:	6413      	str	r3, [r2, #64]	; 0x40
 80046be:	4b3b      	ldr	r3, [pc, #236]	; (80047ac <I2Cx_MspInit+0x154>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80046ca:	4b38      	ldr	r3, [pc, #224]	; (80047ac <I2Cx_MspInit+0x154>)
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	4a37      	ldr	r2, [pc, #220]	; (80047ac <I2Cx_MspInit+0x154>)
 80046d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80046d4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80046d6:	4b35      	ldr	r3, [pc, #212]	; (80047ac <I2Cx_MspInit+0x154>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	4a34      	ldr	r2, [pc, #208]	; (80047ac <I2Cx_MspInit+0x154>)
 80046dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046e0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80046e2:	2200      	movs	r2, #0
 80046e4:	210f      	movs	r1, #15
 80046e6:	2048      	movs	r0, #72	; 0x48
 80046e8:	f7fc fb21 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80046ec:	2048      	movs	r0, #72	; 0x48
 80046ee:	f7fc fb3a 	bl	8000d66 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	210f      	movs	r1, #15
 80046f6:	2049      	movs	r0, #73	; 0x49
 80046f8:	f7fc fb19 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80046fc:	2049      	movs	r0, #73	; 0x49
 80046fe:	f7fc fb32 	bl	8000d66 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004702:	e04d      	b.n	80047a0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004704:	4b29      	ldr	r3, [pc, #164]	; (80047ac <I2Cx_MspInit+0x154>)
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	4a28      	ldr	r2, [pc, #160]	; (80047ac <I2Cx_MspInit+0x154>)
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	6313      	str	r3, [r2, #48]	; 0x30
 8004710:	4b26      	ldr	r3, [pc, #152]	; (80047ac <I2Cx_MspInit+0x154>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800471c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004720:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004722:	2312      	movs	r3, #18
 8004724:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004726:	2300      	movs	r3, #0
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800472a:	2302      	movs	r3, #2
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800472e:	2304      	movs	r3, #4
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004732:	f107 031c 	add.w	r3, r7, #28
 8004736:	4619      	mov	r1, r3
 8004738:	481e      	ldr	r0, [pc, #120]	; (80047b4 <I2Cx_MspInit+0x15c>)
 800473a:	f7fd f863 	bl	8001804 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800473e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004744:	f107 031c 	add.w	r3, r7, #28
 8004748:	4619      	mov	r1, r3
 800474a:	481a      	ldr	r0, [pc, #104]	; (80047b4 <I2Cx_MspInit+0x15c>)
 800474c:	f7fd f85a 	bl	8001804 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004750:	4b16      	ldr	r3, [pc, #88]	; (80047ac <I2Cx_MspInit+0x154>)
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	4a15      	ldr	r2, [pc, #84]	; (80047ac <I2Cx_MspInit+0x154>)
 8004756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800475a:	6413      	str	r3, [r2, #64]	; 0x40
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <I2Cx_MspInit+0x154>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <I2Cx_MspInit+0x154>)
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4a0f      	ldr	r2, [pc, #60]	; (80047ac <I2Cx_MspInit+0x154>)
 800476e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004772:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004774:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <I2Cx_MspInit+0x154>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <I2Cx_MspInit+0x154>)
 800477a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800477e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004780:	2200      	movs	r2, #0
 8004782:	210f      	movs	r1, #15
 8004784:	201f      	movs	r0, #31
 8004786:	f7fc fad2 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800478a:	201f      	movs	r0, #31
 800478c:	f7fc faeb 	bl	8000d66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004790:	2200      	movs	r2, #0
 8004792:	210f      	movs	r1, #15
 8004794:	2020      	movs	r0, #32
 8004796:	f7fc faca 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800479a:	2020      	movs	r0, #32
 800479c:	f7fc fae3 	bl	8000d66 <HAL_NVIC_EnableIRQ>
}
 80047a0:	bf00      	nop
 80047a2:	3730      	adds	r7, #48	; 0x30
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20000064 	.word	0x20000064
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40021c00 	.word	0x40021c00
 80047b4:	40020400 	.word	0x40020400

080047b8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7fd fce7 	bl	8002194 <HAL_I2C_GetState>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d125      	bne.n	8004818 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a14      	ldr	r2, [pc, #80]	; (8004820 <I2Cx_Init+0x68>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a13      	ldr	r2, [pc, #76]	; (8004824 <I2Cx_Init+0x6c>)
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e002      	b.n	80047e2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a12      	ldr	r2, [pc, #72]	; (8004828 <I2Cx_Init+0x70>)
 80047e0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <I2Cx_Init+0x74>)
 80047e6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff23 	bl	8004658 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fd f9bc 	bl	8001b90 <HAL_I2C_Init>
  }
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000064 	.word	0x20000064
 8004824:	40005c00 	.word	0x40005c00
 8004828:	40005400 	.word	0x40005400
 800482c:	40912732 	.word	0x40912732

08004830 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	; 0x28
 8004834:	af04      	add	r7, sp, #16
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	4608      	mov	r0, r1
 800483a:	4611      	mov	r1, r2
 800483c:	461a      	mov	r2, r3
 800483e:	4603      	mov	r3, r0
 8004840:	72fb      	strb	r3, [r7, #11]
 8004842:	460b      	mov	r3, r1
 8004844:	813b      	strh	r3, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800484e:	7afb      	ldrb	r3, [r7, #11]
 8004850:	b299      	uxth	r1, r3
 8004852:	88f8      	ldrh	r0, [r7, #6]
 8004854:	893a      	ldrh	r2, [r7, #8]
 8004856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800485a:	9302      	str	r3, [sp, #8]
 800485c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4603      	mov	r3, r0
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7fd fb7a 	bl	8001f60 <HAL_I2C_Mem_Read>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d004      	beq.n	8004880 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004876:	7afb      	ldrb	r3, [r7, #11]
 8004878:	4619      	mov	r1, r3
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f832 	bl	80048e4 <I2Cx_Error>
  }
  return status;    
 8004880:	7dfb      	ldrb	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b08a      	sub	sp, #40	; 0x28
 800488e:	af04      	add	r7, sp, #16
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	4608      	mov	r0, r1
 8004894:	4611      	mov	r1, r2
 8004896:	461a      	mov	r2, r3
 8004898:	4603      	mov	r3, r0
 800489a:	72fb      	strb	r3, [r7, #11]
 800489c:	460b      	mov	r3, r1
 800489e:	813b      	strh	r3, [r7, #8]
 80048a0:	4613      	mov	r3, r2
 80048a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	b299      	uxth	r1, r3
 80048ac:	88f8      	ldrh	r0, [r7, #6]
 80048ae:	893a      	ldrh	r2, [r7, #8]
 80048b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048b4:	9302      	str	r3, [sp, #8]
 80048b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4603      	mov	r3, r0
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7fd fa39 	bl	8001d38 <HAL_I2C_Mem_Write>
 80048c6:	4603      	mov	r3, r0
 80048c8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80048d0:	7afb      	ldrb	r3, [r7, #11]
 80048d2:	4619      	mov	r1, r3
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f805 	bl	80048e4 <I2Cx_Error>
  }
  return status;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7fd f9dd 	bl	8001cb0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff ff5e 	bl	80047b8 <I2Cx_Init>
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004908:	4802      	ldr	r0, [pc, #8]	; (8004914 <TS_IO_Init+0x10>)
 800490a:	f7ff ff55 	bl	80047b8 <I2Cx_Init>
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000064 	.word	0x20000064

08004918 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af02      	add	r7, sp, #8
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
 8004922:	460b      	mov	r3, r1
 8004924:	71bb      	strb	r3, [r7, #6]
 8004926:	4613      	mov	r3, r2
 8004928:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800492a:	79bb      	ldrb	r3, [r7, #6]
 800492c:	b29a      	uxth	r2, r3
 800492e:	79f9      	ldrb	r1, [r7, #7]
 8004930:	2301      	movs	r3, #1
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	1d7b      	adds	r3, r7, #5
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	2301      	movs	r3, #1
 800493a:	4803      	ldr	r0, [pc, #12]	; (8004948 <TS_IO_Write+0x30>)
 800493c:	f7ff ffa5 	bl	800488a <I2Cx_WriteMultiple>
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000064 	.word	0x20000064

0800494c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af02      	add	r7, sp, #8
 8004952:	4603      	mov	r3, r0
 8004954:	460a      	mov	r2, r1
 8004956:	71fb      	strb	r3, [r7, #7]
 8004958:	4613      	mov	r3, r2
 800495a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004960:	79bb      	ldrb	r3, [r7, #6]
 8004962:	b29a      	uxth	r2, r3
 8004964:	79f9      	ldrb	r1, [r7, #7]
 8004966:	2301      	movs	r3, #1
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	f107 030f 	add.w	r3, r7, #15
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	2301      	movs	r3, #1
 8004972:	4804      	ldr	r0, [pc, #16]	; (8004984 <TS_IO_Read+0x38>)
 8004974:	f7ff ff5c 	bl	8004830 <I2Cx_ReadMultiple>

  return read_value;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000064 	.word	0x20000064

08004988 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7fc f8cd 	bl	8000b30 <HAL_Delay>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80049a4:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049a6:	2228      	movs	r2, #40	; 0x28
 80049a8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80049aa:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049ac:	2209      	movs	r2, #9
 80049ae:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80049b0:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049b2:	2235      	movs	r2, #53	; 0x35
 80049b4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80049b6:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049b8:	220b      	movs	r2, #11
 80049ba:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80049bc:	4b2b      	ldr	r3, [pc, #172]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049be:	f240 121b 	movw	r2, #283	; 0x11b
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80049c4:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049c6:	f240 2215 	movw	r2, #533	; 0x215
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80049cc:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049ce:	f240 121d 	movw	r2, #285	; 0x11d
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80049d4:	4b25      	ldr	r3, [pc, #148]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049d6:	f240 2235 	movw	r2, #565	; 0x235
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80049dc:	2100      	movs	r1, #0
 80049de:	4823      	ldr	r0, [pc, #140]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049e0:	f000 fa82 	bl	8004ee8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80049e4:	4b21      	ldr	r3, [pc, #132]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80049ea:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80049ec:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049ee:	f44f 7288 	mov.w	r2, #272	; 0x110
 80049f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80049f4:	4b1d      	ldr	r3, [pc, #116]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80049fc:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <BSP_LCD_Init+0xcc>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004a04:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <BSP_LCD_Init+0xcc>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004a0c:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <BSP_LCD_Init+0xcc>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004a12:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <BSP_LCD_Init+0xcc>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004a18:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <BSP_LCD_Init+0xcc>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004a1e:	4b13      	ldr	r3, [pc, #76]	; (8004a6c <BSP_LCD_Init+0xcc>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <BSP_LCD_Init+0xcc>)
 8004a26:	4a12      	ldr	r2, [pc, #72]	; (8004a70 <BSP_LCD_Init+0xd0>)
 8004a28:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8004a2a:	4810      	ldr	r0, [pc, #64]	; (8004a6c <BSP_LCD_Init+0xcc>)
 8004a2c:	f7fe f854 	bl	8002ad8 <HAL_LTDC_GetState>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8004a36:	2100      	movs	r1, #0
 8004a38:	480c      	ldr	r0, [pc, #48]	; (8004a6c <BSP_LCD_Init+0xcc>)
 8004a3a:	f000 f97b 	bl	8004d34 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8004a3e:	480b      	ldr	r0, [pc, #44]	; (8004a6c <BSP_LCD_Init+0xcc>)
 8004a40:	f7fd fe5c 	bl	80026fc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8004a44:	2201      	movs	r2, #1
 8004a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004a4a:	480a      	ldr	r0, [pc, #40]	; (8004a74 <BSP_LCD_Init+0xd4>)
 8004a4c:	f7fd f886 	bl	8001b5c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004a50:	2201      	movs	r2, #1
 8004a52:	2108      	movs	r1, #8
 8004a54:	4808      	ldr	r0, [pc, #32]	; (8004a78 <BSP_LCD_Init+0xd8>)
 8004a56:	f7fd f881 	bl	8001b5c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004a5a:	f000 faad 	bl	8004fb8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004a5e:	4807      	ldr	r0, [pc, #28]	; (8004a7c <BSP_LCD_Init+0xdc>)
 8004a60:	f000 f8c0 	bl	8004be4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000304 	.word	0x20000304
 8004a70:	40016800 	.word	0x40016800
 8004a74:	40022000 	.word	0x40022000
 8004a78:	40022800 	.word	0x40022800
 8004a7c:	2000000c 	.word	0x2000000c

08004a80 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <BSP_LCD_GetXSize+0x20>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a06      	ldr	r2, [pc, #24]	; (8004aa4 <BSP_LCD_GetXSize+0x24>)
 8004a8a:	2134      	movs	r1, #52	; 0x34
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	3360      	adds	r3, #96	; 0x60
 8004a94:	681b      	ldr	r3, [r3, #0]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	200000f0 	.word	0x200000f0
 8004aa4:	20000304 	.word	0x20000304

08004aa8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <BSP_LCD_GetYSize+0x20>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a06      	ldr	r2, [pc, #24]	; (8004acc <BSP_LCD_GetYSize+0x24>)
 8004ab2:	2134      	movs	r1, #52	; 0x34
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	3364      	adds	r3, #100	; 0x64
 8004abc:	681b      	ldr	r3, [r3, #0]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	200000f0 	.word	0x200000f0
 8004acc:	20000304 	.word	0x20000304

08004ad0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b090      	sub	sp, #64	; 0x40
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	6039      	str	r1, [r7, #0]
 8004ada:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004ae0:	f7ff ffce 	bl	8004a80 <BSP_LCD_GetXSize>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8004aec:	f7ff ffdc 	bl	8004aa8 <BSP_LCD_GetYSize>
 8004af0:	4603      	mov	r3, r0
 8004af2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8004afc:	23ff      	movs	r3, #255	; 0xff
 8004afe:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004b04:	2300      	movs	r3, #0
 8004b06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004b16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004b1c:	2307      	movs	r3, #7
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004b20:	f7ff ffae 	bl	8004a80 <BSP_LCD_GetXSize>
 8004b24:	4603      	mov	r3, r0
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004b28:	f7ff ffbe 	bl	8004aa8 <BSP_LCD_GetYSize>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8004b30:	88fa      	ldrh	r2, [r7, #6]
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	4619      	mov	r1, r3
 8004b38:	4812      	ldr	r0, [pc, #72]	; (8004b84 <BSP_LCD_LayerDefaultInit+0xb4>)
 8004b3a:	f7fd ff8f 	bl	8002a5c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004b3e:	88fa      	ldrh	r2, [r7, #6]
 8004b40:	4911      	ldr	r1, [pc, #68]	; (8004b88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b52:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8004b54:	88fa      	ldrh	r2, [r7, #6]
 8004b56:	490c      	ldr	r1, [pc, #48]	; (8004b88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004b58:	4613      	mov	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	3308      	adds	r3, #8
 8004b64:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <BSP_LCD_LayerDefaultInit+0xbc>)
 8004b66:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004b68:	88fa      	ldrh	r2, [r7, #6]
 8004b6a:	4907      	ldr	r1, [pc, #28]	; (8004b88 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004b7a:	601a      	str	r2, [r3, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	3740      	adds	r7, #64	; 0x40
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000304 	.word	0x20000304
 8004b88:	200000f4 	.word	0x200000f4
 8004b8c:	2000000c 	.word	0x2000000c

08004b90 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004b98:	4a04      	ldr	r2, [pc, #16]	; (8004bac <BSP_LCD_SelectLayer+0x1c>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6013      	str	r3, [r2, #0]
} 
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	200000f0 	.word	0x200000f0

08004bb0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004bb8:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <BSP_LCD_SetBackColor+0x2c>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4908      	ldr	r1, [pc, #32]	; (8004be0 <BSP_LCD_SetBackColor+0x30>)
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3304      	adds	r3, #4
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	200000f0 	.word	0x200000f0
 8004be0:	200000f4 	.word	0x200000f4

08004be4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <BSP_LCD_SetFont+0x2c>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4908      	ldr	r1, [pc, #32]	; (8004c14 <BSP_LCD_SetFont+0x30>)
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	601a      	str	r2, [r3, #0]
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	200000f0 	.word	0x200000f0
 8004c14:	200000f4 	.word	0x200000f4

08004c18 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af02      	add	r7, sp, #8
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <BSP_LCD_Clear+0x48>)
 8004c22:	681c      	ldr	r4, [r3, #0]
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <BSP_LCD_Clear+0x48>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <BSP_LCD_Clear+0x4c>)
 8004c2a:	2134      	movs	r1, #52	; 0x34
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	4413      	add	r3, r2
 8004c32:	335c      	adds	r3, #92	; 0x5c
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461e      	mov	r6, r3
 8004c38:	f7ff ff22 	bl	8004a80 <BSP_LCD_GetXSize>
 8004c3c:	4605      	mov	r5, r0
 8004c3e:	f7ff ff33 	bl	8004aa8 <BSP_LCD_GetYSize>
 8004c42:	4602      	mov	r2, r0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	462a      	mov	r2, r5
 8004c50:	4631      	mov	r1, r6
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 f964 	bl	8004f20 <LL_FillBuffer>
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c60:	200000f0 	.word	0x200000f0
 8004c64:	20000304 	.word	0x20000304

08004c68 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004c68:	b5b0      	push	{r4, r5, r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	603a      	str	r2, [r7, #0]
 8004c72:	80fb      	strh	r3, [r7, #6]
 8004c74:	460b      	mov	r3, r1
 8004c76:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004c78:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <BSP_LCD_DrawPixel+0x88>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <BSP_LCD_DrawPixel+0x8c>)
 8004c7e:	2134      	movs	r1, #52	; 0x34
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	4413      	add	r3, r2
 8004c86:	3348      	adds	r3, #72	; 0x48
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d116      	bne.n	8004cbc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004c8e:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <BSP_LCD_DrawPixel+0x88>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <BSP_LCD_DrawPixel+0x8c>)
 8004c94:	2134      	movs	r1, #52	; 0x34
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	335c      	adds	r3, #92	; 0x5c
 8004c9e:	681c      	ldr	r4, [r3, #0]
 8004ca0:	88bd      	ldrh	r5, [r7, #4]
 8004ca2:	f7ff feed 	bl	8004a80 <BSP_LCD_GetXSize>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	fb03 f205 	mul.w	r2, r3, r5
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	4413      	add	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4423      	add	r3, r4
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	b292      	uxth	r2, r2
 8004cb8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004cba:	e015      	b.n	8004ce8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <BSP_LCD_DrawPixel+0x88>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <BSP_LCD_DrawPixel+0x8c>)
 8004cc2:	2134      	movs	r1, #52	; 0x34
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	335c      	adds	r3, #92	; 0x5c
 8004ccc:	681c      	ldr	r4, [r3, #0]
 8004cce:	88bd      	ldrh	r5, [r7, #4]
 8004cd0:	f7ff fed6 	bl	8004a80 <BSP_LCD_GetXSize>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	fb03 f205 	mul.w	r2, r3, r5
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4423      	add	r3, r4
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	6013      	str	r3, [r2, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf0:	200000f0 	.word	0x200000f0
 8004cf4:	20000304 	.word	0x20000304

08004cf8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <BSP_LCD_DisplayOn+0x30>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <BSP_LCD_DisplayOn+0x30>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0201 	orr.w	r2, r2, #1
 8004d0a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d12:	4806      	ldr	r0, [pc, #24]	; (8004d2c <BSP_LCD_DisplayOn+0x34>)
 8004d14:	f7fc ff22 	bl	8001b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004d18:	2201      	movs	r2, #1
 8004d1a:	2108      	movs	r1, #8
 8004d1c:	4804      	ldr	r0, [pc, #16]	; (8004d30 <BSP_LCD_DisplayOn+0x38>)
 8004d1e:	f7fc ff1d 	bl	8001b5c <HAL_GPIO_WritePin>
}
 8004d22:	bf00      	nop
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20000304 	.word	0x20000304
 8004d2c:	40022000 	.word	0x40022000
 8004d30:	40022800 	.word	0x40022800

08004d34 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b090      	sub	sp, #64	; 0x40
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004d3e:	4b64      	ldr	r3, [pc, #400]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	4a63      	ldr	r2, [pc, #396]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d48:	6453      	str	r3, [r2, #68]	; 0x44
 8004d4a:	4b61      	ldr	r3, [pc, #388]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004d56:	4b5e      	ldr	r3, [pc, #376]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	4a5d      	ldr	r2, [pc, #372]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d60:	6313      	str	r3, [r2, #48]	; 0x30
 8004d62:	4b5b      	ldr	r3, [pc, #364]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d6e:	4b58      	ldr	r3, [pc, #352]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	4a57      	ldr	r2, [pc, #348]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d74:	f043 0310 	orr.w	r3, r3, #16
 8004d78:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7a:	4b55      	ldr	r3, [pc, #340]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	623b      	str	r3, [r7, #32]
 8004d84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d86:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	4a51      	ldr	r2, [pc, #324]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d90:	6313      	str	r3, [r2, #48]	; 0x30
 8004d92:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004d9e:	4b4c      	ldr	r3, [pc, #304]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	4a4b      	ldr	r2, [pc, #300]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da8:	6313      	str	r3, [r2, #48]	; 0x30
 8004daa:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004db6:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	4a45      	ldr	r2, [pc, #276]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004dbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc2:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004dce:	4b40      	ldr	r3, [pc, #256]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	4a3f      	ldr	r2, [pc, #252]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dda:	4b3d      	ldr	r3, [pc, #244]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004de6:	4b3a      	ldr	r3, [pc, #232]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	4a39      	ldr	r2, [pc, #228]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df0:	6313      	str	r3, [r2, #48]	; 0x30
 8004df2:	4b37      	ldr	r3, [pc, #220]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004dfe:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	4a33      	ldr	r2, [pc, #204]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004e04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e08:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0a:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <BSP_LCD_MspInit+0x19c>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e12:	60bb      	str	r3, [r7, #8]
 8004e14:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004e16:	2310      	movs	r3, #16
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004e22:	2302      	movs	r3, #2
 8004e24:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004e26:	230e      	movs	r3, #14
 8004e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4828      	ldr	r0, [pc, #160]	; (8004ed4 <BSP_LCD_MspInit+0x1a0>)
 8004e32:	f7fc fce7 	bl	8001804 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004e40:	2309      	movs	r3, #9
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4823      	ldr	r0, [pc, #140]	; (8004ed8 <BSP_LCD_MspInit+0x1a4>)
 8004e4c:	f7fc fcda 	bl	8001804 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004e50:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004e56:	2302      	movs	r3, #2
 8004e58:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004e5a:	230e      	movs	r3, #14
 8004e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e62:	4619      	mov	r1, r3
 8004e64:	481d      	ldr	r0, [pc, #116]	; (8004edc <BSP_LCD_MspInit+0x1a8>)
 8004e66:	f7fc fccd 	bl	8001804 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004e6a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004e70:	2302      	movs	r3, #2
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004e74:	230e      	movs	r3, #14
 8004e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4818      	ldr	r0, [pc, #96]	; (8004ee0 <BSP_LCD_MspInit+0x1ac>)
 8004e80:	f7fc fcc0 	bl	8001804 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004e84:	23f7      	movs	r3, #247	; 0xf7
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004e8c:	230e      	movs	r3, #14
 8004e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e94:	4619      	mov	r1, r3
 8004e96:	4813      	ldr	r0, [pc, #76]	; (8004ee4 <BSP_LCD_MspInit+0x1b0>)
 8004e98:	f7fc fcb4 	bl	8001804 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004eaa:	4619      	mov	r1, r3
 8004eac:	480b      	ldr	r0, [pc, #44]	; (8004edc <BSP_LCD_MspInit+0x1a8>)
 8004eae:	f7fc fca9 	bl	8001804 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4808      	ldr	r0, [pc, #32]	; (8004ee4 <BSP_LCD_MspInit+0x1b0>)
 8004ec2:	f7fc fc9f 	bl	8001804 <HAL_GPIO_Init>
}
 8004ec6:	bf00      	nop
 8004ec8:	3740      	adds	r7, #64	; 0x40
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40021800 	.word	0x40021800
 8004edc:	40022000 	.word	0x40022000
 8004ee0:	40022400 	.word	0x40022400
 8004ee4:	40022800 	.word	0x40022800

08004ee8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <BSP_LCD_ClockConfig+0x34>)
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004ef8:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <BSP_LCD_ClockConfig+0x34>)
 8004efa:	22c0      	movs	r2, #192	; 0xc0
 8004efc:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004efe:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <BSP_LCD_ClockConfig+0x34>)
 8004f00:	2205      	movs	r2, #5
 8004f02:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <BSP_LCD_ClockConfig+0x34>)
 8004f06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004f0c:	4803      	ldr	r0, [pc, #12]	; (8004f1c <BSP_LCD_ClockConfig+0x34>)
 8004f0e:	f7fe fc27 	bl	8003760 <HAL_RCCEx_PeriphCLKConfig>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	2000010c 	.word	0x2000010c

08004f20 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <LL_FillBuffer+0x88>)
 8004f30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f34:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004f36:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <LL_FillBuffer+0x8c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <LL_FillBuffer+0x90>)
 8004f3c:	2134      	movs	r1, #52	; 0x34
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	3348      	adds	r3, #72	; 0x48
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d103      	bne.n	8004f54 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004f4c:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <LL_FillBuffer+0x88>)
 8004f4e:	2202      	movs	r2, #2
 8004f50:	609a      	str	r2, [r3, #8]
 8004f52:	e002      	b.n	8004f5a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004f54:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <LL_FillBuffer+0x88>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004f5a:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <LL_FillBuffer+0x88>)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004f60:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <LL_FillBuffer+0x88>)
 8004f62:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <LL_FillBuffer+0x94>)
 8004f64:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004f66:	4810      	ldr	r0, [pc, #64]	; (8004fa8 <LL_FillBuffer+0x88>)
 8004f68:	f7fc f9c0 	bl	80012ec <HAL_DMA2D_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d115      	bne.n	8004f9e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	480c      	ldr	r0, [pc, #48]	; (8004fa8 <LL_FillBuffer+0x88>)
 8004f76:	f7fc fb17 	bl	80015a8 <HAL_DMA2D_ConfigLayer>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10e      	bne.n	8004f9e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69f9      	ldr	r1, [r7, #28]
 8004f8a:	4807      	ldr	r0, [pc, #28]	; (8004fa8 <LL_FillBuffer+0x88>)
 8004f8c:	f7fc f9f8 	bl	8001380 <HAL_DMA2D_Start>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004f96:	210a      	movs	r1, #10
 8004f98:	4803      	ldr	r0, [pc, #12]	; (8004fa8 <LL_FillBuffer+0x88>)
 8004f9a:	f7fc fa1c 	bl	80013d6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200000b0 	.word	0x200000b0
 8004fac:	200000f0 	.word	0x200000f0
 8004fb0:	20000304 	.word	0x20000304
 8004fb4:	4002b000 	.word	0x4002b000

08004fb8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004fbc:	4b29      	ldr	r3, [pc, #164]	; (8005064 <BSP_SDRAM_Init+0xac>)
 8004fbe:	4a2a      	ldr	r2, [pc, #168]	; (8005068 <BSP_SDRAM_Init+0xb0>)
 8004fc0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004fc2:	4b2a      	ldr	r3, [pc, #168]	; (800506c <BSP_SDRAM_Init+0xb4>)
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004fc8:	4b28      	ldr	r3, [pc, #160]	; (800506c <BSP_SDRAM_Init+0xb4>)
 8004fca:	2207      	movs	r2, #7
 8004fcc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004fce:	4b27      	ldr	r3, [pc, #156]	; (800506c <BSP_SDRAM_Init+0xb4>)
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004fd4:	4b25      	ldr	r3, [pc, #148]	; (800506c <BSP_SDRAM_Init+0xb4>)
 8004fd6:	2207      	movs	r2, #7
 8004fd8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <BSP_SDRAM_Init+0xb4>)
 8004fdc:	2202      	movs	r2, #2
 8004fde:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004fe0:	4b22      	ldr	r3, [pc, #136]	; (800506c <BSP_SDRAM_Init+0xb4>)
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004fe6:	4b21      	ldr	r3, [pc, #132]	; (800506c <BSP_SDRAM_Init+0xb4>)
 8004fe8:	2202      	movs	r2, #2
 8004fea:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <BSP_SDRAM_Init+0xac>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <BSP_SDRAM_Init+0xac>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <BSP_SDRAM_Init+0xac>)
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004ffe:	4b19      	ldr	r3, [pc, #100]	; (8005064 <BSP_SDRAM_Init+0xac>)
 8005000:	2210      	movs	r2, #16
 8005002:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005004:	4b17      	ldr	r3, [pc, #92]	; (8005064 <BSP_SDRAM_Init+0xac>)
 8005006:	2240      	movs	r2, #64	; 0x40
 8005008:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800500a:	4b16      	ldr	r3, [pc, #88]	; (8005064 <BSP_SDRAM_Init+0xac>)
 800500c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005010:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005012:	4b14      	ldr	r3, [pc, #80]	; (8005064 <BSP_SDRAM_Init+0xac>)
 8005014:	2200      	movs	r2, #0
 8005016:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <BSP_SDRAM_Init+0xac>)
 800501a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800501e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <BSP_SDRAM_Init+0xac>)
 8005022:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005026:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005028:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <BSP_SDRAM_Init+0xac>)
 800502a:	2200      	movs	r2, #0
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800502e:	2100      	movs	r1, #0
 8005030:	480c      	ldr	r0, [pc, #48]	; (8005064 <BSP_SDRAM_Init+0xac>)
 8005032:	f000 f87f 	bl	8005134 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8005036:	490d      	ldr	r1, [pc, #52]	; (800506c <BSP_SDRAM_Init+0xb4>)
 8005038:	480a      	ldr	r0, [pc, #40]	; (8005064 <BSP_SDRAM_Init+0xac>)
 800503a:	f7fe ff81 	bl	8003f40 <HAL_SDRAM_Init>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <BSP_SDRAM_Init+0xb8>)
 8005046:	2201      	movs	r2, #1
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e002      	b.n	8005052 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <BSP_SDRAM_Init+0xb8>)
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005052:	f240 6003 	movw	r0, #1539	; 0x603
 8005056:	f000 f80d 	bl	8005074 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <BSP_SDRAM_Init+0xb8>)
 800505c:	781b      	ldrb	r3, [r3, #0]
}
 800505e:	4618      	mov	r0, r3
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	200003ac 	.word	0x200003ac
 8005068:	a0000140 	.word	0xa0000140
 800506c:	20000190 	.word	0x20000190
 8005070:	2000003c 	.word	0x2000003c

08005074 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005080:	4b2a      	ldr	r3, [pc, #168]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005088:	2210      	movs	r2, #16
 800508a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800508c:	4b27      	ldr	r3, [pc, #156]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800508e:	2201      	movs	r2, #1
 8005090:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005094:	2200      	movs	r2, #0
 8005096:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005098:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800509c:	4923      	ldr	r1, [pc, #140]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800509e:	4824      	ldr	r0, [pc, #144]	; (8005130 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050a0:	f7fe ff8c 	bl	8003fbc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80050a4:	2001      	movs	r0, #1
 80050a6:	f7fb fd43 	bl	8000b30 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050ac:	2202      	movs	r2, #2
 80050ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050b2:	2210      	movs	r2, #16
 80050b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80050b6:	4b1d      	ldr	r3, [pc, #116]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80050bc:	4b1b      	ldr	r3, [pc, #108]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050be:	2200      	movs	r2, #0
 80050c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80050c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050c6:	4919      	ldr	r1, [pc, #100]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050c8:	4819      	ldr	r0, [pc, #100]	; (8005130 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050ca:	f7fe ff77 	bl	8003fbc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80050ce:	4b17      	ldr	r3, [pc, #92]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050d0:	2203      	movs	r2, #3
 80050d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80050d4:	4b15      	ldr	r3, [pc, #84]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050d6:	2210      	movs	r2, #16
 80050d8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050dc:	2208      	movs	r2, #8
 80050de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80050e0:	4b12      	ldr	r3, [pc, #72]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80050e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050ea:	4910      	ldr	r1, [pc, #64]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050ec:	4810      	ldr	r0, [pc, #64]	; (8005130 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80050ee:	f7fe ff65 	bl	8003fbc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80050f2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80050f6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80050fa:	2204      	movs	r2, #4
 80050fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005100:	2210      	movs	r2, #16
 8005102:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005104:	4b09      	ldr	r3, [pc, #36]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005106:	2201      	movs	r2, #1
 8005108:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4a07      	ldr	r2, [pc, #28]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800510e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005114:	4905      	ldr	r1, [pc, #20]	; (800512c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005116:	4806      	ldr	r0, [pc, #24]	; (8005130 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005118:	f7fe ff50 	bl	8003fbc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4804      	ldr	r0, [pc, #16]	; (8005130 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005120:	f7fe ff77 	bl	8004012 <HAL_SDRAM_ProgramRefreshRate>
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	200001ac 	.word	0x200001ac
 8005130:	200003ac 	.word	0x200003ac

08005134 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005134:	b580      	push	{r7, lr}
 8005136:	b090      	sub	sp, #64	; 0x40
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800513e:	4b70      	ldr	r3, [pc, #448]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	4a6f      	ldr	r2, [pc, #444]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	6393      	str	r3, [r2, #56]	; 0x38
 800514a:	4b6d      	ldr	r3, [pc, #436]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005156:	4b6a      	ldr	r3, [pc, #424]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	4a69      	ldr	r2, [pc, #420]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 800515c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005160:	6313      	str	r3, [r2, #48]	; 0x30
 8005162:	4b67      	ldr	r3, [pc, #412]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800516e:	4b64      	ldr	r3, [pc, #400]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	4a63      	ldr	r2, [pc, #396]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 8005174:	f043 0304 	orr.w	r3, r3, #4
 8005178:	6313      	str	r3, [r2, #48]	; 0x30
 800517a:	4b61      	ldr	r3, [pc, #388]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005186:	4b5e      	ldr	r3, [pc, #376]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4a5d      	ldr	r2, [pc, #372]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 800518c:	f043 0308 	orr.w	r3, r3, #8
 8005190:	6313      	str	r3, [r2, #48]	; 0x30
 8005192:	4b5b      	ldr	r3, [pc, #364]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800519e:	4b58      	ldr	r3, [pc, #352]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	4a57      	ldr	r2, [pc, #348]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051a4:	f043 0310 	orr.w	r3, r3, #16
 80051a8:	6313      	str	r3, [r2, #48]	; 0x30
 80051aa:	4b55      	ldr	r3, [pc, #340]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80051b6:	4b52      	ldr	r3, [pc, #328]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4a51      	ldr	r2, [pc, #324]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051bc:	f043 0320 	orr.w	r3, r3, #32
 80051c0:	6313      	str	r3, [r2, #48]	; 0x30
 80051c2:	4b4f      	ldr	r3, [pc, #316]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80051ce:	4b4c      	ldr	r3, [pc, #304]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	4a4b      	ldr	r2, [pc, #300]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d8:	6313      	str	r3, [r2, #48]	; 0x30
 80051da:	4b49      	ldr	r3, [pc, #292]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051e6:	4b46      	ldr	r3, [pc, #280]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	4a45      	ldr	r2, [pc, #276]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f0:	6313      	str	r3, [r2, #48]	; 0x30
 80051f2:	4b43      	ldr	r3, [pc, #268]	; (8005300 <BSP_SDRAM_MspInit+0x1cc>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005202:	2301      	movs	r3, #1
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005206:	2302      	movs	r3, #2
 8005208:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800520a:	230c      	movs	r3, #12
 800520c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800520e:	2308      	movs	r3, #8
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005216:	4619      	mov	r1, r3
 8005218:	483a      	ldr	r0, [pc, #232]	; (8005304 <BSP_SDRAM_MspInit+0x1d0>)
 800521a:	f7fc faf3 	bl	8001804 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800521e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005228:	4619      	mov	r1, r3
 800522a:	4837      	ldr	r0, [pc, #220]	; (8005308 <BSP_SDRAM_MspInit+0x1d4>)
 800522c:	f7fc faea 	bl	8001804 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005230:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800523a:	4619      	mov	r1, r3
 800523c:	4833      	ldr	r0, [pc, #204]	; (800530c <BSP_SDRAM_MspInit+0x1d8>)
 800523e:	f7fc fae1 	bl	8001804 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005242:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005246:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800524c:	4619      	mov	r1, r3
 800524e:	4830      	ldr	r0, [pc, #192]	; (8005310 <BSP_SDRAM_MspInit+0x1dc>)
 8005250:	f7fc fad8 	bl	8001804 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005254:	f248 1333 	movw	r3, #33075	; 0x8133
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800525a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800525e:	4619      	mov	r1, r3
 8005260:	482c      	ldr	r0, [pc, #176]	; (8005314 <BSP_SDRAM_MspInit+0x1e0>)
 8005262:	f7fc facf 	bl	8001804 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005266:	2328      	movs	r3, #40	; 0x28
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800526a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800526e:	4619      	mov	r1, r3
 8005270:	4829      	ldr	r0, [pc, #164]	; (8005318 <BSP_SDRAM_MspInit+0x1e4>)
 8005272:	f7fc fac7 	bl	8001804 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005276:	4b29      	ldr	r3, [pc, #164]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 8005278:	2200      	movs	r2, #0
 800527a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800527c:	4b27      	ldr	r3, [pc, #156]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 800527e:	2280      	movs	r2, #128	; 0x80
 8005280:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005282:	4b26      	ldr	r3, [pc, #152]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 8005284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005288:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 800528c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005290:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005292:	4b22      	ldr	r3, [pc, #136]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 8005294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005298:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800529a:	4b20      	ldr	r3, [pc, #128]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 800529c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80052a0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80052a2:	4b1e      	ldr	r3, [pc, #120]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80052a8:	4b1c      	ldr	r3, [pc, #112]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052ae:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80052b0:	4b1a      	ldr	r3, [pc, #104]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80052b6:	4b19      	ldr	r3, [pc, #100]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052b8:	2203      	movs	r2, #3
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052be:	2200      	movs	r2, #0
 80052c0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80052c8:	4b14      	ldr	r3, [pc, #80]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052ca:	4a15      	ldr	r2, [pc, #84]	; (8005320 <BSP_SDRAM_MspInit+0x1ec>)
 80052cc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a12      	ldr	r2, [pc, #72]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80052da:	4810      	ldr	r0, [pc, #64]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052dc:	f7fb fef6 	bl	80010cc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80052e0:	480e      	ldr	r0, [pc, #56]	; (800531c <BSP_SDRAM_MspInit+0x1e8>)
 80052e2:	f7fb fe45 	bl	8000f70 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80052e6:	2200      	movs	r2, #0
 80052e8:	210f      	movs	r1, #15
 80052ea:	2038      	movs	r0, #56	; 0x38
 80052ec:	f7fb fd1f 	bl	8000d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80052f0:	2038      	movs	r0, #56	; 0x38
 80052f2:	f7fb fd38 	bl	8000d66 <HAL_NVIC_EnableIRQ>
}
 80052f6:	bf00      	nop
 80052f8:	3740      	adds	r7, #64	; 0x40
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800
 8005304:	40020800 	.word	0x40020800
 8005308:	40020c00 	.word	0x40020c00
 800530c:	40021000 	.word	0x40021000
 8005310:	40021400 	.word	0x40021400
 8005314:	40021800 	.word	0x40021800
 8005318:	40021c00 	.word	0x40021c00
 800531c:	200001bc 	.word	0x200001bc
 8005320:	40026410 	.word	0x40026410

08005324 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	460a      	mov	r2, r1
 800532e:	80fb      	strh	r3, [r7, #6]
 8005330:	4613      	mov	r3, r2
 8005332:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005338:	4a14      	ldr	r2, [pc, #80]	; (800538c <BSP_TS_Init+0x68>)
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800533e:	4a14      	ldr	r2, [pc, #80]	; (8005390 <BSP_TS_Init+0x6c>)
 8005340:	88bb      	ldrh	r3, [r7, #4]
 8005342:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005344:	4b13      	ldr	r3, [pc, #76]	; (8005394 <BSP_TS_Init+0x70>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2070      	movs	r0, #112	; 0x70
 800534a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800534c:	4b11      	ldr	r3, [pc, #68]	; (8005394 <BSP_TS_Init+0x70>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2070      	movs	r0, #112	; 0x70
 8005352:	4798      	blx	r3
 8005354:	4603      	mov	r3, r0
 8005356:	2b51      	cmp	r3, #81	; 0x51
 8005358:	d111      	bne.n	800537e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800535a:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <BSP_TS_Init+0x74>)
 800535c:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <BSP_TS_Init+0x70>)
 800535e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005360:	4b0e      	ldr	r3, [pc, #56]	; (800539c <BSP_TS_Init+0x78>)
 8005362:	2270      	movs	r2, #112	; 0x70
 8005364:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8005366:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <BSP_TS_Init+0x7c>)
 8005368:	2208      	movs	r2, #8
 800536a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <BSP_TS_Init+0x74>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4a0a      	ldr	r2, [pc, #40]	; (800539c <BSP_TS_Init+0x78>)
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	b292      	uxth	r2, r2
 8005378:	4610      	mov	r0, r2
 800537a:	4798      	blx	r3
 800537c:	e001      	b.n	8005382 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800537e:	2303      	movs	r3, #3
 8005380:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000220 	.word	0x20000220
 8005390:	20000222 	.word	0x20000222
 8005394:	20000014 	.word	0x20000014
 8005398:	2000021c 	.word	0x2000021c
 800539c:	20000225 	.word	0x20000225
 80053a0:	20000224 	.word	0x20000224

080053a4 <__libc_init_array>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	4d0d      	ldr	r5, [pc, #52]	; (80053dc <__libc_init_array+0x38>)
 80053a8:	4c0d      	ldr	r4, [pc, #52]	; (80053e0 <__libc_init_array+0x3c>)
 80053aa:	1b64      	subs	r4, r4, r5
 80053ac:	10a4      	asrs	r4, r4, #2
 80053ae:	2600      	movs	r6, #0
 80053b0:	42a6      	cmp	r6, r4
 80053b2:	d109      	bne.n	80053c8 <__libc_init_array+0x24>
 80053b4:	4d0b      	ldr	r5, [pc, #44]	; (80053e4 <__libc_init_array+0x40>)
 80053b6:	4c0c      	ldr	r4, [pc, #48]	; (80053e8 <__libc_init_array+0x44>)
 80053b8:	f000 f820 	bl	80053fc <_init>
 80053bc:	1b64      	subs	r4, r4, r5
 80053be:	10a4      	asrs	r4, r4, #2
 80053c0:	2600      	movs	r6, #0
 80053c2:	42a6      	cmp	r6, r4
 80053c4:	d105      	bne.n	80053d2 <__libc_init_array+0x2e>
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053cc:	4798      	blx	r3
 80053ce:	3601      	adds	r6, #1
 80053d0:	e7ee      	b.n	80053b0 <__libc_init_array+0xc>
 80053d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d6:	4798      	blx	r3
 80053d8:	3601      	adds	r6, #1
 80053da:	e7f2      	b.n	80053c2 <__libc_init_array+0x1e>
 80053dc:	0804f2ec 	.word	0x0804f2ec
 80053e0:	0804f2ec 	.word	0x0804f2ec
 80053e4:	0804f2ec 	.word	0x0804f2ec
 80053e8:	0804f2f0 	.word	0x0804f2f0

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <_init>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr

08005408 <_fini>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr
