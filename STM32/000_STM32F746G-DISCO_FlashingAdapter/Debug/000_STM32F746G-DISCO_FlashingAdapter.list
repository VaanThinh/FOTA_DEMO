
000_STM32F746G-DISCO_FlashingAdapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f70  08014c60  08014c60  00024c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017bd0  08017bd0  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  08017bd0  08017bd0  00027bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017bd8  08017bd8  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017bd8  08017bd8  00027bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017bdc  08017bdc  00027bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08017be0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e8c  200000e8  08017cc8  000300e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20009f74  08017cc8  00039f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c2a2  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000739c  00000000  00000000  0006c3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00073758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b60  00000000  00000000  00075398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000342ee  00000000  00000000  00076ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f7ae  00000000  00000000  000ab1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b2d2  00000000  00000000  000da994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e5c66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dc8  00000000  00000000  001e5cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014c48 	.word	0x08014c48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08014c48 	.word	0x08014c48

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SHA256Transform>:
	0x19a4c116,0x1e376c08,0x2748774c,0x34b0bcb5,0x391c0cb3,0x4ed8aa4a,0x5b9cca4f,0x682e6ff3,
	0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

static void SHA256Transform(SHA256_CTX *ctx, uchar data[])
{
 80005d8:	b480      	push	{r7}
 80005da:	b0cf      	sub	sp, #316	; 0x13c
 80005dc:	af00      	add	r7, sp, #0
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	6018      	str	r0, [r3, #0]
 80005e2:	463b      	mov	r3, r7
 80005e4:	6019      	str	r1, [r3, #0]
	uint a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80005f2:	e031      	b.n	8000658 <SHA256Transform+0x80>
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
 80005f4:	463b      	mov	r3, r7
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	061a      	lsls	r2, r3, #24
 8000602:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000606:	3301      	adds	r3, #1
 8000608:	4639      	mov	r1, r7
 800060a:	6809      	ldr	r1, [r1, #0]
 800060c:	440b      	add	r3, r1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	041b      	lsls	r3, r3, #16
 8000612:	431a      	orrs	r2, r3
 8000614:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000618:	3302      	adds	r3, #2
 800061a:	4639      	mov	r1, r7
 800061c:	6809      	ldr	r1, [r1, #0]
 800061e:	440b      	add	r3, r1
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	4313      	orrs	r3, r2
 8000626:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800062a:	3203      	adds	r2, #3
 800062c:	4639      	mov	r1, r7
 800062e:	6809      	ldr	r1, [r1, #0]
 8000630:	440a      	add	r2, r1
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	4313      	orrs	r3, r2
 8000636:	4619      	mov	r1, r3
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0, j = 0; i < 16; ++i, j += 4)
 8000644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000648:	3301      	adds	r3, #1
 800064a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800064e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000652:	3304      	adds	r3, #4
 8000654:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d9c9      	bls.n	80005f4 <SHA256Transform+0x1c>
	for (; i < 64; ++i)
 8000660:	e057      	b.n	8000712 <SHA256Transform+0x13a>
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];
 8000662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000666:	1e9a      	subs	r2, r3, #2
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000670:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000678:	1e99      	subs	r1, r3, #2
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000682:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000686:	405a      	eors	r2, r3
 8000688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800068c:	1e99      	subs	r1, r3, #2
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000696:	0a9b      	lsrs	r3, r3, #10
 8000698:	405a      	eors	r2, r3
 800069a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800069e:	1fd9      	subs	r1, r3, #7
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006a8:	441a      	add	r2, r3
 80006aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006ae:	f1a3 010f 	sub.w	r1, r3, #15
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006ba:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80006be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006c2:	f1a3 000f 	sub.w	r0, r3, #15
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006ce:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80006d2:	4059      	eors	r1, r3
 80006d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006d8:	f1a3 000f 	sub.w	r0, r3, #15
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	404b      	eors	r3, r1
 80006e8:	441a      	add	r2, r3
 80006ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80006ee:	f1a3 0110 	sub.w	r1, r3, #16
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006fa:	18d1      	adds	r1, r2, r3
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i < 64; ++i)
 8000708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800070c:	3301      	adds	r3, #1
 800070e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000716:	2b3f      	cmp	r3, #63	; 0x3f
 8000718:	d9a3      	bls.n	8000662 <SHA256Transform+0x8a>

	a = ctx->state[0];
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000720:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	b = ctx->state[1];
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800072a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	c = ctx->state[2];
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000734:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	d = ctx->state[3];
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	e = ctx->state[4];
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	f = ctx->state[5];
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000752:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	g = ctx->state[6];
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800075c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	h = ctx->state[7];
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000766:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	for (i = 0; i < 64; ++i) {
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000770:	e076      	b.n	8000860 <SHA256Transform+0x288>
		t1 = h + EP1(e) + CH(e, f, g) + k[i] + m[i];
 8000772:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000776:	ea4f 12b3 	mov.w	r2, r3, ror #6
 800077a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800077e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000782:	405a      	eors	r2, r3
 8000784:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000788:	ea4f 6373 	mov.w	r3, r3, ror #25
 800078c:	405a      	eors	r2, r3
 800078e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000792:	441a      	add	r2, r3
 8000794:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000798:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800079c:	4019      	ands	r1, r3
 800079e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007a2:	43d8      	mvns	r0, r3
 80007a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80007a8:	4003      	ands	r3, r0
 80007aa:	404b      	eors	r3, r1
 80007ac:	441a      	add	r2, r3
 80007ae:	4956      	ldr	r1, [pc, #344]	; (8000908 <SHA256Transform+0x330>)
 80007b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007b8:	441a      	add	r2, r3
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80007c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007c6:	4413      	add	r3, r2
 80007c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		t2 = EP0(a) + MAJ(a, b, c);
 80007cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007d0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80007d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007d8:	ea4f 3373 	mov.w	r3, r3, ror #13
 80007dc:	405a      	eors	r2, r3
 80007de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007e2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80007e6:	405a      	eors	r2, r3
 80007e8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80007ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80007f0:	4059      	eors	r1, r3
 80007f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80007f6:	4019      	ands	r1, r3
 80007f8:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80007fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000800:	4003      	ands	r3, r0
 8000802:	404b      	eors	r3, r1
 8000804:	4413      	add	r3, r2
 8000806:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		h = g;
 800080a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800080e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		g = f;
 8000812:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000816:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		f = e;
 800081a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800081e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		e = d + t1;
 8000822:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800082a:	4413      	add	r3, r2
 800082c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		d = c;
 8000830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000834:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		c = b;
 8000838:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800083c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		b = a;
 8000840:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000844:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		a = t1 + t2;
 8000848:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800084c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000850:	4413      	add	r3, r2
 8000852:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	for (i = 0; i < 64; ++i) {
 8000856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800085a:	3301      	adds	r3, #1
 800085c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000864:	2b3f      	cmp	r3, #63	; 0x3f
 8000866:	d984      	bls.n	8000772 <SHA256Transform+0x19a>
	}

	ctx->state[0] += a;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800086e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000872:	441a      	add	r2, r3
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	64da      	str	r2, [r3, #76]	; 0x4c
	ctx->state[1] += b;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000880:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000884:	441a      	add	r2, r3
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	651a      	str	r2, [r3, #80]	; 0x50
	ctx->state[2] += c;
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000896:	441a      	add	r2, r3
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	655a      	str	r2, [r3, #84]	; 0x54
	ctx->state[3] += d;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80008a8:	441a      	add	r2, r3
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	659a      	str	r2, [r3, #88]	; 0x58
	ctx->state[4] += e;
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80008ba:	441a      	add	r2, r3
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	65da      	str	r2, [r3, #92]	; 0x5c
	ctx->state[5] += f;
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80008cc:	441a      	add	r2, r3
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	661a      	str	r2, [r3, #96]	; 0x60
	ctx->state[6] += g;
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80008da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80008de:	441a      	add	r2, r3
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	665a      	str	r2, [r3, #100]	; 0x64
	ctx->state[7] += h;
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80008ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80008f0:	441a      	add	r2, r3
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80008f8:	bf00      	nop
 80008fa:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	08017890 	.word	0x08017890

0800090c <SHA256Init>:

static void SHA256Init(SHA256_CTX *ctx)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	ctx->datalen = 0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	641a      	str	r2, [r3, #64]	; 0x40
	ctx->bitlen[0] = 0;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	645a      	str	r2, [r3, #68]	; 0x44
	ctx->bitlen[1] = 0;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	649a      	str	r2, [r3, #72]	; 0x48
	ctx->state[0] = 0x6a09e667;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <SHA256Init+0x58>)
 800092a:	64da      	str	r2, [r3, #76]	; 0x4c
	ctx->state[1] = 0xbb67ae85;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <SHA256Init+0x5c>)
 8000930:	651a      	str	r2, [r3, #80]	; 0x50
	ctx->state[2] = 0x3c6ef372;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <SHA256Init+0x60>)
 8000936:	655a      	str	r2, [r3, #84]	; 0x54
	ctx->state[3] = 0xa54ff53a;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <SHA256Init+0x64>)
 800093c:	659a      	str	r2, [r3, #88]	; 0x58
	ctx->state[4] = 0x510e527f;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <SHA256Init+0x68>)
 8000942:	65da      	str	r2, [r3, #92]	; 0x5c
	ctx->state[5] = 0x9b05688c;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <SHA256Init+0x6c>)
 8000948:	661a      	str	r2, [r3, #96]	; 0x60
	ctx->state[6] = 0x1f83d9ab;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <SHA256Init+0x70>)
 800094e:	665a      	str	r2, [r3, #100]	; 0x64
	ctx->state[7] = 0x5be0cd19;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <SHA256Init+0x74>)
 8000954:	669a      	str	r2, [r3, #104]	; 0x68
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	6a09e667 	.word	0x6a09e667
 8000968:	bb67ae85 	.word	0xbb67ae85
 800096c:	3c6ef372 	.word	0x3c6ef372
 8000970:	a54ff53a 	.word	0xa54ff53a
 8000974:	510e527f 	.word	0x510e527f
 8000978:	9b05688c 	.word	0x9b05688c
 800097c:	1f83d9ab 	.word	0x1f83d9ab
 8000980:	5be0cd19 	.word	0x5be0cd19

08000984 <SHA256Update>:

static void SHA256Update(SHA256_CTX *ctx, uchar data[], uint len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	uint i = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; ++i) {
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	e02b      	b.n	80009f2 <SHA256Update+0x6e>
		ctx->data[ctx->datalen] = data[i];
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	441a      	add	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	7811      	ldrb	r1, [r2, #0]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	54d1      	strb	r1, [r2, r3]
		ctx->datalen++;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	641a      	str	r2, [r3, #64]	; 0x40
		if (ctx->datalen == 64) {
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	2b40      	cmp	r3, #64	; 0x40
 80009ba:	d117      	bne.n	80009ec <SHA256Update+0x68>
			SHA256Transform(ctx, ctx->data);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4619      	mov	r1, r3
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff fe09 	bl	80005d8 <SHA256Transform>
			DBL_INT_ADD(ctx->bitlen[0], ctx->bitlen[1], 512);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f513 7f00 	cmn.w	r3, #512	; 0x200
 80009ce:	d304      	bcc.n	80009da <SHA256Update+0x56>
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	649a      	str	r2, [r3, #72]	; 0x48
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	645a      	str	r2, [r3, #68]	; 0x44
			ctx->datalen = 0;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2200      	movs	r2, #0
 80009ea:	641a      	str	r2, [r3, #64]	; 0x40
	for (i = 0; i < len; ++i) {
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3301      	adds	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d3cf      	bcc.n	800099a <SHA256Update+0x16>
		}
	}
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SHA256Final>:

static void SHA256Final(SHA256_CTX *ctx, uchar hash[])
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
	uint i = ctx->datalen;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	60fb      	str	r3, [r7, #12]

	if (ctx->datalen < 56) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	2b37      	cmp	r3, #55	; 0x37
 8000a1a:	d810      	bhi.n	8000a3e <SHA256Final+0x3a>
		ctx->data[i++] = 0x80;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	1c5a      	adds	r2, r3, #1
 8000a20:	60fa      	str	r2, [r7, #12]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	54d1      	strb	r1, [r2, r3]
		while (i < 56)
 8000a28:	e005      	b.n	8000a36 <SHA256Final+0x32>
			ctx->data[i++] = 0x00;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	60fa      	str	r2, [r7, #12]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	2100      	movs	r1, #0
 8000a34:	54d1      	strb	r1, [r2, r3]
		while (i < 56)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2b37      	cmp	r3, #55	; 0x37
 8000a3a:	d9f6      	bls.n	8000a2a <SHA256Final+0x26>
 8000a3c:	e01a      	b.n	8000a74 <SHA256Final+0x70>
	}
	else {
		ctx->data[i++] = 0x80;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	60fa      	str	r2, [r7, #12]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	54d1      	strb	r1, [r2, r3]
		while (i < 64)
 8000a4a:	e005      	b.n	8000a58 <SHA256Final+0x54>
			ctx->data[i++] = 0x00;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60fa      	str	r2, [r7, #12]
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	2100      	movs	r1, #0
 8000a56:	54d1      	strb	r1, [r2, r3]
		while (i < 64)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a5c:	d9f6      	bls.n	8000a4c <SHA256Final+0x48>
		SHA256Transform(ctx, ctx->data);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4619      	mov	r1, r3
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fdb8 	bl	80005d8 <SHA256Transform>
		memset(ctx->data, 0, 56);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2238      	movs	r2, #56	; 0x38
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f012 ff02 	bl	8013878 <memset>
	}

	DBL_INT_ADD(ctx->bitlen[0], ctx->bitlen[1], ctx->datalen * 8);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d904      	bls.n	8000a8e <SHA256Final+0x8a>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	649a      	str	r2, [r3, #72]	; 0x48
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	645a      	str	r2, [r3, #68]	; 0x44
	ctx->data[63] = ctx->bitlen[0];
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ctx->data[62] = ctx->bitlen[0] >> 8;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ctx->data[61] = ctx->bitlen[0] >> 16;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abc:	0c1b      	lsrs	r3, r3, #16
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	ctx->data[60] = ctx->bitlen[0] >> 24;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	0e1b      	lsrs	r3, r3, #24
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	ctx->data[59] = ctx->bitlen[1];
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	ctx->data[58] = ctx->bitlen[1] >> 8;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	ctx->data[57] = ctx->bitlen[1] >> 16;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af2:	0c1b      	lsrs	r3, r3, #16
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	ctx->data[56] = ctx->bitlen[1] >> 24;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b00:	0e1b      	lsrs	r3, r3, #24
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	SHA256Transform(ctx, ctx->data);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff fd62 	bl	80005d8 <SHA256Transform>

	for (i = 0; i < 4; ++i) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e071      	b.n	8000bfe <SHA256Final+0x1fa>
		hash[i] = (ctx->state[0] >> (24 - i * 8)) & 0x000000ff;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f1c3 0303 	rsb	r3, r3, #3
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	fa22 f103 	lsr.w	r1, r2, r3
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	b2ca      	uxtb	r2, r1
 8000b32:	701a      	strb	r2, [r3, #0]
		hash[i + 4] = (ctx->state[1] >> (24 - i * 8)) & 0x000000ff;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f1c3 0303 	rsb	r3, r3, #3
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	fa22 f103 	lsr.w	r1, r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3304      	adds	r3, #4
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b2ca      	uxtb	r2, r1
 8000b4e:	701a      	strb	r2, [r3, #0]
		hash[i + 8] = (ctx->state[2] >> (24 - i * 8)) & 0x000000ff;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f1c3 0303 	rsb	r3, r3, #3
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	fa22 f103 	lsr.w	r1, r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3308      	adds	r3, #8
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	b2ca      	uxtb	r2, r1
 8000b6a:	701a      	strb	r2, [r3, #0]
		hash[i + 12] = (ctx->state[3] >> (24 - i * 8)) & 0x000000ff;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f1c3 0303 	rsb	r3, r3, #3
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	fa22 f103 	lsr.w	r1, r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	330c      	adds	r3, #12
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	b2ca      	uxtb	r2, r1
 8000b86:	701a      	strb	r2, [r3, #0]
		hash[i + 16] = (ctx->state[4] >> (24 - i * 8)) & 0x000000ff;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f1c3 0303 	rsb	r3, r3, #3
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	fa22 f103 	lsr.w	r1, r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3310      	adds	r3, #16
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2ca      	uxtb	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
		hash[i + 20] = (ctx->state[5] >> (24 - i * 8)) & 0x000000ff;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f1c3 0303 	rsb	r3, r3, #3
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	fa22 f103 	lsr.w	r1, r2, r3
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3314      	adds	r3, #20
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2ca      	uxtb	r2, r1
 8000bbe:	701a      	strb	r2, [r3, #0]
		hash[i + 24] = (ctx->state[6] >> (24 - i * 8)) & 0x000000ff;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f1c3 0303 	rsb	r3, r3, #3
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	fa22 f103 	lsr.w	r1, r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3318      	adds	r3, #24
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b2ca      	uxtb	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
		hash[i + 28] = (ctx->state[7] >> (24 - i * 8)) & 0x000000ff;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f1c3 0303 	rsb	r3, r3, #3
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	fa22 f103 	lsr.w	r1, r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	331c      	adds	r3, #28
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	b2ca      	uxtb	r2, r1
 8000bf6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 4; ++i) {
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d98a      	bls.n	8000b1a <SHA256Final+0x116>
	}
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <SHA256>:

void SHA256(char* data, int length_data, unsigned char *key_hex)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b0aa      	sub	sp, #168	; 0xa8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
	int i;
	int strLen = length_data;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	SHA256_CTX ctx;
	unsigned char hash[34];

	SHA256Init(&ctx);
 8000c20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fe71 	bl	800090c <SHA256Init>
	SHA256Update(&ctx, data, strLen);
 8000c2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c32:	68f9      	ldr	r1, [r7, #12]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fea5 	bl	8000984 <SHA256Update>
	SHA256Final(&ctx, hash);
 8000c3a:	f107 0210 	add.w	r2, r7, #16
 8000c3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fedd 	bl	8000a04 <SHA256Final>

	for (i = 0; i < 32; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000c50:	e00f      	b.n	8000c72 <SHA256+0x64>
		key_hex[i] = hash[i];
 8000c52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	f107 0110 	add.w	r1, r7, #16
 8000c5e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000c62:	440a      	add	r2, r1
 8000c64:	7812      	ldrb	r2, [r2, #0]
 8000c66:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 32; i++) {
 8000c68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c76:	2b1f      	cmp	r3, #31
 8000c78:	ddeb      	ble.n	8000c52 <SHA256+0x44>
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	37a8      	adds	r7, #168	; 0xa8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <Cal_Key>:

void Cal_Key(Seed_Key info_seed, unsigned char *key)
{
 8000c84:	b084      	sub	sp, #16
 8000c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c88:	b0a3      	sub	sp, #140	; 0x8c
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned int i;
	char ipad[64] = {0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36};
 8000c94:	4b89      	ldr	r3, [pc, #548]	; (8000ebc <Cal_Key+0x238>)
 8000c96:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000c9a:	461d      	mov	r5, r3
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char opad[64] = {0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C,0x5C};
 8000cb0:	4b83      	ldr	r3, [pc, #524]	; (8000ec0 <Cal_Key+0x23c>)
 8000cb2:	1d3c      	adds	r4, r7, #4
 8000cb4:	461d      	mov	r5, r3
 8000cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(step_1, info_seed.secret_key, info_seed.secret_key_length);
 8000cca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000cd4:	487b      	ldr	r0, [pc, #492]	; (8000ec4 <Cal_Key+0x240>)
 8000cd6:	f012 fda7 	bl	8013828 <memcpy>
	for (i = 0; i < sizeof(step_1); i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000ce0:	e017      	b.n	8000d12 <Cal_Key+0x8e>
	{
			step_1[i] = step_1[i] ^ ipad[i];
 8000ce2:	4a78      	ldr	r2, [pc, #480]	; (8000ec4 <Cal_Key+0x240>)
 8000ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ce8:	4413      	add	r3, r2
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cf4:	440b      	add	r3, r1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4053      	eors	r3, r2
 8000cfa:	b2d9      	uxtb	r1, r3
 8000cfc:	4a71      	ldr	r2, [pc, #452]	; (8000ec4 <Cal_Key+0x240>)
 8000cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d02:	4413      	add	r3, r2
 8000d04:	460a      	mov	r2, r1
 8000d06:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(step_1); i++)
 8000d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d16:	2b3f      	cmp	r3, #63	; 0x3f
 8000d18:	d9e3      	bls.n	8000ce2 <Cal_Key+0x5e>
	}
	memcpy(step_2,step_1,sizeof(step_1));
 8000d1a:	4a6b      	ldr	r2, [pc, #428]	; (8000ec8 <Cal_Key+0x244>)
 8000d1c:	4b69      	ldr	r3, [pc, #420]	; (8000ec4 <Cal_Key+0x240>)
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000d24:	4602      	mov	r2, r0
 8000d26:	4619      	mov	r1, r3
 8000d28:	f8d1 c000 	ldr.w	ip, [r1]
 8000d2c:	684e      	ldr	r6, [r1, #4]
 8000d2e:	688d      	ldr	r5, [r1, #8]
 8000d30:	68c9      	ldr	r1, [r1, #12]
 8000d32:	f8c2 c000 	str.w	ip, [r2]
 8000d36:	6056      	str	r6, [r2, #4]
 8000d38:	6095      	str	r5, [r2, #8]
 8000d3a:	60d1      	str	r1, [r2, #12]
 8000d3c:	3310      	adds	r3, #16
 8000d3e:	3010      	adds	r0, #16
 8000d40:	42a3      	cmp	r3, r4
 8000d42:	d1ef      	bne.n	8000d24 <Cal_Key+0xa0>
	memcpy(&step_2[sizeof(step_1)], info_seed.seed, info_seed.seed_length);
 8000d44:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000d48:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	485f      	ldr	r0, [pc, #380]	; (8000ecc <Cal_Key+0x248>)
 8000d50:	f012 fd6a 	bl	8013828 <memcpy>
	SHA256(step_2, (64 + info_seed.seed_length), step_3);
 8000d54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d58:	3340      	adds	r3, #64	; 0x40
 8000d5a:	4a5d      	ldr	r2, [pc, #372]	; (8000ed0 <Cal_Key+0x24c>)
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	485a      	ldr	r0, [pc, #360]	; (8000ec8 <Cal_Key+0x244>)
 8000d60:	f7ff ff55 	bl	8000c0e <SHA256>
	memcpy(step_4, info_seed.secret_key, info_seed.secret_key_length);
 8000d64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d68:	461a      	mov	r2, r3
 8000d6a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000d6e:	4859      	ldr	r0, [pc, #356]	; (8000ed4 <Cal_Key+0x250>)
 8000d70:	f012 fd5a 	bl	8013828 <memcpy>
	for (i = 0; i < sizeof(step_4); i++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d7a:	e016      	b.n	8000daa <Cal_Key+0x126>
	{
			step_4[i] = step_4[i] ^ opad[i];
 8000d7c:	4a55      	ldr	r2, [pc, #340]	; (8000ed4 <Cal_Key+0x250>)
 8000d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d82:	4413      	add	r3, r2
 8000d84:	781a      	ldrb	r2, [r3, #0]
 8000d86:	1d39      	adds	r1, r7, #4
 8000d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d8c:	440b      	add	r3, r1
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4053      	eors	r3, r2
 8000d92:	b2d9      	uxtb	r1, r3
 8000d94:	4a4f      	ldr	r2, [pc, #316]	; (8000ed4 <Cal_Key+0x250>)
 8000d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d9a:	4413      	add	r3, r2
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(step_4); i++)
 8000da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000da4:	3301      	adds	r3, #1
 8000da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000dae:	2b3f      	cmp	r3, #63	; 0x3f
 8000db0:	d9e4      	bls.n	8000d7c <Cal_Key+0xf8>
	}
	memcpy(step_5,step_4,sizeof(step_4));
 8000db2:	4a49      	ldr	r2, [pc, #292]	; (8000ed8 <Cal_Key+0x254>)
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <Cal_Key+0x250>)
 8000db6:	4610      	mov	r0, r2
 8000db8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f8d1 c000 	ldr.w	ip, [r1]
 8000dc4:	684e      	ldr	r6, [r1, #4]
 8000dc6:	688d      	ldr	r5, [r1, #8]
 8000dc8:	68c9      	ldr	r1, [r1, #12]
 8000dca:	f8c2 c000 	str.w	ip, [r2]
 8000dce:	6056      	str	r6, [r2, #4]
 8000dd0:	6095      	str	r5, [r2, #8]
 8000dd2:	60d1      	str	r1, [r2, #12]
 8000dd4:	3310      	adds	r3, #16
 8000dd6:	3010      	adds	r0, #16
 8000dd8:	42a3      	cmp	r3, r4
 8000dda:	d1ef      	bne.n	8000dbc <Cal_Key+0x138>
	memcpy(&step_5[64],step_3,sizeof(step_3));
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <Cal_Key+0x254>)
 8000dde:	4a3c      	ldr	r2, [pc, #240]	; (8000ed0 <Cal_Key+0x24c>)
 8000de0:	3340      	adds	r3, #64	; 0x40
 8000de2:	6815      	ldr	r5, [r2, #0]
 8000de4:	6854      	ldr	r4, [r2, #4]
 8000de6:	6890      	ldr	r0, [r2, #8]
 8000de8:	68d1      	ldr	r1, [r2, #12]
 8000dea:	601d      	str	r5, [r3, #0]
 8000dec:	605c      	str	r4, [r3, #4]
 8000dee:	6098      	str	r0, [r3, #8]
 8000df0:	60d9      	str	r1, [r3, #12]
 8000df2:	6915      	ldr	r5, [r2, #16]
 8000df4:	6954      	ldr	r4, [r2, #20]
 8000df6:	6990      	ldr	r0, [r2, #24]
 8000df8:	69d1      	ldr	r1, [r2, #28]
 8000dfa:	611d      	str	r5, [r3, #16]
 8000dfc:	615c      	str	r4, [r3, #20]
 8000dfe:	6198      	str	r0, [r3, #24]
 8000e00:	61d9      	str	r1, [r3, #28]
	SHA256(step_5, sizeof(step_5), step_6);
 8000e02:	4a36      	ldr	r2, [pc, #216]	; (8000edc <Cal_Key+0x258>)
 8000e04:	2160      	movs	r1, #96	; 0x60
 8000e06:	4834      	ldr	r0, [pc, #208]	; (8000ed8 <Cal_Key+0x254>)
 8000e08:	f7ff ff01 	bl	8000c0e <SHA256>
	memcpy(key, step_6, 32);
 8000e0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000e10:	4a32      	ldr	r2, [pc, #200]	; (8000edc <Cal_Key+0x258>)
 8000e12:	6815      	ldr	r5, [r2, #0]
 8000e14:	6854      	ldr	r4, [r2, #4]
 8000e16:	6890      	ldr	r0, [r2, #8]
 8000e18:	68d1      	ldr	r1, [r2, #12]
 8000e1a:	601d      	str	r5, [r3, #0]
 8000e1c:	605c      	str	r4, [r3, #4]
 8000e1e:	6098      	str	r0, [r3, #8]
 8000e20:	60d9      	str	r1, [r3, #12]
 8000e22:	6915      	ldr	r5, [r2, #16]
 8000e24:	6954      	ldr	r4, [r2, #20]
 8000e26:	6990      	ldr	r0, [r2, #24]
 8000e28:	69d1      	ldr	r1, [r2, #28]
 8000e2a:	611d      	str	r5, [r3, #16]
 8000e2c:	615c      	str	r4, [r3, #20]
 8000e2e:	6198      	str	r0, [r3, #24]
 8000e30:	61d9      	str	r1, [r3, #28]
	memcpy(step_1, clear, 64);
 8000e32:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <Cal_Key+0x240>)
 8000e34:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <Cal_Key+0x25c>)
 8000e36:	4610      	mov	r0, r2
 8000e38:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f8d1 c000 	ldr.w	ip, [r1]
 8000e44:	684e      	ldr	r6, [r1, #4]
 8000e46:	688d      	ldr	r5, [r1, #8]
 8000e48:	68c9      	ldr	r1, [r1, #12]
 8000e4a:	f8c2 c000 	str.w	ip, [r2]
 8000e4e:	6056      	str	r6, [r2, #4]
 8000e50:	6095      	str	r5, [r2, #8]
 8000e52:	60d1      	str	r1, [r2, #12]
 8000e54:	3310      	adds	r3, #16
 8000e56:	3010      	adds	r0, #16
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d1ef      	bne.n	8000e3c <Cal_Key+0x1b8>
	memcpy(step_2, clear, 128);
 8000e5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ec8 <Cal_Key+0x244>)
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <Cal_Key+0x25c>)
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	461a      	mov	r2, r3
 8000e68:	f012 fcde 	bl	8013828 <memcpy>
	memcpy(step_3, clear, 32);
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <Cal_Key+0x24c>)
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <Cal_Key+0x25c>)
 8000e70:	6815      	ldr	r5, [r2, #0]
 8000e72:	6854      	ldr	r4, [r2, #4]
 8000e74:	6890      	ldr	r0, [r2, #8]
 8000e76:	68d1      	ldr	r1, [r2, #12]
 8000e78:	601d      	str	r5, [r3, #0]
 8000e7a:	605c      	str	r4, [r3, #4]
 8000e7c:	6098      	str	r0, [r3, #8]
 8000e7e:	60d9      	str	r1, [r3, #12]
 8000e80:	6915      	ldr	r5, [r2, #16]
 8000e82:	6954      	ldr	r4, [r2, #20]
 8000e84:	6990      	ldr	r0, [r2, #24]
 8000e86:	69d1      	ldr	r1, [r2, #28]
 8000e88:	611d      	str	r5, [r3, #16]
 8000e8a:	615c      	str	r4, [r3, #20]
 8000e8c:	6198      	str	r0, [r3, #24]
 8000e8e:	61d9      	str	r1, [r3, #28]
	memcpy(step_4, clear, 96);
 8000e90:	2260      	movs	r2, #96	; 0x60
 8000e92:	4913      	ldr	r1, [pc, #76]	; (8000ee0 <Cal_Key+0x25c>)
 8000e94:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <Cal_Key+0x250>)
 8000e96:	f012 fcc7 	bl	8013828 <memcpy>
	memcpy(step_5, clear, 32);
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	4910      	ldr	r1, [pc, #64]	; (8000ee0 <Cal_Key+0x25c>)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <Cal_Key+0x254>)
 8000ea0:	f012 fcc2 	bl	8013828 <memcpy>
	memcpy(step_6, clear, 128);
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <Cal_Key+0x25c>)
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <Cal_Key+0x258>)
 8000eaa:	f012 fcbd 	bl	8013828 <memcpy>
}
 8000eae:	bf00      	nop
 8000eb0:	378c      	adds	r7, #140	; 0x8c
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000eb8:	b004      	add	sp, #16
 8000eba:	4770      	bx	lr
 8000ebc:	08014c60 	.word	0x08014c60
 8000ec0:	08014ca0 	.word	0x08014ca0
 8000ec4:	200002cc 	.word	0x200002cc
 8000ec8:	2000030c 	.word	0x2000030c
 8000ecc:	2000034c 	.word	0x2000034c
 8000ed0:	200003cc 	.word	0x200003cc
 8000ed4:	2000038c 	.word	0x2000038c
 8000ed8:	2000048c 	.word	0x2000048c
 8000edc:	200003ec 	.word	0x200003ec
 8000ee0:	2000040c 	.word	0x2000040c

08000ee4 <HAL_CAN_MspInit>:
  /* USER CODE END CAN1_Init 2 */

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <HAL_CAN_MspInit+0xac>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d140      	bne.n	8000f88 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_CAN_MspInit+0xb0>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_CAN_MspInit+0xb0>)
 8000f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_CAN_MspInit+0xb0>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_CAN_MspInit+0xb0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a1c      	ldr	r2, [pc, #112]	; (8000f94 <HAL_CAN_MspInit+0xb0>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_CAN_MspInit+0xb0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f48:	2309      	movs	r3, #9
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <HAL_CAN_MspInit+0xb4>)
 8000f54:	f004 ffb4 	bl	8005ec0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2013      	movs	r0, #19
 8000f5e:	f003 fd7e 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f62:	2013      	movs	r0, #19
 8000f64:	f003 fd97 	bl	8004a96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2014      	movs	r0, #20
 8000f6e:	f003 fd76 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f72:	2014      	movs	r0, #20
 8000f74:	f003 fd8f 	bl	8004a96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2015      	movs	r0, #21
 8000f7e:	f003 fd6e 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f82:	2015      	movs	r0, #21
 8000f84:	f003 fd87 	bl	8004a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40006400 	.word	0x40006400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400

08000f9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	623b      	str	r3, [r7, #32]
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fca:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a34      	ldr	r2, [pc, #208]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a2e      	ldr	r2, [pc, #184]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_GPIO_Init+0x104>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_GPIO_Init+0x104>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_GPIO_Init+0x104>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a10      	ldr	r2, [pc, #64]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_GPIO_Init+0x104>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2102      	movs	r1, #2
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <MX_GPIO_Init+0x108>)
 8001078:	f005 f9da 	bl	8006430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800107c:	2302      	movs	r3, #2
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_GPIO_Init+0x108>)
 8001094:	f004 ff14 	bl	8005ec0 <HAL_GPIO_Init>

}
 8001098:	bf00      	nop
 800109a:	3738      	adds	r7, #56	; 0x38
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40022000 	.word	0x40022000

080010a8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ac:	f3bf 8f4f 	dsb	sy
}
 80010b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010b2:	f3bf 8f6f 	isb	sy
}
 80010b6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <SCB_EnableICache+0x48>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010c0:	f3bf 8f4f 	dsb	sy
}
 80010c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010c6:	f3bf 8f6f 	isb	sy
}
 80010ca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <SCB_EnableICache+0x48>)
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <SCB_EnableICache+0x48>)
 80010d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010d8:	f3bf 8f4f 	dsb	sy
}
 80010dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010de:	f3bf 8f6f 	isb	sy
}
 80010e2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <SCB_EnableDCache+0x84>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001102:	f3bf 8f4f 	dsb	sy
}
 8001106:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <SCB_EnableDCache+0x84>)
 800110a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800110e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0b5b      	lsrs	r3, r3, #13
 8001114:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001118:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001122:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	015a      	lsls	r2, r3, #5
 8001128:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800112c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001132:	4911      	ldr	r1, [pc, #68]	; (8001178 <SCB_EnableDCache+0x84>)
 8001134:	4313      	orrs	r3, r2
 8001136:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1e5a      	subs	r2, r3, #1
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1ef      	bne.n	8001124 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	1e5a      	subs	r2, r3, #1
 8001148:	60fa      	str	r2, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1e5      	bne.n	800111a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800114e:	f3bf 8f4f 	dsb	sy
}
 8001152:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <SCB_EnableDCache+0x84>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <SCB_EnableDCache+0x84>)
 800115a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001160:	f3bf 8f4f 	dsb	sy
}
 8001164:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001166:	f3bf 8f6f 	isb	sy
}
 800116a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001182:	f7ff ff91 	bl	80010a8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001186:	f7ff ffb5 	bl	80010f4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f002 fca1 	bl	8003ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 f84d 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001192:	f7ff ff03 	bl	8000f9c <MX_GPIO_Init>
  MX_LWIP_Init();
 8001196:	f006 ff55 	bl	8008044 <MX_LWIP_Init>
  MX_TIM2_Init();
 800119a:	f002 fbfd 	bl	8003998 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 800119e:	f001 f82d 	bl	80021fc <MX_QUADSPI_Init>
  rb_CAN1_Init();
 80011a2:	f001 fbd1 	bl	8002948 <rb_CAN1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);

  /* Initialize the QSPI */
  if (CSP_QUADSPI_Init() != HAL_OK)
 80011a6:	f001 f90f 	bl	80023c8 <CSP_QUADSPI_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <main+0x38>
  {
    Error_Handler();
 80011b0:	f001 f81e 	bl	80021f0 <Error_Handler>
  }

  // Initialize the TCP
//  tcp_client_init();
  tcp_server_init();
 80011b4:	f001 fe3c 	bl	8002e30 <tcp_server_init>
  // Initialize the TFTP server
  tftpd_init();
 80011b8:	f002 fb18 	bl	80037ec <tftpd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Msg_Info Rx_1 = {0x761, CAN_ID_STD, 8};
 80011bc:	4a17      	ldr	r2, [pc, #92]	; (800121c <main+0xa0>)
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c6:	e883 0003 	stmia.w	r3, {r0, r1}
  Msg_Info Rx_2 = {0x03, CAN_ID_STD, 8};
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <main+0xa4>)
 80011cc:	463b      	mov	r3, r7
 80011ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d2:	e883 0003 	stmia.w	r3, {r0, r1}
  rb_CAN1_Filter_Config(Rx_1, 1, 0);
 80011d6:	2300      	movs	r3, #0
 80011d8:	2201      	movs	r2, #1
 80011da:	f107 0108 	add.w	r1, r7, #8
 80011de:	c903      	ldmia	r1, {r0, r1}
 80011e0:	f001 fc5c 	bl	8002a9c <rb_CAN1_Filter_Config>
  rb_CAN1_Filter_Config(Rx_2, 2, 0);
 80011e4:	2300      	movs	r3, #0
 80011e6:	2202      	movs	r2, #2
 80011e8:	4639      	mov	r1, r7
 80011ea:	c903      	ldmia	r1, {r0, r1}
 80011ec:	f001 fc56 	bl	8002a9c <rb_CAN1_Filter_Config>
  rb_CAN1_Start();
 80011f0:	f001 fca2 	bl	8002b38 <rb_CAN1_Start>
  rb_CAN1_IRQ_Config(CAN_IT_RX_FIFO0_MSG_PENDING);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f001 fc3d 	bl	8002a74 <rb_CAN1_IRQ_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    ethernetif_input(&gnetif);
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <main+0xa8>)
 80011fc:	f007 faf6 	bl	80087ec <ethernetif_input>
    sys_check_timeouts();
 8001200:	f00f fb0c 	bl	801081c <sys_check_timeouts>
    rb_resetUDPPCB();
 8001204:	f002 fb1e 	bl	8003844 <rb_resetUDPPCB>
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    if(isTFTPTransferCompleted == 1)
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <main+0xac>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d1f4      	bne.n	80011fa <main+0x7e>
    {
      isTFTPTransferCompleted = 0;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <main+0xac>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
      //HAL_Delay(100);
      Sequence_UDS_request();
 8001216:	f000 f8ad 	bl	8001374 <Sequence_UDS_request>
    ethernetif_input(&gnetif);
 800121a:	e7ee      	b.n	80011fa <main+0x7e>
 800121c:	08014ce0 	.word	0x08014ce0
 8001220:	08014ce8 	.word	0x08014ce8
 8001224:	200005a4 	.word	0x200005a4
 8001228:	20000150 	.word	0x20000150

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b094      	sub	sp, #80	; 0x50
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	2230      	movs	r2, #48	; 0x30
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f012 fb1c 	bl	8013878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <SystemClock_Config+0xd4>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a2a      	ldr	r2, [pc, #168]	; (8001300 <SystemClock_Config+0xd4>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <SystemClock_Config+0xd4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <SystemClock_Config+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a25      	ldr	r2, [pc, #148]	; (8001304 <SystemClock_Config+0xd8>)
 800126e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <SystemClock_Config+0xd8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001280:	2301      	movs	r3, #1
 8001282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128a:	2302      	movs	r3, #2
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001294:	2319      	movs	r3, #25
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001298:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800129c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a6:	f107 0320 	add.w	r3, r7, #32
 80012aa:	4618      	mov	r0, r3
 80012ac:	f005 fe2a 	bl	8006f04 <HAL_RCC_OscConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012b6:	f000 ff9b 	bl	80021f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012ba:	f005 f8ed 	bl	8006498 <HAL_PWREx_EnableOverDrive>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012c4:	f000 ff94 	bl	80021f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2107      	movs	r1, #7
 80012e6:	4618      	mov	r0, r3
 80012e8:	f006 f8b0 	bl	800744c <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012f2:	f000 ff7d 	bl	80021f0 <Error_Handler>
  }
}
 80012f6:	bf00      	nop
 80012f8:	3750      	adds	r7, #80	; 0x50
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000

08001308 <CAN1_RxCallBack>:

/* USER CODE BEGIN 4 */
void CAN1_RxCallBack(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	Msg_Info message_rx;
	rb_CAN1_Receive(&message_rx, 0, Rx_Buffer);
 800130e:	463b      	mov	r3, r7
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <CAN1_RxCallBack+0x5c>)
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f001 fb59 	bl	80029cc <rb_CAN1_Receive>
	Manage_Data[1]++;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <CAN1_RxCallBack+0x60>)
 800131c:	785b      	ldrb	r3, [r3, #1]
 800131e:	3301      	adds	r3, #1
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <CAN1_RxCallBack+0x60>)
 8001324:	705a      	strb	r2, [r3, #1]
	if(message_rx.ID == 0x03)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b03      	cmp	r3, #3
 800132a:	d102      	bne.n	8001332 <CAN1_RxCallBack+0x2a>
	{
		Sequence_UDS_request();
 800132c:	f000 f822 	bl	8001374 <Sequence_UDS_request>
		  {
		    step = 0;
		  }
		}
	}
}
 8001330:	e014      	b.n	800135c <CAN1_RxCallBack+0x54>
		if(Rx_Buffer[1] != 0x7F)
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <CAN1_RxCallBack+0x5c>)
 8001334:	785b      	ldrb	r3, [r3, #1]
 8001336:	2b7f      	cmp	r3, #127	; 0x7f
 8001338:	d003      	beq.n	8001342 <CAN1_RxCallBack+0x3a>
			Sequence_UDS_respone(Rx_Buffer);
 800133a:	480a      	ldr	r0, [pc, #40]	; (8001364 <CAN1_RxCallBack+0x5c>)
 800133c:	f000 fcb0 	bl	8001ca0 <Sequence_UDS_respone>
}
 8001340:	e00c      	b.n	800135c <CAN1_RxCallBack+0x54>
		  if ((Rx_Buffer[2] != Cur_Ser) || (Rx_Buffer[3] != 0x78))
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <CAN1_RxCallBack+0x5c>)
 8001344:	789a      	ldrb	r2, [r3, #2]
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <CAN1_RxCallBack+0x64>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d103      	bne.n	8001356 <CAN1_RxCallBack+0x4e>
 800134e:	4b05      	ldr	r3, [pc, #20]	; (8001364 <CAN1_RxCallBack+0x5c>)
 8001350:	78db      	ldrb	r3, [r3, #3]
 8001352:	2b78      	cmp	r3, #120	; 0x78
 8001354:	d002      	beq.n	800135c <CAN1_RxCallBack+0x54>
		    step = 0;
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <CAN1_RxCallBack+0x68>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000618 	.word	0x20000618
 8001368:	200005e0 	.word	0x200005e0
 800136c:	20000108 	.word	0x20000108
 8001370:	20000104 	.word	0x20000104

08001374 <Sequence_UDS_request>:
	  }
  }
}

void Sequence_UDS_request(void)
{
 8001374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001378:	b0b0      	sub	sp, #192	; 0xc0
 800137a:	af00      	add	r7, sp, #0
	static uint8_t last_block = 0; //request_seed
	static uint8_t wait_control_frame = 0; //wait control frame
	static int64_t app_size_remain = 917376;
	static int64_t block_size_remain;
	static uint32_t pointer_app = 4;
	Msg_Info UDS_req = {0x751, CAN_ID_STD, 8};
 800137c:	4aad      	ldr	r2, [pc, #692]	; (8001634 <Sequence_UDS_request+0x2c0>)
 800137e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001386:	e883 0003 	stmia.w	r3, {r0, r1}
	wait_resp = step;
 800138a:	4bab      	ldr	r3, [pc, #684]	; (8001638 <Sequence_UDS_request+0x2c4>)
 800138c:	781a      	ldrb	r2, [r3, #0]
 800138e:	4bab      	ldr	r3, [pc, #684]	; (800163c <Sequence_UDS_request+0x2c8>)
 8001390:	701a      	strb	r2, [r3, #0]
	switch (step)
 8001392:	4ba9      	ldr	r3, [pc, #676]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b0e      	cmp	r3, #14
 8001398:	f200 8461 	bhi.w	8001c5e <Sequence_UDS_request+0x8ea>
 800139c:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <Sequence_UDS_request+0x30>)
 800139e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a2:	bf00      	nop
 80013a4:	080013e1 	.word	0x080013e1
 80013a8:	08001425 	.word	0x08001425
 80013ac:	08001529 	.word	0x08001529
 80013b0:	0800156b 	.word	0x0800156b
 80013b4:	080015ad 	.word	0x080015ad
 80013b8:	080016e9 	.word	0x080016e9
 80013bc:	08001769 	.word	0x08001769
 80013c0:	080017ab 	.word	0x080017ab
 80013c4:	080017ed 	.word	0x080017ed
 80013c8:	0800182f 	.word	0x0800182f
 80013cc:	080018cb 	.word	0x080018cb
 80013d0:	08001b3d 	.word	0x08001b3d
 80013d4:	08001b7f 	.word	0x08001b7f
 80013d8:	08001bc1 	.word	0x08001bc1
 80013dc:	08001c03 	.word	0x08001c03
	{
		case ext_sess:
		{
			uint8_t data[8] = {0x02, 0x10, 0x03, 0, 0, 0, 0, 0};
 80013e0:	4a97      	ldr	r2, [pc, #604]	; (8001640 <Sequence_UDS_request+0x2cc>)
 80013e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ea:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 80013ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f2:	461a      	mov	r2, r3
 80013f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013fc:	f001 fb0e 	bl	8002a1c <rb_CAN1_Transmit>
			step++;
 8001400:	4b8d      	ldr	r3, [pc, #564]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b8b      	ldr	r3, [pc, #556]	; (8001638 <Sequence_UDS_request+0x2c4>)
 800140a:	701a      	strb	r2, [r3, #0]
			if(step == max_step)
 800140c:	4b8a      	ldr	r3, [pc, #552]	; (8001638 <Sequence_UDS_request+0x2c4>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d102      	bne.n	800141a <Sequence_UDS_request+0xa6>
			{
				step = 0;
 8001414:	4b88      	ldr	r3, [pc, #544]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
			}
			Cur_Ser = 0x10;
 800141a:	4b8a      	ldr	r3, [pc, #552]	; (8001644 <Sequence_UDS_request+0x2d0>)
 800141c:	2210      	movs	r2, #16
 800141e:	701a      	strb	r2, [r3, #0]
			break;
 8001420:	f000 bc1d 	b.w	8001c5e <Sequence_UDS_request+0x8ea>
		}
		case sec_access_B:
		{
			if(step_sec == 0) //request seed
 8001424:	4b88      	ldr	r3, [pc, #544]	; (8001648 <Sequence_UDS_request+0x2d4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d11c      	bne.n	8001466 <Sequence_UDS_request+0xf2>
			{
				uint8_t data[8] = {0x02, 0x27, 0x11, 0, 0, 0, 0, 0};
 800142c:	4a87      	ldr	r2, [pc, #540]	; (800164c <Sequence_UDS_request+0x2d8>)
 800142e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001436:	e883 0003 	stmia.w	r3, {r0, r1}
                wait_control_frame = 0;
 800143a:	4b85      	ldr	r3, [pc, #532]	; (8001650 <Sequence_UDS_request+0x2dc>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
				rb_CAN1_Transmit(UDS_req, data);
 8001440:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001444:	461a      	mov	r2, r3
 8001446:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800144a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800144e:	f001 fae5 	bl	8002a1c <rb_CAN1_Transmit>
				Cur_Ser = 0x27;
 8001452:	4b7c      	ldr	r3, [pc, #496]	; (8001644 <Sequence_UDS_request+0x2d0>)
 8001454:	2227      	movs	r2, #39	; 0x27
 8001456:	701a      	strb	r2, [r3, #0]
				step_sec++;
 8001458:	4b7b      	ldr	r3, [pc, #492]	; (8001648 <Sequence_UDS_request+0x2d4>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b79      	ldr	r3, [pc, #484]	; (8001648 <Sequence_UDS_request+0x2d4>)
 8001462:	701a      	strb	r2, [r3, #0]
					{
						step = 0;
					}
				}
			}
			break;
 8001464:	e3ec      	b.n	8001c40 <Sequence_UDS_request+0x8cc>
				if(wait_control_frame == 0) //send first frame
 8001466:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <Sequence_UDS_request+0x2dc>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d11a      	bne.n	80014a4 <Sequence_UDS_request+0x130>
					uint8_t data[8] = {0x10, 0x22, 0x27, 0x12, 0, 0, 0, 0};
 800146e:	4a79      	ldr	r2, [pc, #484]	; (8001654 <Sequence_UDS_request+0x2e0>)
 8001470:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001478:	e883 0003 	stmia.w	r3, {r0, r1}
 800147c:	4b76      	ldr	r3, [pc, #472]	; (8001658 <Sequence_UDS_request+0x2e4>)
 800147e:	681b      	ldr	r3, [r3, #0]
					memcpy(&data[4], key, 4);
 8001480:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					rb_CAN1_Transmit(UDS_req, data);
 8001484:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001488:	461a      	mov	r2, r3
 800148a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800148e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001492:	f001 fac3 	bl	8002a1c <rb_CAN1_Transmit>
					wait_control_frame++;
 8001496:	4b6e      	ldr	r3, [pc, #440]	; (8001650 <Sequence_UDS_request+0x2dc>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b6c      	ldr	r3, [pc, #432]	; (8001650 <Sequence_UDS_request+0x2dc>)
 80014a0:	701a      	strb	r2, [r3, #0]
			break;
 80014a2:	e3cd      	b.n	8001c40 <Sequence_UDS_request+0x8cc>
					for(i = 0; i < 4; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80014aa:	e024      	b.n	80014f6 <Sequence_UDS_request+0x182>
						data[0] = 0x21 + i;
 80014ac:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80014b0:	3321      	adds	r3, #33	; 0x21
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
						memcpy(&data[1], &key[4 + i*7], 7);
 80014b8:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	3304      	adds	r3, #4
 80014c4:	4a64      	ldr	r2, [pc, #400]	; (8001658 <Sequence_UDS_request+0x2e4>)
 80014c6:	1899      	adds	r1, r3, r2
 80014c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014cc:	3301      	adds	r3, #1
 80014ce:	2207      	movs	r2, #7
 80014d0:	4618      	mov	r0, r3
 80014d2:	f012 f9a9 	bl	8013828 <memcpy>
						rb_CAN1_Transmit(UDS_req, data);
 80014d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014da:	461a      	mov	r2, r3
 80014dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e4:	f001 fa9a 	bl	8002a1c <rb_CAN1_Transmit>
						delay();
 80014e8:	f000 fe3a 	bl	8002160 <delay>
					for(i = 0; i < 4; i++)
 80014ec:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80014f0:	3301      	adds	r3, #1
 80014f2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80014f6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d9d6      	bls.n	80014ac <Sequence_UDS_request+0x138>
					wait_control_frame = 0;
 80014fe:	4b54      	ldr	r3, [pc, #336]	; (8001650 <Sequence_UDS_request+0x2dc>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
					step_sec = 0;
 8001504:	4b50      	ldr	r3, [pc, #320]	; (8001648 <Sequence_UDS_request+0x2d4>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
					step++;
 800150a:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <Sequence_UDS_request+0x2c4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b49      	ldr	r3, [pc, #292]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001514:	701a      	strb	r2, [r3, #0]
					if(step == max_step)
 8001516:	4b48      	ldr	r3, [pc, #288]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	f040 8390 	bne.w	8001c40 <Sequence_UDS_request+0x8cc>
						step = 0;
 8001520:	4b45      	ldr	r3, [pc, #276]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001522:	2200      	movs	r2, #0
 8001524:	701a      	strb	r2, [r3, #0]
			break;
 8001526:	e38b      	b.n	8001c40 <Sequence_UDS_request+0x8cc>
		}
		case set_progmd:
		{
			uint8_t data[8] = {0x05, 0x31, 0x01, 0xC0, 0x01, 0, 0, 0};
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <Sequence_UDS_request+0x2e8>)
 800152a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800152e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001532:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 8001536:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800153a:	461a      	mov	r2, r3
 800153c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001540:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001544:	f001 fa6a 	bl	8002a1c <rb_CAN1_Transmit>
			step++;
 8001548:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <Sequence_UDS_request+0x2c4>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001552:	701a      	strb	r2, [r3, #0]
			if(step == max_step)
 8001554:	4b38      	ldr	r3, [pc, #224]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d102      	bne.n	8001562 <Sequence_UDS_request+0x1ee>
			{
				step = 0;
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <Sequence_UDS_request+0x2c4>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
			}
			Cur_Ser = 0x31;
 8001562:	4b38      	ldr	r3, [pc, #224]	; (8001644 <Sequence_UDS_request+0x2d0>)
 8001564:	2231      	movs	r2, #49	; 0x31
 8001566:	701a      	strb	r2, [r3, #0]
			break;
 8001568:	e379      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
		}
		case prog_sess:
		{
		  uint8_t data[8] = {0x02, 0x10, 0x02, 0, 0, 0, 0, 0};
 800156a:	4a3d      	ldr	r2, [pc, #244]	; (8001660 <Sequence_UDS_request+0x2ec>)
 800156c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001574:	e883 0003 	stmia.w	r3, {r0, r1}
		  rb_CAN1_Transmit(UDS_req, data);
 8001578:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800157c:	461a      	mov	r2, r3
 800157e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001582:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001586:	f001 fa49 	bl	8002a1c <rb_CAN1_Transmit>
		  step++;
 800158a:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <Sequence_UDS_request+0x2c4>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001594:	701a      	strb	r2, [r3, #0]
		  if(step == max_step)
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <Sequence_UDS_request+0x2c4>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b0f      	cmp	r3, #15
 800159c:	d102      	bne.n	80015a4 <Sequence_UDS_request+0x230>
		  {
			step = 0;
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <Sequence_UDS_request+0x2c4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
		  }
		  Cur_Ser = 0x10;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <Sequence_UDS_request+0x2d0>)
 80015a6:	2210      	movs	r2, #16
 80015a8:	701a      	strb	r2, [r3, #0]
		  break;
 80015aa:	e358      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
		}
		case sec_access_A:
		{
		  if(step_sec == 0) //request seed
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <Sequence_UDS_request+0x2d4>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d11c      	bne.n	80015ee <Sequence_UDS_request+0x27a>
		  {
			uint8_t data[8] = {0x02, 0x27, 0x01, 0, 0, 0, 0, 0};
 80015b4:	4a2b      	ldr	r2, [pc, #172]	; (8001664 <Sequence_UDS_request+0x2f0>)
 80015b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015be:	e883 0003 	stmia.w	r3, {r0, r1}
			wait_control_frame = 0;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <Sequence_UDS_request+0x2dc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
			rb_CAN1_Transmit(UDS_req, data);
 80015c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015cc:	461a      	mov	r2, r3
 80015ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015d6:	f001 fa21 	bl	8002a1c <rb_CAN1_Transmit>
			step_sec++;
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <Sequence_UDS_request+0x2d4>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <Sequence_UDS_request+0x2d4>)
 80015e4:	701a      	strb	r2, [r3, #0]
			Cur_Ser = 0x27;
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <Sequence_UDS_request+0x2d0>)
 80015e8:	2227      	movs	r2, #39	; 0x27
 80015ea:	701a      	strb	r2, [r3, #0]
			  {
				step = 0;
			  }
			}
		  }
		  break;
 80015ec:	e32a      	b.n	8001c44 <Sequence_UDS_request+0x8d0>
			if(wait_control_frame == 0) //send first frame
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <Sequence_UDS_request+0x2dc>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d119      	bne.n	800162a <Sequence_UDS_request+0x2b6>
			  uint8_t data[8] = {0x10, 0x22, 0x27, 0x02, 0, 0, 0, 0};
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <Sequence_UDS_request+0x2f4>)
 80015f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001600:	e883 0003 	stmia.w	r3, {r0, r1}
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <Sequence_UDS_request+0x2e4>)
 8001606:	681b      	ldr	r3, [r3, #0]
			  memcpy(&data[4], key, 4);
 8001608:	67bb      	str	r3, [r7, #120]	; 0x78
			  rb_CAN1_Transmit(UDS_req, data);
 800160a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800160e:	461a      	mov	r2, r3
 8001610:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001614:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001618:	f001 fa00 	bl	8002a1c <rb_CAN1_Transmit>
			  wait_control_frame++;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <Sequence_UDS_request+0x2dc>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <Sequence_UDS_request+0x2dc>)
 8001626:	701a      	strb	r2, [r3, #0]
		  break;
 8001628:	e30c      	b.n	8001c44 <Sequence_UDS_request+0x8d0>
			  for(i = 0; i < 4; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8001630:	e041      	b.n	80016b6 <Sequence_UDS_request+0x342>
 8001632:	bf00      	nop
 8001634:	08014d00 	.word	0x08014d00
 8001638:	20000104 	.word	0x20000104
 800163c:	2000059c 	.word	0x2000059c
 8001640:	08014d08 	.word	0x08014d08
 8001644:	20000108 	.word	0x20000108
 8001648:	20000109 	.word	0x20000109
 800164c:	08014d10 	.word	0x08014d10
 8001650:	2000010a 	.word	0x2000010a
 8001654:	08014d18 	.word	0x08014d18
 8001658:	20000620 	.word	0x20000620
 800165c:	08014d20 	.word	0x08014d20
 8001660:	08014d28 	.word	0x08014d28
 8001664:	08014d30 	.word	0x08014d30
 8001668:	08014d38 	.word	0x08014d38
				data[0] = 0x21 + i;
 800166c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001670:	3321      	adds	r3, #33	; 0x21
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
				memcpy(&data[1], &key[4 + i*7], 7);
 8001678:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	3304      	adds	r3, #4
 8001684:	4ab1      	ldr	r2, [pc, #708]	; (800194c <Sequence_UDS_request+0x5d8>)
 8001686:	1899      	adds	r1, r3, r2
 8001688:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800168c:	3301      	adds	r3, #1
 800168e:	2207      	movs	r2, #7
 8001690:	4618      	mov	r0, r3
 8001692:	f012 f8c9 	bl	8013828 <memcpy>
				rb_CAN1_Transmit(UDS_req, data);
 8001696:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800169a:	461a      	mov	r2, r3
 800169c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016a4:	f001 f9ba 	bl	8002a1c <rb_CAN1_Transmit>
				delay();
 80016a8:	f000 fd5a 	bl	8002160 <delay>
			  for(i = 0; i < 4; i++)
 80016ac:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80016b0:	3301      	adds	r3, #1
 80016b2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80016b6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d9d6      	bls.n	800166c <Sequence_UDS_request+0x2f8>
			  wait_control_frame = 0;
 80016be:	4ba4      	ldr	r3, [pc, #656]	; (8001950 <Sequence_UDS_request+0x5dc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
			  step_sec = 0;
 80016c4:	4ba3      	ldr	r3, [pc, #652]	; (8001954 <Sequence_UDS_request+0x5e0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
			  step++;
 80016ca:	4ba3      	ldr	r3, [pc, #652]	; (8001958 <Sequence_UDS_request+0x5e4>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	3301      	adds	r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4ba1      	ldr	r3, [pc, #644]	; (8001958 <Sequence_UDS_request+0x5e4>)
 80016d4:	701a      	strb	r2, [r3, #0]
			  if(step == max_step)
 80016d6:	4ba0      	ldr	r3, [pc, #640]	; (8001958 <Sequence_UDS_request+0x5e4>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	f040 82b2 	bne.w	8001c44 <Sequence_UDS_request+0x8d0>
				step = 0;
 80016e0:	4b9d      	ldr	r3, [pc, #628]	; (8001958 <Sequence_UDS_request+0x5e4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
		  break;
 80016e6:	e2ad      	b.n	8001c44 <Sequence_UDS_request+0x8d0>
		}
		case idwrite_repair:
		{
		  if(wait_control_frame == 0) //send first frame
 80016e8:	4b99      	ldr	r3, [pc, #612]	; (8001950 <Sequence_UDS_request+0x5dc>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d119      	bne.n	8001724 <Sequence_UDS_request+0x3b0>
		  {
			uint8_t data[8] = {0x10, 0x0D, 0x2E, 0xF1, 0x98, 0x11, 0x22, 0x33};
 80016f0:	4a9a      	ldr	r2, [pc, #616]	; (800195c <Sequence_UDS_request+0x5e8>)
 80016f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fa:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 80016fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001702:	461a      	mov	r2, r3
 8001704:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001708:	e893 0003 	ldmia.w	r3, {r0, r1}
 800170c:	f001 f986 	bl	8002a1c <rb_CAN1_Transmit>
			wait_control_frame ++;
 8001710:	4b8f      	ldr	r3, [pc, #572]	; (8001950 <Sequence_UDS_request+0x5dc>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b8d      	ldr	r3, [pc, #564]	; (8001950 <Sequence_UDS_request+0x5dc>)
 800171a:	701a      	strb	r2, [r3, #0]
			Cur_Ser = 0x2E;
 800171c:	4b90      	ldr	r3, [pc, #576]	; (8001960 <Sequence_UDS_request+0x5ec>)
 800171e:	222e      	movs	r2, #46	; 0x2e
 8001720:	701a      	strb	r2, [r3, #0]
			if(step == max_step)
			{
			step = 0;
			}
		  }
		  break;
 8001722:	e291      	b.n	8001c48 <Sequence_UDS_request+0x8d4>
			uint8_t data[8] = {0x21, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0x11};
 8001724:	4a8f      	ldr	r2, [pc, #572]	; (8001964 <Sequence_UDS_request+0x5f0>)
 8001726:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800172a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172e:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 8001732:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001736:	461a      	mov	r2, r3
 8001738:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800173c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001740:	f001 f96c 	bl	8002a1c <rb_CAN1_Transmit>
			wait_control_frame = 0;
 8001744:	4b82      	ldr	r3, [pc, #520]	; (8001950 <Sequence_UDS_request+0x5dc>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
			step++;
 800174a:	4b83      	ldr	r3, [pc, #524]	; (8001958 <Sequence_UDS_request+0x5e4>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b81      	ldr	r3, [pc, #516]	; (8001958 <Sequence_UDS_request+0x5e4>)
 8001754:	701a      	strb	r2, [r3, #0]
			if(step == max_step)
 8001756:	4b80      	ldr	r3, [pc, #512]	; (8001958 <Sequence_UDS_request+0x5e4>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b0f      	cmp	r3, #15
 800175c:	f040 8274 	bne.w	8001c48 <Sequence_UDS_request+0x8d4>
			step = 0;
 8001760:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <Sequence_UDS_request+0x5e4>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
		  break;
 8001766:	e26f      	b.n	8001c48 <Sequence_UDS_request+0x8d4>
		}
		case idwrite_prog:
		{
		  uint8_t data[8] = {0x07, 0x2E, 0xF1, 0x99, 0x01, 0x07, 0x13, 0x14};
 8001768:	4a7f      	ldr	r2, [pc, #508]	; (8001968 <Sequence_UDS_request+0x5f4>)
 800176a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800176e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001772:	e883 0003 	stmia.w	r3, {r0, r1}
		  rb_CAN1_Transmit(UDS_req, data);
 8001776:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800177a:	461a      	mov	r2, r3
 800177c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001780:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001784:	f001 f94a 	bl	8002a1c <rb_CAN1_Transmit>
		  step++;
 8001788:	4b73      	ldr	r3, [pc, #460]	; (8001958 <Sequence_UDS_request+0x5e4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b71      	ldr	r3, [pc, #452]	; (8001958 <Sequence_UDS_request+0x5e4>)
 8001792:	701a      	strb	r2, [r3, #0]
		  if(step == max_step)
 8001794:	4b70      	ldr	r3, [pc, #448]	; (8001958 <Sequence_UDS_request+0x5e4>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d102      	bne.n	80017a2 <Sequence_UDS_request+0x42e>
		  {
			step = 0;
 800179c:	4b6e      	ldr	r3, [pc, #440]	; (8001958 <Sequence_UDS_request+0x5e4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
		  }
		  Cur_Ser = 0x2E;
 80017a2:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <Sequence_UDS_request+0x5ec>)
 80017a4:	222e      	movs	r2, #46	; 0x2e
 80017a6:	701a      	strb	r2, [r3, #0]
		  break;
 80017a8:	e259      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
		}
		case erase_app:
		{
		  uint8_t data[8] = {0x05, 0x31, 0x01, 0xFF, 0x00, 0x00, 0x55, 0x55};
 80017aa:	4a70      	ldr	r2, [pc, #448]	; (800196c <Sequence_UDS_request+0x5f8>)
 80017ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b4:	e883 0003 	stmia.w	r3, {r0, r1}
		  rb_CAN1_Transmit(UDS_req, data);
 80017b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017bc:	461a      	mov	r2, r3
 80017be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017c6:	f001 f929 	bl	8002a1c <rb_CAN1_Transmit>
		  step++;
 80017ca:	4b63      	ldr	r3, [pc, #396]	; (8001958 <Sequence_UDS_request+0x5e4>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b61      	ldr	r3, [pc, #388]	; (8001958 <Sequence_UDS_request+0x5e4>)
 80017d4:	701a      	strb	r2, [r3, #0]
		  if(step == max_step)
 80017d6:	4b60      	ldr	r3, [pc, #384]	; (8001958 <Sequence_UDS_request+0x5e4>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	d102      	bne.n	80017e4 <Sequence_UDS_request+0x470>
		  {
			step = 0;
 80017de:	4b5e      	ldr	r3, [pc, #376]	; (8001958 <Sequence_UDS_request+0x5e4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		  }
		  Cur_Ser = 0x31;
 80017e4:	4b5e      	ldr	r3, [pc, #376]	; (8001960 <Sequence_UDS_request+0x5ec>)
 80017e6:	2231      	movs	r2, #49	; 0x31
 80017e8:	701a      	strb	r2, [r3, #0]
		  break;
 80017ea:	e238      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
		}
		case tester_present:
		{
		  uint8_t data[8] = {0x02, 0x3E, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55};
 80017ec:	4a60      	ldr	r2, [pc, #384]	; (8001970 <Sequence_UDS_request+0x5fc>)
 80017ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f6:	e883 0003 	stmia.w	r3, {r0, r1}
		  rb_CAN1_Transmit(UDS_req, data);
 80017fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017fe:	461a      	mov	r2, r3
 8001800:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001804:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001808:	f001 f908 	bl	8002a1c <rb_CAN1_Transmit>
		  step++;
 800180c:	4b52      	ldr	r3, [pc, #328]	; (8001958 <Sequence_UDS_request+0x5e4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b50      	ldr	r3, [pc, #320]	; (8001958 <Sequence_UDS_request+0x5e4>)
 8001816:	701a      	strb	r2, [r3, #0]
		  if(step == max_step)
 8001818:	4b4f      	ldr	r3, [pc, #316]	; (8001958 <Sequence_UDS_request+0x5e4>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d102      	bne.n	8001826 <Sequence_UDS_request+0x4b2>
		  {
			step = 0;
 8001820:	4b4d      	ldr	r3, [pc, #308]	; (8001958 <Sequence_UDS_request+0x5e4>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
		  }
		  Cur_Ser = 0x3E;
 8001826:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <Sequence_UDS_request+0x5ec>)
 8001828:	223e      	movs	r2, #62	; 0x3e
 800182a:	701a      	strb	r2, [r3, #0]
		  break;
 800182c:	e217      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
		}
		case req_transfer:
		{
		  if(wait_control_frame == 0) //send first frame
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <Sequence_UDS_request+0x5dc>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d119      	bne.n	800186a <Sequence_UDS_request+0x4f6>
		  {
			uint8_t data[8] = {0x10, 0x0C, 0x34, 0x0F, 0x45, 0x00, 0x01, 0x02};
 8001836:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <Sequence_UDS_request+0x600>)
 8001838:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800183c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001840:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 8001844:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001848:	461a      	mov	r2, r3
 800184a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800184e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001852:	f001 f8e3 	bl	8002a1c <rb_CAN1_Transmit>
			wait_control_frame ++;
 8001856:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <Sequence_UDS_request+0x5dc>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <Sequence_UDS_request+0x5dc>)
 8001860:	701a      	strb	r2, [r3, #0]
			Cur_Ser = 0x34;
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <Sequence_UDS_request+0x5ec>)
 8001864:	2234      	movs	r2, #52	; 0x34
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e01f      	b.n	80018aa <Sequence_UDS_request+0x536>
		  }
		  else
		  {
			uint8_t data[8] = {0x21, 0x00, 0x00, 0x00, 0x0D, 0xFF, 0x80, 0x55};
 800186a:	4a43      	ldr	r2, [pc, #268]	; (8001978 <Sequence_UDS_request+0x604>)
 800186c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001870:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001874:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 8001878:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800187c:	461a      	mov	r2, r3
 800187e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001882:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001886:	f001 f8c9 	bl	8002a1c <rb_CAN1_Transmit>
			wait_control_frame = 0;
 800188a:	4b31      	ldr	r3, [pc, #196]	; (8001950 <Sequence_UDS_request+0x5dc>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
			step++;
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <Sequence_UDS_request+0x5e4>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <Sequence_UDS_request+0x5e4>)
 800189a:	701a      	strb	r2, [r3, #0]
			if(step == max_step)
 800189c:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <Sequence_UDS_request+0x5e4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d102      	bne.n	80018aa <Sequence_UDS_request+0x536>
			{
			step = 0;
 80018a4:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <Sequence_UDS_request+0x5e4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
			}
		  }
		  pointer_app = 4;
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <Sequence_UDS_request+0x608>)
 80018ac:	2204      	movs	r2, #4
 80018ae:	601a      	str	r2, [r3, #0]
		  app_size_remain = 917376;
 80018b0:	4933      	ldr	r1, [pc, #204]	; (8001980 <Sequence_UDS_request+0x60c>)
 80018b2:	4a34      	ldr	r2, [pc, #208]	; (8001984 <Sequence_UDS_request+0x610>)
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	e9c1 2300 	strd	r2, r3, [r1]
		  last_block = 0;
 80018bc:	4b32      	ldr	r3, [pc, #200]	; (8001988 <Sequence_UDS_request+0x614>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
		  block = 0x01;
 80018c2:	4b32      	ldr	r3, [pc, #200]	; (800198c <Sequence_UDS_request+0x618>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
		  break;
 80018c8:	e1c9      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
		}
		case transfer_app:
		{
			if(wait_control_frame == 0)
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <Sequence_UDS_request+0x5dc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80ba 	bne.w	8001a48 <Sequence_UDS_request+0x6d4>
			{
				Cur_Ser = 0x36;
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <Sequence_UDS_request+0x5ec>)
 80018d6:	2236      	movs	r2, #54	; 0x36
 80018d8:	701a      	strb	r2, [r3, #0]
				wait_control_frame++;
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <Sequence_UDS_request+0x5dc>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <Sequence_UDS_request+0x5dc>)
 80018e4:	701a      	strb	r2, [r3, #0]
				if(app_size_remain > 4080)
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <Sequence_UDS_request+0x60c>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f44f 607f 	mov.w	r0, #4080	; 0xff0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	4290      	cmp	r0, r2
 80018f6:	eb71 0303 	sbcs.w	r3, r1, r3
 80018fa:	da15      	bge.n	8001928 <Sequence_UDS_request+0x5b4>
				{
				  if (CSP_QSPI_Read(readBuf, pointer_app, 4080) != HAL_OK)
 80018fc:	4b1f      	ldr	r3, [pc, #124]	; (800197c <Sequence_UDS_request+0x608>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001904:	4619      	mov	r1, r3
 8001906:	4822      	ldr	r0, [pc, #136]	; (8001990 <Sequence_UDS_request+0x61c>)
 8001908:	f000 ffc8 	bl	800289c <CSP_QSPI_Read>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <Sequence_UDS_request+0x5a4>
				  {
				   Error_Handler();
 8001912:	f000 fc6d 	bl	80021f0 <Error_Handler>
				   break;
 8001916:	e1a2      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
				  }
				  block_size_remain = 4080;
 8001918:	491e      	ldr	r1, [pc, #120]	; (8001994 <Sequence_UDS_request+0x620>)
 800191a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9c1 2300 	strd	r2, r3, [r1]
 8001926:	e040      	b.n	80019aa <Sequence_UDS_request+0x636>
				}
				else
				{
				  if (CSP_QSPI_Read(readBuf, pointer_app, app_size_remain) != HAL_OK)
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <Sequence_UDS_request+0x608>)
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <Sequence_UDS_request+0x60c>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	4613      	mov	r3, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4816      	ldr	r0, [pc, #88]	; (8001990 <Sequence_UDS_request+0x61c>)
 8001938:	f000 ffb0 	bl	800289c <CSP_QSPI_Read>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d02a      	beq.n	8001998 <Sequence_UDS_request+0x624>
				  {
				   Error_Handler();
 8001942:	f000 fc55 	bl	80021f0 <Error_Handler>
				   break;
 8001946:	bf00      	nop
		default:
		{

		}
	}
}
 8001948:	e189      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
 800194a:	bf00      	nop
 800194c:	20000620 	.word	0x20000620
 8001950:	2000010a 	.word	0x2000010a
 8001954:	20000109 	.word	0x20000109
 8001958:	20000104 	.word	0x20000104
 800195c:	08014d40 	.word	0x08014d40
 8001960:	20000108 	.word	0x20000108
 8001964:	08014d48 	.word	0x08014d48
 8001968:	08014d50 	.word	0x08014d50
 800196c:	08014d58 	.word	0x08014d58
 8001970:	08014d60 	.word	0x08014d60
 8001974:	08014d68 	.word	0x08014d68
 8001978:	08014d70 	.word	0x08014d70
 800197c:	20000044 	.word	0x20000044
 8001980:	20000048 	.word	0x20000048
 8001984:	000dff80 	.word	0x000dff80
 8001988:	2000010b 	.word	0x2000010b
 800198c:	2000010c 	.word	0x2000010c
 8001990:	2000069c 	.word	0x2000069c
 8001994:	20000110 	.word	0x20000110
				  block_size_remain = app_size_remain;
 8001998:	4bb3      	ldr	r3, [pc, #716]	; (8001c68 <Sequence_UDS_request+0x8f4>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	49b3      	ldr	r1, [pc, #716]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 80019a0:	e9c1 2300 	strd	r2, r3, [r1]
				  last_block = 1;
 80019a4:	4bb2      	ldr	r3, [pc, #712]	; (8001c70 <Sequence_UDS_request+0x8fc>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
				uint8_t data[8] = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55};
 80019aa:	4ab2      	ldr	r2, [pc, #712]	; (8001c74 <Sequence_UDS_request+0x900>)
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019b4:	e883 0003 	stmia.w	r3, {r0, r1}
				data[0] = ((((uint32_t)block_size_remain) & 0x0F00u) | 0x1000u) >> 8;
 80019b8:	4bac      	ldr	r3, [pc, #688]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	4613      	mov	r3, r2
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				data[1] = (((uint32_t)block_size_remain) & 0x00FFu) + 2;
 80019d4:	4ba5      	ldr	r3, [pc, #660]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	b2d3      	uxtb	r3, r2
 80019dc:	3302      	adds	r3, #2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				data[2] = 0x36;
 80019e4:	2336      	movs	r3, #54	; 0x36
 80019e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				data[3] = block++;
 80019ea:	4ba3      	ldr	r3, [pc, #652]	; (8001c78 <Sequence_UDS_request+0x904>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	b2d1      	uxtb	r1, r2
 80019f2:	4aa1      	ldr	r2, [pc, #644]	; (8001c78 <Sequence_UDS_request+0x904>)
 80019f4:	7011      	strb	r1, [r2, #0]
 80019f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80019fa:	4ba0      	ldr	r3, [pc, #640]	; (8001c7c <Sequence_UDS_request+0x908>)
 80019fc:	681b      	ldr	r3, [r3, #0]
				memcpy(&data[4], readBuf, 4);
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
				rb_CAN1_Transmit(UDS_req, data);
 8001a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a04:	461a      	mov	r2, r3
 8001a06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a0e:	f001 f805 	bl	8002a1c <rb_CAN1_Transmit>
				block_size_remain -= 4;
 8001a12:	4b96      	ldr	r3, [pc, #600]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f1b2 0a04 	subs.w	sl, r2, #4
 8001a1c:	f143 3bff 	adc.w	fp, r3, #4294967295
 8001a20:	4b92      	ldr	r3, [pc, #584]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 8001a22:	e9c3 ab00 	strd	sl, fp, [r3]
				app_size_remain -= 4080;
 8001a26:	4b90      	ldr	r3, [pc, #576]	; (8001c68 <Sequence_UDS_request+0x8f4>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f5b2 687f 	subs.w	r8, r2, #4080	; 0xff0
 8001a30:	f143 39ff 	adc.w	r9, r3, #4294967295
 8001a34:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <Sequence_UDS_request+0x8f4>)
 8001a36:	e9c3 8900 	strd	r8, r9, [r3]
				pointer_app += 4080;
 8001a3a:	4b91      	ldr	r3, [pc, #580]	; (8001c80 <Sequence_UDS_request+0x90c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f503 637f 	add.w	r3, r3, #4080	; 0xff0
 8001a42:	4a8f      	ldr	r2, [pc, #572]	; (8001c80 <Sequence_UDS_request+0x90c>)
 8001a44:	6013      	str	r3, [r2, #0]
			break;
 8001a46:	e101      	b.n	8001c4c <Sequence_UDS_request+0x8d8>
				uint8_t frame_num = 0x21;
 8001a48:	2321      	movs	r3, #33	; 0x21
 8001a4a:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
				uint16_t pointer_block = 4;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
				while(block_size_remain > 0)
 8001a54:	e054      	b.n	8001b00 <Sequence_UDS_request+0x78c>
					uint8_t data[8] = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55};
 8001a56:	4a87      	ldr	r2, [pc, #540]	; (8001c74 <Sequence_UDS_request+0x900>)
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a60:	e883 0003 	stmia.w	r3, {r0, r1}
					if(block_size_remain > 7)
 8001a64:	4b81      	ldr	r3, [pc, #516]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	2a08      	cmp	r2, #8
 8001a6c:	f173 0300 	sbcs.w	r3, r3, #0
 8001a70:	db12      	blt.n	8001a98 <Sequence_UDS_request+0x724>
					  data[0] = frame_num++;
 8001a72:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	f887 20be 	strb.w	r2, [r7, #190]	; 0xbe
 8001a7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					  memcpy(&data[1], &readBuf[pointer_block], 7);
 8001a80:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a84:	4a7d      	ldr	r2, [pc, #500]	; (8001c7c <Sequence_UDS_request+0x908>)
 8001a86:	1899      	adds	r1, r3, r2
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	2207      	movs	r2, #7
 8001a90:	4618      	mov	r0, r3
 8001a92:	f011 fec9 	bl	8013828 <memcpy>
 8001a96:	e013      	b.n	8001ac0 <Sequence_UDS_request+0x74c>
					  data[0] = frame_num++;
 8001a98:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	f887 20be 	strb.w	r2, [r7, #190]	; 0xbe
 8001aa2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					  memcpy(&data[1], &readBuf[pointer_block], block_size_remain);
 8001aa6:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001aaa:	4a74      	ldr	r2, [pc, #464]	; (8001c7c <Sequence_UDS_request+0x908>)
 8001aac:	1899      	adds	r1, r3, r2
 8001aae:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab8:	3301      	adds	r3, #1
 8001aba:	4618      	mov	r0, r3
 8001abc:	f011 feb4 	bl	8013828 <memcpy>
					pointer_block += 7;
 8001ac0:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001ac4:	3307      	adds	r3, #7
 8001ac6:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
					if(frame_num >= 0x30)
 8001aca:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8001ace:	2b2f      	cmp	r3, #47	; 0x2f
 8001ad0:	d902      	bls.n	8001ad8 <Sequence_UDS_request+0x764>
					  frame_num =  0x20;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
					block_size_remain -= 7;
 8001ad8:	4b64      	ldr	r3, [pc, #400]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	1fd4      	subs	r4, r2, #7
 8001ae0:	f143 35ff 	adc.w	r5, r3, #4294967295
 8001ae4:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 8001ae6:	e9c3 4500 	strd	r4, r5, [r3]
					rb_CAN1_Transmit(UDS_req, data);
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	461a      	mov	r2, r3
 8001af0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001af4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001af8:	f000 ff90 	bl	8002a1c <rb_CAN1_Transmit>
					delay();
 8001afc:	f000 fb30 	bl	8002160 <delay>
				while(block_size_remain > 0)
 8001b00:	4b5a      	ldr	r3, [pc, #360]	; (8001c6c <Sequence_UDS_request+0x8f8>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	2a01      	cmp	r2, #1
 8001b08:	f173 0300 	sbcs.w	r3, r3, #0
 8001b0c:	daa3      	bge.n	8001a56 <Sequence_UDS_request+0x6e2>
				wait_control_frame = 0;
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <Sequence_UDS_request+0x910>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
				if (last_block == 1)
 8001b14:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <Sequence_UDS_request+0x8fc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	f040 8097 	bne.w	8001c4c <Sequence_UDS_request+0x8d8>
					step++;
 8001b1e:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001b28:	701a      	strb	r2, [r3, #0]
					if(step == max_step)
 8001b2a:	4b57      	ldr	r3, [pc, #348]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	f040 808c 	bne.w	8001c4c <Sequence_UDS_request+0x8d8>
					step = 0;
 8001b34:	4b54      	ldr	r3, [pc, #336]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
			break;
 8001b3a:	e087      	b.n	8001c4c <Sequence_UDS_request+0x8d8>
			Cur_Ser = 0x37;
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <Sequence_UDS_request+0x918>)
 8001b3e:	2237      	movs	r2, #55	; 0x37
 8001b40:	701a      	strb	r2, [r3, #0]
			uint8_t data[8] = {0x01, 0x37, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55};
 8001b42:	4a53      	ldr	r2, [pc, #332]	; (8001c90 <Sequence_UDS_request+0x91c>)
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b4c:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	461a      	mov	r2, r3
 8001b56:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b5e:	f000 ff5d 	bl	8002a1c <rb_CAN1_Transmit>
			step++;
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001b6c:	701a      	strb	r2, [r3, #0]
			if(step == max_step)
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d16c      	bne.n	8001c50 <Sequence_UDS_request+0x8dc>
			step = 0;
 8001b76:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
			break;
 8001b7c:	e068      	b.n	8001c50 <Sequence_UDS_request+0x8dc>
			Cur_Ser = 0x19;
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <Sequence_UDS_request+0x918>)
 8001b80:	2219      	movs	r2, #25
 8001b82:	701a      	strb	r2, [r3, #0]
			uint8_t data[8] = {0x03, 0x19, 0x02, 0x4B, 0x55, 0x55, 0x55, 0x55};
 8001b84:	4a43      	ldr	r2, [pc, #268]	; (8001c94 <Sequence_UDS_request+0x920>)
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b8e:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	461a      	mov	r2, r3
 8001b98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ba0:	f000 ff3c 	bl	8002a1c <rb_CAN1_Transmit>
			step++;
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001bae:	701a      	strb	r2, [r3, #0]
			if(step == max_step)
 8001bb0:	4b35      	ldr	r3, [pc, #212]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d14d      	bne.n	8001c54 <Sequence_UDS_request+0x8e0>
			step = 0;
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
			break;
 8001bbe:	e049      	b.n	8001c54 <Sequence_UDS_request+0x8e0>
			Cur_Ser = 0x31;
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <Sequence_UDS_request+0x918>)
 8001bc2:	2231      	movs	r2, #49	; 0x31
 8001bc4:	701a      	strb	r2, [r3, #0]
			uint8_t data[8] = {0x05, 0x31, 0x01, 0xFF, 0x01, 0x00, 0x55, 0x55};
 8001bc6:	4a34      	ldr	r2, [pc, #208]	; (8001c98 <Sequence_UDS_request+0x924>)
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bd0:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be2:	f000 ff1b 	bl	8002a1c <rb_CAN1_Transmit>
			step++;
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001bf0:	701a      	strb	r2, [r3, #0]
			if(step == max_step)
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b0f      	cmp	r3, #15
 8001bf8:	d12e      	bne.n	8001c58 <Sequence_UDS_request+0x8e4>
			step = 0;
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
			break;
 8001c00:	e02a      	b.n	8001c58 <Sequence_UDS_request+0x8e4>
			Cur_Ser = 0x11;
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <Sequence_UDS_request+0x918>)
 8001c04:	2211      	movs	r2, #17
 8001c06:	701a      	strb	r2, [r3, #0]
			uint8_t data[8] = {0x02, 0x11, 0x01, 0x55, 0x55, 0x55, 0x55, 0x55};
 8001c08:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <Sequence_UDS_request+0x928>)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c10:	e883 0003 	stmia.w	r3, {r0, r1}
			rb_CAN1_Transmit(UDS_req, data);
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	461a      	mov	r2, r3
 8001c18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c20:	f000 fefc 	bl	8002a1c <rb_CAN1_Transmit>
			step++;
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001c2e:	701a      	strb	r2, [r3, #0]
			if(step == max_step)
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d111      	bne.n	8001c5c <Sequence_UDS_request+0x8e8>
			step = 0;
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <Sequence_UDS_request+0x914>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
			break;
 8001c3e:	e00d      	b.n	8001c5c <Sequence_UDS_request+0x8e8>
			break;
 8001c40:	bf00      	nop
 8001c42:	e00c      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
		  break;
 8001c44:	bf00      	nop
 8001c46:	e00a      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
		  break;
 8001c48:	bf00      	nop
 8001c4a:	e008      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
			break;
 8001c4c:	bf00      	nop
 8001c4e:	e006      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
			break;
 8001c50:	bf00      	nop
 8001c52:	e004      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
			break;
 8001c54:	bf00      	nop
 8001c56:	e002      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
			break;
 8001c58:	bf00      	nop
 8001c5a:	e000      	b.n	8001c5e <Sequence_UDS_request+0x8ea>
			break;
 8001c5c:	bf00      	nop
}
 8001c5e:	bf00      	nop
 8001c60:	37c0      	adds	r7, #192	; 0xc0
 8001c62:	46bd      	mov	sp, r7
 8001c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c68:	20000048 	.word	0x20000048
 8001c6c:	20000110 	.word	0x20000110
 8001c70:	2000010b 	.word	0x2000010b
 8001c74:	08014cf8 	.word	0x08014cf8
 8001c78:	2000010c 	.word	0x2000010c
 8001c7c:	2000069c 	.word	0x2000069c
 8001c80:	20000044 	.word	0x20000044
 8001c84:	2000010a 	.word	0x2000010a
 8001c88:	20000104 	.word	0x20000104
 8001c8c:	20000108 	.word	0x20000108
 8001c90:	08014d78 	.word	0x08014d78
 8001c94:	08014d80 	.word	0x08014d80
 8001c98:	08014d88 	.word	0x08014d88
 8001c9c:	08014d90 	.word	0x08014d90

08001ca0 <Sequence_UDS_respone>:

static void Sequence_UDS_respone(uint8_t *data)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	switch (wait_resp)
 8001ca8:	4baf      	ldr	r3, [pc, #700]	; (8001f68 <Sequence_UDS_respone+0x2c8>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b0e      	cmp	r3, #14
 8001cae:	f200 81e5 	bhi.w	800207c <Sequence_UDS_respone+0x3dc>
 8001cb2:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <Sequence_UDS_respone+0x18>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001cf5 	.word	0x08001cf5
 8001cbc:	08001d13 	.word	0x08001d13
 8001cc0:	08001db9 	.word	0x08001db9
 8001cc4:	08001def 	.word	0x08001def
 8001cc8:	08001e0d 	.word	0x08001e0d
 8001ccc:	08001eb3 	.word	0x08001eb3
 8001cd0:	08001eed 	.word	0x08001eed
 8001cd4:	08001f19 	.word	0x08001f19
 8001cd8:	08001f45 	.word	0x08001f45
 8001cdc:	08001f75 	.word	0x08001f75
 8001ce0:	08001fb9 	.word	0x08001fb9
 8001ce4:	08001fdf 	.word	0x08001fdf
 8001ce8:	08001ff7 	.word	0x08001ff7
 8001cec:	08002023 	.word	0x08002023
 8001cf0:	0800204f 	.word	0x0800204f
	{
		case ext_sess:
		{
			if((data[1] == 0x50) && (data[2] == 0x03))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b50      	cmp	r3, #80	; 0x50
 8001cfc:	f040 81b9 	bne.w	8002072 <Sequence_UDS_respone+0x3d2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3302      	adds	r3, #2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	f040 81b3 	bne.w	8002072 <Sequence_UDS_respone+0x3d2>
			{
				Sequence_UDS_request();
 8001d0c:	f7ff fb32 	bl	8001374 <Sequence_UDS_request>
			}
			break;
 8001d10:	e1af      	b.n	8002072 <Sequence_UDS_respone+0x3d2>
		}
		case sec_access_B:
		{
			if((data[0] == 0x10) && (data[1] == 0x22) && (data[2] == 0x67))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d113      	bne.n	8001d42 <Sequence_UDS_respone+0xa2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b22      	cmp	r3, #34	; 0x22
 8001d22:	d10e      	bne.n	8001d42 <Sequence_UDS_respone+0xa2>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3302      	adds	r3, #2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b67      	cmp	r3, #103	; 0x67
 8001d2c:	d109      	bne.n	8001d42 <Sequence_UDS_respone+0xa2>
			{
				memcpy(Seed, &data[3], 5);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3303      	adds	r3, #3
 8001d32:	2205      	movs	r2, #5
 8001d34:	4619      	mov	r1, r3
 8001d36:	488d      	ldr	r0, [pc, #564]	; (8001f6c <Sequence_UDS_respone+0x2cc>)
 8001d38:	f011 fd76 	bl	8013828 <memcpy>
				Control_Frame();
 8001d3c:	f000 f9a4 	bl	8002088 <Control_Frame>
 8001d40:	e039      	b.n	8001db6 <Sequence_UDS_respone+0x116>
			}
			else if((data[0] >= 0x21) && (data[0] <= 0x24))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d91d      	bls.n	8001d86 <Sequence_UDS_respone+0xe6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b24      	cmp	r3, #36	; 0x24
 8001d50:	d819      	bhi.n	8001d86 <Sequence_UDS_respone+0xe6>
			{
				memcpy(&Seed[5 + (data[0] - 0x21) * 7], &data[1], 7);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	3305      	adds	r3, #5
 8001d62:	4a82      	ldr	r2, [pc, #520]	; (8001f6c <Sequence_UDS_respone+0x2cc>)
 8001d64:	1898      	adds	r0, r3, r2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f011 fd5b 	bl	8013828 <memcpy>
				if(data[0] == 0x24)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b24      	cmp	r3, #36	; 0x24
 8001d78:	d11d      	bne.n	8001db6 <Sequence_UDS_respone+0x116>
				{
					Calculate_Key(11);
 8001d7a:	200b      	movs	r0, #11
 8001d7c:	f000 f9a4 	bl	80020c8 <Calculate_Key>
					Sequence_UDS_request();
 8001d80:	f7ff faf8 	bl	8001374 <Sequence_UDS_request>
				if(data[0] == 0x24)
 8001d84:	e017      	b.n	8001db6 <Sequence_UDS_respone+0x116>
				}
			}
			else if (data[0] == 0x30) //control_frame
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b30      	cmp	r3, #48	; 0x30
 8001d8c:	d102      	bne.n	8001d94 <Sequence_UDS_respone+0xf4>
			{
				Sequence_UDS_request();
 8001d8e:	f7ff faf1 	bl	8001374 <Sequence_UDS_request>
			}
			else
			{
			  step = 0;
			}
			break;
 8001d92:	e173      	b.n	800207c <Sequence_UDS_respone+0x3dc>
			else if ((data[1] == 0x67) && (data[2] == 0x12))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b67      	cmp	r3, #103	; 0x67
 8001d9c:	d107      	bne.n	8001dae <Sequence_UDS_respone+0x10e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3302      	adds	r3, #2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b12      	cmp	r3, #18
 8001da6:	d102      	bne.n	8001dae <Sequence_UDS_respone+0x10e>
				Sequence_UDS_request();
 8001da8:	f7ff fae4 	bl	8001374 <Sequence_UDS_request>
 8001dac:	e003      	b.n	8001db6 <Sequence_UDS_respone+0x116>
			  step = 0;
 8001dae:	4b70      	ldr	r3, [pc, #448]	; (8001f70 <Sequence_UDS_respone+0x2d0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
			break;
 8001db4:	e162      	b.n	800207c <Sequence_UDS_respone+0x3dc>
 8001db6:	e161      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case set_progmd:
		{
		  if((data[1] == 0x71) && (data[2] == 0x01) && (data[3] == 0xC0) && (data[4] == 0x01))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b71      	cmp	r3, #113	; 0x71
 8001dc0:	f040 8159 	bne.w	8002076 <Sequence_UDS_respone+0x3d6>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	f040 8153 	bne.w	8002076 <Sequence_UDS_respone+0x3d6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3303      	adds	r3, #3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8001dd8:	f040 814d 	bne.w	8002076 <Sequence_UDS_respone+0x3d6>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3304      	adds	r3, #4
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	f040 8147 	bne.w	8002076 <Sequence_UDS_respone+0x3d6>
		  {
			Sequence_UDS_request();
 8001de8:	f7ff fac4 	bl	8001374 <Sequence_UDS_request>
		  }
		  break;
 8001dec:	e143      	b.n	8002076 <Sequence_UDS_respone+0x3d6>
		}
		case prog_sess:
		{
		  if((data[1] == 0x50) && (data[2] == 0x02))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3301      	adds	r3, #1
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b50      	cmp	r3, #80	; 0x50
 8001df6:	f040 8140 	bne.w	800207a <Sequence_UDS_respone+0x3da>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	f040 813a 	bne.w	800207a <Sequence_UDS_respone+0x3da>
		  {
			Sequence_UDS_request();
 8001e06:	f7ff fab5 	bl	8001374 <Sequence_UDS_request>
		  }
		  break;
 8001e0a:	e136      	b.n	800207a <Sequence_UDS_respone+0x3da>
		}
		case sec_access_A:
		{
		  if((data[0] == 0x10) && (data[1] == 0x22) && (data[2] == 0x67))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d113      	bne.n	8001e3c <Sequence_UDS_respone+0x19c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3301      	adds	r3, #1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b22      	cmp	r3, #34	; 0x22
 8001e1c:	d10e      	bne.n	8001e3c <Sequence_UDS_respone+0x19c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3302      	adds	r3, #2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b67      	cmp	r3, #103	; 0x67
 8001e26:	d109      	bne.n	8001e3c <Sequence_UDS_respone+0x19c>
		  {
			memcpy(Seed, &data[3], 5);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3303      	adds	r3, #3
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	4619      	mov	r1, r3
 8001e30:	484e      	ldr	r0, [pc, #312]	; (8001f6c <Sequence_UDS_respone+0x2cc>)
 8001e32:	f011 fcf9 	bl	8013828 <memcpy>
			Control_Frame();
 8001e36:	f000 f927 	bl	8002088 <Control_Frame>
 8001e3a:	e039      	b.n	8001eb0 <Sequence_UDS_respone+0x210>
		  }
		  else if((data[0] >= 0x21) && (data[0] <= 0x24))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d91d      	bls.n	8001e80 <Sequence_UDS_respone+0x1e0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b24      	cmp	r3, #36	; 0x24
 8001e4a:	d819      	bhi.n	8001e80 <Sequence_UDS_respone+0x1e0>
		  {
			memcpy(&Seed[5 + (data[0] - 0x21) * 7], &data[1], 7);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	f1a3 0221 	sub.w	r2, r3, #33	; 0x21
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	3305      	adds	r3, #5
 8001e5c:	4a43      	ldr	r2, [pc, #268]	; (8001f6c <Sequence_UDS_respone+0x2cc>)
 8001e5e:	1898      	adds	r0, r3, r2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	2207      	movs	r2, #7
 8001e66:	4619      	mov	r1, r3
 8001e68:	f011 fcde 	bl	8013828 <memcpy>
			if(data[0] == 0x24)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b24      	cmp	r3, #36	; 0x24
 8001e72:	d11d      	bne.n	8001eb0 <Sequence_UDS_respone+0x210>
			{
			  Calculate_Key(1);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f000 f927 	bl	80020c8 <Calculate_Key>
			  Sequence_UDS_request();
 8001e7a:	f7ff fa7b 	bl	8001374 <Sequence_UDS_request>
			if(data[0] == 0x24)
 8001e7e:	e017      	b.n	8001eb0 <Sequence_UDS_respone+0x210>
			}
		  }
		  else if (data[0] == 0x30) //control_frame
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b30      	cmp	r3, #48	; 0x30
 8001e86:	d102      	bne.n	8001e8e <Sequence_UDS_respone+0x1ee>
		  {
			Sequence_UDS_request();
 8001e88:	f7ff fa74 	bl	8001374 <Sequence_UDS_request>
		  }
		  else
		  {
			step = 0;
		  }
		  break;
 8001e8c:	e0f6      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		  else if ((data[1] == 0x67) && (data[2] == 0x02))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3301      	adds	r3, #1
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b67      	cmp	r3, #103	; 0x67
 8001e96:	d107      	bne.n	8001ea8 <Sequence_UDS_respone+0x208>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d102      	bne.n	8001ea8 <Sequence_UDS_respone+0x208>
			Sequence_UDS_request();
 8001ea2:	f7ff fa67 	bl	8001374 <Sequence_UDS_request>
 8001ea6:	e003      	b.n	8001eb0 <Sequence_UDS_respone+0x210>
			step = 0;
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <Sequence_UDS_respone+0x2d0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
		  break;
 8001eae:	e0e5      	b.n	800207c <Sequence_UDS_respone+0x3dc>
 8001eb0:	e0e4      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case idwrite_repair:
		{
		  if (data[0] == 0x30) //control_frame
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b30      	cmp	r3, #48	; 0x30
 8001eb8:	d102      	bne.n	8001ec0 <Sequence_UDS_respone+0x220>
		  {
		    Sequence_UDS_request();
 8001eba:	f7ff fa5b 	bl	8001374 <Sequence_UDS_request>
		  }
		  else
		  {
			  step = 0;
		  }
		  break;
 8001ebe:	e0dd      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		  else if ((data[1] == 0x6E) && (data[2] == 0xF1) && (data[3] == 0x98))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b6e      	cmp	r3, #110	; 0x6e
 8001ec8:	d10c      	bne.n	8001ee4 <Sequence_UDS_respone+0x244>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3302      	adds	r3, #2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2bf1      	cmp	r3, #241	; 0xf1
 8001ed2:	d107      	bne.n	8001ee4 <Sequence_UDS_respone+0x244>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3303      	adds	r3, #3
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b98      	cmp	r3, #152	; 0x98
 8001edc:	d102      	bne.n	8001ee4 <Sequence_UDS_respone+0x244>
		    Sequence_UDS_request();
 8001ede:	f7ff fa49 	bl	8001374 <Sequence_UDS_request>
		  break;
 8001ee2:	e0cb      	b.n	800207c <Sequence_UDS_respone+0x3dc>
			  step = 0;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <Sequence_UDS_respone+0x2d0>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
		  break;
 8001eea:	e0c7      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case idwrite_prog:
		{
		  if ((data[1] == 0x6E) && (data[2] == 0xF1) && (data[3] == 0x99))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b6e      	cmp	r3, #110	; 0x6e
 8001ef4:	d10c      	bne.n	8001f10 <Sequence_UDS_respone+0x270>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2bf1      	cmp	r3, #241	; 0xf1
 8001efe:	d107      	bne.n	8001f10 <Sequence_UDS_respone+0x270>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3303      	adds	r3, #3
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b99      	cmp	r3, #153	; 0x99
 8001f08:	d102      	bne.n	8001f10 <Sequence_UDS_respone+0x270>
		  {
		    Sequence_UDS_request();
 8001f0a:	f7ff fa33 	bl	8001374 <Sequence_UDS_request>
		  }
		  else
		  {
			  step = 0;
		  }
		  break;
 8001f0e:	e0b5      	b.n	800207c <Sequence_UDS_respone+0x3dc>
			  step = 0;
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <Sequence_UDS_respone+0x2d0>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
		  break;
 8001f16:	e0b1      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case erase_app:
		{
		  if ((data[1] == 0x71) && (data[2] == 0x01) && (data[3] == 0xFF))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b71      	cmp	r3, #113	; 0x71
 8001f20:	d10c      	bne.n	8001f3c <Sequence_UDS_respone+0x29c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3302      	adds	r3, #2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <Sequence_UDS_respone+0x29c>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3303      	adds	r3, #3
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2bff      	cmp	r3, #255	; 0xff
 8001f34:	d102      	bne.n	8001f3c <Sequence_UDS_respone+0x29c>
		  {
			Sequence_UDS_request();
 8001f36:	f7ff fa1d 	bl	8001374 <Sequence_UDS_request>
		  }
		  else
		  {
			  step = 0;
		  }
		  break;
 8001f3a:	e09f      	b.n	800207c <Sequence_UDS_respone+0x3dc>
			  step = 0;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <Sequence_UDS_respone+0x2d0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
		  break;
 8001f42:	e09b      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case tester_present:
		{
		  if ((data[1] == 0x7E) && (data[2] == 0x00))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3301      	adds	r3, #1
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b7e      	cmp	r3, #126	; 0x7e
 8001f4c:	d107      	bne.n	8001f5e <Sequence_UDS_respone+0x2be>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3302      	adds	r3, #2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <Sequence_UDS_respone+0x2be>
		  {
			Sequence_UDS_request();
 8001f58:	f7ff fa0c 	bl	8001374 <Sequence_UDS_request>
		  }
		  else
		  {
			  step = 0;
		  }
		  break;
 8001f5c:	e08e      	b.n	800207c <Sequence_UDS_respone+0x3dc>
			  step = 0;
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <Sequence_UDS_respone+0x2d0>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
		  break;
 8001f64:	e08a      	b.n	800207c <Sequence_UDS_respone+0x3dc>
 8001f66:	bf00      	nop
 8001f68:	2000059c 	.word	0x2000059c
 8001f6c:	20000020 	.word	0x20000020
 8001f70:	20000104 	.word	0x20000104
		}
		case req_transfer:
		{
		  if (data[0] == 0x30) //control_frame
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b30      	cmp	r3, #48	; 0x30
 8001f7a:	d102      	bne.n	8001f82 <Sequence_UDS_respone+0x2e2>
		  {
			Sequence_UDS_request();
 8001f7c:	f7ff f9fa 	bl	8001374 <Sequence_UDS_request>
		  }
		  else
		  {
			step = 0;
		  }
		  break;
 8001f80:	e07c      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		  else if ((data[1] == 0x74) && (data[2] == 0x20) && (data[3] == 0x0F) && (data[4] == 0xF2))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3301      	adds	r3, #1
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b74      	cmp	r3, #116	; 0x74
 8001f8a:	d111      	bne.n	8001fb0 <Sequence_UDS_respone+0x310>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3302      	adds	r3, #2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d10c      	bne.n	8001fb0 <Sequence_UDS_respone+0x310>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3303      	adds	r3, #3
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d107      	bne.n	8001fb0 <Sequence_UDS_respone+0x310>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2bf2      	cmp	r3, #242	; 0xf2
 8001fa8:	d102      	bne.n	8001fb0 <Sequence_UDS_respone+0x310>
			Sequence_UDS_request();
 8001faa:	f7ff f9e3 	bl	8001374 <Sequence_UDS_request>
		  break;
 8001fae:	e065      	b.n	800207c <Sequence_UDS_respone+0x3dc>
			step = 0;
 8001fb0:	4b34      	ldr	r3, [pc, #208]	; (8002084 <Sequence_UDS_respone+0x3e4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
		  break;
 8001fb6:	e061      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case transfer_app:
		{
			if (data[0] == 0x30) //control_frame
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b30      	cmp	r3, #48	; 0x30
 8001fbe:	d102      	bne.n	8001fc6 <Sequence_UDS_respone+0x326>
			{
				Sequence_UDS_request();
 8001fc0:	f7ff f9d8 	bl	8001374 <Sequence_UDS_request>
			}
			else
			{
				step = 0;
			}
			break;
 8001fc4:	e05a      	b.n	800207c <Sequence_UDS_respone+0x3dc>
			else if ((data[1] == 0x76))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b76      	cmp	r3, #118	; 0x76
 8001fce:	d102      	bne.n	8001fd6 <Sequence_UDS_respone+0x336>
				Sequence_UDS_request();
 8001fd0:	f7ff f9d0 	bl	8001374 <Sequence_UDS_request>
			break;
 8001fd4:	e052      	b.n	800207c <Sequence_UDS_respone+0x3dc>
				step = 0;
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <Sequence_UDS_respone+0x3e4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
			break;
 8001fdc:	e04e      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case exit_transfer:
		{
			if (data[1] == 0x77)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b77      	cmp	r3, #119	; 0x77
 8001fe6:	d102      	bne.n	8001fee <Sequence_UDS_respone+0x34e>
			{
				Sequence_UDS_request();
 8001fe8:	f7ff f9c4 	bl	8001374 <Sequence_UDS_request>
			}
			else
			{
				step = 0;
			}
			break;
 8001fec:	e046      	b.n	800207c <Sequence_UDS_respone+0x3dc>
				step = 0;
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <Sequence_UDS_respone+0x3e4>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
			break;
 8001ff4:	e042      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case read_dtc:
		{
			if ((data[1] == 0x59) && (data[2] == 0x02) && (data[3] == 0x4B))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b59      	cmp	r3, #89	; 0x59
 8001ffe:	d10c      	bne.n	800201a <Sequence_UDS_respone+0x37a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3302      	adds	r3, #2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d107      	bne.n	800201a <Sequence_UDS_respone+0x37a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3303      	adds	r3, #3
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b4b      	cmp	r3, #75	; 0x4b
 8002012:	d102      	bne.n	800201a <Sequence_UDS_respone+0x37a>
			{
				Sequence_UDS_request();
 8002014:	f7ff f9ae 	bl	8001374 <Sequence_UDS_request>
			}
			else
			{
				step = 0;
			}
			break;
 8002018:	e030      	b.n	800207c <Sequence_UDS_respone+0x3dc>
				step = 0;
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <Sequence_UDS_respone+0x3e4>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
			break;
 8002020:	e02c      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case rid_check:
		{
			if ((data[1] == 0x71) && (data[2] == 0x01) && (data[3] == 0xFF))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3301      	adds	r3, #1
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b71      	cmp	r3, #113	; 0x71
 800202a:	d10c      	bne.n	8002046 <Sequence_UDS_respone+0x3a6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3302      	adds	r3, #2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <Sequence_UDS_respone+0x3a6>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3303      	adds	r3, #3
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2bff      	cmp	r3, #255	; 0xff
 800203e:	d102      	bne.n	8002046 <Sequence_UDS_respone+0x3a6>
			{
				Sequence_UDS_request();
 8002040:	f7ff f998 	bl	8001374 <Sequence_UDS_request>
			}
			else
			{
				step = 0;
			}
			break;
 8002044:	e01a      	b.n	800207c <Sequence_UDS_respone+0x3dc>
				step = 0;
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <Sequence_UDS_respone+0x3e4>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
			break;
 800204c:	e016      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		}
		case ecu_reset:
		{
			if ((data[1] == 0x51) && (data[2] == 0x01))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3301      	adds	r3, #1
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b51      	cmp	r3, #81	; 0x51
 8002056:	d108      	bne.n	800206a <Sequence_UDS_respone+0x3ca>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3302      	adds	r3, #2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d103      	bne.n	800206a <Sequence_UDS_respone+0x3ca>
			{
				step = 0;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <Sequence_UDS_respone+0x3e4>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				step = 0;
			}
			break;
 8002068:	e008      	b.n	800207c <Sequence_UDS_respone+0x3dc>
				step = 0;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <Sequence_UDS_respone+0x3e4>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
			break;
 8002070:	e004      	b.n	800207c <Sequence_UDS_respone+0x3dc>
			break;
 8002072:	bf00      	nop
 8002074:	e002      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		  break;
 8002076:	bf00      	nop
 8002078:	e000      	b.n	800207c <Sequence_UDS_respone+0x3dc>
		  break;
 800207a:	bf00      	nop
		default:
		{

		}
	}
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000104 	.word	0x20000104

08002088 <Control_Frame>:

static void Control_Frame(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
	Msg_Info tx_msg = {0x751, CAN_ID_STD, 8};
 800208e:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <Control_Frame+0x38>)
 8002090:	f107 0308 	add.w	r3, r7, #8
 8002094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002098:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t data[8] = {0x30, 0, 0, 0, 0, 0, 0, 0};
 800209c:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <Control_Frame+0x3c>)
 800209e:	463b      	mov	r3, r7
 80020a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020a4:	e883 0003 	stmia.w	r3, {r0, r1}
	rb_CAN1_Transmit(tx_msg, data);
 80020a8:	463b      	mov	r3, r7
 80020aa:	461a      	mov	r2, r3
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020b4:	f000 fcb2 	bl	8002a1c <rb_CAN1_Transmit>
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	08014d00 	.word	0x08014d00
 80020c4:	08014d98 	.word	0x08014d98

080020c8 <Calculate_Key>:

static void Calculate_Key(uint8_t level)
{
 80020c8:	b5b0      	push	{r4, r5, r7, lr}
 80020ca:	b0a2      	sub	sp, #136	; 0x88
 80020cc:	af20      	add	r7, sp, #128	; 0x80
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
	if(level == 11) // level B
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b0b      	cmp	r3, #11
 80020d6:	d10d      	bne.n	80020f4 <Calculate_Key+0x2c>
	{
    memcpy(seed_info.secret_key, Secret_K_B, sizeof(Secret_K_B));
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <Calculate_Key+0x84>)
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <Calculate_Key+0x88>)
 80020dc:	4614      	mov	r4, r2
 80020de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e0:	c407      	stmia	r4!, {r0, r1, r2}
 80020e2:	8023      	strh	r3, [r4, #0]
 80020e4:	3402      	adds	r4, #2
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	7023      	strb	r3, [r4, #0]
    seed_info.secret_key_length = sizeof(Secret_K_B);
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <Calculate_Key+0x84>)
 80020ec:	220f      	movs	r2, #15
 80020ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80020f2:	e009      	b.n	8002108 <Calculate_Key+0x40>
	}
	else
	{
	  memcpy(seed_info.secret_key, Secret_K_A, sizeof(Secret_K_A));
 80020f4:	4a15      	ldr	r2, [pc, #84]	; (800214c <Calculate_Key+0x84>)
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <Calculate_Key+0x8c>)
 80020f8:	4614      	mov	r4, r2
 80020fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  seed_info.secret_key_length = sizeof(Secret_K_A);
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <Calculate_Key+0x84>)
 8002102:	2210      	movs	r2, #16
 8002104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
	memcpy(seed_info.seed, Seed, sizeof(Seed));
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <Calculate_Key+0x84>)
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <Calculate_Key+0x90>)
 800210c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002110:	4615      	mov	r5, r2
 8002112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800211a:	682b      	ldr	r3, [r5, #0]
 800211c:	7023      	strb	r3, [r4, #0]
	seed_info.seed_length = sizeof(Seed);
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <Calculate_Key+0x84>)
 8002120:	2221      	movs	r2, #33	; 0x21
 8002122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	Cal_Key(seed_info, key);
 8002126:	4c09      	ldr	r4, [pc, #36]	; (800214c <Calculate_Key+0x84>)
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <Calculate_Key+0x94>)
 800212a:	931e      	str	r3, [sp, #120]	; 0x78
 800212c:	4668      	mov	r0, sp
 800212e:	f104 0310 	add.w	r3, r4, #16
 8002132:	2278      	movs	r2, #120	; 0x78
 8002134:	4619      	mov	r1, r3
 8002136:	f011 fb77 	bl	8013828 <memcpy>
 800213a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800213e:	f7fe fda1 	bl	8000c84 <Cal_Key>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bdb0      	pop	{r4, r5, r7, pc}
 800214a:	bf00      	nop
 800214c:	20000514 	.word	0x20000514
 8002150:	20000000 	.word	0x20000000
 8002154:	20000010 	.word	0x20000010
 8002158:	20000020 	.word	0x20000020
 800215c:	20000620 	.word	0x20000620

08002160 <delay>:

static void delay(void)
{
 8002160:	b4b0      	push	{r4, r5, r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
	uint64_t index;
	for (index = 0; index < 10000; index++)
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9c7 2300 	strd	r2, r3, [r7]
 8002172:	e006      	b.n	8002182 <delay+0x22>
 8002174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002178:	1c50      	adds	r0, r2, #1
 800217a:	f143 0100 	adc.w	r1, r3, #0
 800217e:	e9c7 0100 	strd	r0, r1, [r7]
 8002182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002186:	f242 740f 	movw	r4, #9999	; 0x270f
 800218a:	f04f 0500 	mov.w	r5, #0
 800218e:	429d      	cmp	r5, r3
 8002190:	bf08      	it	eq
 8002192:	4294      	cmpeq	r4, r2
 8002194:	d2ee      	bcs.n	8002174 <delay+0x14>
	{

	}

}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bcb0      	pop	{r4, r5, r7}
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b09c      	sub	sp, #112	; 0x70
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  char buf[100];
  sprintf (buf, "Sending TCPServer Message %d\n", counter2);
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	f107 030c 	add.w	r3, r7, #12
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80021b8:	4618      	mov	r0, r3
 80021ba:	f011 fbbd 	bl	8013938 <siprintf>
  rb_TCPServerSend(buf);
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fe70 	bl	8002ea8 <rb_TCPServerSend>
  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80021c8:	2102      	movs	r1, #2
 80021ca:	4808      	ldr	r0, [pc, #32]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80021cc:	f004 f949 	bl	8006462 <HAL_GPIO_TogglePin>

  counter2++;
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80021da:	801a      	strh	r2, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	3770      	adds	r7, #112	; 0x70
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000106 	.word	0x20000106
 80021e8:	08014da0 	.word	0x08014da0
 80021ec:	40022000 	.word	0x40022000

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <Error_Handler+0x8>
	...

080021fc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <MX_QUADSPI_Init+0x50>)
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <MX_QUADSPI_Init+0x54>)
 8002204:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_QUADSPI_Init+0x50>)
 8002208:	2201      	movs	r2, #1
 800220a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_QUADSPI_Init+0x50>)
 800220e:	2204      	movs	r2, #4
 8002210:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_QUADSPI_Init+0x50>)
 8002214:	2210      	movs	r2, #16
 8002216:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_QUADSPI_Init+0x50>)
 800221a:	2217      	movs	r2, #23
 800221c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_QUADSPI_Init+0x50>)
 8002220:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002224:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_QUADSPI_Init+0x50>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <MX_QUADSPI_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_QUADSPI_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	; (800224c <MX_QUADSPI_Init+0x50>)
 800223a:	f004 f97d 	bl	8006538 <HAL_QSPI_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002244:	f7ff ffd4 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000169c 	.word	0x2000169c
 8002250:	a0001000 	.word	0xa0001000

08002254 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a3b      	ldr	r2, [pc, #236]	; (8002360 <HAL_QSPI_MspInit+0x10c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d170      	bne.n	8002358 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6393      	str	r3, [r2, #56]	; 0x38
 8002282:	4b38      	ldr	r3, [pc, #224]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800228e:	4b35      	ldr	r3, [pc, #212]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a34      	ldr	r2, [pc, #208]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a2e      	ldr	r2, [pc, #184]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022be:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_QSPI_MspInit+0x110>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022d6:	2304      	movs	r3, #4
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022e6:	2309      	movs	r3, #9
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	481d      	ldr	r0, [pc, #116]	; (8002368 <HAL_QSPI_MspInit+0x114>)
 80022f2:	f003 fde5 	bl	8005ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022f6:	2340      	movs	r3, #64	; 0x40
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002306:	230a      	movs	r3, #10
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	4619      	mov	r1, r3
 8002310:	4816      	ldr	r0, [pc, #88]	; (800236c <HAL_QSPI_MspInit+0x118>)
 8002312:	f003 fdd5 	bl	8005ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002316:	2304      	movs	r3, #4
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002326:	2309      	movs	r3, #9
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	480e      	ldr	r0, [pc, #56]	; (800236c <HAL_QSPI_MspInit+0x118>)
 8002332:	f003 fdc5 	bl	8005ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8002336:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800233a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002348:	2309      	movs	r3, #9
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	4807      	ldr	r0, [pc, #28]	; (8002370 <HAL_QSPI_MspInit+0x11c>)
 8002354:	f003 fdb4 	bl	8005ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002358:	bf00      	nop
 800235a:	3730      	adds	r7, #48	; 0x30
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	a0001000 	.word	0xa0001000
 8002364:	40023800 	.word	0x40023800
 8002368:	40021000 	.word	0x40021000
 800236c:	40020400 	.word	0x40020400
 8002370:	40020c00 	.word	0x40020c00

08002374 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <HAL_QSPI_MspDeInit+0x40>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d112      	bne.n	80023ac <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_QSPI_MspDeInit+0x44>)
 8002388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238a:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <HAL_QSPI_MspDeInit+0x44>)
 800238c:	f023 0302 	bic.w	r3, r3, #2
 8002390:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8002392:	2104      	movs	r1, #4
 8002394:	4809      	ldr	r0, [pc, #36]	; (80023bc <HAL_QSPI_MspDeInit+0x48>)
 8002396:	f003 ff3f 	bl	8006218 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 800239a:	2144      	movs	r1, #68	; 0x44
 800239c:	4808      	ldr	r0, [pc, #32]	; (80023c0 <HAL_QSPI_MspDeInit+0x4c>)
 800239e:	f003 ff3b 	bl	8006218 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80023a2:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80023a6:	4807      	ldr	r0, [pc, #28]	; (80023c4 <HAL_QSPI_MspDeInit+0x50>)
 80023a8:	f003 ff36 	bl	8006218 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	a0001000 	.word	0xa0001000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40020c00 	.word	0x40020c00

080023c8 <CSP_QUADSPI_Init>:
/* USER CODE BEGIN 1 */

/* QUADSPI init function */

uint8_t CSP_QUADSPI_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 80023cc:	4b17      	ldr	r3, [pc, #92]	; (800242c <CSP_QUADSPI_Init+0x64>)
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <CSP_QUADSPI_Init+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 80023d2:	4816      	ldr	r0, [pc, #88]	; (800242c <CSP_QUADSPI_Init+0x64>)
 80023d4:	f004 f92c 	bl	8006630 <HAL_QSPI_DeInit>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e021      	b.n	8002426 <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
 80023e2:	f7ff ff0b 	bl	80021fc <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 80023e6:	f000 f981 	bl	80026ec <QSPI_ResetChip>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e018      	b.n	8002426 <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f001 fbd1 	bl	8003b9c <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80023fa:	f000 f81b 	bl	8002434 <QSPI_AutoPollingMemReady>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e00e      	b.n	8002426 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8002408:	f000 f84c 	bl	80024a4 <QSPI_WriteEnable>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e007      	b.n	8002426 <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8002416:	f000 f88f 	bl	8002538 <QSPI_Configuration>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000169c 	.word	0x2000169c
 8002430:	a0001000 	.word	0xa0001000

08002434 <QSPI_AutoPollingMemReady>:

    return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b094      	sub	sp, #80	; 0x50
 8002438:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800243a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8002440:	2305      	movs	r3, #5
 8002442:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002448:	2300      	movs	r3, #0
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 800244c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800245a:	2300      	movs	r3, #0
 800245c:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800245e:	2300      	movs	r3, #0
 8002460:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8002466:	2301      	movs	r3, #1
 8002468:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8002472:	2310      	movs	r3, #16
 8002474:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8002476:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800247a:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800247c:	463a      	mov	r2, r7
 800247e:	f107 0118 	add.w	r1, r7, #24
 8002482:	f241 3388 	movw	r3, #5000	; 0x1388
 8002486:	4806      	ldr	r0, [pc, #24]	; (80024a0 <QSPI_AutoPollingMemReady+0x6c>)
 8002488:	f004 fa8d 	bl	80069a6 <HAL_QSPI_AutoPolling>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3750      	adds	r7, #80	; 0x50
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000169c 	.word	0x2000169c

080024a4 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b094      	sub	sp, #80	; 0x50
 80024a8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80024aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 80024b0:	2306      	movs	r3, #6
 80024b2:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 80024bc:	2300      	movs	r3, #0
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80024c8:	2300      	movs	r3, #0
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80024cc:	2300      	movs	r3, #0
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80024d0:	f107 0318 	add.w	r3, r7, #24
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4619      	mov	r1, r3
 80024da:	4816      	ldr	r0, [pc, #88]	; (8002534 <QSPI_WriteEnable+0x90>)
 80024dc:	f004 f8cc 	bl	8006678 <HAL_QSPI_Command>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e01f      	b.n	800252a <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 80024ea:	2302      	movs	r3, #2
 80024ec:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 80024ee:	2302      	movs	r3, #2
 80024f0:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 80024fa:	2310      	movs	r3, #16
 80024fc:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80024fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002502:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8002504:	2305      	movs	r3, #5
 8002506:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8002508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 800250e:	463a      	mov	r2, r7
 8002510:	f107 0118 	add.w	r1, r7, #24
 8002514:	f241 3388 	movw	r3, #5000	; 0x1388
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <QSPI_WriteEnable+0x90>)
 800251a:	f004 fa44 	bl	80069a6 <HAL_QSPI_AutoPolling>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3750      	adds	r7, #80	; 0x50
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	2000169c 	.word	0x2000169c

08002538 <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b092      	sub	sp, #72	; 0x48
 800253c:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800253e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002542:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 8002544:	2385      	movs	r3, #133	; 0x85
 8002546:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800254c:	2300      	movs	r3, #0
 800254e:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8002550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800255e:	2300      	movs	r3, #0
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002562:	2300      	movs	r3, #0
 8002564:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.NbData = 1;
 8002566:	2301      	movs	r3, #1
 8002568:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800256a:	f107 0308 	add.w	r3, r7, #8
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4619      	mov	r1, r3
 8002574:	4833      	ldr	r0, [pc, #204]	; (8002644 <QSPI_Configuration+0x10c>)
 8002576:	f004 f87f 	bl	8006678 <HAL_QSPI_Command>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <QSPI_Configuration+0x4c>
        != HAL_OK) {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e05b      	b.n	800263c <QSPI_Configuration+0x104>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4619      	mov	r1, r3
 800258c:	482d      	ldr	r0, [pc, #180]	; (8002644 <QSPI_Configuration+0x10c>)
 800258e:	f004 f968 	bl	8006862 <HAL_QSPI_Receive>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <QSPI_Configuration+0x64>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e04f      	b.n	800263c <QSPI_Configuration+0x104>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 800259c:	f7ff ff82 	bl	80024a4 <QSPI_WriteEnable>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <QSPI_Configuration+0x72>

        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e048      	b.n	800263c <QSPI_Configuration+0x104>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	b25a      	sxtb	r2, r3
 80025b4:	23f0      	movs	r3, #240	; 0xf0
 80025b6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4619      	mov	r1, r3
 80025ca:	230a      	movs	r3, #10
 80025cc:	408b      	lsls	r3, r1
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	71fb      	strb	r3, [r7, #7]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80025d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025dc:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80025e6:	2300      	movs	r3, #0
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80025ea:	2300      	movs	r3, #0
 80025ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 80025ee:	2381      	movs	r3, #129	; 0x81
 80025f0:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 80025f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
    sCommand.NbData = 1;
 8002600:	2301      	movs	r3, #1
 8002602:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002604:	f107 0308 	add.w	r3, r7, #8
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4619      	mov	r1, r3
 800260e:	480d      	ldr	r0, [pc, #52]	; (8002644 <QSPI_Configuration+0x10c>)
 8002610:	f004 f832 	bl	8006678 <HAL_QSPI_Command>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <QSPI_Configuration+0xe6>
        != HAL_OK) {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00e      	b.n	800263c <QSPI_Configuration+0x104>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 800261e:	1dfb      	adds	r3, r7, #7
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4619      	mov	r1, r3
 8002626:	4807      	ldr	r0, [pc, #28]	; (8002644 <QSPI_Configuration+0x10c>)
 8002628:	f004 f884 	bl	8006734 <HAL_QSPI_Transmit>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <QSPI_Configuration+0x102>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 8002632:	f7ff fddd 	bl	80021f0 <Error_Handler>
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <QSPI_Configuration+0x104>
    }
    return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3748      	adds	r7, #72	; 0x48
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2000169c 	.word	0x2000169c

08002648 <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b090      	sub	sp, #64	; 0x40
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]

    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	4b23      	ldr	r3, [pc, #140]	; (80026e4 <CSP_QSPI_EraseSector+0x9c>)
 8002656:	4013      	ands	r3, r2
 8002658:	607b      	str	r3, [r7, #4]
                        - EraseStartAddress % N25Q128A_SECTOR_SIZE;

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800265a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800265e:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8002660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002664:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800266e:	2300      	movs	r3, #0
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002672:	2300      	movs	r3, #0
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = SECTOR_ERASE_CMD;
 8002676:	23d8      	movs	r3, #216	; 0xd8
 8002678:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 800267a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800267e:	627b      	str	r3, [r7, #36]	; 0x24

    sCommand.DataMode = QSPI_DATA_NONE;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]

    while (EraseEndAddress >= EraseStartAddress)
 8002688:	e022      	b.n	80026d0 <CSP_QSPI_EraseSector+0x88>
    {
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002690:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != HAL_OK) {
 8002692:	f7ff ff07 	bl	80024a4 <QSPI_WriteEnable>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <CSP_QSPI_EraseSector+0x58>
            return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e01c      	b.n	80026da <CSP_QSPI_EraseSector+0x92>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a8:	4619      	mov	r1, r3
 80026aa:	480f      	ldr	r0, [pc, #60]	; (80026e8 <CSP_QSPI_EraseSector+0xa0>)
 80026ac:	f003 ffe4 	bl	8006678 <HAL_QSPI_Command>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <CSP_QSPI_EraseSector+0x72>
            != HAL_OK) {
            return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00f      	b.n	80026da <CSP_QSPI_EraseSector+0x92>
        }
        EraseStartAddress += N25Q128A_SECTOR_SIZE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80026c0:	607b      	str	r3, [r7, #4]

        if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80026c2:	f7ff feb7 	bl	8002434 <QSPI_AutoPollingMemReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <CSP_QSPI_EraseSector+0x88>
            return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e004      	b.n	80026da <CSP_QSPI_EraseSector+0x92>
    while (EraseEndAddress >= EraseStartAddress)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d2d8      	bcs.n	800268a <CSP_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3740      	adds	r7, #64	; 0x40
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	ffff0000 	.word	0xffff0000
 80026e8:	2000169c 	.word	0x2000169c

080026ec <QSPI_ResetChip>:
    }
    return HAL_OK;
}

uint8_t QSPI_ResetChip()
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b090      	sub	sp, #64	; 0x40
 80026f0:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80026f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026fa:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80026fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002700:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800270e:	2300      	movs	r3, #0
 8002710:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8002712:	2366      	movs	r3, #102	; 0x66
 8002714:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002716:	2300      	movs	r3, #0
 8002718:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800271e:	2300      	movs	r3, #0
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	f241 3288 	movw	r2, #5000	; 0x1388
 800272c:	4619      	mov	r1, r3
 800272e:	481d      	ldr	r0, [pc, #116]	; (80027a4 <QSPI_ResetChip+0xb8>)
 8002730:	f003 ffa2 	bl	8006678 <HAL_QSPI_Command>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e02e      	b.n	800279c <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 800273e:	2300      	movs	r3, #0
 8002740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002742:	e003      	b.n	800274c <QSPI_ResetChip+0x60>
        __NOP();
 8002744:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	3301      	adds	r3, #1
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274e:	2b2e      	cmp	r3, #46	; 0x2e
 8002750:	d9f8      	bls.n	8002744 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002756:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8002758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275c:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800276a:	2300      	movs	r3, #0
 800276c:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 800276e:	2399      	movs	r3, #153	; 0x99
 8002770:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 800277a:	2300      	movs	r3, #0
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4619      	mov	r1, r3
 800278a:	4806      	ldr	r0, [pc, #24]	; (80027a4 <QSPI_ResetChip+0xb8>)
 800278c:	f003 ff74 	bl	8006678 <HAL_QSPI_Command>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3740      	adds	r7, #64	; 0x40
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	2000169c 	.word	0x2000169c

080027a8 <CSP_QSPI_Write>:
  return HAL_OK;
}


uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b096      	sub	sp, #88	; 0x58
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80027bc:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80027be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d901      	bls.n	80027ca <CSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80027d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 80027dc:	2312      	movs	r3, #18
 80027de:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80027e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80027e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ea:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80027f0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80027f4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80027fe:	2300      	movs	r3, #0
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002802:	2300      	movs	r3, #0
 8002804:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8002806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002808:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 800280a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 800280e:	f7ff fe49 	bl	80024a4 <QSPI_WriteEnable>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <CSP_QSPI_Write+0x74>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e038      	b.n	800288e <CSP_QSPI_Write+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	f241 3288 	movw	r2, #5000	; 0x1388
 8002824:	4619      	mov	r1, r3
 8002826:	481c      	ldr	r0, [pc, #112]	; (8002898 <CSP_QSPI_Write+0xf0>)
 8002828:	f003 ff26 	bl	8006678 <HAL_QSPI_Command>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <CSP_QSPI_Write+0x8e>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e02b      	b.n	800288e <CSP_QSPI_Write+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	4816      	ldr	r0, [pc, #88]	; (8002898 <CSP_QSPI_Write+0xf0>)
 800283e:	f003 ff79 	bl	8006734 <HAL_QSPI_Transmit>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <CSP_QSPI_Write+0xa4>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e020      	b.n	800288e <CSP_QSPI_Write+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
 800284c:	f7ff fdf2 	bl	8002434 <QSPI_AutoPollingMemReady>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <CSP_QSPI_Write+0xb2>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e019      	b.n	800288e <CSP_QSPI_Write+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800285a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800285c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285e:	4413      	add	r3, r2
 8002860:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002866:	4413      	add	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 800286a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002870:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002872:	429a      	cmp	r2, r3
 8002874:	d203      	bcs.n	800287e <CSP_QSPI_Write+0xd6>
 8002876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	e001      	b.n	8002882 <CSP_QSPI_Write+0xda>
 800287e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002882:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8002884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002888:	429a      	cmp	r2, r3
 800288a:	d3bc      	bcc.n	8002806 <CSP_QSPI_Write+0x5e>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3758      	adds	r7, #88	; 0x58
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000169c 	.word	0x2000169c

0800289c <CSP_QSPI_Read>:


uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b092      	sub	sp, #72	; 0x48
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80028a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80028ae:	23eb      	movs	r3, #235	; 0xeb
 80028b0:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80028b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80028b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028bc:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80028c6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80028ca:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80028cc:	230a      	movs	r3, #10
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80028d8:	2300      	movs	r3, #0
 80028da:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80028dc:	2300      	movs	r3, #0
 80028de:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028e0:	f107 0310 	add.w	r3, r7, #16
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4619      	mov	r1, r3
 80028ea:	4816      	ldr	r0, [pc, #88]	; (8002944 <CSP_QSPI_Read+0xa8>)
 80028ec:	f003 fec4 	bl	8006678 <HAL_QSPI_Command>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <CSP_QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e01f      	b.n	800293a <CSP_QSPI_Read+0x9e>
  }

  /* Set S# timing for Read command */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <CSP_QSPI_Read+0xa8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <CSP_QSPI_Read+0xa8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290c:	605a      	str	r2, [r3, #4]

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	68f9      	ldr	r1, [r7, #12]
 8002914:	480b      	ldr	r0, [pc, #44]	; (8002944 <CSP_QSPI_Read+0xa8>)
 8002916:	f003 ffa4 	bl	8006862 <HAL_QSPI_Receive>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <CSP_QSPI_Read+0x88>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e00a      	b.n	800293a <CSP_QSPI_Read+0x9e>
  }

  /* Restore S# timing for nonRead commands */
  MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <CSP_QSPI_Read+0xa8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <CSP_QSPI_Read+0xa8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8002936:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3748      	adds	r7, #72	; 0x48
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2000169c 	.word	0x2000169c

08002948 <rb_CAN1_Init>:
/**
  * @brief  Initialize CAN1.
  * @retval void
  */
void rb_CAN1_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
	if(Init_Flag != TRUE)
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <rb_CAN1_Init+0x78>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d033      	beq.n	80029bc <rb_CAN1_Init+0x74>
	{
	  hcan.Instance = CAN1;
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <rb_CAN1_Init+0x7c>)
 8002956:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <rb_CAN1_Init+0x80>)
 8002958:	601a      	str	r2, [r3, #0]
	  hcan.Init.Prescaler = 12;
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <rb_CAN1_Init+0x7c>)
 800295c:	220c      	movs	r2, #12
 800295e:	605a      	str	r2, [r3, #4]
	  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <rb_CAN1_Init+0x7c>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
	  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <rb_CAN1_Init+0x7c>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
	  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <rb_CAN1_Init+0x7c>)
 800296e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002972:	611a      	str	r2, [r3, #16]
	  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <rb_CAN1_Init+0x7c>)
 8002976:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800297a:	615a      	str	r2, [r3, #20]
	  hcan.Init.TimeTriggeredMode = DISABLE;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <rb_CAN1_Init+0x7c>)
 800297e:	2200      	movs	r2, #0
 8002980:	761a      	strb	r2, [r3, #24]
	  hcan.Init.AutoBusOff = DISABLE;
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <rb_CAN1_Init+0x7c>)
 8002984:	2200      	movs	r2, #0
 8002986:	765a      	strb	r2, [r3, #25]
	  hcan.Init.AutoWakeUp = DISABLE;
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <rb_CAN1_Init+0x7c>)
 800298a:	2200      	movs	r2, #0
 800298c:	769a      	strb	r2, [r3, #26]
	  hcan.Init.AutoRetransmission = DISABLE;
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <rb_CAN1_Init+0x7c>)
 8002990:	2200      	movs	r2, #0
 8002992:	76da      	strb	r2, [r3, #27]
	  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <rb_CAN1_Init+0x7c>)
 8002996:	2200      	movs	r2, #0
 8002998:	771a      	strb	r2, [r3, #28]
	  hcan.Init.TransmitFifoPriority = DISABLE;
 800299a:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <rb_CAN1_Init+0x7c>)
 800299c:	2200      	movs	r2, #0
 800299e:	775a      	strb	r2, [r3, #29]
	  Init_Flag = TRUE;
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <rb_CAN1_Init+0x78>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
	  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80029a6:	4807      	ldr	r0, [pc, #28]	; (80029c4 <rb_CAN1_Init+0x7c>)
 80029a8:	f001 f91c 	bl	8003be4 <HAL_CAN_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <rb_CAN1_Init+0x74>
	  {
	  	Error_Handler();
 80029b2:	f7ff fc1d 	bl	80021f0 <Error_Handler>
		Init_Flag = FALSE;
 80029b6:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <rb_CAN1_Init+0x78>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
	  }
	}
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000140 	.word	0x20000140
 80029c4:	20000118 	.word	0x20000118
 80029c8:	40006400 	.word	0x40006400

080029cc <rb_CAN1_Receive>:
  * @param  Msg_Info store message info (ID, DLC, Standard or Extend)
  * @param  msg store message data
  * @retval void
  */
void rb_CAN1_Receive(Msg_Info* Message, uint8_t FIFO_Num, uint8_t* msg)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	460b      	mov	r3, r1
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	72fb      	strb	r3, [r7, #11]
	CAN_RxHeaderTypeDef RxHeader;
	if(Init_Flag == TRUE)
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <rb_CAN1_Receive+0x48>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d114      	bne.n	8002a0c <rb_CAN1_Receive+0x40>
	{
		HAL_CAN_GetRxMessage(&hcan, FIFO_Num, &RxHeader, msg);
 80029e2:	7af9      	ldrb	r1, [r7, #11]
 80029e4:	f107 0214 	add.w	r2, r7, #20
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	480b      	ldr	r0, [pc, #44]	; (8002a18 <rb_CAN1_Receive+0x4c>)
 80029ec:	f001 fbf5 	bl	80041da <HAL_CAN_GetRxMessage>

		Message->DLC = RxHeader.DLC;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	715a      	strb	r2, [r3, #5]

		if(RxHeader.IDE == CAN_ID_STD)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <rb_CAN1_Receive+0x3a>
		{
				Message->ID = RxHeader.StdId;
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]
		{
				Message->ID = RxHeader.ExtId;
		}

	}
}
 8002a04:	e002      	b.n	8002a0c <rb_CAN1_Receive+0x40>
				Message->ID = RxHeader.ExtId;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	3730      	adds	r7, #48	; 0x30
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20000140 	.word	0x20000140
 8002a18:	20000118 	.word	0x20000118

08002a1c <rb_CAN1_Transmit>:
  * @param  Msg_Info store message info (ID, DLC, Standard or Extend)
  * @param  msg store message data
  * @retval void
  */
void rb_CAN1_Transmit(Msg_Info Message, uint8_t* msg)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08c      	sub	sp, #48	; 0x30
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a2a:	607a      	str	r2, [r7, #4]
	uint32_t TxMailbox;
	CAN_TxHeaderTypeDef TxHeader;
	if(Init_Flag == TRUE)
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <rb_CAN1_Transmit+0x50>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d117      	bne.n	8002a64 <rb_CAN1_Transmit+0x48>
	{
		TxHeader.RTR = CAN_RTR_DATA;
 8002a34:	2300      	movs	r3, #0
 8002a36:	623b      	str	r3, [r7, #32]
		TxHeader.DLC = Message.DLC;
 8002a38:	7b7b      	ldrb	r3, [r7, #13]
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24

		if(Message.Type == CAN_ID_STD)
 8002a3c:	7b3b      	ldrb	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <rb_CAN1_Transmit+0x30>
		{
				TxHeader.IDE = CAN_ID_STD;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
				TxHeader.StdId = Message.ID;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e003      	b.n	8002a54 <rb_CAN1_Transmit+0x38>
		}
		else
		{
				TxHeader.IDE = CAN_ID_EXT;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	61fb      	str	r3, [r7, #28]
				TxHeader.ExtId = Message.ID;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
		}

		HAL_CAN_AddTxMessage(&hcan, &TxHeader, msg, &TxMailbox);
 8002a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a58:	f107 0114 	add.w	r1, r7, #20
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4804      	ldr	r0, [pc, #16]	; (8002a70 <rb_CAN1_Transmit+0x54>)
 8002a60:	f001 fae0 	bl	8004024 <HAL_CAN_AddTxMessage>
	}
}
 8002a64:	bf00      	nop
 8002a66:	3730      	adds	r7, #48	; 0x30
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000140 	.word	0x20000140
 8002a70:	20000118 	.word	0x20000118

08002a74 <rb_CAN1_IRQ_Config>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval void
  */
void rb_CAN1_IRQ_Config(uint32_t ActiveITs)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    if(Init_Flag == TRUE)
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <rb_CAN1_IRQ_Config+0x20>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d103      	bne.n	8002a8c <rb_CAN1_IRQ_Config+0x18>
    {
        HAL_CAN_ActivateNotification(&hcan, ActiveITs);
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4804      	ldr	r0, [pc, #16]	; (8002a98 <rb_CAN1_IRQ_Config+0x24>)
 8002a88:	f001 fcb9 	bl	80043fe <HAL_CAN_ActivateNotification>
    }
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000140 	.word	0x20000140
 8002a98:	20000118 	.word	0x20000118

08002a9c <rb_CAN1_Filter_Config>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval void
  */
void rb_CAN1_Filter_Config(Msg_Info Message, uint8_t Filternumber, uint8_t FIFO_num)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b091      	sub	sp, #68	; 0x44
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	f107 0408 	add.w	r4, r7, #8
 8002aa6:	e884 0003 	stmia.w	r4, {r0, r1}
 8002aaa:	4611      	mov	r1, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	460b      	mov	r3, r1
 8002ab0:	71fb      	strb	r3, [r7, #7]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	71bb      	strb	r3, [r7, #6]
	CAN_FilterTypeDef sFilter;
	uint32_t temp;

	if(Init_Flag == TRUE)
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <rb_CAN1_Filter_Config+0x90>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d131      	bne.n	8002b22 <rb_CAN1_Filter_Config+0x86>
	{
		sFilter.FilterActivation = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
		/* default 20 for CAN1, 8 for CAN2*/
		sFilter.SlaveStartFilterBank = 20;
 8002ac2:	2314      	movs	r3, #20
 8002ac4:	63bb      	str	r3, [r7, #56]	; 0x38

		sFilter.FilterFIFOAssignment = FIFO_num;
 8002ac6:	79bb      	ldrb	r3, [r7, #6]
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24

		if(Message.Type == CAN_ID_STD)
 8002aca:	7b3b      	ldrb	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <rb_CAN1_Filter_Config+0x40>
		{
			sFilter.FilterIdHigh = (Message.ID << 5);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	617b      	str	r3, [r7, #20]
			sFilter.FilterIdLow = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	e00f      	b.n	8002afc <rb_CAN1_Filter_Config+0x60>
		}
		else
		{
			temp = (Message.ID & 0x1FFFE000) >> 13;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	0b5b      	lsrs	r3, r3, #13
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
			sFilter.FilterIdHigh = (uint16_t)temp;
 8002ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	617b      	str	r3, [r7, #20]
			temp = ((Message.ID & 0x00001FFF) << 3) | (0x1<<2);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c
			sFilter.FilterIdLow = (uint16_t)temp;
 8002af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	61bb      	str	r3, [r7, #24]
		}

		sFilter.FilterMaskIdHigh = 0x0000;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
		sFilter.FilterMaskIdLow = 0x0000;
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]

		/* default IDLIST, 32BIT*/
		sFilter.FilterMode = ((uint8_t)0x01);
 8002b04:	2301      	movs	r3, #1
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
		sFilter.FilterScale = ((uint8_t)0x01);
 8002b08:	2301      	movs	r3, #1
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30

		sFilter.FilterBank = Filternumber;
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28

		HAL_CAN_ConfigFilter(&hcan, &sFilter);
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	4619      	mov	r1, r3
 8002b16:	4806      	ldr	r0, [pc, #24]	; (8002b30 <rb_CAN1_Filter_Config+0x94>)
 8002b18:	f001 f960 	bl	8003ddc <HAL_CAN_ConfigFilter>
		FilCof_Flag = TRUE;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <rb_CAN1_Filter_Config+0x98>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
	}
}
 8002b22:	bf00      	nop
 8002b24:	3744      	adds	r7, #68	; 0x44
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000140 	.word	0x20000140
 8002b30:	20000118 	.word	0x20000118
 8002b34:	20000141 	.word	0x20000141

08002b38 <rb_CAN1_Start>:

void rb_CAN1_Start(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
	if((Init_Flag==TRUE) && (FilCof_Flag==TRUE))
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <rb_CAN1_Start+0x20>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <rb_CAN1_Start+0x1a>
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <rb_CAN1_Start+0x24>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <rb_CAN1_Start+0x1a>
	{
		HAL_CAN_Start(&hcan);
 8002b4c:	4804      	ldr	r0, [pc, #16]	; (8002b60 <rb_CAN1_Start+0x28>)
 8002b4e:	f001 fa25 	bl	8003f9c <HAL_CAN_Start>
	}
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000140 	.word	0x20000140
 8002b5c:	20000141 	.word	0x20000141
 8002b60:	20000118 	.word	0x20000118

08002b64 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval void
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	CAN1_RxCallBack();
 8002b6c:	f7fe fbcc 	bl	8001308 <CAN1_RxCallBack>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_MspInit+0x44>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <HAL_MspInit+0x44>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_MspInit+0x44>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_MspInit+0x44>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_MspInit+0x44>)
 8002b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_MspInit+0x44>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <NMI_Handler+0x4>

08002bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bca:	e7fe      	b.n	8002bca <HardFault_Handler+0x4>

08002bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <MemManage_Handler+0x4>

08002bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <BusFault_Handler+0x4>

08002bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <UsageFault_Handler+0x4>

08002bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c0c:	f000 ffa6 	bl	8003b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <CAN1_TX_IRQHandler+0x10>)
 8002c1a:	f001 fc16 	bl	800444a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200004ec 	.word	0x200004ec

08002c28 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <CAN1_RX0_IRQHandler+0x10>)
 8002c2e:	f001 fc0c 	bl	800444a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200004ec 	.word	0x200004ec

08002c3c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <CAN1_RX1_IRQHandler+0x10>)
 8002c42:	f001 fc02 	bl	800444a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200004ec 	.word	0x200004ec

08002c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <TIM2_IRQHandler+0x10>)
 8002c56:	f004 fdfe 	bl	8007856 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200016f4 	.word	0x200016f4

08002c64 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <ETH_IRQHandler+0x10>)
 8002c6a:	f002 fb7d 	bl	8005368 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	2000302c 	.word	0x2000302c

08002c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
	return 1;
 8002c7c:	2301      	movs	r3, #1
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_kill>:

int _kill(int pid, int sig)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <_kill+0x20>)
 8002c94:	2216      	movs	r2, #22
 8002c96:	601a      	str	r2, [r3, #0]
	return -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	20009f64 	.word	0x20009f64

08002cac <_exit>:

void _exit (int status)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ffe5 	bl	8002c88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cbe:	e7fe      	b.n	8002cbe <_exit+0x12>

08002cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e00a      	b.n	8002ce8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cd2:	f3af 8000 	nop.w
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	60ba      	str	r2, [r7, #8]
 8002cde:	b2ca      	uxtb	r2, r1
 8002ce0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	dbf0      	blt.n	8002cd2 <_read+0x12>
	}

return len;
 8002cf0:	687b      	ldr	r3, [r7, #4]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e009      	b.n	8002d20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	dbf1      	blt.n	8002d0c <_write+0x12>
	}
	return len;
 8002d28:	687b      	ldr	r3, [r7, #4]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <_close>:

int _close(int file)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
	return -1;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <_isatty>:

int _isatty(int file)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
	return 1;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <_sbrk+0x5c>)
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <_sbrk+0x60>)
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_sbrk+0x64>)
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <_sbrk+0x68>)
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <_sbrk+0x64>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d205      	bcs.n	8002dd8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <_sbrk+0x6c>)
 8002dce:	220c      	movs	r2, #12
 8002dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	e009      	b.n	8002dec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <_sbrk+0x64>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dde:	4b08      	ldr	r3, [pc, #32]	; (8002e00 <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	4a06      	ldr	r2, [pc, #24]	; (8002e00 <_sbrk+0x64>)
 8002de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	20050000 	.word	0x20050000
 8002dfc:	00000400 	.word	0x00000400
 8002e00:	20000144 	.word	0x20000144
 8002e04:	20009f78 	.word	0x20009f78
 8002e08:	20009f64 	.word	0x20009f64

08002e0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <SystemInit+0x20>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	4a05      	ldr	r2, [pc, #20]	; (8002e2c <SystemInit+0x20>)
 8002e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
  TCPpcb = tcp_new();
 8002e36:	f008 ff43 	bl	800bcc0 <tcp_new>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <tcp_server_init+0x6c>)
 8002e3e:	6013      	str	r3, [r2, #0]

  if (TCPpcb != NULL)
 8002e40:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <tcp_server_init+0x6c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d024      	beq.n	8002e92 <tcp_server_init+0x62>
  {
    err_t err;

    /* 2. bind _pcb to port 7 ( protocol) */
    ip_addr_t tcpServerIPADDR;
    IP_ADDR4(&tcpServerIPADDR, 192, 168, 0, 123);
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <tcp_server_init+0x70>)
 8002e4a:	603b      	str	r3, [r7, #0]
    err = tcp_bind(TCPpcb, &tcpServerIPADDR, TCP_SERVER_PORT);
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <tcp_server_init+0x6c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4639      	mov	r1, r7
 8002e52:	2207      	movs	r2, #7
 8002e54:	4618      	mov	r0, r3
 8002e56:	f007 fe8f 	bl	800ab78 <tcp_bind>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]

    if (err == ERR_OK)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10f      	bne.n	8002e86 <tcp_server_init+0x56>
    {
      /* 3. start tcp listening for _pcb */
      TCPpcb = tcp_listen(TCPpcb);
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <tcp_server_init+0x6c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	21ff      	movs	r1, #255	; 0xff
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f007 ff3b 	bl	800ace8 <tcp_listen_with_backlog>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <tcp_server_init+0x6c>)
 8002e76:	6013      	str	r3, [r2, #0]

      /* 4. initialize LwIP tcp_accept callback function */
      tcp_accept(TCPpcb, tcp_server_accept);
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <tcp_server_init+0x6c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4909      	ldr	r1, [pc, #36]	; (8002ea4 <tcp_server_init+0x74>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f008 ff9e 	bl	800bdc0 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, TCPpcb);
    }
  }
}
 8002e84:	e005      	b.n	8002e92 <tcp_server_init+0x62>
      memp_free(MEMP_TCP_PCB, TCPpcb);
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <tcp_server_init+0x6c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f006 fa2b 	bl	80092e8 <memp_free>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200016ec 	.word	0x200016ec
 8002ea0:	7b00a8c0 	.word	0x7b00a8c0
 8002ea4:	08002f45 	.word	0x08002f45

08002ea8 <rb_TCPServerSend>:
  * @brief  A function to send message to client
  * @param  msg: message sent as char array
  * @retval None
  */
void rb_TCPServerSend(char* msg)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b09d      	sub	sp, #116	; 0x74
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  char msgBuf[100];
  uint16_t len;
  len = strlen(msg) + 2;
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7fd f9b7 	bl	8000224 <strlen>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3302      	adds	r3, #2
 8002ebc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

  msgBuf[0] = (uint8_t)(len & 0xFFU);
 8002ec0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	723b      	strb	r3, [r7, #8]
  msgBuf[1] = (uint8_t)((len >> 8) & 0xFFU);
 8002ec8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	727b      	strb	r3, [r7, #9]
  memcpy(&msgBuf[2], msg, strlen(msg));
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fd f9a5 	bl	8000224 <strlen>
 8002eda:	4602      	mov	r2, r0
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f010 fc9f 	bl	8013828 <memcpy>


  /* allocate pbuf */
  TCPes->p = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_POOL);
 8002eea:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <rb_TCPServerSend+0x94>)
 8002eec:	681c      	ldr	r4, [r3, #0]
 8002eee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002ef2:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	2036      	movs	r0, #54	; 0x36
 8002efa:	f006 fd23 	bl	8009944 <pbuf_alloc>
 8002efe:	4603      	mov	r3, r0
 8002f00:	60a3      	str	r3, [r4, #8]

  /* copy data to pbuf */
  pbuf_take(TCPes->p, (char*)msgBuf, len);
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <rb_TCPServerSend+0x94>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8002f0c:	f107 0108 	add.w	r1, r7, #8
 8002f10:	4618      	mov	r0, r3
 8002f12:	f007 fa67 	bl	800a3e4 <pbuf_take>

  tcp_server_send(TCPpcb, TCPes);
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <rb_TCPServerSend+0x98>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <rb_TCPServerSend+0x94>)
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f957 	bl	80031d4 <tcp_server_send>

  // Dereference and deallocate a pbuf
  pbuf_free(TCPes->p);
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <rb_TCPServerSend+0x94>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f006 ffed 	bl	8009f0c <pbuf_free>
}
 8002f32:	bf00      	nop
 8002f34:	3774      	adds	r7, #116	; 0x74
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd90      	pop	{r4, r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200016e8 	.word	0x200016e8
 8002f40:	200016ec 	.word	0x200016ec

08002f44 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8002f52:	2101      	movs	r1, #1
 8002f54:	68b8      	ldr	r0, [r7, #8]
 8002f56:	f008 fcc1 	bl	800b8dc <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8002f5a:	200c      	movs	r0, #12
 8002f5c:	f006 f80a 	bl	8008f74 <mem_malloc>
 8002f60:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01f      	beq.n	8002fa8 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2200      	movs	r2, #0
 8002f78:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8002f80:	6939      	ldr	r1, [r7, #16]
 8002f82:	68b8      	ldr	r0, [r7, #8]
 8002f84:	f008 fea4 	bl	800bcd0 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8002f88:	490d      	ldr	r1, [pc, #52]	; (8002fc0 <tcp_server_accept+0x7c>)
 8002f8a:	68b8      	ldr	r0, [r7, #8]
 8002f8c:	f008 feb2 	bl	800bcf4 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8002f90:	490c      	ldr	r1, [pc, #48]	; (8002fc4 <tcp_server_accept+0x80>)
 8002f92:	68b8      	ldr	r0, [r7, #8]
 8002f94:	f008 fef2 	bl	800bd7c <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	490b      	ldr	r1, [pc, #44]	; (8002fc8 <tcp_server_accept+0x84>)
 8002f9c:	68b8      	ldr	r0, [r7, #8]
 8002f9e:	f008 ff27 	bl	800bdf0 <tcp_poll>
    
    ret_err = ERR_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	75fb      	strb	r3, [r7, #23]
 8002fa6:	e005      	b.n	8002fb4 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8002fa8:	6939      	ldr	r1, [r7, #16]
 8002faa:	68b8      	ldr	r0, [r7, #8]
 8002fac:	f000 f965 	bl	800327a <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8002fb0:	23ff      	movs	r3, #255	; 0xff
 8002fb2:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8002fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	08002fcd 	.word	0x08002fcd
 8002fc4:	08003101 	.word	0x08003101
 8002fc8:	08003125 	.word	0x08003125

08002fcc <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <tcp_server_recv+0x20>
 8002fe0:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <tcp_server_recv+0x124>)
 8002fe2:	22ea      	movs	r2, #234	; 0xea
 8002fe4:	4943      	ldr	r1, [pc, #268]	; (80030f4 <tcp_server_recv+0x128>)
 8002fe6:	4844      	ldr	r0, [pc, #272]	; (80030f8 <tcp_server_recv+0x12c>)
 8002fe8:	f010 fc4e 	bl	8013888 <iprintf>
  
  es = (struct tcp_server_struct *)arg;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8003004:	69b9      	ldr	r1, [r7, #24]
 8003006:	68b8      	ldr	r0, [r7, #8]
 8003008:	f000 f937 	bl	800327a <tcp_server_connection_close>
 800300c:	e007      	b.n	800301e <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 800300e:	493b      	ldr	r1, [pc, #236]	; (80030fc <tcp_server_recv+0x130>)
 8003010:	68b8      	ldr	r0, [r7, #8]
 8003012:	f008 fe91 	bl	800bd38 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8003016:	69b9      	ldr	r1, [r7, #24]
 8003018:	68b8      	ldr	r0, [r7, #8]
 800301a:	f000 f8db 	bl	80031d4 <tcp_server_send>
    }
    ret_err = ERR_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	e05f      	b.n	80030e4 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8003024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f006 ff67 	bl	8009f0c <pbuf_free>
    }
    ret_err = err;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e04f      	b.n	80030e4 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d110      	bne.n	800306e <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8003058:	4928      	ldr	r1, [pc, #160]	; (80030fc <tcp_server_recv+0x130>)
 800305a:	68b8      	ldr	r0, [r7, #8]
 800305c:	f008 fe6c 	bl	800bd38 <tcp_sent>
    
    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8003060:	69b9      	ldr	r1, [r7, #24]
 8003062:	68b8      	ldr	r0, [r7, #8]
 8003064:	f000 f930 	bl	80032c8 <tcp_server_handle>
    
    ret_err = ERR_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e03a      	b.n	80030e4 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d115      	bne.n	80030a2 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <tcp_server_recv+0xc2>
    {
      es->p = p;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8003084:	69b9      	ldr	r1, [r7, #24]
 8003086:	68b8      	ldr	r0, [r7, #8]
 8003088:	f000 f91e 	bl	80032c8 <tcp_server_handle>
 800308c:	e006      	b.n	800309c <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f007 f850 	bl	800a13c <pbuf_chain>
    }
    ret_err = ERR_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	e020      	b.n	80030e4 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d10e      	bne.n	80030c8 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	891b      	ldrh	r3, [r3, #8]
 80030ae:	4619      	mov	r1, r3
 80030b0:	68b8      	ldr	r0, [r7, #8]
 80030b2:	f007 ff2f 	bl	800af14 <tcp_recved>
    es->p = NULL;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f006 ff25 	bl	8009f0c <pbuf_free>
    ret_err = ERR_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e00d      	b.n	80030e4 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	891b      	ldrh	r3, [r3, #8]
 80030cc:	4619      	mov	r1, r3
 80030ce:	68b8      	ldr	r0, [r7, #8]
 80030d0:	f007 ff20 	bl	800af14 <tcp_recved>
    es->p = NULL;
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f006 ff16 	bl	8009f0c <pbuf_free>
    ret_err = ERR_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80030e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3720      	adds	r7, #32
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	08014dc0 	.word	0x08014dc0
 80030f4:	08014ddc 	.word	0x08014ddc
 80030f8:	08014de8 	.word	0x08014de8
 80030fc:	08003185 	.word	0x08003185

08003100 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f005 fdc6 	bl	8008ca8 <mem_free>
  }
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d017      	beq.n	8003168 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8003140:	490f      	ldr	r1, [pc, #60]	; (8003180 <tcp_server_poll+0x5c>)
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	f008 fdf8 	bl	800bd38 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6838      	ldr	r0, [r7, #0]
 800314c:	f000 f842 	bl	80031d4 <tcp_server_send>
 8003150:	e007      	b.n	8003162 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d103      	bne.n	8003162 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6838      	ldr	r0, [r7, #0]
 800315e:	f000 f88c 	bl	800327a <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	e004      	b.n	8003172 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8003168:	6838      	ldr	r0, [r7, #0]
 800316a:	f007 fcf9 	bl	800ab60 <tcp_abort>
    ret_err = ERR_ABRT;
 800316e:	23f3      	movs	r3, #243	; 0xf3
 8003170:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8003172:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	08003185 	.word	0x08003185

08003184 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 80031a4:	490a      	ldr	r1, [pc, #40]	; (80031d0 <tcp_server_sent+0x4c>)
 80031a6:	68b8      	ldr	r0, [r7, #8]
 80031a8:	f008 fdc6 	bl	800bd38 <tcp_sent>
    tcp_server_send(tpcb, es);
 80031ac:	6979      	ldr	r1, [r7, #20]
 80031ae:	68b8      	ldr	r0, [r7, #8]
 80031b0:	f000 f810 	bl	80031d4 <tcp_server_send>
 80031b4:	e007      	b.n	80031c6 <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b03      	cmp	r3, #3
 80031bc:	d103      	bne.n	80031c6 <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	68b8      	ldr	r0, [r7, #8]
 80031c2:	f000 f85a 	bl	800327a <tcp_server_connection_close>
  }

  return ERR_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	08003185 	.word	0x08003185

080031d4 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 80031e2:	e036      	b.n	8003252 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	895a      	ldrh	r2, [r3, #10]
 80031f2:	2301      	movs	r3, #1
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f00b fca9 	bl	800eb4c <tcp_write>
 80031fa:	4603      	mov	r3, r0
 80031fc:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 80031fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11d      	bne.n	8003242 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	895b      	ldrh	r3, [r3, #10]
 800320a:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f006 ff13 	bl	800a04c <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8003226:	6938      	ldr	r0, [r7, #16]
 8003228:	f006 fe70 	bl	8009f0c <pbuf_free>
 800322c:	4603      	mov	r3, r0
 800322e:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8003230:	7b7b      	ldrb	r3, [r7, #13]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f7      	beq.n	8003226 <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8003236:	89fb      	ldrh	r3, [r7, #14]
 8003238:	4619      	mov	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f007 fe6a 	bl	800af14 <tcp_recved>
 8003240:	e007      	b.n	8003252 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8003242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d102      	bne.n	8003252 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8003252:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	895a      	ldrh	r2, [r3, #10]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 800326e:	429a      	cmp	r2, r3
 8003270:	d9b8      	bls.n	80031e4 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8003284:	2100      	movs	r1, #0
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f008 fd22 	bl	800bcd0 <tcp_arg>
  tcp_sent(tpcb, NULL);
 800328c:	2100      	movs	r1, #0
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f008 fd52 	bl	800bd38 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8003294:	2100      	movs	r1, #0
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f008 fd2c 	bl	800bcf4 <tcp_recv>
  tcp_err(tpcb, NULL);
 800329c:	2100      	movs	r1, #0
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f008 fd6c 	bl	800bd7c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80032a4:	2200      	movs	r2, #0
 80032a6:	2100      	movs	r1, #0
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f008 fda1 	bl	800bdf0 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	f005 fcf7 	bl	8008ca8 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f007 fb66 	bl	800a98c <tcp_close>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b0a2      	sub	sp, #136	; 0x88
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx;

	TCPes = es;
 80032d2:	4a38      	ldr	r2, [pc, #224]	; (80033b4 <tcp_server_handle+0xec>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6013      	str	r3, [r2, #0]
	esTx = es; // This copies everything to your local variable
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	char reqBuf[] = "REQ_REPRO";
 80032de:	4a36      	ldr	r2, [pc, #216]	; (80033b8 <tcp_server_handle+0xf0>)
 80032e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032e6:	c303      	stmia	r3!, {r0, r1}
 80032e8:	801a      	strh	r2, [r3, #0]
  char receivedBuf[100];
  memset(receivedBuf, 0, 100);
 80032ea:	f107 030c 	add.w	r3, r7, #12
 80032ee:	2264      	movs	r2, #100	; 0x64
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f010 fac0 	bl	8013878 <memset>

  strncpy(receivedBuf, (char *)es->p->payload, es->p->tot_len);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	891b      	ldrh	r3, [r3, #8]
 8003304:	461a      	mov	r2, r3
 8003306:	f107 030c 	add.w	r3, r7, #12
 800330a:	4618      	mov	r0, r3
 800330c:	f010 fb3c 	bl	8013988 <strncpy>

  int isReproReq = strcmp(reqBuf, receivedBuf);
 8003310:	f107 020c 	add.w	r2, r7, #12
 8003314:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fc ff78 	bl	8000210 <strcmp>
 8003320:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	if(isReproReq == 0)
 8003324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003328:	2b00      	cmp	r3, #0
 800332a:	d119      	bne.n	8003360 <tcp_server_handle+0x98>
	{
		char *responseMsg = "RES_REPRO_0";
 800332c:	4b23      	ldr	r3, [pc, #140]	; (80033bc <tcp_server_handle+0xf4>)
 800332e:	67fb      	str	r3, [r7, #124]	; 0x7c
		uint16_t len = strlen(responseMsg);
 8003330:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003332:	f7fc ff77 	bl	8000224 <strlen>
 8003336:	4603      	mov	r3, r0
 8003338:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    esTx->p->payload = (void *)responseMsg; // This just changes the pointer to payload
 800333c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003344:	605a      	str	r2, [r3, #4]
    esTx->p->tot_len = len; // This sets payload length
 8003346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8003350:	811a      	strh	r2, [r3, #8]
    esTx->p->len = len; // This sets payload length
 8003352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800335c:	815a      	strh	r2, [r3, #10]
 800335e:	e01b      	b.n	8003398 <tcp_server_handle+0xd0>
	}
	else
	{
    esTx->p->payload = (void *)receivedBuf; // This just changes the pointer to payload
 8003360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f107 020c 	add.w	r2, r7, #12
 800336a:	605a      	str	r2, [r3, #4]
    esTx->p->tot_len = strlen(receivedBuf); // This sets payload length
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	4618      	mov	r0, r3
 8003372:	f7fc ff57 	bl	8000224 <strlen>
 8003376:	4602      	mov	r2, r0
 8003378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	b292      	uxth	r2, r2
 8003380:	811a      	strh	r2, [r3, #8]
    esTx->p->len = strlen(receivedBuf); // This sets payload length
 8003382:	f107 030c 	add.w	r3, r7, #12
 8003386:	4618      	mov	r0, r3
 8003388:	f7fc ff4c 	bl	8000224 <strlen>
 800338c:	4602      	mov	r2, r0
 800338e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	b292      	uxth	r2, r2
 8003396:	815a      	strh	r2, [r3, #10]
	}

	tcp_server_send(tpcb, esTx);
 8003398:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff19 	bl	80031d4 <tcp_server_send>
	pbuf_free(es->p);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f006 fdb0 	bl	8009f0c <pbuf_free>
}
 80033ac:	bf00      	nop
 80033ae:	3788      	adds	r7, #136	; 0x88
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	200016e8 	.word	0x200016e8
 80033b8:	08014e1c 	.word	0x08014e1c
 80033bc:	08014e10 	.word	0x08014e10

080033c0 <tftp_send_message>:
  * @param buf: pointer on buffer where to create the message  
  * @param err: error code of type tftp_errorcode
  * @retval error code
  */
err_t tftp_send_message(struct udp_pcb *upcb, const ip_addr_t *to_ip, unsigned short to_port, char *buf, unsigned short buflen)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  err_t err;
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, buflen, PBUF_POOL);
 80033d0:	8c3b      	ldrh	r3, [r7, #32]
 80033d2:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80033d6:	4619      	mov	r1, r3
 80033d8:	2036      	movs	r0, #54	; 0x36
 80033da:	f006 fab3 	bl	8009944 <pbuf_alloc>
 80033de:	6178      	str	r0, [r7, #20]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and end transmission */
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <tftp_send_message+0x2c>
    return ERR_MEM;
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ea:	e013      	b.n	8003414 <tftp_send_message+0x54>

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, buf, buflen);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	8c3a      	ldrh	r2, [r7, #32]
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f010 fa17 	bl	8013828 <memcpy>

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to_ip, to_port);
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	6979      	ldr	r1, [r7, #20]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f00d fc0f 	bl	8010c24 <udp_sendto>
 8003406:	4603      	mov	r3, r0
 8003408:	74fb      	strb	r3, [r7, #19]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 800340a:	6978      	ldr	r0, [r7, #20]
 800340c:	f006 fd7e 	bl	8009f0c <pbuf_free>

  return err;
 8003410:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <tftp_construct_error_message>:
  * @param buf: pointer on buffer where to create the message  
  * @param err: error code of type tftp_errorcode
  * @retval 
  */
int tftp_construct_error_message(char *buf, tftp_errorcode err)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  int errorlen;
  /* Set the opcode in the 2 first bytes */
  tftp_set_opcode(buf, TFTP_ERROR);
 8003428:	2105      	movs	r1, #5
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fa69 	bl	8003902 <tftp_set_opcode>
  /* Set the errorcode in the 2 second bytes  */
  tftp_set_errorcode(buf, err);
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa77 	bl	8003928 <tftp_set_errorcode>
  /* Set the error message in the last bytes */
  tftp_set_errormsg(buf, tftp_errorcode_string[err]);
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <tftp_construct_error_message+0x4c>)
 800343e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fa83 	bl	8003950 <tftp_set_errormsg>
  /* Set the length of the error message  */
  errorlen = strlen(tftp_errorcode_string[err]);
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	4a06      	ldr	r2, [pc, #24]	; (8003468 <tftp_construct_error_message+0x4c>)
 800344e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003452:	4618      	mov	r0, r3
 8003454:	f7fc fee6 	bl	8000224 <strlen>
 8003458:	4603      	mov	r3, r0
 800345a:	60fb      	str	r3, [r7, #12]

  /* return message size */
  return 4 + errorlen + 1;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3305      	adds	r3, #5
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000054 	.word	0x20000054

0800346c <tftp_send_error_message>:
  * @param  to_port: pointer on remote port  
  * @param  err: tftp error code
  * @retval error value
  */
int tftp_send_error_message(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, tftp_errorcode err)
{
 800346c:	b590      	push	{r4, r7, lr}
 800346e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8003472:	af02      	add	r7, sp, #8
 8003474:	f107 040c 	add.w	r4, r7, #12
 8003478:	6020      	str	r0, [r4, #0]
 800347a:	f107 0008 	add.w	r0, r7, #8
 800347e:	6001      	str	r1, [r0, #0]
 8003480:	1d39      	adds	r1, r7, #4
 8003482:	600a      	str	r2, [r1, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	1cfb      	adds	r3, r7, #3
 8003488:	701a      	strb	r2, [r3, #0]
  char buf[512];
  int error_len;

  /* construct error */
  error_len = tftp_construct_error_message(buf, err);
 800348a:	1cfb      	adds	r3, r7, #3
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	f107 0314 	add.w	r3, r7, #20
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ffc1 	bl	800341c <tftp_construct_error_message>
 800349a:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
  /* send error message */
  return tftp_send_message(upcb, to, to_port, buf, error_len);
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f107 0414 	add.w	r4, r7, #20
 80034ae:	f107 0108 	add.w	r1, r7, #8
 80034b2:	f107 000c 	add.w	r0, r7, #12
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4623      	mov	r3, r4
 80034ba:	6809      	ldr	r1, [r1, #0]
 80034bc:	6800      	ldr	r0, [r0, #0]
 80034be:	f7ff ff7f 	bl	80033c0 <tftp_send_message>
 80034c2:	4603      	mov	r3, r0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd90      	pop	{r4, r7, pc}

080034ce <tftp_send_ack_packet>:
  * @param  to_port: pointer on remote udp port
  * @param  block: block number
  * @retval error value
  */
int tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, unsigned short block)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af02      	add	r7, sp, #8
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	807b      	strh	r3, [r7, #2]

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

  /* define the first two bytes of the packet */
  tftp_set_opcode(packet, TFTP_ACK);
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2104      	movs	r1, #4
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fa0d 	bl	8003902 <tftp_set_opcode>
  /* Specify the block number being ACK'd.
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement" */
  tftp_set_block(packet, block);
 80034e8:	887a      	ldrh	r2, [r7, #2]
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fa3c 	bl	800396e <tftp_set_block>

  return tftp_send_message(upcb, to, to_port, packet, TFTP_ACK_PKT_LEN);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	2104      	movs	r1, #4
 8003500:	9100      	str	r1, [sp, #0]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff ff5b 	bl	80033c0 <tftp_send_message>
 800350a:	4603      	mov	r3, r0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <tftp_cleanup_wr>:
  * @param upcb: pointer on udp pcb
  * @param  args: pointer on a structure of type tftp_connection_args
  * @retval None
  */
void tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* close the filesystem */
  // f_close(&file_CR);
  // f_mount(NULL, (TCHAR const*)"",0);
  /* Free the tftp_connection_args structure reserverd for */
  mem_free(args);
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	f005 fbc2 	bl	8008ca8 <mem_free>

  /* Disconnect the udp_pcb*/
  udp_disconnect(upcb);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f00d fdbb 	bl	80110a0 <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f00d fe00 	bl	8011130 <udp_remove>

  /* reset debounced counter */
  debouncedCnt = 0;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <tftp_cleanup_wr+0x38>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]

  /* reset the callback function */
  udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <tftp_cleanup_wr+0x3c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	4905      	ldr	r1, [pc, #20]	; (8003554 <tftp_cleanup_wr+0x40>)
 800353e:	4618      	mov	r0, r3
 8003540:	f00d fdd6 	bl	80110f0 <udp_recv>
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	2000014c 	.word	0x2000014c
 8003550:	200016f0 	.word	0x200016f0
 8003554:	080037c5 	.word	0x080037c5

08003558 <wrq_recv_callback>:
  * @param  addr: pointer on remote IP address
  * @param  port: pointer on remote port
  * @retval None
  */
void wrq_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  tftp_connection_args *args = (tftp_connection_args *)arg;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	617b      	str	r3, [r7, #20]
  // int n = 0;

  /* we expect to receive only one pbuf (pbuf size should be 
     configured > max TFTP frame size */
  if (pkt_buf->len != pkt_buf->tot_len)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	895a      	ldrh	r2, [r3, #10]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	891b      	ldrh	r3, [r3, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	d179      	bne.n	800366a <wrq_recv_callback+0x112>
  {
    return;
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	895b      	ldrh	r3, [r3, #10]
 800357a:	2b04      	cmp	r3, #4
 800357c:	d93a      	bls.n	80035f4 <wrq_recv_callback+0x9c>
      (tftp_extract_block(pkt_buf->payload) == (args->block + 1)))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f99d 	bl	80038c2 <tftp_extract_block>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003592:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8003594:	429a      	cmp	r2, r3
 8003596:	d12d      	bne.n	80035f4 <wrq_recv_callback+0x9c>
  {
    /* write the received data to the flash memory */
    uint16_t NbOfBytes = pkt_buf->len - TFTP_DATA_PKT_HDR_LEN;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	895b      	ldrh	r3, [r3, #10]
 800359c:	3b04      	subs	r3, #4
 800359e:	827b      	strh	r3, [r7, #18]

    fileSize += NbOfBytes;
 80035a0:	8a7a      	ldrh	r2, [r7, #18]
 80035a2:	4b34      	ldr	r3, [pc, #208]	; (8003674 <wrq_recv_callback+0x11c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4413      	add	r3, r2
 80035a8:	4a32      	ldr	r2, [pc, #200]	; (8003674 <wrq_recv_callback+0x11c>)
 80035aa:	6013      	str	r3, [r2, #0]

    // Store a TFTP data block into flash memory in turn
    if(CSP_QSPI_Write((uint8_t *)pkt_buf->payload + TFTP_DATA_PKT_HDR_LEN, BIN_START_ADDR + TFTP_DATA_LEN_MAX * (args->block), NbOfBytes) != HAL_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	1d18      	adds	r0, r3, #4
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80035b8:	025b      	lsls	r3, r3, #9
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	8a7b      	ldrh	r3, [r7, #18]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f7ff f8f1 	bl	80027a8 <CSP_QSPI_Write>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <wrq_recv_callback+0x78>
    {
      Error_Handler();
 80035cc:	f7fe fe10 	bl	80021f0 <Error_Handler>
    }
    
    /* update our block number to match the block number just received */
    args->block++;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	895b      	ldrh	r3, [r3, #10]
 80035e8:	3b04      	subs	r3, #4
 80035ea:	441a      	add	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  {
 80035f2:	e013      	b.n	800361c <wrq_recv_callback+0xc4>
  }
  else if (tftp_extract_block(pkt_buf->payload) == (args->block + 1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 f962 	bl	80038c2 <tftp_extract_block>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003608:	3301      	adds	r3, #1
 800360a:	429a      	cmp	r2, r3
 800360c:	d106      	bne.n	800361c <wrq_recv_callback+0xc4>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
   * number, then the args->block (our block number) is never updated and
   * we simply send "duplicate ACK" which has the same block number as the
   * last ACK pkt we sent.  This lets the host know that we are still waiting
   * on block number args->block+1. 
   */
  tftp_send_ack_packet(upcb, addr, port, args->block);
 800361c:	8c3a      	ldrh	r2, [r7, #32]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003624:	b29b      	uxth	r3, r3
 8003626:	6839      	ldr	r1, [r7, #0]
 8003628:	68b8      	ldr	r0, [r7, #8]
 800362a:	f7ff ff50 	bl	80034ce <tftp_send_ack_packet>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the end of a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	895b      	ldrh	r3, [r3, #10]
 8003632:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8003636:	d214      	bcs.n	8003662 <wrq_recv_callback+0x10a>
  {
    // Store file size into flash memory
    if(CSP_QSPI_Write((uint8_t *)&fileSize, BIN_SIZE_START_ADDR, BIN_SIZE_LEN) != HAL_OK)
 8003638:	2204      	movs	r2, #4
 800363a:	2100      	movs	r1, #0
 800363c:	480d      	ldr	r0, [pc, #52]	; (8003674 <wrq_recv_callback+0x11c>)
 800363e:	f7ff f8b3 	bl	80027a8 <CSP_QSPI_Write>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <wrq_recv_callback+0xf4>
    {
      Error_Handler();
 8003648:	f7fe fdd2 	bl	80021f0 <Error_Handler>
    }

    tftp_cleanup_wr(upcb, args);
 800364c:	6979      	ldr	r1, [r7, #20]
 800364e:	68b8      	ldr	r0, [r7, #8]
 8003650:	f7ff ff60 	bl	8003514 <tftp_cleanup_wr>
    pbuf_free(pkt_buf);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f006 fc59 	bl	8009f0c <pbuf_free>
    isTFTPTransferCompleted = 1;
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <wrq_recv_callback+0x120>)
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e004      	b.n	800366c <wrq_recv_callback+0x114>
  }
  else
  {
    pbuf_free(pkt_buf);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f006 fc52 	bl	8009f0c <pbuf_free>
    return;
 8003668:	e000      	b.n	800366c <wrq_recv_callback+0x114>
    return;
 800366a:	bf00      	nop
  }
}
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000148 	.word	0x20000148
 8003678:	20000150 	.word	0x20000150

0800367c <tftp_process_write>:
  * @param  to_port: pointer on remote udp port
  * @param  FileName: pointer on filename to be written 
  * @retval error code
  */
int tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, unsigned short to_port, char *FileName)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	80fb      	strh	r3, [r7, #6]
  tftp_connection_args *args = NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  //   tftp_cleanup_wr(upcb, args);

  //   return 0;
  // }

  args = mem_malloc(sizeof *args);
 8003690:	f44f 700a 	mov.w	r0, #552	; 0x228
 8003694:	f005 fc6e 	bl	8008f74 <mem_malloc>
 8003698:	6178      	str	r0, [r7, #20]
  if (!args)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <tftp_process_write+0x3c>
  {
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_NOTDEFINED);
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	2300      	movs	r3, #0
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff fee0 	bl	800346c <tftp_send_error_message>

    tftp_cleanup_wr(upcb, args);
 80036ac:	6979      	ldr	r1, [r7, #20]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7ff ff30 	bl	8003514 <tftp_cleanup_wr>

    return 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e031      	b.n	800371c <tftp_process_write+0xa0>
  }

  args->op = TFTP_WRQ;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2202      	movs	r2, #2
 80036bc:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  // Erase flash memory to store
  if (CSP_QSPI_EraseSector(BIN_START_ADDR, BIN_START_ADDR + fileSize) != HAL_OK)
 80036e0:	4b10      	ldr	r3, [pc, #64]	; (8003724 <tftp_process_write+0xa8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	2004      	movs	r0, #4
 80036ea:	f7fe ffad 	bl	8002648 <CSP_QSPI_EraseSector>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <tftp_process_write+0x7c>
  {
   Error_Handler();
 80036f4:	f7fe fd7c 	bl	80021f0 <Error_Handler>
  }
  fileSize = 0;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <tftp_process_write+0xa8>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

  /* set callback for receives on this UDP PCB  */
  udp_recv(upcb, wrq_recv_callback, args);
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4909      	ldr	r1, [pc, #36]	; (8003728 <tftp_process_write+0xac>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f00d fcf4 	bl	80110f0 <udp_recv>

  /* initiate the write transaction by sending the first ack */
  tftp_send_ack_packet(upcb, to, to_port, args->block);
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003710:	b29b      	uxth	r3, r3
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7ff feda 	bl	80034ce <tftp_send_ack_packet>

  return 0;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000148 	.word	0x20000148
 8003728:	08003559 	.word	0x08003559

0800372c <process_tftp_request>:
  * @param  ip_addr: pointer on source IP address
  * @param  port: pointer on source udp port
  * @retval None
  */
void process_tftp_request(struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b090      	sub	sp, #64	; 0x40
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	4613      	mov	r3, r2
 8003738:	80fb      	strh	r3, [r7, #6]
  tftp_opcode op = tftp_decode_op(pkt_buf->payload);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f8b2 	bl	80038a8 <tftp_decode_op>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  char FileName[30];
  struct udp_pcb *upcb;
  err_t err;

  /* create new UDP PCB structure */
  upcb = udp_new();
 800374a:	f00d fd33 	bl	80111b4 <udp_new>
 800374e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (!upcb)
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02d      	beq.n	80037b2 <process_tftp_request+0x86>
  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
   * 69 which al transactions begin communication on, however all subsequent
   * transactions for a given "stream" occur on another port!  */
  ip_addr_t tftpServerIPADDR;
  IP_ADDR4(&tftpServerIPADDR, 192, 168, 0, 123);
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <process_tftp_request+0x94>)
 8003758:	617b      	str	r3, [r7, #20]

  err = udp_bind(upcb, &tftpServerIPADDR, 0);
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	2200      	movs	r2, #0
 8003760:	4619      	mov	r1, r3
 8003762:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003764:	f00d fc14 	bl	8010f90 <udp_bind>
 8003768:	4603      	mov	r3, r0
 800376a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err != ERR_OK)
 800376e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11f      	bne.n	80037b6 <process_tftp_request+0x8a>
  {    
    /* Unable to bind to port   */
    return;
  }
  switch (op)
 8003776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800377a:	2b02      	cmp	r3, #2
 800377c:	d10f      	bne.n	800379e <process_tftp_request+0x72>
  {
    case TFTP_WRQ: /* TFTP WRQ (write request) */
    {
      /* Read the name of the file asked by the client to be received and writen in the SD card */
      tftp_extract_filename(FileName, pkt_buf->payload);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	f107 0318 	add.w	r3, r7, #24
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f8ab 	bl	80038e4 <tftp_extract_filename>
        
      /* Start the TFTP write mode*/
      tftp_process_write(upcb, addr, port, FileName);
 800378e:	f107 0318 	add.w	r3, r7, #24
 8003792:	88fa      	ldrh	r2, [r7, #6]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003798:	f7ff ff70 	bl	800367c <tftp_process_write>
      break;
 800379c:	e00c      	b.n	80037b8 <process_tftp_request+0x8c>
    }
    default: /* TFTP unknown request op */
      /* send generic access violation message */
      tftp_send_error_message(upcb, addr, port, TFTP_ERR_ACCESS_VIOLATION);
 800379e:	88fa      	ldrh	r2, [r7, #6]
 80037a0:	2302      	movs	r3, #2
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037a6:	f7ff fe61 	bl	800346c <tftp_send_error_message>
      udp_remove(upcb);
 80037aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037ac:	f00d fcc0 	bl	8011130 <udp_remove>

      break;
 80037b0:	e002      	b.n	80037b8 <process_tftp_request+0x8c>
    return;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <process_tftp_request+0x8c>
    return;
 80037b6:	bf00      	nop
  }
}
 80037b8:	3740      	adds	r7, #64	; 0x40
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	7b00a8c0 	.word	0x7b00a8c0

080037c4 <recv_callback_tftp>:
  * @param  port: pointer on source udp port
  * @retval None
  */
void recv_callback_tftp(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                               const ip_addr_t *addr, u16_t port)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  /* process new connection request */
  process_tftp_request(pkt_buf, addr, port);
 80037d2:	8b3b      	ldrh	r3, [r7, #24]
 80037d4:	461a      	mov	r2, r3
 80037d6:	6839      	ldr	r1, [r7, #0]
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ffa7 	bl	800372c <process_tftp_request>

  /* free pbuf */
  pbuf_free(pkt_buf);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f006 fb94 	bl	8009f0c <pbuf_free>
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <tftpd_init>:
  * @brief  Initializes the udp pcb for TFTP 
  * @param  None
  * @retval None
  */
void tftpd_init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  err_t err;

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 80037f2:	f00d fcdf 	bl	80111b4 <udp_new>
 80037f6:	4603      	mov	r3, r0
 80037f8:	4a0f      	ldr	r2, [pc, #60]	; (8003838 <tftpd_init+0x4c>)
 80037fa:	6013      	str	r3, [r2, #0]
  if (UDPpcb)
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <tftpd_init+0x4c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d015      	beq.n	8003830 <tftpd_init+0x44>
  {  
    ip_addr_t serverIPADDR;
    IP_ADDR4(&serverIPADDR, 192, 168, 0, 123);
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <tftpd_init+0x50>)
 8003806:	603b      	str	r3, [r7, #0]

    /* Bind this PCB to port 69  */
    err = udp_bind(UDPpcb, &serverIPADDR, TFTP_PORT);
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <tftpd_init+0x4c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4639      	mov	r1, r7
 800380e:	2245      	movs	r2, #69	; 0x45
 8003810:	4618      	mov	r0, r3
 8003812:	f00d fbbd 	bl	8010f90 <udp_bind>
 8003816:	4603      	mov	r3, r0
 8003818:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <tftpd_init+0x44>
    {    
      /* TFTP server start  */
      udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <tftpd_init+0x4c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2200      	movs	r2, #0
 8003828:	4905      	ldr	r1, [pc, #20]	; (8003840 <tftpd_init+0x54>)
 800382a:	4618      	mov	r0, r3
 800382c:	f00d fc60 	bl	80110f0 <udp_recv>
    }
  }
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	200016f0 	.word	0x200016f0
 800383c:	7b00a8c0 	.word	0x7b00a8c0
 8003840:	080037c5 	.word	0x080037c5

08003844 <rb_resetUDPPCB>:

/**
 * @brief
 */
void rb_resetUDPPCB(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
  void *udp_pcbs_ptr = (udp_pcbs->recv);
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <rb_resetUDPPCB+0x4c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	607b      	str	r3, [r7, #4]
  if (udp_pcbs_ptr != (recv_callback_tftp) && udp_pcbs_ptr != (wrq_recv_callback))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <rb_resetUDPPCB+0x50>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d014      	beq.n	8003884 <rb_resetUDPPCB+0x40>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <rb_resetUDPPCB+0x54>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d010      	beq.n	8003884 <rb_resetUDPPCB+0x40>
  {
    debouncedCnt++;
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <rb_resetUDPPCB+0x58>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3301      	adds	r3, #1
 8003868:	4a0c      	ldr	r2, [pc, #48]	; (800389c <rb_resetUDPPCB+0x58>)
 800386a:	6013      	str	r3, [r2, #0]
    if (debouncedCnt > DEBOUNCE_THRESHOLD)
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <rb_resetUDPPCB+0x58>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <rb_resetUDPPCB+0x5c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d906      	bls.n	8003884 <rb_resetUDPPCB+0x40>
    {
      debouncedCnt = 0;
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <rb_resetUDPPCB+0x58>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
      udp_pcbs = UDPpcb;
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <rb_resetUDPPCB+0x60>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a03      	ldr	r2, [pc, #12]	; (8003890 <rb_resetUDPPCB+0x4c>)
 8003882:	6013      	str	r3, [r2, #0]
    }
  }
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	20009f60 	.word	0x20009f60
 8003894:	080037c5 	.word	0x080037c5
 8003898:	08003559 	.word	0x08003559
 800389c:	2000014c 	.word	0x2000014c
 80038a0:	004c4b40 	.word	0x004c4b40
 80038a4:	200016f0 	.word	0x200016f0

080038a8 <tftp_decode_op>:

/**
  * @brief  Extracts the opcode from a TFTP message
**/ 
tftp_opcode tftp_decode_op(char *buf)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3301      	adds	r3, #1
 80038b4:	781b      	ldrb	r3, [r3, #0]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <tftp_extract_block>:

/**
  * @brief Extracts the block number from TFTP message
**/
u16_t tftp_extract_block(char *buf)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3302      	adds	r3, #2
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f005 f865 	bl	80089a4 <lwip_htons>
 80038da:	4603      	mov	r3, r0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <tftp_extract_filename>:

/**
  * @brief Extracts the filename from TFTP message
**/ 
void tftp_extract_filename(char *fname, char *buf)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  strcpy(fname, buf + 2);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	3302      	adds	r3, #2
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f010 f83f 	bl	8013978 <strcpy>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <tftp_set_opcode>:

/**
  * @brief set the opcode in TFTP message: RRQ / WRQ / DATA / ACK / ERROR 
**/ 
void tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	70fb      	strb	r3, [r7, #3]

  buffer[0] = 0;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3301      	adds	r3, #1
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	701a      	strb	r2, [r3, #0]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <tftp_set_errorcode>:

/**
  * @brief Set the errorcode in TFTP message
**/
void tftp_set_errorcode(char *buffer, tftp_errorcode errCode)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	70fb      	strb	r3, [r7, #3]

  buffer[2] = 0;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3302      	adds	r3, #2
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
  buffer[3] = (u8_t)errCode;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3303      	adds	r3, #3
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	701a      	strb	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <tftp_set_errormsg>:

/**
  * @brief Sets the error message
**/
void tftp_set_errormsg(char * buffer, char* errormsg)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  strcpy(buffer + 4, errormsg);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	6839      	ldr	r1, [r7, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f010 f809 	bl	8013978 <strcpy>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <tftp_set_block>:

/**
  * @brief Sets the block number
**/
void tftp_set_block(char* packet, u16_t block)
{
 800396e:	b590      	push	{r4, r7, lr}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	807b      	strh	r3, [r7, #2]

  u16_t *p = (u16_t *)packet;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1c9c      	adds	r4, r3, #2
 8003982:	887b      	ldrh	r3, [r7, #2]
 8003984:	4618      	mov	r0, r3
 8003986:	f005 f80d 	bl	80089a4 <lwip_htons>
 800398a:	4603      	mov	r3, r0
 800398c:	8023      	strh	r3, [r4, #0]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bd90      	pop	{r4, r7, pc}
	...

08003998 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800399e:	f107 0310 	add.w	r3, r7, #16
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	609a      	str	r2, [r3, #8]
 80039aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039b6:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <MX_TIM2_Init+0x98>)
 80039b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <MX_TIM2_Init+0x98>)
 80039c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80039c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c6:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <MX_TIM2_Init+0x98>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 21600;
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <MX_TIM2_Init+0x98>)
 80039ce:	f245 4260 	movw	r2, #21600	; 0x5460
 80039d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d4:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <MX_TIM2_Init+0x98>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <MX_TIM2_Init+0x98>)
 80039dc:	2280      	movs	r2, #128	; 0x80
 80039de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039e0:	4813      	ldr	r0, [pc, #76]	; (8003a30 <MX_TIM2_Init+0x98>)
 80039e2:	f003 fee1 	bl	80077a8 <HAL_TIM_Base_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80039ec:	f7fe fc00 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039f6:	f107 0310 	add.w	r3, r7, #16
 80039fa:	4619      	mov	r1, r3
 80039fc:	480c      	ldr	r0, [pc, #48]	; (8003a30 <MX_TIM2_Init+0x98>)
 80039fe:	f004 f849 	bl	8007a94 <HAL_TIM_ConfigClockSource>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003a08:	f7fe fbf2 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a14:	1d3b      	adds	r3, r7, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4805      	ldr	r0, [pc, #20]	; (8003a30 <MX_TIM2_Init+0x98>)
 8003a1a:	f004 fa67 	bl	8007eec <HAL_TIMEx_MasterConfigSynchronization>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003a24:	f7fe fbe4 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200016f4 	.word	0x200016f4

08003a34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a44:	d113      	bne.n	8003a6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_TIM_Base_MspInit+0x44>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	4a0b      	ldr	r2, [pc, #44]	; (8003a78 <HAL_TIM_Base_MspInit+0x44>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6413      	str	r3, [r2, #64]	; 0x40
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_TIM_Base_MspInit+0x44>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2100      	movs	r1, #0
 8003a62:	201c      	movs	r0, #28
 8003a64:	f000 fffb 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a68:	201c      	movs	r0, #28
 8003a6a:	f001 f814 	bl	8004a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800

08003a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a80:	480d      	ldr	r0, [pc, #52]	; (8003ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a82:	490e      	ldr	r1, [pc, #56]	; (8003abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a84:	4a0e      	ldr	r2, [pc, #56]	; (8003ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a88:	e002      	b.n	8003a90 <LoopCopyDataInit>

08003a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a8e:	3304      	adds	r3, #4

08003a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a94:	d3f9      	bcc.n	8003a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a98:	4c0b      	ldr	r4, [pc, #44]	; (8003ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a9c:	e001      	b.n	8003aa2 <LoopFillZerobss>

08003a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aa0:	3204      	adds	r2, #4

08003aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa4:	d3fb      	bcc.n	8003a9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003aa6:	f7ff f9b1 	bl	8002e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aaa:	f00f fe8b 	bl	80137c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aae:	f7fd fb65 	bl	800117c <main>
  bx  lr    
 8003ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ab4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003abc:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8003ac0:	08017be0 	.word	0x08017be0
  ldr r2, =_sbss
 8003ac4:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8003ac8:	20009f74 	.word	0x20009f74

08003acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003acc:	e7fe      	b.n	8003acc <ADC_IRQHandler>
	...

08003ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad4:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_Init+0x28>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a07      	ldr	r2, [pc, #28]	; (8003af8 <HAL_Init+0x28>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	f000 ffb1 	bl	8004a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f000 f808 	bl	8003afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aec:	f7ff f844 	bl	8002b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40023c00 	.word	0x40023c00

08003afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_InitTick+0x54>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_InitTick+0x58>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 ffc9 	bl	8004ab2 <HAL_SYSTICK_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e00e      	b.n	8003b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b0f      	cmp	r3, #15
 8003b2e:	d80a      	bhi.n	8003b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b30:	2200      	movs	r2, #0
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	f000 ff91 	bl	8004a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b3c:	4a06      	ldr	r2, [pc, #24]	; (8003b58 <HAL_InitTick+0x5c>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000050 	.word	0x20000050
 8003b54:	20000078 	.word	0x20000078
 8003b58:	20000074 	.word	0x20000074

08003b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_IncTick+0x20>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_IncTick+0x24>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4a04      	ldr	r2, [pc, #16]	; (8003b80 <HAL_IncTick+0x24>)
 8003b6e:	6013      	str	r3, [r2, #0]
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000078 	.word	0x20000078
 8003b80:	20001740 	.word	0x20001740

08003b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return uwTick;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_GetTick+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20001740 	.word	0x20001740

08003b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7ff ffee 	bl	8003b84 <HAL_GetTick>
 8003ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d005      	beq.n	8003bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <HAL_Delay+0x44>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bc2:	bf00      	nop
 8003bc4:	f7ff ffde 	bl	8003b84 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d8f7      	bhi.n	8003bc4 <HAL_Delay+0x28>
  {
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000078 	.word	0x20000078

08003be4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0ed      	b.n	8003dd2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd f96e 	bl	8000ee4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c18:	f7ff ffb4 	bl	8003b84 <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c1e:	e012      	b.n	8003c46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c20:	f7ff ffb0 	bl	8003b84 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b0a      	cmp	r3, #10
 8003c2c:	d90b      	bls.n	8003c46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0c5      	b.n	8003dd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0e5      	beq.n	8003c20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0202 	bic.w	r2, r2, #2
 8003c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c64:	f7ff ff8e 	bl	8003b84 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c6a:	e012      	b.n	8003c92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c6c:	f7ff ff8a 	bl	8003b84 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b0a      	cmp	r3, #10
 8003c78:	d90b      	bls.n	8003c92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2205      	movs	r2, #5
 8003c8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e09f      	b.n	8003dd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7e1b      	ldrb	r3, [r3, #24]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e007      	b.n	8003cca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7e5b      	ldrb	r3, [r3, #25]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d108      	bne.n	8003ce4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e007      	b.n	8003cf4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7e9b      	ldrb	r3, [r3, #26]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d108      	bne.n	8003d0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0220 	orr.w	r2, r2, #32
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e007      	b.n	8003d1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0220 	bic.w	r2, r2, #32
 8003d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	7edb      	ldrb	r3, [r3, #27]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d108      	bne.n	8003d38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0210 	bic.w	r2, r2, #16
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e007      	b.n	8003d48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0210 	orr.w	r2, r2, #16
 8003d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7f1b      	ldrb	r3, [r3, #28]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d108      	bne.n	8003d62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0208 	orr.w	r2, r2, #8
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e007      	b.n	8003d72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0208 	bic.w	r2, r2, #8
 8003d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7f5b      	ldrb	r3, [r3, #29]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d108      	bne.n	8003d8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0204 	orr.w	r2, r2, #4
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e007      	b.n	8003d9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0204 	bic.w	r2, r2, #4
 8003d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	ea42 0103 	orr.w	r1, r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	1e5a      	subs	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d003      	beq.n	8003e02 <HAL_CAN_ConfigFilter+0x26>
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	f040 80be 	bne.w	8003f7e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <HAL_CAN_ConfigFilter+0x1bc>)
 8003e04:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	431a      	orrs	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	2201      	movs	r2, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	401a      	ands	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d123      	bne.n	8003eac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	401a      	ands	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	3248      	adds	r2, #72	; 0x48
 8003e8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ea0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ea2:	6979      	ldr	r1, [r7, #20]
 8003ea4:	3348      	adds	r3, #72	; 0x48
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	440b      	add	r3, r1
 8003eaa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d122      	bne.n	8003efa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ed4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3248      	adds	r2, #72	; 0x48
 8003eda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003eee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ef0:	6979      	ldr	r1, [r7, #20]
 8003ef2:	3348      	adds	r3, #72	; 0x48
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	440b      	add	r3, r1
 8003ef8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003f14:	e007      	b.n	8003f26 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	43db      	mvns	r3, r3
 8003f38:	401a      	ands	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003f40:	e007      	b.n	8003f52 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f70:	f023 0201 	bic.w	r2, r3, #1
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e006      	b.n	8003f8c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40006400 	.word	0x40006400

08003f9c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d12e      	bne.n	800400e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fc8:	f7ff fddc 	bl	8003b84 <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fce:	e012      	b.n	8003ff6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fd0:	f7ff fdd8 	bl	8003b84 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b0a      	cmp	r3, #10
 8003fdc:	d90b      	bls.n	8003ff6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2205      	movs	r2, #5
 8003fee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e012      	b.n	800401c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e006      	b.n	800401c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
  }
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004024:	b480      	push	{r7}
 8004026:	b089      	sub	sp, #36	; 0x24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004038:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004042:	7ffb      	ldrb	r3, [r7, #31]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d003      	beq.n	8004050 <HAL_CAN_AddTxMessage+0x2c>
 8004048:	7ffb      	ldrb	r3, [r7, #31]
 800404a:	2b02      	cmp	r3, #2
 800404c:	f040 80b8 	bne.w	80041c0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 80a0 	beq.w	80041b0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	0e1b      	lsrs	r3, r3, #24
 8004074:	f003 0303 	and.w	r3, r3, #3
 8004078:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d907      	bls.n	8004090 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e09e      	b.n	80041ce <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004090:	2201      	movs	r2, #1
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	409a      	lsls	r2, r3
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80040ac:	68f9      	ldr	r1, [r7, #12]
 80040ae:	6809      	ldr	r1, [r1, #0]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	3318      	adds	r3, #24
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	440b      	add	r3, r1
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e00f      	b.n	80040de <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040c8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040ce:	68f9      	ldr	r1, [r7, #12]
 80040d0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80040d2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	3318      	adds	r3, #24
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	440b      	add	r3, r1
 80040dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	3318      	adds	r3, #24
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	440b      	add	r3, r1
 80040ee:	3304      	adds	r3, #4
 80040f0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	7d1b      	ldrb	r3, [r3, #20]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d111      	bne.n	800411e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	3318      	adds	r3, #24
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	4413      	add	r3, r2
 8004106:	3304      	adds	r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	6811      	ldr	r1, [r2, #0]
 800410e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3318      	adds	r3, #24
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	440b      	add	r3, r1
 800411a:	3304      	adds	r3, #4
 800411c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3307      	adds	r3, #7
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	061a      	lsls	r2, r3, #24
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3306      	adds	r3, #6
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3305      	adds	r3, #5
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	4313      	orrs	r3, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	3204      	adds	r2, #4
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	4610      	mov	r0, r2
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	6811      	ldr	r1, [r2, #0]
 8004146:	ea43 0200 	orr.w	r2, r3, r0
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	440b      	add	r3, r1
 8004150:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004154:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3303      	adds	r3, #3
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	061a      	lsls	r2, r3, #24
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3302      	adds	r3, #2
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3301      	adds	r3, #1
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	4313      	orrs	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	7812      	ldrb	r2, [r2, #0]
 8004176:	4610      	mov	r0, r2
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	6811      	ldr	r1, [r2, #0]
 800417c:	ea43 0200 	orr.w	r2, r3, r0
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	440b      	add	r3, r1
 8004186:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800418a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	3318      	adds	r3, #24
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	4413      	add	r3, r2
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	6811      	ldr	r1, [r2, #0]
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	3318      	adds	r3, #24
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	440b      	add	r3, r1
 80041aa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e00e      	b.n	80041ce <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e006      	b.n	80041ce <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3724      	adds	r7, #36	; 0x24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041da:	b480      	push	{r7}
 80041dc:	b087      	sub	sp, #28
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d003      	beq.n	80041fe <HAL_CAN_GetRxMessage+0x24>
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	f040 80f3 	bne.w	80043e4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10e      	bne.n	8004222 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d116      	bne.n	8004240 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e0e7      	b.n	80043f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d107      	bne.n	8004240 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0d8      	b.n	80043f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	331b      	adds	r3, #27
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	4413      	add	r3, r2
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0204 	and.w	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	331b      	adds	r3, #27
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	4413      	add	r3, r2
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	0d5b      	lsrs	r3, r3, #21
 800426e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e00b      	b.n	8004290 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	331b      	adds	r3, #27
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	4413      	add	r3, r2
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	08db      	lsrs	r3, r3, #3
 8004288:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	331b      	adds	r3, #27
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	4413      	add	r3, r2
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0202 	and.w	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	331b      	adds	r3, #27
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	4413      	add	r3, r2
 80042b2:	3304      	adds	r3, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	331b      	adds	r3, #27
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	331b      	adds	r3, #27
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	4413      	add	r3, r2
 80042e2:	3304      	adds	r3, #4
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	0c1b      	lsrs	r3, r3, #16
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	4413      	add	r3, r2
 800430e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0a1a      	lsrs	r2, r3, #8
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	4413      	add	r3, r2
 8004328:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	0c1a      	lsrs	r2, r3, #16
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	3302      	adds	r3, #2
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	4413      	add	r3, r2
 8004342:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0e1a      	lsrs	r2, r3, #24
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	3303      	adds	r3, #3
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	4413      	add	r3, r2
 800435c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	3304      	adds	r3, #4
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	4413      	add	r3, r2
 8004374:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	0a1a      	lsrs	r2, r3, #8
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	3305      	adds	r3, #5
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	4413      	add	r3, r2
 800438e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	0c1a      	lsrs	r2, r3, #16
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	3306      	adds	r3, #6
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0e1a      	lsrs	r2, r3, #24
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	3307      	adds	r3, #7
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0220 	orr.w	r2, r2, #32
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	e007      	b.n	80043e0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0220 	orr.w	r2, r2, #32
 80043de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e006      	b.n	80043f2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800440e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d002      	beq.n	800441c <HAL_CAN_ActivateNotification+0x1e>
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d109      	bne.n	8004430 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6959      	ldr	r1, [r3, #20]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e006      	b.n	800443e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
  }
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b08a      	sub	sp, #40	; 0x28
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d07c      	beq.n	800458a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d023      	beq.n	80044e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2201      	movs	r2, #1
 80044a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f983 	bl	80047b8 <HAL_CAN_TxMailbox0CompleteCallback>
 80044b2:	e016      	b.n	80044e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d004      	beq.n	80044c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
 80044c6:	e00c      	b.n	80044e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
 80044da:	e002      	b.n	80044e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f989 	bl	80047f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d024      	beq.n	8004536 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f963 	bl	80047cc <HAL_CAN_TxMailbox1CompleteCallback>
 8004506:	e016      	b.n	8004536 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450e:	2b00      	cmp	r3, #0
 8004510:	d004      	beq.n	800451c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
 800451a:	e00c      	b.n	8004536 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	e002      	b.n	8004536 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f969 	bl	8004808 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d024      	beq.n	800458a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004548:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f943 	bl	80047e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800455a:	e016      	b.n	800458a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
 800456e:	e00c      	b.n	800458a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
 8004582:	e002      	b.n	800458a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f949 	bl	800481c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00c      	beq.n	80045ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2210      	movs	r2, #16
 80045ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00b      	beq.n	80045d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d006      	beq.n	80045d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2208      	movs	r2, #8
 80045c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f930 	bl	8004830 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fe fabb 	bl	8002b64 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00c      	beq.n	8004612 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d007      	beq.n	8004612 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004608:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2210      	movs	r2, #16
 8004610:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2208      	movs	r2, #8
 800462c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f912 	bl	8004858 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f8f9 	bl	8004844 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00b      	beq.n	8004674 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d006      	beq.n	8004674 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2210      	movs	r2, #16
 800466c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8fc 	bl	800486c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2208      	movs	r2, #8
 800468e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8f5 	bl	8004880 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d07b      	beq.n	8004798 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d072      	beq.n	8004790 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	f043 0304 	orr.w	r3, r3, #4
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004704:	2b00      	cmp	r3, #0
 8004706:	d043      	beq.n	8004790 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800470e:	2b00      	cmp	r3, #0
 8004710:	d03e      	beq.n	8004790 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004718:	2b60      	cmp	r3, #96	; 0x60
 800471a:	d02b      	beq.n	8004774 <HAL_CAN_IRQHandler+0x32a>
 800471c:	2b60      	cmp	r3, #96	; 0x60
 800471e:	d82e      	bhi.n	800477e <HAL_CAN_IRQHandler+0x334>
 8004720:	2b50      	cmp	r3, #80	; 0x50
 8004722:	d022      	beq.n	800476a <HAL_CAN_IRQHandler+0x320>
 8004724:	2b50      	cmp	r3, #80	; 0x50
 8004726:	d82a      	bhi.n	800477e <HAL_CAN_IRQHandler+0x334>
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d019      	beq.n	8004760 <HAL_CAN_IRQHandler+0x316>
 800472c:	2b40      	cmp	r3, #64	; 0x40
 800472e:	d826      	bhi.n	800477e <HAL_CAN_IRQHandler+0x334>
 8004730:	2b30      	cmp	r3, #48	; 0x30
 8004732:	d010      	beq.n	8004756 <HAL_CAN_IRQHandler+0x30c>
 8004734:	2b30      	cmp	r3, #48	; 0x30
 8004736:	d822      	bhi.n	800477e <HAL_CAN_IRQHandler+0x334>
 8004738:	2b10      	cmp	r3, #16
 800473a:	d002      	beq.n	8004742 <HAL_CAN_IRQHandler+0x2f8>
 800473c:	2b20      	cmp	r3, #32
 800473e:	d005      	beq.n	800474c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004740:	e01d      	b.n	800477e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	f043 0308 	orr.w	r3, r3, #8
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800474a:	e019      	b.n	8004780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f043 0310 	orr.w	r3, r3, #16
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004754:	e014      	b.n	8004780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f043 0320 	orr.w	r3, r3, #32
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800475e:	e00f      	b.n	8004780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004768:	e00a      	b.n	8004780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004772:	e005      	b.n	8004780 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800477c:	e000      	b.n	8004780 <HAL_CAN_IRQHandler+0x336>
            break;
 800477e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800478e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2204      	movs	r2, #4
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f872 	bl	8004894 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047b0:	bf00      	nop
 80047b2:	3728      	adds	r7, #40	; 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <__NVIC_SetPriorityGrouping>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <__NVIC_SetPriorityGrouping+0x40>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048c4:	4013      	ands	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <__NVIC_SetPriorityGrouping+0x44>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048d6:	4a04      	ldr	r2, [pc, #16]	; (80048e8 <__NVIC_SetPriorityGrouping+0x40>)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	60d3      	str	r3, [r2, #12]
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	e000ed00 	.word	0xe000ed00
 80048ec:	05fa0000 	.word	0x05fa0000

080048f0 <__NVIC_GetPriorityGrouping>:
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <__NVIC_GetPriorityGrouping+0x18>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	0a1b      	lsrs	r3, r3, #8
 80048fa:	f003 0307 	and.w	r3, r3, #7
}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <__NVIC_EnableIRQ>:
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	2b00      	cmp	r3, #0
 800491c:	db0b      	blt.n	8004936 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	4907      	ldr	r1, [pc, #28]	; (8004944 <__NVIC_EnableIRQ+0x38>)
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2001      	movs	r0, #1
 800492e:	fa00 f202 	lsl.w	r2, r0, r2
 8004932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000e100 	.word	0xe000e100

08004948 <__NVIC_SetPriority>:
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	6039      	str	r1, [r7, #0]
 8004952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004958:	2b00      	cmp	r3, #0
 800495a:	db0a      	blt.n	8004972 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	490c      	ldr	r1, [pc, #48]	; (8004994 <__NVIC_SetPriority+0x4c>)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	0112      	lsls	r2, r2, #4
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	440b      	add	r3, r1
 800496c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004970:	e00a      	b.n	8004988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	b2da      	uxtb	r2, r3
 8004976:	4908      	ldr	r1, [pc, #32]	; (8004998 <__NVIC_SetPriority+0x50>)
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	3b04      	subs	r3, #4
 8004980:	0112      	lsls	r2, r2, #4
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	440b      	add	r3, r1
 8004986:	761a      	strb	r2, [r3, #24]
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	e000e100 	.word	0xe000e100
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <NVIC_EncodePriority>:
{
 800499c:	b480      	push	{r7}
 800499e:	b089      	sub	sp, #36	; 0x24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f1c3 0307 	rsb	r3, r3, #7
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	bf28      	it	cs
 80049ba:	2304      	movcs	r3, #4
 80049bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	3304      	adds	r3, #4
 80049c2:	2b06      	cmp	r3, #6
 80049c4:	d902      	bls.n	80049cc <NVIC_EncodePriority+0x30>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3b03      	subs	r3, #3
 80049ca:	e000      	b.n	80049ce <NVIC_EncodePriority+0x32>
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43da      	mvns	r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	401a      	ands	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049e4:	f04f 31ff 	mov.w	r1, #4294967295
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	fa01 f303 	lsl.w	r3, r1, r3
 80049ee:	43d9      	mvns	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049f4:	4313      	orrs	r3, r2
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3724      	adds	r7, #36	; 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a14:	d301      	bcc.n	8004a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a16:	2301      	movs	r3, #1
 8004a18:	e00f      	b.n	8004a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <SysTick_Config+0x40>)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a22:	210f      	movs	r1, #15
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	f7ff ff8e 	bl	8004948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <SysTick_Config+0x40>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <SysTick_Config+0x40>)
 8004a34:	2207      	movs	r2, #7
 8004a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	e000e010 	.word	0xe000e010

08004a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff ff29 	bl	80048a8 <__NVIC_SetPriorityGrouping>
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4603      	mov	r3, r0
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a70:	f7ff ff3e 	bl	80048f0 <__NVIC_GetPriorityGrouping>
 8004a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	6978      	ldr	r0, [r7, #20]
 8004a7c:	f7ff ff8e 	bl	800499c <NVIC_EncodePriority>
 8004a80:	4602      	mov	r2, r0
 8004a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a86:	4611      	mov	r1, r2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff ff5d 	bl	8004948 <__NVIC_SetPriority>
}
 8004a8e:	bf00      	nop
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff ff31 	bl	800490c <__NVIC_EnableIRQ>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ffa2 	bl	8004a04 <SysTick_Config>
 8004ac0:	4603      	mov	r3, r0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ad8:	f7ff f854 	bl	8003b84 <HAL_GetTick>
 8004adc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d008      	beq.n	8004afc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2280      	movs	r2, #128	; 0x80
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e052      	b.n	8004ba2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0216 	bic.w	r2, r2, #22
 8004b0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <HAL_DMA_Abort+0x62>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0208 	bic.w	r2, r2, #8
 8004b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b4c:	e013      	b.n	8004b76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b4e:	f7ff f819 	bl	8003b84 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b05      	cmp	r3, #5
 8004b5a:	d90c      	bls.n	8004b76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2203      	movs	r2, #3
 8004b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e015      	b.n	8004ba2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e4      	bne.n	8004b4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b88:	223f      	movs	r2, #63	; 0x3f
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61fb      	str	r3, [r7, #28]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004bbc:	4ba9      	ldr	r3, [pc, #676]	; (8004e64 <HAL_ETH_Init+0x2b8>)
 8004bbe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e181      	b.n	8004ed6 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f003 fb5e 	bl	80082a8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bec:	4b9e      	ldr	r3, [pc, #632]	; (8004e68 <HAL_ETH_Init+0x2bc>)
 8004bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf0:	4a9d      	ldr	r2, [pc, #628]	; (8004e68 <HAL_ETH_Init+0x2bc>)
 8004bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf8:	4b9b      	ldr	r3, [pc, #620]	; (8004e68 <HAL_ETH_Init+0x2bc>)
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004c04:	4b99      	ldr	r3, [pc, #612]	; (8004e6c <HAL_ETH_Init+0x2c0>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	4a98      	ldr	r2, [pc, #608]	; (8004e6c <HAL_ETH_Init+0x2c0>)
 8004c0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c0e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004c10:	4b96      	ldr	r3, [pc, #600]	; (8004e6c <HAL_ETH_Init+0x2c0>)
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	4994      	ldr	r1, [pc, #592]	; (8004e6c <HAL_ETH_Init+0x2c0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c34:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c36:	f7fe ffa5 	bl	8003b84 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004c3c:	e011      	b.n	8004c62 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004c3e:	f7fe ffa1 	bl	8003b84 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c4c:	d909      	bls.n	8004c62 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2203      	movs	r2, #3
 8004c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e139      	b.n	8004ed6 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e4      	bne.n	8004c3e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f023 031c 	bic.w	r3, r3, #28
 8004c82:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004c84:	f002 fd84 	bl	8007790 <HAL_RCC_GetHCLKFreq>
 8004c88:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	4a78      	ldr	r2, [pc, #480]	; (8004e70 <HAL_ETH_Init+0x2c4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d908      	bls.n	8004ca4 <HAL_ETH_Init+0xf8>
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	4a77      	ldr	r2, [pc, #476]	; (8004e74 <HAL_ETH_Init+0x2c8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d804      	bhi.n	8004ca4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f043 0308 	orr.w	r3, r3, #8
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	e027      	b.n	8004cf4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4a73      	ldr	r2, [pc, #460]	; (8004e74 <HAL_ETH_Init+0x2c8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d908      	bls.n	8004cbe <HAL_ETH_Init+0x112>
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	4a6d      	ldr	r2, [pc, #436]	; (8004e64 <HAL_ETH_Init+0x2b8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d204      	bcs.n	8004cbe <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f043 030c 	orr.w	r3, r3, #12
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e01a      	b.n	8004cf4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	4a68      	ldr	r2, [pc, #416]	; (8004e64 <HAL_ETH_Init+0x2b8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d303      	bcc.n	8004cce <HAL_ETH_Init+0x122>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	4a6b      	ldr	r2, [pc, #428]	; (8004e78 <HAL_ETH_Init+0x2cc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d911      	bls.n	8004cf2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	4a69      	ldr	r2, [pc, #420]	; (8004e78 <HAL_ETH_Init+0x2cc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d908      	bls.n	8004ce8 <HAL_ETH_Init+0x13c>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	4a68      	ldr	r2, [pc, #416]	; (8004e7c <HAL_ETH_Init+0x2d0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d804      	bhi.n	8004ce8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e005      	b.n	8004cf4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f043 0310 	orr.w	r3, r3, #16
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	e000      	b.n	8004cf4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004cf2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004cfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d00:	2100      	movs	r1, #0
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fc1d 	bl	8005542 <HAL_ETH_WritePHYRegister>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004d12:	6939      	ldr	r1, [r7, #16]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fdd3 	bl	80058c0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0d7      	b.n	8004ed6 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004d26:	20ff      	movs	r0, #255	; 0xff
 8004d28:	f7fe ff38 	bl	8003b9c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80a5 	beq.w	8004e80 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d36:	f7fe ff25 	bl	8003b84 <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	461a      	mov	r2, r3
 8004d42:	2101      	movs	r1, #1
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fb94 	bl	8005472 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004d4a:	f7fe ff1b 	bl	8003b84 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d90f      	bls.n	8004d7c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004d60:	6939      	ldr	r1, [r7, #16]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fdac 	bl	80058c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e0ac      	b.n	8004ed6 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0da      	beq.n	8004d3c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004d86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fbd8 	bl	8005542 <HAL_ETH_WritePHYRegister>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00b      	beq.n	8004db0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004d9c:	6939      	ldr	r1, [r7, #16]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fd8e 	bl	80058c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004dac:	2301      	movs	r3, #1
 8004dae:	e092      	b.n	8004ed6 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004db0:	f7fe fee8 	bl	8003b84 <HAL_GetTick>
 8004db4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004db6:	f107 030c 	add.w	r3, r7, #12
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fb57 	bl	8005472 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004dc4:	f7fe fede 	bl	8003b84 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d90f      	bls.n	8004df6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004dda:	6939      	ldr	r1, [r7, #16]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fd6f 	bl	80058c0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e06f      	b.n	8004ed6 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0da      	beq.n	8004db6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004e00:	f107 030c 	add.w	r3, r7, #12
 8004e04:	461a      	mov	r2, r3
 8004e06:	2110      	movs	r1, #16
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb32 	bl	8005472 <HAL_ETH_ReadPHYRegister>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004e18:	6939      	ldr	r1, [r7, #16]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fd50 	bl	80058c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e054      	b.n	8004ed6 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	e002      	b.n	8004e46 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	e035      	b.n	8004ec4 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e5e:	609a      	str	r2, [r3, #8]
 8004e60:	e030      	b.n	8004ec4 <HAL_ETH_Init+0x318>
 8004e62:	bf00      	nop
 8004e64:	03938700 	.word	0x03938700
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40013800 	.word	0x40013800
 8004e70:	01312cff 	.word	0x01312cff
 8004e74:	02160ebf 	.word	0x02160ebf
 8004e78:	05f5e0ff 	.word	0x05f5e0ff
 8004e7c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	08db      	lsrs	r3, r3, #3
 8004e86:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004e90:	4313      	orrs	r3, r2
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	2100      	movs	r1, #0
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fb52 	bl	8005542 <HAL_ETH_WritePHYRegister>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00b      	beq.n	8004ebc <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004ea8:	6939      	ldr	r1, [r7, #16]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fd08 	bl	80058c0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e00c      	b.n	8004ed6 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004ebc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004ec0:	f7fe fe6c 	bl	8003b9c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004ec4:	6939      	ldr	r1, [r7, #16]
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fcfa 	bl	80058c0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop

08004ee0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_ETH_DMATxDescListInit+0x20>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e052      	b.n	8004fa6 <HAL_ETH_DMATxDescListInit+0xc6>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e030      	b.n	8004f7e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	015b      	lsls	r3, r3, #5
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	4413      	add	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f2c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d105      	bne.n	8004f56 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d208      	bcs.n	8004f72 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3301      	adds	r3, #1
 8004f64:	015b      	lsls	r3, r3, #5
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	4413      	add	r3, r2
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	60da      	str	r2, [r3, #12]
 8004f70:	e002      	b.n	8004f78 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d3ca      	bcc.n	8004f1c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	f241 0310 	movw	r3, #4112	; 0x1010
 8004f90:	440b      	add	r3, r1
 8004f92:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b087      	sub	sp, #28
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_ETH_DMARxDescListInit+0x20>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e056      	b.n	8005080 <HAL_ETH_DMARxDescListInit+0xce>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e034      	b.n	8005058 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	015b      	lsls	r3, r3, #5
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ffe:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8005006:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4413      	add	r3, r2
 8005016:	461a      	mov	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	3b01      	subs	r3, #1
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	429a      	cmp	r2, r3
 8005038:	d208      	bcs.n	800504c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	3301      	adds	r3, #1
 800503e:	015b      	lsls	r3, r3, #5
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	4413      	add	r3, r2
 8005044:	461a      	mov	r2, r3
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	60da      	str	r2, [r3, #12]
 800504a:	e002      	b.n	8005052 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	3301      	adds	r3, #1
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d3c6      	bcc.n	8004fee <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	f241 030c 	movw	r3, #4108	; 0x100c
 800506a:	440b      	add	r3, r1
 800506c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_ETH_TransmitFrame+0x24>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e0cd      	b.n	800524c <HAL_ETH_TransmitFrame+0x1c0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80050d6:	2301      	movs	r3, #1
 80050d8:	e0b8      	b.n	800524c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	da09      	bge.n	80050f8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2212      	movs	r2, #18
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0a9      	b.n	800524c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80050fe:	4293      	cmp	r3, r2
 8005100:	d915      	bls.n	800512e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	4a54      	ldr	r2, [pc, #336]	; (8005258 <HAL_ETH_TransmitFrame+0x1cc>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	0a9b      	lsrs	r3, r3, #10
 800510c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	4b51      	ldr	r3, [pc, #324]	; (8005258 <HAL_ETH_TransmitFrame+0x1cc>)
 8005112:	fba3 1302 	umull	r1, r3, r3, r2
 8005116:	0a9b      	lsrs	r3, r3, #10
 8005118:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	3301      	adds	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	e001      	b.n	8005132 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800512e:	2301      	movs	r3, #1
 8005130:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d11c      	bne.n	8005172 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8005146:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005152:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005162:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	461a      	mov	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005170:	e04b      	b.n	800520a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8005172:	2300      	movs	r3, #0
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	e044      	b.n	8005202 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005186:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d107      	bne.n	800519e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800519c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051a6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d116      	bne.n	80051e0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051c0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4a25      	ldr	r2, [pc, #148]	; (800525c <HAL_ETH_TransmitFrame+0x1d0>)
 80051c6:	fb02 f203 	mul.w	r2, r2, r3
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	4413      	add	r3, r2
 80051ce:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80051d2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80051de:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80051ee:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	461a      	mov	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	3301      	adds	r3, #1
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	429a      	cmp	r2, r3
 8005208:	d3b6      	bcc.n	8005178 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005212:	4413      	add	r3, r2
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	f241 0314 	movw	r3, #4116	; 0x1014
 8005226:	4413      	add	r3, r2
 8005228:	2204      	movs	r2, #4
 800522a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	f241 0304 	movw	r3, #4100	; 0x1004
 8005234:	4413      	add	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	ac02b00b 	.word	0xac02b00b
 800525c:	fffffa0c 	.word	0xfffffa0c

08005260 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_ETH_GetReceivedFrame+0x1a>
 8005276:	2302      	movs	r3, #2
 8005278:	e070      	b.n	800535c <HAL_ETH_GetReceivedFrame+0xfc>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	db5a      	blt.n	800534a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d030      	beq.n	8005304 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d103      	bne.n	80052bc <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80052d0:	3b04      	subs	r3, #4
 80052d2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e02b      	b.n	800535c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800530e:	2b00      	cmp	r3, #0
 8005310:	d010      	beq.n	8005334 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	461a      	mov	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	629a      	str	r2, [r3, #40]	; 0x28
 8005332:	e00a      	b.n	800534a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	461a      	mov	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	f241 0314 	movw	r3, #4116	; 0x1014
 8005378:	4413      	add	r3, r2
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d112      	bne.n	80053aa <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f860 	bl	800544a <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005392:	4413      	add	r3, r2
 8005394:	2240      	movs	r2, #64	; 0x40
 8005396:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a8:	e01b      	b.n	80053e2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	f241 0314 	movw	r3, #4116	; 0x1014
 80053b2:	4413      	add	r3, r2
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d111      	bne.n	80053e2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f839 	bl	8005436 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	f241 0314 	movw	r3, #4116	; 0x1014
 80053cc:	4413      	add	r3, r2
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f241 0314 	movw	r3, #4116	; 0x1014
 80053ea:	4413      	add	r3, r2
 80053ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053f0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	f241 0314 	movw	r3, #4116	; 0x1014
 80053fa:	4413      	add	r3, r2
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005406:	d112      	bne.n	800542e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f828 	bl	800545e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	f241 0314 	movw	r3, #4116	; 0x1014
 8005416:	4413      	add	r3, r2
 8005418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800541c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b086      	sub	sp, #24
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	460b      	mov	r3, r1
 800547c:	607a      	str	r2, [r7, #4]
 800547e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b82      	cmp	r3, #130	; 0x82
 8005492:	d101      	bne.n	8005498 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
 8005496:	e050      	b.n	800553a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2282      	movs	r2, #130	; 0x82
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f003 031c 	and.w	r3, r3, #28
 80054ae:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8a1b      	ldrh	r3, [r3, #16]
 80054b4:	02db      	lsls	r3, r3, #11
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0302 	bic.w	r3, r3, #2
 80054d2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80054e4:	f7fe fb4e 	bl	8003b84 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80054ea:	e015      	b.n	8005518 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80054ec:	f7fe fb4a 	bl	8003b84 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fa:	d309      	bcc.n	8005510 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e014      	b.n	800553a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e4      	bne.n	80054ec <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	b29b      	uxth	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	460b      	mov	r3, r1
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b42      	cmp	r3, #66	; 0x42
 8005562:	d101      	bne.n	8005568 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005564:	2302      	movs	r3, #2
 8005566:	e04e      	b.n	8005606 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2242      	movs	r2, #66	; 0x42
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f003 031c 	and.w	r3, r3, #28
 800557e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8a1b      	ldrh	r3, [r3, #16]
 8005584:	02db      	lsls	r3, r3, #11
 8005586:	b29b      	uxth	r3, r3
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800558e:	897b      	ldrh	r3, [r7, #10]
 8005590:	019b      	lsls	r3, r3, #6
 8005592:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f043 0302 	orr.w	r3, r3, #2
 80055a2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80055be:	f7fe fae1 	bl	8003b84 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80055c4:	e015      	b.n	80055f2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80055c6:	f7fe fadd 	bl	8003b84 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d4:	d309      	bcc.n	80055ea <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e00d      	b.n	8005606 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e4      	bne.n	80055c6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_ETH_Start+0x16>
 8005620:	2302      	movs	r3, #2
 8005622:	e01f      	b.n	8005664 <HAL_ETH_Start+0x56>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fb45 	bl	8005cc4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fb7c 	bl	8005d38 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fc13 	bl	8005e6c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fbb0 	bl	8005dac <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fbdd 	bl	8005e0c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_ETH_Stop+0x16>
 800567e:	2302      	movs	r3, #2
 8005680:	e01f      	b.n	80056c2 <HAL_ETH_Stop+0x56>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fba2 	bl	8005ddc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fbcf 	bl	8005e3c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fb67 	bl	8005d72 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fbe1 	bl	8005e6c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fb27 	bl	8005cfe <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_ETH_ConfigMAC+0x1c>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0e4      	b.n	80058b2 <HAL_ETH_ConfigMAC+0x1e6>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80b1 	beq.w	8005862 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4b6c      	ldr	r3, [pc, #432]	; (80058bc <HAL_ETH_ConfigMAC+0x1f0>)
 800570c:	4013      	ands	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8005718:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800571e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005724:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800572a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005730:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005736:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800573c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8005742:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005748:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800574e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8005754:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800575a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005772:	2001      	movs	r0, #1
 8005774:	f7fe fa12 	bl	8003b9c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005788:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800578e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005794:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800579a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80057a0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80057a6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80057b2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80057b4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80057be:	2001      	movs	r0, #1
 80057c0:	f7fe f9ec 	bl	8003b9c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80057d4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057de:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	f64f 7341 	movw	r3, #65345	; 0xff41
 80057ee:	4013      	ands	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80057fc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005802:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005808:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800580e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005814:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800582c:	2001      	movs	r0, #1
 800582e:	f7fe f9b5 	bl	8003b9c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005852:	2001      	movs	r0, #1
 8005854:	f7fe f9a2 	bl	8003b9c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	61da      	str	r2, [r3, #28]
 8005860:	e01e      	b.n	80058a0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005870:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005892:	2001      	movs	r0, #1
 8005894:	f7fe f982 	bl	8003b9c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	ff20810f 	.word	0xff20810f

080058c0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b0b0      	sub	sp, #192	; 0xc0
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058dc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80058ee:	2300      	movs	r3, #0
 80058f0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80058f2:	2300      	movs	r3, #0
 80058f4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800590a:	663b      	str	r3, [r7, #96]	; 0x60
 800590c:	e001      	b.n	8005912 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800590e:	2300      	movs	r3, #0
 8005910:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005916:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005918:	2300      	movs	r3, #0
 800591a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800591c:	2300      	movs	r3, #0
 800591e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005920:	2300      	movs	r3, #0
 8005922:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005924:	2300      	movs	r3, #0
 8005926:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005928:	2300      	movs	r3, #0
 800592a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800592c:	2340      	movs	r3, #64	; 0x40
 800592e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005930:	2300      	movs	r3, #0
 8005932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005936:	2300      	movs	r3, #0
 8005938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800593c:	2300      	movs	r3, #0
 800593e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005942:	2300      	movs	r3, #0
 8005944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005948:	2300      	movs	r3, #0
 800594a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800594e:	2300      	movs	r3, #0
 8005950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005966:	2300      	movs	r3, #0
 8005968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800596c:	2300      	movs	r3, #0
 800596e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005972:	2300      	movs	r3, #0
 8005974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800597e:	2300      	movs	r3, #0
 8005980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8005984:	2300      	movs	r3, #0
 8005986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8005994:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005998:	4bab      	ldr	r3, [pc, #684]	; (8005c48 <ETH_MACDMAConfig+0x388>)
 800599a:	4013      	ands	r3, r2
 800599c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80059a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80059a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80059a4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80059a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80059a8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80059aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80059ac:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80059b2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80059b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80059b6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80059b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80059ba:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80059c0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80059c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80059c4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80059c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80059c8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80059ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80059cc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80059ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80059d0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80059d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80059d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80059d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80059f4:	2001      	movs	r0, #1
 80059f6:	f7fe f8d1 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a02:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a08:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005a0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005a0c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005a0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005a12:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005a18:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005a1e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005a24:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005a28:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005a30:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a32:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a3e:	2001      	movs	r0, #1
 8005a40:	f7fe f8ac 	bl	8003b9c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a4c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a56:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005a60:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005a6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a70:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005a74:	4013      	ands	r3, r2
 8005a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005a7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a7e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005a80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005a84:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005a8a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005a8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005a90:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005a96:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005a9c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005a9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ab0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005abc:	2001      	movs	r0, #1
 8005abe:	f7fe f86d 	bl	8003b9c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005aca:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005acc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005ad0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	f7fe f858 	bl	8003b9c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005af4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005afe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005b04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b08:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b2e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b34:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005b36:	2380      	movs	r3, #128	; 0x80
 8005b38:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	f241 0318 	movw	r3, #4120	; 0x1018
 8005b4a:	4413      	add	r3, r2
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8005b52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b56:	4b3d      	ldr	r3, [pc, #244]	; (8005c4c <ETH_MACDMAConfig+0x38c>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005b5e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005b60:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005b62:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005b64:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005b66:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005b68:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005b6a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005b6c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005b6e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005b70:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005b72:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005b74:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005b76:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005b7a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005b7e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005b80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	f241 0318 	movw	r3, #4120	; 0x1018
 8005b92:	4413      	add	r3, r2
 8005b94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b98:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	f241 0318 	movw	r3, #4120	; 0x1018
 8005ba2:	4413      	add	r3, r2
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005baa:	2001      	movs	r0, #1
 8005bac:	f7fd fff6 	bl	8003b9c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	f241 0318 	movw	r3, #4120	; 0x1018
 8005bb8:	4413      	add	r3, r2
 8005bba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bbe:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005bc4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005bc8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005bcc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005bd0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8005bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005bd6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8005bda:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	f7fd ffcf 	bl	8003b9c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c0a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d10d      	bne.n	8005c30 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	f241 031c 	movw	r3, #4124	; 0x101c
 8005c1c:	4413      	add	r3, r2
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6811      	ldr	r1, [r2, #0]
 8005c24:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <ETH_MACDMAConfig+0x390>)
 8005c26:	431a      	orrs	r2, r3
 8005c28:	f241 031c 	movw	r3, #4124	; 0x101c
 8005c2c:	440b      	add	r3, r1
 8005c2e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	461a      	mov	r2, r3
 8005c36:	2100      	movs	r1, #0
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f80b 	bl	8005c54 <ETH_MACAddressConfig>
}
 8005c3e:	bf00      	nop
 8005c40:	37c0      	adds	r7, #192	; 0xc0
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	ff20810f 	.word	0xff20810f
 8005c4c:	f8de3f23 	.word	0xf8de3f23
 8005c50:	00010040 	.word	0x00010040

08005c54 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3305      	adds	r3, #5
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	3204      	adds	r2, #4
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <ETH_MACAddressConfig+0x68>)
 8005c76:	4413      	add	r3, r2
 8005c78:	461a      	mov	r2, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3303      	adds	r3, #3
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	061a      	lsls	r2, r3, #24
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3302      	adds	r3, #2
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3301      	adds	r3, #1
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	7812      	ldrb	r2, [r2, #0]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <ETH_MACAddressConfig+0x6c>)
 8005ca6:	4413      	add	r3, r2
 8005ca8:	461a      	mov	r2, r3
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	6013      	str	r3, [r2, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	40028040 	.word	0x40028040
 8005cc0:	40028044 	.word	0x40028044

08005cc4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0208 	orr.w	r2, r2, #8
 8005cde:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ce8:	2001      	movs	r0, #1
 8005cea:	f7fd ff57 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	601a      	str	r2, [r3, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0208 	bic.w	r2, r2, #8
 8005d18:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d22:	2001      	movs	r0, #1
 8005d24:	f7fd ff3a 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	601a      	str	r2, [r3, #0]
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0204 	orr.w	r2, r2, #4
 8005d52:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	f7fd ff1d 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0204 	bic.w	r2, r2, #4
 8005d8c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d96:	2001      	movs	r0, #1
 8005d98:	f7fd ff00 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	601a      	str	r2, [r3, #0]
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	f241 0318 	movw	r3, #4120	; 0x1018
 8005dbc:	4413      	add	r3, r2
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6811      	ldr	r1, [r2, #0]
 8005dc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005dc8:	f241 0318 	movw	r3, #4120	; 0x1018
 8005dcc:	440b      	add	r3, r1
 8005dce:	601a      	str	r2, [r3, #0]
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	f241 0318 	movw	r3, #4120	; 0x1018
 8005dec:	4413      	add	r3, r2
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6811      	ldr	r1, [r2, #0]
 8005df4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005df8:	f241 0318 	movw	r3, #4120	; 0x1018
 8005dfc:	440b      	add	r3, r1
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e1c:	4413      	add	r3, r2
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6811      	ldr	r1, [r2, #0]
 8005e24:	f043 0202 	orr.w	r2, r3, #2
 8005e28:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e2c:	440b      	add	r3, r1
 8005e2e:	601a      	str	r2, [r3, #0]
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e4c:	4413      	add	r3, r2
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6811      	ldr	r1, [r2, #0]
 8005e54:	f023 0202 	bic.w	r2, r3, #2
 8005e58:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e5c:	440b      	add	r3, r1
 8005e5e:	601a      	str	r2, [r3, #0]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e80:	4413      	add	r3, r2
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6811      	ldr	r1, [r2, #0]
 8005e88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e90:	440b      	add	r3, r1
 8005e92:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e9c:	4413      	add	r3, r2
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	f7fd fe7a 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6819      	ldr	r1, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	f241 0318 	movw	r3, #4120	; 0x1018
 8005eb2:	440b      	add	r3, r1
 8005eb4:	601a      	str	r2, [r3, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b089      	sub	sp, #36	; 0x24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	e175      	b.n	80061cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	f040 8164 	bne.w	80061c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d005      	beq.n	8005f16 <HAL_GPIO_Init+0x56>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d130      	bne.n	8005f78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	2203      	movs	r2, #3
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	43db      	mvns	r3, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	43db      	mvns	r3, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 0201 	and.w	r2, r3, #1
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d017      	beq.n	8005fb4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	2203      	movs	r2, #3
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d123      	bne.n	8006008 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	08da      	lsrs	r2, r3, #3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3208      	adds	r2, #8
 8005fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	220f      	movs	r2, #15
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	08da      	lsrs	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3208      	adds	r2, #8
 8006002:	69b9      	ldr	r1, [r7, #24]
 8006004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	2203      	movs	r2, #3
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f003 0203 	and.w	r2, r3, #3
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80be 	beq.w	80061c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800604a:	4b66      	ldr	r3, [pc, #408]	; (80061e4 <HAL_GPIO_Init+0x324>)
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	4a65      	ldr	r2, [pc, #404]	; (80061e4 <HAL_GPIO_Init+0x324>)
 8006050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006054:	6453      	str	r3, [r2, #68]	; 0x44
 8006056:	4b63      	ldr	r3, [pc, #396]	; (80061e4 <HAL_GPIO_Init+0x324>)
 8006058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006062:	4a61      	ldr	r2, [pc, #388]	; (80061e8 <HAL_GPIO_Init+0x328>)
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	3302      	adds	r3, #2
 800606a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	220f      	movs	r2, #15
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	43db      	mvns	r3, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4013      	ands	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a58      	ldr	r2, [pc, #352]	; (80061ec <HAL_GPIO_Init+0x32c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d037      	beq.n	80060fe <HAL_GPIO_Init+0x23e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a57      	ldr	r2, [pc, #348]	; (80061f0 <HAL_GPIO_Init+0x330>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d031      	beq.n	80060fa <HAL_GPIO_Init+0x23a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a56      	ldr	r2, [pc, #344]	; (80061f4 <HAL_GPIO_Init+0x334>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d02b      	beq.n	80060f6 <HAL_GPIO_Init+0x236>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a55      	ldr	r2, [pc, #340]	; (80061f8 <HAL_GPIO_Init+0x338>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d025      	beq.n	80060f2 <HAL_GPIO_Init+0x232>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a54      	ldr	r2, [pc, #336]	; (80061fc <HAL_GPIO_Init+0x33c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01f      	beq.n	80060ee <HAL_GPIO_Init+0x22e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a53      	ldr	r2, [pc, #332]	; (8006200 <HAL_GPIO_Init+0x340>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d019      	beq.n	80060ea <HAL_GPIO_Init+0x22a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a52      	ldr	r2, [pc, #328]	; (8006204 <HAL_GPIO_Init+0x344>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <HAL_GPIO_Init+0x226>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a51      	ldr	r2, [pc, #324]	; (8006208 <HAL_GPIO_Init+0x348>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d00d      	beq.n	80060e2 <HAL_GPIO_Init+0x222>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a50      	ldr	r2, [pc, #320]	; (800620c <HAL_GPIO_Init+0x34c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d007      	beq.n	80060de <HAL_GPIO_Init+0x21e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a4f      	ldr	r2, [pc, #316]	; (8006210 <HAL_GPIO_Init+0x350>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d101      	bne.n	80060da <HAL_GPIO_Init+0x21a>
 80060d6:	2309      	movs	r3, #9
 80060d8:	e012      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060da:	230a      	movs	r3, #10
 80060dc:	e010      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060de:	2308      	movs	r3, #8
 80060e0:	e00e      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060e2:	2307      	movs	r3, #7
 80060e4:	e00c      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060e6:	2306      	movs	r3, #6
 80060e8:	e00a      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060ea:	2305      	movs	r3, #5
 80060ec:	e008      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060ee:	2304      	movs	r3, #4
 80060f0:	e006      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060f2:	2303      	movs	r3, #3
 80060f4:	e004      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e002      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <HAL_GPIO_Init+0x240>
 80060fe:	2300      	movs	r3, #0
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	f002 0203 	and.w	r2, r2, #3
 8006106:	0092      	lsls	r2, r2, #2
 8006108:	4093      	lsls	r3, r2
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4313      	orrs	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006110:	4935      	ldr	r1, [pc, #212]	; (80061e8 <HAL_GPIO_Init+0x328>)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	089b      	lsrs	r3, r3, #2
 8006116:	3302      	adds	r3, #2
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800611e:	4b3d      	ldr	r3, [pc, #244]	; (8006214 <HAL_GPIO_Init+0x354>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006142:	4a34      	ldr	r2, [pc, #208]	; (8006214 <HAL_GPIO_Init+0x354>)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006148:	4b32      	ldr	r3, [pc, #200]	; (8006214 <HAL_GPIO_Init+0x354>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	43db      	mvns	r3, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4013      	ands	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800616c:	4a29      	ldr	r2, [pc, #164]	; (8006214 <HAL_GPIO_Init+0x354>)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006172:	4b28      	ldr	r3, [pc, #160]	; (8006214 <HAL_GPIO_Init+0x354>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	43db      	mvns	r3, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4013      	ands	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006196:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <HAL_GPIO_Init+0x354>)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800619c:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <HAL_GPIO_Init+0x354>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4013      	ands	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061c0:	4a14      	ldr	r2, [pc, #80]	; (8006214 <HAL_GPIO_Init+0x354>)
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3301      	adds	r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b0f      	cmp	r3, #15
 80061d0:	f67f ae86 	bls.w	8005ee0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop
 80061d8:	3724      	adds	r7, #36	; 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40013800 	.word	0x40013800
 80061ec:	40020000 	.word	0x40020000
 80061f0:	40020400 	.word	0x40020400
 80061f4:	40020800 	.word	0x40020800
 80061f8:	40020c00 	.word	0x40020c00
 80061fc:	40021000 	.word	0x40021000
 8006200:	40021400 	.word	0x40021400
 8006204:	40021800 	.word	0x40021800
 8006208:	40021c00 	.word	0x40021c00
 800620c:	40022000 	.word	0x40022000
 8006210:	40022400 	.word	0x40022400
 8006214:	40013c00 	.word	0x40013c00

08006218 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006222:	2300      	movs	r3, #0
 8006224:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e0d9      	b.n	80063e8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006234:	2201      	movs	r2, #1
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4013      	ands	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	429a      	cmp	r2, r3
 800624c:	f040 80c9 	bne.w	80063e2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006250:	4a6b      	ldr	r2, [pc, #428]	; (8006400 <HAL_GPIO_DeInit+0x1e8>)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	089b      	lsrs	r3, r3, #2
 8006256:	3302      	adds	r3, #2
 8006258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800625c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	220f      	movs	r2, #15
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	4013      	ands	r3, r2
 8006270:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a63      	ldr	r2, [pc, #396]	; (8006404 <HAL_GPIO_DeInit+0x1ec>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d037      	beq.n	80062ea <HAL_GPIO_DeInit+0xd2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a62      	ldr	r2, [pc, #392]	; (8006408 <HAL_GPIO_DeInit+0x1f0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d031      	beq.n	80062e6 <HAL_GPIO_DeInit+0xce>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a61      	ldr	r2, [pc, #388]	; (800640c <HAL_GPIO_DeInit+0x1f4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d02b      	beq.n	80062e2 <HAL_GPIO_DeInit+0xca>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a60      	ldr	r2, [pc, #384]	; (8006410 <HAL_GPIO_DeInit+0x1f8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d025      	beq.n	80062de <HAL_GPIO_DeInit+0xc6>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a5f      	ldr	r2, [pc, #380]	; (8006414 <HAL_GPIO_DeInit+0x1fc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d01f      	beq.n	80062da <HAL_GPIO_DeInit+0xc2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a5e      	ldr	r2, [pc, #376]	; (8006418 <HAL_GPIO_DeInit+0x200>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d019      	beq.n	80062d6 <HAL_GPIO_DeInit+0xbe>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a5d      	ldr	r2, [pc, #372]	; (800641c <HAL_GPIO_DeInit+0x204>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <HAL_GPIO_DeInit+0xba>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a5c      	ldr	r2, [pc, #368]	; (8006420 <HAL_GPIO_DeInit+0x208>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00d      	beq.n	80062ce <HAL_GPIO_DeInit+0xb6>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a5b      	ldr	r2, [pc, #364]	; (8006424 <HAL_GPIO_DeInit+0x20c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d007      	beq.n	80062ca <HAL_GPIO_DeInit+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a5a      	ldr	r2, [pc, #360]	; (8006428 <HAL_GPIO_DeInit+0x210>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d101      	bne.n	80062c6 <HAL_GPIO_DeInit+0xae>
 80062c2:	2309      	movs	r3, #9
 80062c4:	e012      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062c6:	230a      	movs	r3, #10
 80062c8:	e010      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062ca:	2308      	movs	r3, #8
 80062cc:	e00e      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062ce:	2307      	movs	r3, #7
 80062d0:	e00c      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062d2:	2306      	movs	r3, #6
 80062d4:	e00a      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062d6:	2305      	movs	r3, #5
 80062d8:	e008      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062da:	2304      	movs	r3, #4
 80062dc:	e006      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062de:	2303      	movs	r3, #3
 80062e0:	e004      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e002      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <HAL_GPIO_DeInit+0xd4>
 80062ea:	2300      	movs	r3, #0
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	f002 0203 	and.w	r2, r2, #3
 80062f2:	0092      	lsls	r2, r2, #2
 80062f4:	4093      	lsls	r3, r2
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d132      	bne.n	8006362 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80062fc:	4b4b      	ldr	r3, [pc, #300]	; (800642c <HAL_GPIO_DeInit+0x214>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	43db      	mvns	r3, r3
 8006304:	4949      	ldr	r1, [pc, #292]	; (800642c <HAL_GPIO_DeInit+0x214>)
 8006306:	4013      	ands	r3, r2
 8006308:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800630a:	4b48      	ldr	r3, [pc, #288]	; (800642c <HAL_GPIO_DeInit+0x214>)
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	43db      	mvns	r3, r3
 8006312:	4946      	ldr	r1, [pc, #280]	; (800642c <HAL_GPIO_DeInit+0x214>)
 8006314:	4013      	ands	r3, r2
 8006316:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006318:	4b44      	ldr	r3, [pc, #272]	; (800642c <HAL_GPIO_DeInit+0x214>)
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	43db      	mvns	r3, r3
 8006320:	4942      	ldr	r1, [pc, #264]	; (800642c <HAL_GPIO_DeInit+0x214>)
 8006322:	4013      	ands	r3, r2
 8006324:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006326:	4b41      	ldr	r3, [pc, #260]	; (800642c <HAL_GPIO_DeInit+0x214>)
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	43db      	mvns	r3, r3
 800632e:	493f      	ldr	r1, [pc, #252]	; (800642c <HAL_GPIO_DeInit+0x214>)
 8006330:	4013      	ands	r3, r2
 8006332:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	220f      	movs	r2, #15
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006344:	4a2e      	ldr	r2, [pc, #184]	; (8006400 <HAL_GPIO_DeInit+0x1e8>)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	3302      	adds	r3, #2
 800634c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	43da      	mvns	r2, r3
 8006354:	482a      	ldr	r0, [pc, #168]	; (8006400 <HAL_GPIO_DeInit+0x1e8>)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	089b      	lsrs	r3, r3, #2
 800635a:	400a      	ands	r2, r1
 800635c:	3302      	adds	r3, #2
 800635e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	2103      	movs	r1, #3
 800636c:	fa01 f303 	lsl.w	r3, r1, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	401a      	ands	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	08da      	lsrs	r2, r3, #3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3208      	adds	r2, #8
 8006380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	220f      	movs	r2, #15
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43db      	mvns	r3, r3
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	08d2      	lsrs	r2, r2, #3
 8006398:	4019      	ands	r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3208      	adds	r2, #8
 800639e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	2103      	movs	r1, #3
 80063ac:	fa01 f303 	lsl.w	r3, r1, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	401a      	ands	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	2101      	movs	r1, #1
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	43db      	mvns	r3, r3
 80063c6:	401a      	ands	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	2103      	movs	r1, #3
 80063d6:	fa01 f303 	lsl.w	r3, r1, r3
 80063da:	43db      	mvns	r3, r3
 80063dc:	401a      	ands	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	3301      	adds	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b0f      	cmp	r3, #15
 80063ec:	f67f af22 	bls.w	8006234 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40013800 	.word	0x40013800
 8006404:	40020000 	.word	0x40020000
 8006408:	40020400 	.word	0x40020400
 800640c:	40020800 	.word	0x40020800
 8006410:	40020c00 	.word	0x40020c00
 8006414:	40021000 	.word	0x40021000
 8006418:	40021400 	.word	0x40021400
 800641c:	40021800 	.word	0x40021800
 8006420:	40021c00 	.word	0x40021c00
 8006424:	40022000 	.word	0x40022000
 8006428:	40022400 	.word	0x40022400
 800642c:	40013c00 	.word	0x40013c00

08006430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
 800643c:	4613      	mov	r3, r2
 800643e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006440:	787b      	ldrb	r3, [r7, #1]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006446:	887a      	ldrh	r2, [r7, #2]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800644c:	e003      	b.n	8006456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800644e:	887b      	ldrh	r3, [r7, #2]
 8006450:	041a      	lsls	r2, r3, #16
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	619a      	str	r2, [r3, #24]
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006474:	887a      	ldrh	r2, [r7, #2]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4013      	ands	r3, r2
 800647a:	041a      	lsls	r2, r3, #16
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	43d9      	mvns	r1, r3
 8006480:	887b      	ldrh	r3, [r7, #2]
 8006482:	400b      	ands	r3, r1
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	619a      	str	r2, [r3, #24]
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
	...

08006498 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064a2:	4b23      	ldr	r3, [pc, #140]	; (8006530 <HAL_PWREx_EnableOverDrive+0x98>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	4a22      	ldr	r2, [pc, #136]	; (8006530 <HAL_PWREx_EnableOverDrive+0x98>)
 80064a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ac:	6413      	str	r3, [r2, #64]	; 0x40
 80064ae:	4b20      	ldr	r3, [pc, #128]	; (8006530 <HAL_PWREx_EnableOverDrive+0x98>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064ba:	4b1e      	ldr	r3, [pc, #120]	; (8006534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064c6:	f7fd fb5d 	bl	8003b84 <HAL_GetTick>
 80064ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064cc:	e009      	b.n	80064e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064ce:	f7fd fb59 	bl	8003b84 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064dc:	d901      	bls.n	80064e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e022      	b.n	8006528 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064e2:	4b14      	ldr	r3, [pc, #80]	; (8006534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ee:	d1ee      	bne.n	80064ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064f0:	4b10      	ldr	r3, [pc, #64]	; (8006534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a0f      	ldr	r2, [pc, #60]	; (8006534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064fc:	f7fd fb42 	bl	8003b84 <HAL_GetTick>
 8006500:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006502:	e009      	b.n	8006518 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006504:	f7fd fb3e 	bl	8003b84 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006512:	d901      	bls.n	8006518 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e007      	b.n	8006528 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <HAL_PWREx_EnableOverDrive+0x9c>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006524:	d1ee      	bne.n	8006504 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40023800 	.word	0x40023800
 8006534:	40007000 	.word	0x40007000

08006538 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006540:	f7fd fb20 	bl	8003b84 <HAL_GetTick>
 8006544:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e067      	b.n	8006620 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fb fe75 	bl	8002254 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800656a:	f241 3188 	movw	r1, #5000	; 0x1388
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fafd 	bl	8006b6e <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	3b01      	subs	r3, #1
 8006584:	021a      	lsls	r2, r3, #8
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	2120      	movs	r1, #32
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 faf5 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80065a4:	7afb      	ldrb	r3, [r7, #11]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d135      	bne.n	8006616 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <HAL_QSPI_Init+0xf0>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6852      	ldr	r2, [r2, #4]
 80065b8:	0611      	lsls	r1, r2, #24
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	68d2      	ldr	r2, [r2, #12]
 80065be:	4311      	orrs	r1, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	69d2      	ldr	r2, [r2, #28]
 80065c4:	4311      	orrs	r1, r2
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6a12      	ldr	r2, [r2, #32]
 80065ca:	4311      	orrs	r1, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	4b14      	ldr	r3, [pc, #80]	; (800662c <HAL_QSPI_Init+0xf4>)
 80065dc:	4013      	ands	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6912      	ldr	r2, [r2, #16]
 80065e2:	0411      	lsls	r1, r2, #16
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6952      	ldr	r2, [r2, #20]
 80065e8:	4311      	orrs	r1, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6992      	ldr	r2, [r2, #24]
 80065ee:	4311      	orrs	r1, r2
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800661e:	7afb      	ldrb	r3, [r7, #11]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	00ffff2f 	.word	0x00ffff2f
 800662c:	ffe0f8fe 	.word	0xffe0f8fe

08006630 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e016      	b.n	8006670 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0201 	bic.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fb fe8e 	bl	8002374 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af02      	add	r7, sp, #8
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006684:	f7fd fa7e 	bl	8003b84 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_QSPI_Command+0x22>
 8006696:	2302      	movs	r3, #2
 8006698:	e048      	b.n	800672c <HAL_QSPI_Command+0xb4>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d137      	bne.n	800671e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2200      	movs	r2, #0
 80066c4:	2120      	movs	r1, #32
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 fa5f 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d125      	bne.n	8006722 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80066d6:	2200      	movs	r2, #0
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fa8c 	bl	8006bf8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d115      	bne.n	8006714 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2201      	movs	r2, #1
 80066f0:	2102      	movs	r1, #2
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fa49 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10f      	bne.n	8006722 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2202      	movs	r2, #2
 8006708:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006712:	e006      	b.n	8006722 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800671c:	e001      	b.n	8006722 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800671e:	2302      	movs	r3, #2
 8006720:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006744:	f7fd fa1e 	bl	8003b84 <HAL_GetTick>
 8006748:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3320      	adds	r3, #32
 8006750:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_QSPI_Transmit+0x2e>
 800675e:	2302      	movs	r3, #2
 8006760:	e07b      	b.n	800685a <HAL_QSPI_Transmit+0x126>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b01      	cmp	r3, #1
 8006774:	d16a      	bne.n	800684c <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d05b      	beq.n	800683a <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2212      	movs	r2, #18
 8006786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695a      	ldr	r2, [r3, #20]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80067b6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80067b8:	e01b      	b.n	80067f2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2201      	movs	r2, #1
 80067c2:	2104      	movs	r1, #4
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f9e0 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80067ce:	7ffb      	ldrb	r3, [r7, #31]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d113      	bne.n	80067fc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	781a      	ldrb	r2, [r3, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ec:	1e5a      	subs	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1df      	bne.n	80067ba <HAL_QSPI_Transmit+0x86>
 80067fa:	e000      	b.n	80067fe <HAL_QSPI_Transmit+0xca>
          break;
 80067fc:	bf00      	nop
      }

      if (status == HAL_OK)
 80067fe:	7ffb      	ldrb	r3, [r7, #31]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d115      	bne.n	8006830 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2201      	movs	r2, #1
 800680c:	2102      	movs	r1, #2
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f9bb 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006818:	7ffb      	ldrb	r3, [r7, #31]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2202      	movs	r2, #2
 8006824:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f934 	bl	8006a94 <HAL_QSPI_Abort>
 800682c:	4603      	mov	r3, r0
 800682e:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006838:	e00a      	b.n	8006850 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	f043 0208 	orr.w	r2, r3, #8
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	77fb      	strb	r3, [r7, #31]
 800684a:	e001      	b.n	8006850 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 800684c:	2302      	movs	r3, #2
 800684e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006858:	7ffb      	ldrb	r3, [r7, #31]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3720      	adds	r7, #32
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b08a      	sub	sp, #40	; 0x28
 8006866:	af02      	add	r7, sp, #8
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006872:	f7fd f987 	bl	8003b84 <HAL_GetTick>
 8006876:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3320      	adds	r3, #32
 8006886:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_QSPI_Receive+0x36>
 8006894:	2302      	movs	r3, #2
 8006896:	e082      	b.n	800699e <HAL_QSPI_Receive+0x13c>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d171      	bne.n	8006990 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d062      	beq.n	800697e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2222      	movs	r2, #34	; 0x22
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80068f0:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80068fa:	e01c      	b.n	8006936 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2201      	movs	r2, #1
 8006904:	2106      	movs	r1, #6
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f93f 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006910:	7ffb      	ldrb	r3, [r7, #31]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d114      	bne.n	8006940 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	7812      	ldrb	r2, [r2, #0]
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	1e5a      	subs	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1de      	bne.n	80068fc <HAL_QSPI_Receive+0x9a>
 800693e:	e000      	b.n	8006942 <HAL_QSPI_Receive+0xe0>
          break;
 8006940:	bf00      	nop
      }

      if (status == HAL_OK)
 8006942:	7ffb      	ldrb	r3, [r7, #31]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d115      	bne.n	8006974 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2201      	movs	r2, #1
 8006950:	2102      	movs	r1, #2
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 f919 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 8006958:	4603      	mov	r3, r0
 800695a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800695c:	7ffb      	ldrb	r3, [r7, #31]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d108      	bne.n	8006974 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2202      	movs	r2, #2
 8006968:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f892 	bl	8006a94 <HAL_QSPI_Abort>
 8006970:	4603      	mov	r3, r0
 8006972:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800697c:	e00a      	b.n	8006994 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006982:	f043 0208 	orr.w	r2, r3, #8
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	e001      	b.n	8006994 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006990:	2302      	movs	r3, #2
 8006992:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800699c:	7ffb      	ldrb	r3, [r7, #31]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3720      	adds	r7, #32
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b088      	sub	sp, #32
 80069aa:	af02      	add	r7, sp, #8
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80069b4:	f7fd f8e6 	bl	8003b84 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_QSPI_AutoPolling+0x24>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e060      	b.n	8006a8c <HAL_QSPI_AutoPolling+0xe6>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d14f      	bne.n	8006a7e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2242      	movs	r2, #66	; 0x42
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2200      	movs	r2, #0
 80069f4:	2120      	movs	r1, #32
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 f8c7 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d13d      	bne.n	8006a82 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6852      	ldr	r2, [r2, #4]
 8006a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	6892      	ldr	r2, [r2, #8]
 8006a22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006a3c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f8d3 	bl	8006bf8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	2108      	movs	r1, #8
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f894 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2208      	movs	r2, #8
 8006a72:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a7c:	e001      	b.n	8006a82 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006aa0:	f7fd f870 	bl	8003b84 <HAL_GetTick>
 8006aa4:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d056      	beq.n	8006b64 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d017      	beq.n	8006afc <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0204 	bic.w	r2, r2, #4
 8006ada:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fd fff2 	bl	8004aca <HAL_DMA_Abort>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af4:	f043 0204 	orr.w	r2, r3, #4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0202 	orr.w	r2, r2, #2
 8006b0a:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2201      	movs	r2, #1
 8006b16:	2102      	movs	r1, #2
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f836 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10e      	bne.n	8006b46 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2120      	movs	r1, #32
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f824 	bl	8006b8a <QSPI_WaitFlagStateUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10b      	bne.n	8006b64 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695a      	ldr	r2, [r3, #20]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006b5a:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	603b      	str	r3, [r7, #0]
 8006b96:	4613      	mov	r3, r2
 8006b98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b9a:	e01a      	b.n	8006bd2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	d016      	beq.n	8006bd2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba4:	f7fc ffee 	bl	8003b84 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	69ba      	ldr	r2, [r7, #24]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d302      	bcc.n	8006bba <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10b      	bne.n	8006bd2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	f043 0201 	orr.w	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e00e      	b.n	8006bf0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bf14      	ite	ne
 8006be0:	2301      	movne	r3, #1
 8006be2:	2300      	moveq	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d1d6      	bne.n	8006b9c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <QSPI_Config+0x28>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c12:	d005      	beq.n	8006c20 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3a01      	subs	r2, #1
 8006c1e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80b9 	beq.w	8006d9c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d05f      	beq.n	8006cf2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	6892      	ldr	r2, [r2, #8]
 8006c3a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d031      	beq.n	8006ca8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c52:	431a      	orrs	r2, r3
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	049b      	lsls	r3, r3, #18
 8006c60:	431a      	orrs	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	ea42 0103 	orr.w	r1, r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c98:	f000 812e 	beq.w	8006ef8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	6852      	ldr	r2, [r2, #4]
 8006ca4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006ca6:	e127      	b.n	8006ef8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	049b      	lsls	r3, r3, #18
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	ea42 0103 	orr.w	r1, r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	615a      	str	r2, [r3, #20]
}
 8006cf0:	e102      	b.n	8006ef8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d02e      	beq.n	8006d58 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	049b      	lsls	r3, r3, #18
 8006d16:	431a      	orrs	r2, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	ea42 0103 	orr.w	r1, r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d48:	f000 80d6 	beq.w	8006ef8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	6852      	ldr	r2, [r2, #4]
 8006d54:	619a      	str	r2, [r3, #24]
}
 8006d56:	e0cf      	b.n	8006ef8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	431a      	orrs	r2, r3
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d66:	431a      	orrs	r2, r3
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	049b      	lsls	r3, r3, #18
 8006d74:	431a      	orrs	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	431a      	orrs	r2, r3
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	ea42 0103 	orr.w	r1, r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	615a      	str	r2, [r3, #20]
}
 8006d9a:	e0ad      	b.n	8006ef8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d058      	beq.n	8006e56 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	6892      	ldr	r2, [r2, #8]
 8006dac:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d02d      	beq.n	8006e12 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	049b      	lsls	r3, r3, #18
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	ea42 0103 	orr.w	r1, r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006e04:	d078      	beq.n	8006ef8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	6852      	ldr	r2, [r2, #4]
 8006e0e:	619a      	str	r2, [r3, #24]
}
 8006e10:	e072      	b.n	8006ef8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e20:	431a      	orrs	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	049b      	lsls	r3, r3, #18
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	431a      	orrs	r2, r3
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	ea42 0103 	orr.w	r1, r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	615a      	str	r2, [r3, #20]
}
 8006e54:	e050      	b.n	8006ef8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d02a      	beq.n	8006eb4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	431a      	orrs	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	431a      	orrs	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	049b      	lsls	r3, r3, #18
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	431a      	orrs	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	ea42 0103 	orr.w	r1, r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ea6:	d027      	beq.n	8006ef8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	6852      	ldr	r2, [r2, #4]
 8006eb0:	619a      	str	r2, [r3, #24]
}
 8006eb2:	e021      	b.n	8006ef8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01d      	beq.n	8006ef8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	049b      	lsls	r3, r3, #18
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	ea42 0103 	orr.w	r1, r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	615a      	str	r2, [r3, #20]
}
 8006ef8:	bf00      	nop
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e291      	b.n	800743e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8087 	beq.w	8007036 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f28:	4b96      	ldr	r3, [pc, #600]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 030c 	and.w	r3, r3, #12
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d00c      	beq.n	8006f4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f34:	4b93      	ldr	r3, [pc, #588]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d112      	bne.n	8006f66 <HAL_RCC_OscConfig+0x62>
 8006f40:	4b90      	ldr	r3, [pc, #576]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f4c:	d10b      	bne.n	8006f66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f4e:	4b8d      	ldr	r3, [pc, #564]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d06c      	beq.n	8007034 <HAL_RCC_OscConfig+0x130>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d168      	bne.n	8007034 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e26b      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f6e:	d106      	bne.n	8006f7e <HAL_RCC_OscConfig+0x7a>
 8006f70:	4b84      	ldr	r3, [pc, #528]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a83      	ldr	r2, [pc, #524]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	e02e      	b.n	8006fdc <HAL_RCC_OscConfig+0xd8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10c      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x9c>
 8006f86:	4b7f      	ldr	r3, [pc, #508]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a7e      	ldr	r2, [pc, #504]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	4b7c      	ldr	r3, [pc, #496]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a7b      	ldr	r2, [pc, #492]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	e01d      	b.n	8006fdc <HAL_RCC_OscConfig+0xd8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa8:	d10c      	bne.n	8006fc4 <HAL_RCC_OscConfig+0xc0>
 8006faa:	4b76      	ldr	r3, [pc, #472]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a75      	ldr	r2, [pc, #468]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	4b73      	ldr	r3, [pc, #460]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a72      	ldr	r2, [pc, #456]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	e00b      	b.n	8006fdc <HAL_RCC_OscConfig+0xd8>
 8006fc4:	4b6f      	ldr	r3, [pc, #444]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a6e      	ldr	r2, [pc, #440]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	4b6c      	ldr	r3, [pc, #432]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a6b      	ldr	r2, [pc, #428]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8006fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d013      	beq.n	800700c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fc fdce 	bl	8003b84 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fec:	f7fc fdca 	bl	8003b84 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	; 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e21f      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffe:	4b61      	ldr	r3, [pc, #388]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCC_OscConfig+0xe8>
 800700a:	e014      	b.n	8007036 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700c:	f7fc fdba 	bl	8003b84 <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007014:	f7fc fdb6 	bl	8003b84 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b64      	cmp	r3, #100	; 0x64
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e20b      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007026:	4b57      	ldr	r3, [pc, #348]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0x110>
 8007032:	e000      	b.n	8007036 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d069      	beq.n	8007116 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007042:	4b50      	ldr	r3, [pc, #320]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800704e:	4b4d      	ldr	r3, [pc, #308]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 030c 	and.w	r3, r3, #12
 8007056:	2b08      	cmp	r3, #8
 8007058:	d11c      	bne.n	8007094 <HAL_RCC_OscConfig+0x190>
 800705a:	4b4a      	ldr	r3, [pc, #296]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d116      	bne.n	8007094 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007066:	4b47      	ldr	r3, [pc, #284]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_RCC_OscConfig+0x17a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d001      	beq.n	800707e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e1df      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800707e:	4b41      	ldr	r3, [pc, #260]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	493d      	ldr	r1, [pc, #244]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 800708e:	4313      	orrs	r3, r2
 8007090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007092:	e040      	b.n	8007116 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d023      	beq.n	80070e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800709c:	4b39      	ldr	r3, [pc, #228]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a38      	ldr	r2, [pc, #224]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a8:	f7fc fd6c 	bl	8003b84 <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b0:	f7fc fd68 	bl	8003b84 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e1bd      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c2:	4b30      	ldr	r3, [pc, #192]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0f0      	beq.n	80070b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ce:	4b2d      	ldr	r3, [pc, #180]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	4929      	ldr	r1, [pc, #164]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]
 80070e2:	e018      	b.n	8007116 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070e4:	4b27      	ldr	r3, [pc, #156]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a26      	ldr	r2, [pc, #152]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f0:	f7fc fd48 	bl	8003b84 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f8:	f7fc fd44 	bl	8003b84 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e199      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800710a:	4b1e      	ldr	r3, [pc, #120]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d038      	beq.n	8007194 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d019      	beq.n	800715e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800712a:	4b16      	ldr	r3, [pc, #88]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 800712c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712e:	4a15      	ldr	r2, [pc, #84]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007130:	f043 0301 	orr.w	r3, r3, #1
 8007134:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007136:	f7fc fd25 	bl	8003b84 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800713e:	f7fc fd21 	bl	8003b84 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e176      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007150:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x23a>
 800715c:	e01a      	b.n	8007194 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007162:	4a08      	ldr	r2, [pc, #32]	; (8007184 <HAL_RCC_OscConfig+0x280>)
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800716a:	f7fc fd0b 	bl	8003b84 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007170:	e00a      	b.n	8007188 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007172:	f7fc fd07 	bl	8003b84 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d903      	bls.n	8007188 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e15c      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
 8007184:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007188:	4b91      	ldr	r3, [pc, #580]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800718a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1ee      	bne.n	8007172 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80a4 	beq.w	80072ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071a2:	4b8b      	ldr	r3, [pc, #556]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10d      	bne.n	80071ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ae:	4b88      	ldr	r3, [pc, #544]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	4a87      	ldr	r2, [pc, #540]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80071b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ba:	4b85      	ldr	r3, [pc, #532]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c2:	60bb      	str	r3, [r7, #8]
 80071c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071ca:	4b82      	ldr	r3, [pc, #520]	; (80073d4 <HAL_RCC_OscConfig+0x4d0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d118      	bne.n	8007208 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80071d6:	4b7f      	ldr	r3, [pc, #508]	; (80073d4 <HAL_RCC_OscConfig+0x4d0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a7e      	ldr	r2, [pc, #504]	; (80073d4 <HAL_RCC_OscConfig+0x4d0>)
 80071dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071e2:	f7fc fccf 	bl	8003b84 <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ea:	f7fc fccb 	bl	8003b84 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b64      	cmp	r3, #100	; 0x64
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e120      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071fc:	4b75      	ldr	r3, [pc, #468]	; (80073d4 <HAL_RCC_OscConfig+0x4d0>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0f0      	beq.n	80071ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d106      	bne.n	800721e <HAL_RCC_OscConfig+0x31a>
 8007210:	4b6f      	ldr	r3, [pc, #444]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007214:	4a6e      	ldr	r2, [pc, #440]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007216:	f043 0301 	orr.w	r3, r3, #1
 800721a:	6713      	str	r3, [r2, #112]	; 0x70
 800721c:	e02d      	b.n	800727a <HAL_RCC_OscConfig+0x376>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10c      	bne.n	8007240 <HAL_RCC_OscConfig+0x33c>
 8007226:	4b6a      	ldr	r3, [pc, #424]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	4a69      	ldr	r2, [pc, #420]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	6713      	str	r3, [r2, #112]	; 0x70
 8007232:	4b67      	ldr	r3, [pc, #412]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	4a66      	ldr	r2, [pc, #408]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007238:	f023 0304 	bic.w	r3, r3, #4
 800723c:	6713      	str	r3, [r2, #112]	; 0x70
 800723e:	e01c      	b.n	800727a <HAL_RCC_OscConfig+0x376>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	2b05      	cmp	r3, #5
 8007246:	d10c      	bne.n	8007262 <HAL_RCC_OscConfig+0x35e>
 8007248:	4b61      	ldr	r3, [pc, #388]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800724a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724c:	4a60      	ldr	r2, [pc, #384]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800724e:	f043 0304 	orr.w	r3, r3, #4
 8007252:	6713      	str	r3, [r2, #112]	; 0x70
 8007254:	4b5e      	ldr	r3, [pc, #376]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	4a5d      	ldr	r2, [pc, #372]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800725a:	f043 0301 	orr.w	r3, r3, #1
 800725e:	6713      	str	r3, [r2, #112]	; 0x70
 8007260:	e00b      	b.n	800727a <HAL_RCC_OscConfig+0x376>
 8007262:	4b5b      	ldr	r3, [pc, #364]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	4a5a      	ldr	r2, [pc, #360]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	6713      	str	r3, [r2, #112]	; 0x70
 800726e:	4b58      	ldr	r3, [pc, #352]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	4a57      	ldr	r2, [pc, #348]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007274:	f023 0304 	bic.w	r3, r3, #4
 8007278:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d015      	beq.n	80072ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007282:	f7fc fc7f 	bl	8003b84 <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007288:	e00a      	b.n	80072a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800728a:	f7fc fc7b 	bl	8003b84 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	f241 3288 	movw	r2, #5000	; 0x1388
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e0ce      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a0:	4b4b      	ldr	r3, [pc, #300]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80072a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0ee      	beq.n	800728a <HAL_RCC_OscConfig+0x386>
 80072ac:	e014      	b.n	80072d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ae:	f7fc fc69 	bl	8003b84 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b4:	e00a      	b.n	80072cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072b6:	f7fc fc65 	bl	8003b84 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e0b8      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072cc:	4b40      	ldr	r3, [pc, #256]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80072ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1ee      	bne.n	80072b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d105      	bne.n	80072ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072de:	4b3c      	ldr	r3, [pc, #240]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	4a3b      	ldr	r2, [pc, #236]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80072e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 80a4 	beq.w	800743c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072f4:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f003 030c 	and.w	r3, r3, #12
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d06b      	beq.n	80073d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d149      	bne.n	800739c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007308:	4b31      	ldr	r3, [pc, #196]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a30      	ldr	r2, [pc, #192]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800730e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007314:	f7fc fc36 	bl	8003b84 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800731c:	f7fc fc32 	bl	8003b84 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e087      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800732e:	4b28      	ldr	r3, [pc, #160]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f0      	bne.n	800731c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69da      	ldr	r2, [r3, #28]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	019b      	lsls	r3, r3, #6
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	085b      	lsrs	r3, r3, #1
 8007352:	3b01      	subs	r3, #1
 8007354:	041b      	lsls	r3, r3, #16
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	061b      	lsls	r3, r3, #24
 800735e:	4313      	orrs	r3, r2
 8007360:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007362:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007366:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007368:	4b19      	ldr	r3, [pc, #100]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a18      	ldr	r2, [pc, #96]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800736e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007374:	f7fc fc06 	bl	8003b84 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800737c:	f7fc fc02 	bl	8003b84 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e057      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <HAL_RCC_OscConfig+0x478>
 800739a:	e04f      	b.n	800743c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800739c:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a0b      	ldr	r2, [pc, #44]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80073a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a8:	f7fc fbec 	bl	8003b84 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073b0:	f7fc fbe8 	bl	8003b84 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e03d      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c2:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <HAL_RCC_OscConfig+0x4cc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0x4ac>
 80073ce:	e035      	b.n	800743c <HAL_RCC_OscConfig+0x538>
 80073d0:	40023800 	.word	0x40023800
 80073d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073d8:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <HAL_RCC_OscConfig+0x544>)
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d028      	beq.n	8007438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d121      	bne.n	8007438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fe:	429a      	cmp	r2, r3
 8007400:	d11a      	bne.n	8007438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007408:	4013      	ands	r3, r2
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800740e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007410:	4293      	cmp	r3, r2
 8007412:	d111      	bne.n	8007438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	3b01      	subs	r3, #1
 8007422:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007424:	429a      	cmp	r2, r3
 8007426:	d107      	bne.n	8007438 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007434:	429a      	cmp	r2, r3
 8007436:	d001      	beq.n	800743c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e000      	b.n	800743e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	40023800 	.word	0x40023800

0800744c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e0d0      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007464:	4b6a      	ldr	r3, [pc, #424]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d910      	bls.n	8007494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007472:	4b67      	ldr	r3, [pc, #412]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f023 020f 	bic.w	r2, r3, #15
 800747a:	4965      	ldr	r1, [pc, #404]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	4313      	orrs	r3, r2
 8007480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007482:	4b63      	ldr	r3, [pc, #396]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d001      	beq.n	8007494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e0b8      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d020      	beq.n	80074e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074ac:	4b59      	ldr	r3, [pc, #356]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4a58      	ldr	r2, [pc, #352]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80074b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074c4:	4b53      	ldr	r3, [pc, #332]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	4a52      	ldr	r2, [pc, #328]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80074ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074d0:	4b50      	ldr	r3, [pc, #320]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	494d      	ldr	r1, [pc, #308]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d040      	beq.n	8007570 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d107      	bne.n	8007506 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f6:	4b47      	ldr	r3, [pc, #284]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d115      	bne.n	800752e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e07f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2b02      	cmp	r3, #2
 800750c:	d107      	bne.n	800751e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800750e:	4b41      	ldr	r3, [pc, #260]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d109      	bne.n	800752e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e073      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800751e:	4b3d      	ldr	r3, [pc, #244]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e06b      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800752e:	4b39      	ldr	r3, [pc, #228]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f023 0203 	bic.w	r2, r3, #3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	4936      	ldr	r1, [pc, #216]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 800753c:	4313      	orrs	r3, r2
 800753e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007540:	f7fc fb20 	bl	8003b84 <HAL_GetTick>
 8007544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007546:	e00a      	b.n	800755e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007548:	f7fc fb1c 	bl	8003b84 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	f241 3288 	movw	r2, #5000	; 0x1388
 8007556:	4293      	cmp	r3, r2
 8007558:	d901      	bls.n	800755e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e053      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800755e:	4b2d      	ldr	r3, [pc, #180]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 020c 	and.w	r2, r3, #12
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	429a      	cmp	r2, r3
 800756e:	d1eb      	bne.n	8007548 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007570:	4b27      	ldr	r3, [pc, #156]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	429a      	cmp	r2, r3
 800757c:	d210      	bcs.n	80075a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757e:	4b24      	ldr	r3, [pc, #144]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f023 020f 	bic.w	r2, r3, #15
 8007586:	4922      	ldr	r1, [pc, #136]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	4313      	orrs	r3, r2
 800758c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800758e:	4b20      	ldr	r3, [pc, #128]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d001      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e032      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075ac:	4b19      	ldr	r3, [pc, #100]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4916      	ldr	r1, [pc, #88]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075ca:	4b12      	ldr	r3, [pc, #72]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	490e      	ldr	r1, [pc, #56]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075de:	f000 f821 	bl	8007624 <HAL_RCC_GetSysClockFreq>
 80075e2:	4602      	mov	r2, r0
 80075e4:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	091b      	lsrs	r3, r3, #4
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	490a      	ldr	r1, [pc, #40]	; (8007618 <HAL_RCC_ClockConfig+0x1cc>)
 80075f0:	5ccb      	ldrb	r3, [r1, r3]
 80075f2:	fa22 f303 	lsr.w	r3, r2, r3
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <HAL_RCC_ClockConfig+0x1d0>)
 80075f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <HAL_RCC_ClockConfig+0x1d4>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fc fa7c 	bl	8003afc <HAL_InitTick>

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40023c00 	.word	0x40023c00
 8007614:	40023800 	.word	0x40023800
 8007618:	08017990 	.word	0x08017990
 800761c:	20000050 	.word	0x20000050
 8007620:	20000074 	.word	0x20000074

08007624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007624:	b5b0      	push	{r4, r5, r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800762a:	2100      	movs	r1, #0
 800762c:	6079      	str	r1, [r7, #4]
 800762e:	2100      	movs	r1, #0
 8007630:	60f9      	str	r1, [r7, #12]
 8007632:	2100      	movs	r1, #0
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007636:	2100      	movs	r1, #0
 8007638:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800763a:	4952      	ldr	r1, [pc, #328]	; (8007784 <HAL_RCC_GetSysClockFreq+0x160>)
 800763c:	6889      	ldr	r1, [r1, #8]
 800763e:	f001 010c 	and.w	r1, r1, #12
 8007642:	2908      	cmp	r1, #8
 8007644:	d00d      	beq.n	8007662 <HAL_RCC_GetSysClockFreq+0x3e>
 8007646:	2908      	cmp	r1, #8
 8007648:	f200 8094 	bhi.w	8007774 <HAL_RCC_GetSysClockFreq+0x150>
 800764c:	2900      	cmp	r1, #0
 800764e:	d002      	beq.n	8007656 <HAL_RCC_GetSysClockFreq+0x32>
 8007650:	2904      	cmp	r1, #4
 8007652:	d003      	beq.n	800765c <HAL_RCC_GetSysClockFreq+0x38>
 8007654:	e08e      	b.n	8007774 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007656:	4b4c      	ldr	r3, [pc, #304]	; (8007788 <HAL_RCC_GetSysClockFreq+0x164>)
 8007658:	60bb      	str	r3, [r7, #8]
      break;
 800765a:	e08e      	b.n	800777a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800765c:	4b4b      	ldr	r3, [pc, #300]	; (800778c <HAL_RCC_GetSysClockFreq+0x168>)
 800765e:	60bb      	str	r3, [r7, #8]
      break;
 8007660:	e08b      	b.n	800777a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007662:	4948      	ldr	r1, [pc, #288]	; (8007784 <HAL_RCC_GetSysClockFreq+0x160>)
 8007664:	6849      	ldr	r1, [r1, #4]
 8007666:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800766a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800766c:	4945      	ldr	r1, [pc, #276]	; (8007784 <HAL_RCC_GetSysClockFreq+0x160>)
 800766e:	6849      	ldr	r1, [r1, #4]
 8007670:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007674:	2900      	cmp	r1, #0
 8007676:	d024      	beq.n	80076c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007678:	4942      	ldr	r1, [pc, #264]	; (8007784 <HAL_RCC_GetSysClockFreq+0x160>)
 800767a:	6849      	ldr	r1, [r1, #4]
 800767c:	0989      	lsrs	r1, r1, #6
 800767e:	4608      	mov	r0, r1
 8007680:	f04f 0100 	mov.w	r1, #0
 8007684:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007688:	f04f 0500 	mov.w	r5, #0
 800768c:	ea00 0204 	and.w	r2, r0, r4
 8007690:	ea01 0305 	and.w	r3, r1, r5
 8007694:	493d      	ldr	r1, [pc, #244]	; (800778c <HAL_RCC_GetSysClockFreq+0x168>)
 8007696:	fb01 f003 	mul.w	r0, r1, r3
 800769a:	2100      	movs	r1, #0
 800769c:	fb01 f102 	mul.w	r1, r1, r2
 80076a0:	1844      	adds	r4, r0, r1
 80076a2:	493a      	ldr	r1, [pc, #232]	; (800778c <HAL_RCC_GetSysClockFreq+0x168>)
 80076a4:	fba2 0101 	umull	r0, r1, r2, r1
 80076a8:	1863      	adds	r3, r4, r1
 80076aa:	4619      	mov	r1, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	461a      	mov	r2, r3
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	f7f8 fe14 	bl	80002e0 <__aeabi_uldivmod>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4613      	mov	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e04a      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076c2:	4b30      	ldr	r3, [pc, #192]	; (8007784 <HAL_RCC_GetSysClockFreq+0x160>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	099b      	lsrs	r3, r3, #6
 80076c8:	461a      	mov	r2, r3
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80076d2:	f04f 0100 	mov.w	r1, #0
 80076d6:	ea02 0400 	and.w	r4, r2, r0
 80076da:	ea03 0501 	and.w	r5, r3, r1
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	014b      	lsls	r3, r1, #5
 80076ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076f0:	0142      	lsls	r2, r0, #5
 80076f2:	4610      	mov	r0, r2
 80076f4:	4619      	mov	r1, r3
 80076f6:	1b00      	subs	r0, r0, r4
 80076f8:	eb61 0105 	sbc.w	r1, r1, r5
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	018b      	lsls	r3, r1, #6
 8007706:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800770a:	0182      	lsls	r2, r0, #6
 800770c:	1a12      	subs	r2, r2, r0
 800770e:	eb63 0301 	sbc.w	r3, r3, r1
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f04f 0100 	mov.w	r1, #0
 800771a:	00d9      	lsls	r1, r3, #3
 800771c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007720:	00d0      	lsls	r0, r2, #3
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	1912      	adds	r2, r2, r4
 8007728:	eb45 0303 	adc.w	r3, r5, r3
 800772c:	f04f 0000 	mov.w	r0, #0
 8007730:	f04f 0100 	mov.w	r1, #0
 8007734:	0299      	lsls	r1, r3, #10
 8007736:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800773a:	0290      	lsls	r0, r2, #10
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4610      	mov	r0, r2
 8007742:	4619      	mov	r1, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	461a      	mov	r2, r3
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	f7f8 fdc8 	bl	80002e0 <__aeabi_uldivmod>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4613      	mov	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <HAL_RCC_GetSysClockFreq+0x160>)
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	3301      	adds	r3, #1
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007770:	60bb      	str	r3, [r7, #8]
      break;
 8007772:	e002      	b.n	800777a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007774:	4b04      	ldr	r3, [pc, #16]	; (8007788 <HAL_RCC_GetSysClockFreq+0x164>)
 8007776:	60bb      	str	r3, [r7, #8]
      break;
 8007778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800777a:	68bb      	ldr	r3, [r7, #8]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bdb0      	pop	{r4, r5, r7, pc}
 8007784:	40023800 	.word	0x40023800
 8007788:	00f42400 	.word	0x00f42400
 800778c:	017d7840 	.word	0x017d7840

08007790 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007794:	4b03      	ldr	r3, [pc, #12]	; (80077a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007796:	681b      	ldr	r3, [r3, #0]
}
 8007798:	4618      	mov	r0, r3
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	20000050 	.word	0x20000050

080077a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e049      	b.n	800784e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fc f930 	bl	8003a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f000 fa46 	bl	8007c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b02      	cmp	r3, #2
 800786a:	d122      	bne.n	80078b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b02      	cmp	r3, #2
 8007878:	d11b      	bne.n	80078b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f06f 0202 	mvn.w	r2, #2
 8007882:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f9cf 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 800789e:	e005      	b.n	80078ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9c1 	bl	8007c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f9d2 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d122      	bne.n	8007906 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d11b      	bne.n	8007906 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f06f 0204 	mvn.w	r2, #4
 80078d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9a5 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 80078f2:	e005      	b.n	8007900 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f997 	bl	8007c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f9a8 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b08      	cmp	r3, #8
 8007912:	d122      	bne.n	800795a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b08      	cmp	r3, #8
 8007920:	d11b      	bne.n	800795a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f06f 0208 	mvn.w	r2, #8
 800792a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2204      	movs	r2, #4
 8007930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f97b 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 8007946:	e005      	b.n	8007954 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f96d 	bl	8007c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f97e 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b10      	cmp	r3, #16
 8007966:	d122      	bne.n	80079ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b10      	cmp	r3, #16
 8007974:	d11b      	bne.n	80079ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f06f 0210 	mvn.w	r2, #16
 800797e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2208      	movs	r2, #8
 8007984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f951 	bl	8007c3c <HAL_TIM_IC_CaptureCallback>
 800799a:	e005      	b.n	80079a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f943 	bl	8007c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f954 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d10e      	bne.n	80079da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d107      	bne.n	80079da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f06f 0201 	mvn.w	r2, #1
 80079d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7fa fbe5 	bl	80021a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e4:	2b80      	cmp	r3, #128	; 0x80
 80079e6:	d10e      	bne.n	8007a06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d107      	bne.n	8007a06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fb0b 	bl	800801c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a14:	d10e      	bne.n	8007a34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a20:	2b80      	cmp	r3, #128	; 0x80
 8007a22:	d107      	bne.n	8007a34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fafe 	bl	8008030 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3e:	2b40      	cmp	r3, #64	; 0x40
 8007a40:	d10e      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b40      	cmp	r3, #64	; 0x40
 8007a4e:	d107      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f902 	bl	8007c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d10e      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d107      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0220 	mvn.w	r2, #32
 8007a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fabe 	bl	8008008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e0b4      	b.n	8007c1a <HAL_TIM_ConfigClockSource+0x186>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	4b56      	ldr	r3, [pc, #344]	; (8007c24 <HAL_TIM_ConfigClockSource+0x190>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae8:	d03e      	beq.n	8007b68 <HAL_TIM_ConfigClockSource+0xd4>
 8007aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aee:	f200 8087 	bhi.w	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
 8007af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af6:	f000 8086 	beq.w	8007c06 <HAL_TIM_ConfigClockSource+0x172>
 8007afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afe:	d87f      	bhi.n	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
 8007b00:	2b70      	cmp	r3, #112	; 0x70
 8007b02:	d01a      	beq.n	8007b3a <HAL_TIM_ConfigClockSource+0xa6>
 8007b04:	2b70      	cmp	r3, #112	; 0x70
 8007b06:	d87b      	bhi.n	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
 8007b08:	2b60      	cmp	r3, #96	; 0x60
 8007b0a:	d050      	beq.n	8007bae <HAL_TIM_ConfigClockSource+0x11a>
 8007b0c:	2b60      	cmp	r3, #96	; 0x60
 8007b0e:	d877      	bhi.n	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
 8007b10:	2b50      	cmp	r3, #80	; 0x50
 8007b12:	d03c      	beq.n	8007b8e <HAL_TIM_ConfigClockSource+0xfa>
 8007b14:	2b50      	cmp	r3, #80	; 0x50
 8007b16:	d873      	bhi.n	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d058      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0x13a>
 8007b1c:	2b40      	cmp	r3, #64	; 0x40
 8007b1e:	d86f      	bhi.n	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
 8007b20:	2b30      	cmp	r3, #48	; 0x30
 8007b22:	d064      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0x15a>
 8007b24:	2b30      	cmp	r3, #48	; 0x30
 8007b26:	d86b      	bhi.n	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d060      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0x15a>
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d867      	bhi.n	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d05c      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0x15a>
 8007b34:	2b10      	cmp	r3, #16
 8007b36:	d05a      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0x15a>
 8007b38:	e062      	b.n	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	6899      	ldr	r1, [r3, #8]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f000 f9af 	bl	8007eac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	609a      	str	r2, [r3, #8]
      break;
 8007b66:	e04f      	b.n	8007c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	6899      	ldr	r1, [r3, #8]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f000 f998 	bl	8007eac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b8a:	609a      	str	r2, [r3, #8]
      break;
 8007b8c:	e03c      	b.n	8007c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	6859      	ldr	r1, [r3, #4]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f000 f90c 	bl	8007db8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2150      	movs	r1, #80	; 0x50
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f965 	bl	8007e76 <TIM_ITRx_SetConfig>
      break;
 8007bac:	e02c      	b.n	8007c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	6859      	ldr	r1, [r3, #4]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f000 f92b 	bl	8007e16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2160      	movs	r1, #96	; 0x60
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f955 	bl	8007e76 <TIM_ITRx_SetConfig>
      break;
 8007bcc:	e01c      	b.n	8007c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	6859      	ldr	r1, [r3, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f000 f8ec 	bl	8007db8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2140      	movs	r1, #64	; 0x40
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 f945 	bl	8007e76 <TIM_ITRx_SetConfig>
      break;
 8007bec:	e00c      	b.n	8007c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f000 f93c 	bl	8007e76 <TIM_ITRx_SetConfig>
      break;
 8007bfe:	e003      	b.n	8007c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	73fb      	strb	r3, [r7, #15]
      break;
 8007c04:	e000      	b.n	8007c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	fffeff88 	.word	0xfffeff88

08007c28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a40      	ldr	r2, [pc, #256]	; (8007d8c <TIM_Base_SetConfig+0x114>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d013      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c96:	d00f      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a3d      	ldr	r2, [pc, #244]	; (8007d90 <TIM_Base_SetConfig+0x118>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00b      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a3c      	ldr	r2, [pc, #240]	; (8007d94 <TIM_Base_SetConfig+0x11c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a3b      	ldr	r2, [pc, #236]	; (8007d98 <TIM_Base_SetConfig+0x120>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a3a      	ldr	r2, [pc, #232]	; (8007d9c <TIM_Base_SetConfig+0x124>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d108      	bne.n	8007cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a2f      	ldr	r2, [pc, #188]	; (8007d8c <TIM_Base_SetConfig+0x114>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d02b      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd8:	d027      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a2c      	ldr	r2, [pc, #176]	; (8007d90 <TIM_Base_SetConfig+0x118>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d023      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a2b      	ldr	r2, [pc, #172]	; (8007d94 <TIM_Base_SetConfig+0x11c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d01f      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a2a      	ldr	r2, [pc, #168]	; (8007d98 <TIM_Base_SetConfig+0x120>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01b      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a29      	ldr	r2, [pc, #164]	; (8007d9c <TIM_Base_SetConfig+0x124>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d017      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a28      	ldr	r2, [pc, #160]	; (8007da0 <TIM_Base_SetConfig+0x128>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d013      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a27      	ldr	r2, [pc, #156]	; (8007da4 <TIM_Base_SetConfig+0x12c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00f      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a26      	ldr	r2, [pc, #152]	; (8007da8 <TIM_Base_SetConfig+0x130>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00b      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a25      	ldr	r2, [pc, #148]	; (8007dac <TIM_Base_SetConfig+0x134>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d007      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <TIM_Base_SetConfig+0x138>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d003      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a23      	ldr	r2, [pc, #140]	; (8007db4 <TIM_Base_SetConfig+0x13c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d108      	bne.n	8007d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <TIM_Base_SetConfig+0x114>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_Base_SetConfig+0xf8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a0c      	ldr	r2, [pc, #48]	; (8007d9c <TIM_Base_SetConfig+0x124>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d103      	bne.n	8007d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	615a      	str	r2, [r3, #20]
}
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40010000 	.word	0x40010000
 8007d90:	40000400 	.word	0x40000400
 8007d94:	40000800 	.word	0x40000800
 8007d98:	40000c00 	.word	0x40000c00
 8007d9c:	40010400 	.word	0x40010400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800
 8007dac:	40001800 	.word	0x40001800
 8007db0:	40001c00 	.word	0x40001c00
 8007db4:	40002000 	.word	0x40002000

08007db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	f023 0201 	bic.w	r2, r3, #1
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f023 030a 	bic.w	r3, r3, #10
 8007df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	621a      	str	r2, [r3, #32]
}
 8007e0a:	bf00      	nop
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b087      	sub	sp, #28
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	f023 0210 	bic.w	r2, r3, #16
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	031b      	lsls	r3, r3, #12
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	621a      	str	r2, [r3, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f043 0307 	orr.w	r3, r3, #7
 8007e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	609a      	str	r2, [r3, #8]
}
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	021a      	lsls	r2, r3, #8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	609a      	str	r2, [r3, #8]
}
 8007ee0:	bf00      	nop
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e06d      	b.n	8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a30      	ldr	r2, [pc, #192]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d004      	beq.n	8007f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a2f      	ldr	r2, [pc, #188]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d108      	bne.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a20      	ldr	r2, [pc, #128]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d022      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f76:	d01d      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d018      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d013      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1a      	ldr	r2, [pc, #104]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d00e      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a15      	ldr	r2, [pc, #84]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d009      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d004      	beq.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a15      	ldr	r2, [pc, #84]	; (8008004 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d10c      	bne.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40010000 	.word	0x40010000
 8007ff0:	40010400 	.word	0x40010400
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40014000 	.word	0x40014000
 8008004:	40001800 	.word	0x40001800

08008008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800804a:	4b8d      	ldr	r3, [pc, #564]	; (8008280 <MX_LWIP_Init+0x23c>)
 800804c:	22c0      	movs	r2, #192	; 0xc0
 800804e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008050:	4b8b      	ldr	r3, [pc, #556]	; (8008280 <MX_LWIP_Init+0x23c>)
 8008052:	22a8      	movs	r2, #168	; 0xa8
 8008054:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8008056:	4b8a      	ldr	r3, [pc, #552]	; (8008280 <MX_LWIP_Init+0x23c>)
 8008058:	2200      	movs	r2, #0
 800805a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 800805c:	4b88      	ldr	r3, [pc, #544]	; (8008280 <MX_LWIP_Init+0x23c>)
 800805e:	227b      	movs	r2, #123	; 0x7b
 8008060:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008062:	4b88      	ldr	r3, [pc, #544]	; (8008284 <MX_LWIP_Init+0x240>)
 8008064:	22ff      	movs	r2, #255	; 0xff
 8008066:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008068:	4b86      	ldr	r3, [pc, #536]	; (8008284 <MX_LWIP_Init+0x240>)
 800806a:	22ff      	movs	r2, #255	; 0xff
 800806c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800806e:	4b85      	ldr	r3, [pc, #532]	; (8008284 <MX_LWIP_Init+0x240>)
 8008070:	22ff      	movs	r2, #255	; 0xff
 8008072:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008074:	4b83      	ldr	r3, [pc, #524]	; (8008284 <MX_LWIP_Init+0x240>)
 8008076:	2200      	movs	r2, #0
 8008078:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800807a:	4b83      	ldr	r3, [pc, #524]	; (8008288 <MX_LWIP_Init+0x244>)
 800807c:	22c0      	movs	r2, #192	; 0xc0
 800807e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008080:	4b81      	ldr	r3, [pc, #516]	; (8008288 <MX_LWIP_Init+0x244>)
 8008082:	22a8      	movs	r2, #168	; 0xa8
 8008084:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008086:	4b80      	ldr	r3, [pc, #512]	; (8008288 <MX_LWIP_Init+0x244>)
 8008088:	2200      	movs	r2, #0
 800808a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800808c:	4b7e      	ldr	r3, [pc, #504]	; (8008288 <MX_LWIP_Init+0x244>)
 800808e:	2201      	movs	r2, #1
 8008090:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008092:	f000 fcb5 	bl	8008a00 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008096:	4b7a      	ldr	r3, [pc, #488]	; (8008280 <MX_LWIP_Init+0x23c>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	061a      	lsls	r2, r3, #24
 800809c:	4b78      	ldr	r3, [pc, #480]	; (8008280 <MX_LWIP_Init+0x23c>)
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	041b      	lsls	r3, r3, #16
 80080a2:	431a      	orrs	r2, r3
 80080a4:	4b76      	ldr	r3, [pc, #472]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080a6:	789b      	ldrb	r3, [r3, #2]
 80080a8:	021b      	lsls	r3, r3, #8
 80080aa:	4313      	orrs	r3, r2
 80080ac:	4a74      	ldr	r2, [pc, #464]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080ae:	78d2      	ldrb	r2, [r2, #3]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	061a      	lsls	r2, r3, #24
 80080b4:	4b72      	ldr	r3, [pc, #456]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	0619      	lsls	r1, r3, #24
 80080ba:	4b71      	ldr	r3, [pc, #452]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080bc:	785b      	ldrb	r3, [r3, #1]
 80080be:	041b      	lsls	r3, r3, #16
 80080c0:	4319      	orrs	r1, r3
 80080c2:	4b6f      	ldr	r3, [pc, #444]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080c4:	789b      	ldrb	r3, [r3, #2]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	430b      	orrs	r3, r1
 80080ca:	496d      	ldr	r1, [pc, #436]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080cc:	78c9      	ldrb	r1, [r1, #3]
 80080ce:	430b      	orrs	r3, r1
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080d6:	431a      	orrs	r2, r3
 80080d8:	4b69      	ldr	r3, [pc, #420]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	0619      	lsls	r1, r3, #24
 80080de:	4b68      	ldr	r3, [pc, #416]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	041b      	lsls	r3, r3, #16
 80080e4:	4319      	orrs	r1, r3
 80080e6:	4b66      	ldr	r3, [pc, #408]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080e8:	789b      	ldrb	r3, [r3, #2]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	430b      	orrs	r3, r1
 80080ee:	4964      	ldr	r1, [pc, #400]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080f0:	78c9      	ldrb	r1, [r1, #3]
 80080f2:	430b      	orrs	r3, r1
 80080f4:	0a1b      	lsrs	r3, r3, #8
 80080f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080fa:	431a      	orrs	r2, r3
 80080fc:	4b60      	ldr	r3, [pc, #384]	; (8008280 <MX_LWIP_Init+0x23c>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	0619      	lsls	r1, r3, #24
 8008102:	4b5f      	ldr	r3, [pc, #380]	; (8008280 <MX_LWIP_Init+0x23c>)
 8008104:	785b      	ldrb	r3, [r3, #1]
 8008106:	041b      	lsls	r3, r3, #16
 8008108:	4319      	orrs	r1, r3
 800810a:	4b5d      	ldr	r3, [pc, #372]	; (8008280 <MX_LWIP_Init+0x23c>)
 800810c:	789b      	ldrb	r3, [r3, #2]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	430b      	orrs	r3, r1
 8008112:	495b      	ldr	r1, [pc, #364]	; (8008280 <MX_LWIP_Init+0x23c>)
 8008114:	78c9      	ldrb	r1, [r1, #3]
 8008116:	430b      	orrs	r3, r1
 8008118:	0e1b      	lsrs	r3, r3, #24
 800811a:	4313      	orrs	r3, r2
 800811c:	4a5b      	ldr	r2, [pc, #364]	; (800828c <MX_LWIP_Init+0x248>)
 800811e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008120:	4b58      	ldr	r3, [pc, #352]	; (8008284 <MX_LWIP_Init+0x240>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	061a      	lsls	r2, r3, #24
 8008126:	4b57      	ldr	r3, [pc, #348]	; (8008284 <MX_LWIP_Init+0x240>)
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	431a      	orrs	r2, r3
 800812e:	4b55      	ldr	r3, [pc, #340]	; (8008284 <MX_LWIP_Init+0x240>)
 8008130:	789b      	ldrb	r3, [r3, #2]
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	4313      	orrs	r3, r2
 8008136:	4a53      	ldr	r2, [pc, #332]	; (8008284 <MX_LWIP_Init+0x240>)
 8008138:	78d2      	ldrb	r2, [r2, #3]
 800813a:	4313      	orrs	r3, r2
 800813c:	061a      	lsls	r2, r3, #24
 800813e:	4b51      	ldr	r3, [pc, #324]	; (8008284 <MX_LWIP_Init+0x240>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	0619      	lsls	r1, r3, #24
 8008144:	4b4f      	ldr	r3, [pc, #316]	; (8008284 <MX_LWIP_Init+0x240>)
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	041b      	lsls	r3, r3, #16
 800814a:	4319      	orrs	r1, r3
 800814c:	4b4d      	ldr	r3, [pc, #308]	; (8008284 <MX_LWIP_Init+0x240>)
 800814e:	789b      	ldrb	r3, [r3, #2]
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	430b      	orrs	r3, r1
 8008154:	494b      	ldr	r1, [pc, #300]	; (8008284 <MX_LWIP_Init+0x240>)
 8008156:	78c9      	ldrb	r1, [r1, #3]
 8008158:	430b      	orrs	r3, r1
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008160:	431a      	orrs	r2, r3
 8008162:	4b48      	ldr	r3, [pc, #288]	; (8008284 <MX_LWIP_Init+0x240>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	0619      	lsls	r1, r3, #24
 8008168:	4b46      	ldr	r3, [pc, #280]	; (8008284 <MX_LWIP_Init+0x240>)
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	041b      	lsls	r3, r3, #16
 800816e:	4319      	orrs	r1, r3
 8008170:	4b44      	ldr	r3, [pc, #272]	; (8008284 <MX_LWIP_Init+0x240>)
 8008172:	789b      	ldrb	r3, [r3, #2]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	430b      	orrs	r3, r1
 8008178:	4942      	ldr	r1, [pc, #264]	; (8008284 <MX_LWIP_Init+0x240>)
 800817a:	78c9      	ldrb	r1, [r1, #3]
 800817c:	430b      	orrs	r3, r1
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008184:	431a      	orrs	r2, r3
 8008186:	4b3f      	ldr	r3, [pc, #252]	; (8008284 <MX_LWIP_Init+0x240>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	0619      	lsls	r1, r3, #24
 800818c:	4b3d      	ldr	r3, [pc, #244]	; (8008284 <MX_LWIP_Init+0x240>)
 800818e:	785b      	ldrb	r3, [r3, #1]
 8008190:	041b      	lsls	r3, r3, #16
 8008192:	4319      	orrs	r1, r3
 8008194:	4b3b      	ldr	r3, [pc, #236]	; (8008284 <MX_LWIP_Init+0x240>)
 8008196:	789b      	ldrb	r3, [r3, #2]
 8008198:	021b      	lsls	r3, r3, #8
 800819a:	430b      	orrs	r3, r1
 800819c:	4939      	ldr	r1, [pc, #228]	; (8008284 <MX_LWIP_Init+0x240>)
 800819e:	78c9      	ldrb	r1, [r1, #3]
 80081a0:	430b      	orrs	r3, r1
 80081a2:	0e1b      	lsrs	r3, r3, #24
 80081a4:	4313      	orrs	r3, r2
 80081a6:	4a3a      	ldr	r2, [pc, #232]	; (8008290 <MX_LWIP_Init+0x24c>)
 80081a8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80081aa:	4b37      	ldr	r3, [pc, #220]	; (8008288 <MX_LWIP_Init+0x244>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	061a      	lsls	r2, r3, #24
 80081b0:	4b35      	ldr	r3, [pc, #212]	; (8008288 <MX_LWIP_Init+0x244>)
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	041b      	lsls	r3, r3, #16
 80081b6:	431a      	orrs	r2, r3
 80081b8:	4b33      	ldr	r3, [pc, #204]	; (8008288 <MX_LWIP_Init+0x244>)
 80081ba:	789b      	ldrb	r3, [r3, #2]
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	4313      	orrs	r3, r2
 80081c0:	4a31      	ldr	r2, [pc, #196]	; (8008288 <MX_LWIP_Init+0x244>)
 80081c2:	78d2      	ldrb	r2, [r2, #3]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	061a      	lsls	r2, r3, #24
 80081c8:	4b2f      	ldr	r3, [pc, #188]	; (8008288 <MX_LWIP_Init+0x244>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	0619      	lsls	r1, r3, #24
 80081ce:	4b2e      	ldr	r3, [pc, #184]	; (8008288 <MX_LWIP_Init+0x244>)
 80081d0:	785b      	ldrb	r3, [r3, #1]
 80081d2:	041b      	lsls	r3, r3, #16
 80081d4:	4319      	orrs	r1, r3
 80081d6:	4b2c      	ldr	r3, [pc, #176]	; (8008288 <MX_LWIP_Init+0x244>)
 80081d8:	789b      	ldrb	r3, [r3, #2]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	430b      	orrs	r3, r1
 80081de:	492a      	ldr	r1, [pc, #168]	; (8008288 <MX_LWIP_Init+0x244>)
 80081e0:	78c9      	ldrb	r1, [r1, #3]
 80081e2:	430b      	orrs	r3, r1
 80081e4:	021b      	lsls	r3, r3, #8
 80081e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081ea:	431a      	orrs	r2, r3
 80081ec:	4b26      	ldr	r3, [pc, #152]	; (8008288 <MX_LWIP_Init+0x244>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	0619      	lsls	r1, r3, #24
 80081f2:	4b25      	ldr	r3, [pc, #148]	; (8008288 <MX_LWIP_Init+0x244>)
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	041b      	lsls	r3, r3, #16
 80081f8:	4319      	orrs	r1, r3
 80081fa:	4b23      	ldr	r3, [pc, #140]	; (8008288 <MX_LWIP_Init+0x244>)
 80081fc:	789b      	ldrb	r3, [r3, #2]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	430b      	orrs	r3, r1
 8008202:	4921      	ldr	r1, [pc, #132]	; (8008288 <MX_LWIP_Init+0x244>)
 8008204:	78c9      	ldrb	r1, [r1, #3]
 8008206:	430b      	orrs	r3, r1
 8008208:	0a1b      	lsrs	r3, r3, #8
 800820a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800820e:	431a      	orrs	r2, r3
 8008210:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <MX_LWIP_Init+0x244>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	0619      	lsls	r1, r3, #24
 8008216:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <MX_LWIP_Init+0x244>)
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	4319      	orrs	r1, r3
 800821e:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <MX_LWIP_Init+0x244>)
 8008220:	789b      	ldrb	r3, [r3, #2]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	430b      	orrs	r3, r1
 8008226:	4918      	ldr	r1, [pc, #96]	; (8008288 <MX_LWIP_Init+0x244>)
 8008228:	78c9      	ldrb	r1, [r1, #3]
 800822a:	430b      	orrs	r3, r1
 800822c:	0e1b      	lsrs	r3, r3, #24
 800822e:	4313      	orrs	r3, r2
 8008230:	4a18      	ldr	r2, [pc, #96]	; (8008294 <MX_LWIP_Init+0x250>)
 8008232:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008234:	4b18      	ldr	r3, [pc, #96]	; (8008298 <MX_LWIP_Init+0x254>)
 8008236:	9302      	str	r3, [sp, #8]
 8008238:	4b18      	ldr	r3, [pc, #96]	; (800829c <MX_LWIP_Init+0x258>)
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	2300      	movs	r3, #0
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	4b14      	ldr	r3, [pc, #80]	; (8008294 <MX_LWIP_Init+0x250>)
 8008242:	4a13      	ldr	r2, [pc, #76]	; (8008290 <MX_LWIP_Init+0x24c>)
 8008244:	4911      	ldr	r1, [pc, #68]	; (800828c <MX_LWIP_Init+0x248>)
 8008246:	4816      	ldr	r0, [pc, #88]	; (80082a0 <MX_LWIP_Init+0x25c>)
 8008248:	f001 f880 	bl	800934c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800824c:	4814      	ldr	r0, [pc, #80]	; (80082a0 <MX_LWIP_Init+0x25c>)
 800824e:	f001 fa2f 	bl	80096b0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008252:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <MX_LWIP_Init+0x25c>)
 8008254:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008258:	089b      	lsrs	r3, r3, #2
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008264:	480e      	ldr	r0, [pc, #56]	; (80082a0 <MX_LWIP_Init+0x25c>)
 8008266:	f001 fa33 	bl	80096d0 <netif_set_up>
 800826a:	e002      	b.n	8008272 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800826c:	480c      	ldr	r0, [pc, #48]	; (80082a0 <MX_LWIP_Init+0x25c>)
 800826e:	f001 fa9b 	bl	80097a8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8008272:	490c      	ldr	r1, [pc, #48]	; (80082a4 <MX_LWIP_Init+0x260>)
 8008274:	480a      	ldr	r0, [pc, #40]	; (80082a0 <MX_LWIP_Init+0x25c>)
 8008276:	f001 fac9 	bl	800980c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800827a:	bf00      	nop
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20001750 	.word	0x20001750
 8008284:	2000174c 	.word	0x2000174c
 8008288:	20001744 	.word	0x20001744
 800828c:	20001748 	.word	0x20001748
 8008290:	20001754 	.word	0x20001754
 8008294:	20001758 	.word	0x20001758
 8008298:	08013619 	.word	0x08013619
 800829c:	0800882d 	.word	0x0800882d
 80082a0:	200005a4 	.word	0x200005a4
 80082a4:	08008899 	.word	0x08008899

080082a8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08e      	sub	sp, #56	; 0x38
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	605a      	str	r2, [r3, #4]
 80082ba:	609a      	str	r2, [r3, #8]
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a44      	ldr	r2, [pc, #272]	; (80083d8 <HAL_ETH_MspInit+0x130>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	f040 8081 	bne.w	80083ce <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80082cc:	4b43      	ldr	r3, [pc, #268]	; (80083dc <HAL_ETH_MspInit+0x134>)
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	4a42      	ldr	r2, [pc, #264]	; (80083dc <HAL_ETH_MspInit+0x134>)
 80082d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082d6:	6313      	str	r3, [r2, #48]	; 0x30
 80082d8:	4b40      	ldr	r3, [pc, #256]	; (80083dc <HAL_ETH_MspInit+0x134>)
 80082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e0:	623b      	str	r3, [r7, #32]
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	4b3d      	ldr	r3, [pc, #244]	; (80083dc <HAL_ETH_MspInit+0x134>)
 80082e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e8:	4a3c      	ldr	r2, [pc, #240]	; (80083dc <HAL_ETH_MspInit+0x134>)
 80082ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082ee:	6313      	str	r3, [r2, #48]	; 0x30
 80082f0:	4b3a      	ldr	r3, [pc, #232]	; (80083dc <HAL_ETH_MspInit+0x134>)
 80082f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082f8:	61fb      	str	r3, [r7, #28]
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	4b37      	ldr	r3, [pc, #220]	; (80083dc <HAL_ETH_MspInit+0x134>)
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	4a36      	ldr	r2, [pc, #216]	; (80083dc <HAL_ETH_MspInit+0x134>)
 8008302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008306:	6313      	str	r3, [r2, #48]	; 0x30
 8008308:	4b34      	ldr	r3, [pc, #208]	; (80083dc <HAL_ETH_MspInit+0x134>)
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008310:	61bb      	str	r3, [r7, #24]
 8008312:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008314:	4b31      	ldr	r3, [pc, #196]	; (80083dc <HAL_ETH_MspInit+0x134>)
 8008316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008318:	4a30      	ldr	r2, [pc, #192]	; (80083dc <HAL_ETH_MspInit+0x134>)
 800831a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800831e:	6313      	str	r3, [r2, #48]	; 0x30
 8008320:	4b2e      	ldr	r3, [pc, #184]	; (80083dc <HAL_ETH_MspInit+0x134>)
 8008322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	617b      	str	r3, [r7, #20]
 800832a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800832c:	4b2b      	ldr	r3, [pc, #172]	; (80083dc <HAL_ETH_MspInit+0x134>)
 800832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008330:	4a2a      	ldr	r2, [pc, #168]	; (80083dc <HAL_ETH_MspInit+0x134>)
 8008332:	f043 0304 	orr.w	r3, r3, #4
 8008336:	6313      	str	r3, [r2, #48]	; 0x30
 8008338:	4b28      	ldr	r3, [pc, #160]	; (80083dc <HAL_ETH_MspInit+0x134>)
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	613b      	str	r3, [r7, #16]
 8008342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008344:	4b25      	ldr	r3, [pc, #148]	; (80083dc <HAL_ETH_MspInit+0x134>)
 8008346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008348:	4a24      	ldr	r2, [pc, #144]	; (80083dc <HAL_ETH_MspInit+0x134>)
 800834a:	f043 0301 	orr.w	r3, r3, #1
 800834e:	6313      	str	r3, [r2, #48]	; 0x30
 8008350:	4b22      	ldr	r3, [pc, #136]	; (80083dc <HAL_ETH_MspInit+0x134>)
 8008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 800835c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8008360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008362:	2302      	movs	r3, #2
 8008364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008366:	2300      	movs	r3, #0
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800836a:	2303      	movs	r3, #3
 800836c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800836e:	230b      	movs	r3, #11
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008376:	4619      	mov	r1, r3
 8008378:	4819      	ldr	r0, [pc, #100]	; (80083e0 <HAL_ETH_MspInit+0x138>)
 800837a:	f7fd fda1 	bl	8005ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800837e:	2332      	movs	r3, #50	; 0x32
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008382:	2302      	movs	r3, #2
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008386:	2300      	movs	r3, #0
 8008388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800838a:	2303      	movs	r3, #3
 800838c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800838e:	230b      	movs	r3, #11
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008396:	4619      	mov	r1, r3
 8008398:	4812      	ldr	r0, [pc, #72]	; (80083e4 <HAL_ETH_MspInit+0x13c>)
 800839a:	f7fd fd91 	bl	8005ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800839e:	2386      	movs	r3, #134	; 0x86
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083a2:	2302      	movs	r3, #2
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083aa:	2303      	movs	r3, #3
 80083ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80083ae:	230b      	movs	r3, #11
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083b6:	4619      	mov	r1, r3
 80083b8:	480b      	ldr	r0, [pc, #44]	; (80083e8 <HAL_ETH_MspInit+0x140>)
 80083ba:	f7fd fd81 	bl	8005ec0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80083be:	2200      	movs	r2, #0
 80083c0:	2100      	movs	r1, #0
 80083c2:	203d      	movs	r0, #61	; 0x3d
 80083c4:	f7fc fb4b 	bl	8004a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80083c8:	203d      	movs	r0, #61	; 0x3d
 80083ca:	f7fc fb64 	bl	8004a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80083ce:	bf00      	nop
 80083d0:	3738      	adds	r7, #56	; 0x38
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	40028000 	.word	0x40028000
 80083dc:	40023800 	.word	0x40023800
 80083e0:	40021800 	.word	0x40021800
 80083e4:	40020800 	.word	0x40020800
 80083e8:	40020000 	.word	0x40020000

080083ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80083f8:	4b4d      	ldr	r3, [pc, #308]	; (8008530 <low_level_init+0x144>)
 80083fa:	4a4e      	ldr	r2, [pc, #312]	; (8008534 <low_level_init+0x148>)
 80083fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80083fe:	4b4c      	ldr	r3, [pc, #304]	; (8008530 <low_level_init+0x144>)
 8008400:	2201      	movs	r2, #1
 8008402:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008404:	4b4a      	ldr	r3, [pc, #296]	; (8008530 <low_level_init+0x144>)
 8008406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800840a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800840c:	4b48      	ldr	r3, [pc, #288]	; (8008530 <low_level_init+0x144>)
 800840e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008412:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008414:	4b46      	ldr	r3, [pc, #280]	; (8008530 <low_level_init+0x144>)
 8008416:	2200      	movs	r2, #0
 8008418:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800841a:	2300      	movs	r3, #0
 800841c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800841e:	2380      	movs	r3, #128	; 0x80
 8008420:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008422:	23e1      	movs	r3, #225	; 0xe1
 8008424:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008426:	2300      	movs	r3, #0
 8008428:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800842a:	2300      	movs	r3, #0
 800842c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800842e:	2300      	movs	r3, #0
 8008430:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008432:	4a3f      	ldr	r2, [pc, #252]	; (8008530 <low_level_init+0x144>)
 8008434:	f107 0308 	add.w	r3, r7, #8
 8008438:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800843a:	4b3d      	ldr	r3, [pc, #244]	; (8008530 <low_level_init+0x144>)
 800843c:	2200      	movs	r2, #0
 800843e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008440:	4b3b      	ldr	r3, [pc, #236]	; (8008530 <low_level_init+0x144>)
 8008442:	2200      	movs	r2, #0
 8008444:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008446:	4b3a      	ldr	r3, [pc, #232]	; (8008530 <low_level_init+0x144>)
 8008448:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800844c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800844e:	4838      	ldr	r0, [pc, #224]	; (8008530 <low_level_init+0x144>)
 8008450:	f7fc fbac 	bl	8004bac <HAL_ETH_Init>
 8008454:	4603      	mov	r3, r0
 8008456:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008458:	7dfb      	ldrb	r3, [r7, #23]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d108      	bne.n	8008470 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008464:	f043 0304 	orr.w	r3, r3, #4
 8008468:	b2da      	uxtb	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008470:	2304      	movs	r3, #4
 8008472:	4a31      	ldr	r2, [pc, #196]	; (8008538 <low_level_init+0x14c>)
 8008474:	4931      	ldr	r1, [pc, #196]	; (800853c <low_level_init+0x150>)
 8008476:	482e      	ldr	r0, [pc, #184]	; (8008530 <low_level_init+0x144>)
 8008478:	f7fc fd32 	bl	8004ee0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800847c:	2304      	movs	r3, #4
 800847e:	4a30      	ldr	r2, [pc, #192]	; (8008540 <low_level_init+0x154>)
 8008480:	4930      	ldr	r1, [pc, #192]	; (8008544 <low_level_init+0x158>)
 8008482:	482b      	ldr	r0, [pc, #172]	; (8008530 <low_level_init+0x144>)
 8008484:	f7fc fd95 	bl	8004fb2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2206      	movs	r2, #6
 800848c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008490:	4b27      	ldr	r3, [pc, #156]	; (8008530 <low_level_init+0x144>)
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	781a      	ldrb	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800849c:	4b24      	ldr	r3, [pc, #144]	; (8008530 <low_level_init+0x144>)
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	785a      	ldrb	r2, [r3, #1]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80084a8:	4b21      	ldr	r3, [pc, #132]	; (8008530 <low_level_init+0x144>)
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	789a      	ldrb	r2, [r3, #2]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80084b4:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <low_level_init+0x144>)
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	78da      	ldrb	r2, [r3, #3]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80084c0:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <low_level_init+0x144>)
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	791a      	ldrb	r2, [r3, #4]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80084cc:	4b18      	ldr	r3, [pc, #96]	; (8008530 <low_level_init+0x144>)
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	795a      	ldrb	r2, [r3, #5]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80084de:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80084e6:	f043 030a 	orr.w	r3, r3, #10
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80084f2:	480f      	ldr	r0, [pc, #60]	; (8008530 <low_level_init+0x144>)
 80084f4:	f7fd f88b 	bl	800560e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80084f8:	f107 0310 	add.w	r3, r7, #16
 80084fc:	461a      	mov	r2, r3
 80084fe:	211d      	movs	r1, #29
 8008500:	480b      	ldr	r0, [pc, #44]	; (8008530 <low_level_init+0x144>)
 8008502:	f7fc ffb6 	bl	8005472 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f043 030b 	orr.w	r3, r3, #11
 800850c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	461a      	mov	r2, r3
 8008512:	211d      	movs	r1, #29
 8008514:	4806      	ldr	r0, [pc, #24]	; (8008530 <low_level_init+0x144>)
 8008516:	f7fd f814 	bl	8005542 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800851a:	f107 0310 	add.w	r3, r7, #16
 800851e:	461a      	mov	r2, r3
 8008520:	211d      	movs	r1, #29
 8008522:	4803      	ldr	r0, [pc, #12]	; (8008530 <low_level_init+0x144>)
 8008524:	f7fc ffa5 	bl	8005472 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	2000302c 	.word	0x2000302c
 8008534:	40028000 	.word	0x40028000
 8008538:	20003074 	.word	0x20003074
 800853c:	2000175c 	.word	0x2000175c
 8008540:	200017dc 	.word	0x200017dc
 8008544:	20002fac 	.word	0x20002fac

08008548 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08a      	sub	sp, #40	; 0x28
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008552:	4b4b      	ldr	r3, [pc, #300]	; (8008680 <low_level_output+0x138>)
 8008554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800856a:	4b45      	ldr	r3, [pc, #276]	; (8008680 <low_level_output+0x138>)
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	623b      	str	r3, [r7, #32]
 8008578:	e05a      	b.n	8008630 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	da03      	bge.n	800858a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008582:	23f8      	movs	r3, #248	; 0xf8
 8008584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008588:	e05c      	b.n	8008644 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	895b      	ldrh	r3, [r3, #10]
 800858e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008590:	2300      	movs	r3, #0
 8008592:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008594:	e02f      	b.n	80085f6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008596:	69fa      	ldr	r2, [r7, #28]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	18d0      	adds	r0, r2, r3
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	18d1      	adds	r1, r2, r3
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	f00b f93b 	bl	8013828 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	da03      	bge.n	80085c8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80085c0:	23f8      	movs	r3, #248	; 0xf8
 80085c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80085c6:	e03d      	b.n	8008644 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4413      	add	r3, r2
 80085d4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80085d8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80085e4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80085f0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	4413      	add	r3, r2
 80085fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008600:	4293      	cmp	r3, r2
 8008602:	d8c8      	bhi.n	8008596 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	18d0      	adds	r0, r2, r3
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	4413      	add	r3, r2
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4619      	mov	r1, r3
 8008616:	f00b f907 	bl	8013828 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4413      	add	r3, r2
 8008628:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	623b      	str	r3, [r7, #32]
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1a1      	bne.n	800857a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008636:	6979      	ldr	r1, [r7, #20]
 8008638:	4811      	ldr	r0, [pc, #68]	; (8008680 <low_level_output+0x138>)
 800863a:	f7fc fd27 	bl	800508c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008644:	4b0e      	ldr	r3, [pc, #56]	; (8008680 <low_level_output+0x138>)
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	f241 0314 	movw	r3, #4116	; 0x1014
 800864c:	4413      	add	r3, r2
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0320 	and.w	r3, r3, #32
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00d      	beq.n	8008674 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008658:	4b09      	ldr	r3, [pc, #36]	; (8008680 <low_level_output+0x138>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	f241 0314 	movw	r3, #4116	; 0x1014
 8008660:	4413      	add	r3, r2
 8008662:	2220      	movs	r2, #32
 8008664:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <low_level_output+0x138>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	f241 0304 	movw	r3, #4100	; 0x1004
 800866e:	4413      	add	r3, r2
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008674:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008678:	4618      	mov	r0, r3
 800867a:	3728      	adds	r7, #40	; 0x28
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	2000302c 	.word	0x2000302c

08008684 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08c      	sub	sp, #48	; 0x30
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800868c:	2300      	movs	r3, #0
 800868e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008690:	2300      	movs	r3, #0
 8008692:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800869c:	2300      	movs	r3, #0
 800869e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80086a8:	484f      	ldr	r0, [pc, #316]	; (80087e8 <low_level_input+0x164>)
 80086aa:	f7fc fdd9 	bl	8005260 <HAL_ETH_GetReceivedFrame>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <low_level_input+0x34>

    return NULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	e092      	b.n	80087de <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80086b8:	4b4b      	ldr	r3, [pc, #300]	; (80087e8 <low_level_input+0x164>)
 80086ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086bc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80086be:	4b4a      	ldr	r3, [pc, #296]	; (80087e8 <low_level_input+0x164>)
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80086c4:	89fb      	ldrh	r3, [r7, #14]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80086ca:	89fb      	ldrh	r3, [r7, #14]
 80086cc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80086d0:	4619      	mov	r1, r3
 80086d2:	2000      	movs	r0, #0
 80086d4:	f001 f936 	bl	8009944 <pbuf_alloc>
 80086d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d04b      	beq.n	8008778 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80086e0:	4b41      	ldr	r3, [pc, #260]	; (80087e8 <low_level_input+0x164>)
 80086e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ee:	e040      	b.n	8008772 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	895b      	ldrh	r3, [r3, #10]
 80086f4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80086fa:	e021      	b.n	8008740 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	18d0      	adds	r0, r2, r3
 8008704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	18d1      	adds	r1, r2, r3
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8008710:	1a9b      	subs	r3, r3, r2
 8008712:	461a      	mov	r2, r3
 8008714:	f00b f888 	bl	8013828 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008724:	69fa      	ldr	r2, [r7, #28]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	4413      	add	r3, r2
 800872a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800872e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800873a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800874a:	4293      	cmp	r3, r2
 800874c:	d8d6      	bhi.n	80086fc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	18d0      	adds	r0, r2, r3
 8008756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	4413      	add	r3, r2
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4619      	mov	r1, r3
 8008760:	f00b f862 	bl	8013828 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008764:	69fa      	ldr	r2, [r7, #28]
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	4413      	add	r3, r2
 800876a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	62bb      	str	r3, [r7, #40]	; 0x28
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1bb      	bne.n	80086f0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <low_level_input+0x164>)
 800877a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800877e:	2300      	movs	r3, #0
 8008780:	613b      	str	r3, [r7, #16]
 8008782:	e00b      	b.n	800879c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	3301      	adds	r3, #1
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <low_level_input+0x164>)
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d3ee      	bcc.n	8008784 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80087a6:	4b10      	ldr	r3, [pc, #64]	; (80087e8 <low_level_input+0x164>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80087ac:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <low_level_input+0x164>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80087b4:	4413      	add	r3, r2
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00d      	beq.n	80087dc <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80087c0:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <low_level_input+0x164>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80087c8:	4413      	add	r3, r2
 80087ca:	2280      	movs	r2, #128	; 0x80
 80087cc:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80087ce:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <low_level_input+0x164>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	f241 0308 	movw	r3, #4104	; 0x1008
 80087d6:	4413      	add	r3, r2
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
  }
  return p;
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3730      	adds	r7, #48	; 0x30
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	2000302c 	.word	0x2000302c

080087ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff ff45 	bl	8008684 <low_level_input>
 80087fa:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d010      	beq.n	8008824 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	4798      	blx	r3
 800880c:	4603      	mov	r3, r0
 800880e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008810:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d006      	beq.n	8008826 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f001 fb77 	bl	8009f0c <pbuf_free>
    p = NULL;
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	e000      	b.n	8008826 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008824:	bf00      	nop
  }
}
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <ethernetif_init+0x1c>
 800883a:	4b0e      	ldr	r3, [pc, #56]	; (8008874 <ethernetif_init+0x48>)
 800883c:	f240 220d 	movw	r2, #525	; 0x20d
 8008840:	490d      	ldr	r1, [pc, #52]	; (8008878 <ethernetif_init+0x4c>)
 8008842:	480e      	ldr	r0, [pc, #56]	; (800887c <ethernetif_init+0x50>)
 8008844:	f00b f820 	bl	8013888 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2273      	movs	r2, #115	; 0x73
 800884c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2274      	movs	r2, #116	; 0x74
 8008854:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a09      	ldr	r2, [pc, #36]	; (8008880 <ethernetif_init+0x54>)
 800885c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a08      	ldr	r2, [pc, #32]	; (8008884 <ethernetif_init+0x58>)
 8008862:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7ff fdc1 	bl	80083ec <low_level_init>

  return ERR_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	08014eb0 	.word	0x08014eb0
 8008878:	08014ecc 	.word	0x08014ecc
 800887c:	08014edc 	.word	0x08014edc
 8008880:	08011add 	.word	0x08011add
 8008884:	08008549 	.word	0x08008549

08008888 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800888c:	f7fb f97a 	bl	8003b84 <HAL_GetTick>
 8008890:	4603      	mov	r3, r0
}
 8008892:	4618      	mov	r0, r3
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088ae:	089b      	lsrs	r3, r3, #2
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d05d      	beq.n	8008976 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80088ba:	4b34      	ldr	r3, [pc, #208]	; (800898c <ethernetif_update_config+0xf4>)
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d03f      	beq.n	8008942 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80088c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088c6:	2100      	movs	r1, #0
 80088c8:	4830      	ldr	r0, [pc, #192]	; (800898c <ethernetif_update_config+0xf4>)
 80088ca:	f7fc fe3a 	bl	8005542 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80088ce:	f7fb f959 	bl	8003b84 <HAL_GetTick>
 80088d2:	4603      	mov	r3, r0
 80088d4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80088d6:	f107 0308 	add.w	r3, r7, #8
 80088da:	461a      	mov	r2, r3
 80088dc:	2101      	movs	r1, #1
 80088de:	482b      	ldr	r0, [pc, #172]	; (800898c <ethernetif_update_config+0xf4>)
 80088e0:	f7fc fdc7 	bl	8005472 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80088e4:	f7fb f94e 	bl	8003b84 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088f2:	d828      	bhi.n	8008946 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f003 0320 	and.w	r3, r3, #32
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0eb      	beq.n	80088d6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80088fe:	f107 0308 	add.w	r3, r7, #8
 8008902:	461a      	mov	r2, r3
 8008904:	2110      	movs	r1, #16
 8008906:	4821      	ldr	r0, [pc, #132]	; (800898c <ethernetif_update_config+0xf4>)
 8008908:	f7fc fdb3 	bl	8005472 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	d004      	beq.n	8008920 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008916:	4b1d      	ldr	r3, [pc, #116]	; (800898c <ethernetif_update_config+0xf4>)
 8008918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800891c:	60da      	str	r2, [r3, #12]
 800891e:	e002      	b.n	8008926 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008920:	4b1a      	ldr	r3, [pc, #104]	; (800898c <ethernetif_update_config+0xf4>)
 8008922:	2200      	movs	r2, #0
 8008924:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008930:	4b16      	ldr	r3, [pc, #88]	; (800898c <ethernetif_update_config+0xf4>)
 8008932:	2200      	movs	r2, #0
 8008934:	609a      	str	r2, [r3, #8]
 8008936:	e016      	b.n	8008966 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008938:	4b14      	ldr	r3, [pc, #80]	; (800898c <ethernetif_update_config+0xf4>)
 800893a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800893e:	609a      	str	r2, [r3, #8]
 8008940:	e011      	b.n	8008966 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008942:	bf00      	nop
 8008944:	e000      	b.n	8008948 <ethernetif_update_config+0xb0>
          goto error;
 8008946:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008948:	4b10      	ldr	r3, [pc, #64]	; (800898c <ethernetif_update_config+0xf4>)
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	08db      	lsrs	r3, r3, #3
 800894e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008950:	4b0e      	ldr	r3, [pc, #56]	; (800898c <ethernetif_update_config+0xf4>)
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008958:	4313      	orrs	r3, r2
 800895a:	b29b      	uxth	r3, r3
 800895c:	461a      	mov	r2, r3
 800895e:	2100      	movs	r1, #0
 8008960:	480a      	ldr	r0, [pc, #40]	; (800898c <ethernetif_update_config+0xf4>)
 8008962:	f7fc fdee 	bl	8005542 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008966:	2100      	movs	r1, #0
 8008968:	4808      	ldr	r0, [pc, #32]	; (800898c <ethernetif_update_config+0xf4>)
 800896a:	f7fc feaf 	bl	80056cc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800896e:	4807      	ldr	r0, [pc, #28]	; (800898c <ethernetif_update_config+0xf4>)
 8008970:	f7fc fe4d 	bl	800560e <HAL_ETH_Start>
 8008974:	e002      	b.n	800897c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008976:	4805      	ldr	r0, [pc, #20]	; (800898c <ethernetif_update_config+0xf4>)
 8008978:	f7fc fe78 	bl	800566c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f807 	bl	8008990 <ethernetif_notify_conn_changed>
}
 8008982:	bf00      	nop
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	2000302c 	.word	0x2000302c

08008990 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	b21a      	sxth	r2, r3
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	b21b      	sxth	r3, r3
 80089bc:	4313      	orrs	r3, r2
 80089be:	b21b      	sxth	r3, r3
 80089c0:	b29b      	uxth	r3, r3
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	061a      	lsls	r2, r3, #24
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089e2:	431a      	orrs	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	0a1b      	lsrs	r3, r3, #8
 80089e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	0e1b      	lsrs	r3, r3, #24
 80089f2:	4313      	orrs	r3, r2
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008a0a:	f000 f8d5 	bl	8008bb8 <mem_init>
  memp_init();
 8008a0e:	f000 fbdb 	bl	80091c8 <memp_init>
  pbuf_init();
  netif_init();
 8008a12:	f000 fc93 	bl	800933c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008a16:	f007 ff43 	bl	80108a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008a1a:	f001 fda7 	bl	800a56c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008a1e:	f007 feb5 	bl	801078c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008a22:	bf00      	nop
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <ptr_to_mem+0x20>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	88fb      	ldrh	r3, [r7, #6]
 8008a3c:	4413      	add	r3, r2
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20000154 	.word	0x20000154

08008a50 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008a58:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <mem_to_ptr+0x20>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	b29b      	uxth	r3, r3
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20000154 	.word	0x20000154

08008a74 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008a74:	b590      	push	{r4, r7, lr}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008a7c:	4b45      	ldr	r3, [pc, #276]	; (8008b94 <plug_holes+0x120>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d206      	bcs.n	8008a94 <plug_holes+0x20>
 8008a86:	4b44      	ldr	r3, [pc, #272]	; (8008b98 <plug_holes+0x124>)
 8008a88:	f240 12df 	movw	r2, #479	; 0x1df
 8008a8c:	4943      	ldr	r1, [pc, #268]	; (8008b9c <plug_holes+0x128>)
 8008a8e:	4844      	ldr	r0, [pc, #272]	; (8008ba0 <plug_holes+0x12c>)
 8008a90:	f00a fefa 	bl	8013888 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008a94:	4b43      	ldr	r3, [pc, #268]	; (8008ba4 <plug_holes+0x130>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d306      	bcc.n	8008aac <plug_holes+0x38>
 8008a9e:	4b3e      	ldr	r3, [pc, #248]	; (8008b98 <plug_holes+0x124>)
 8008aa0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008aa4:	4940      	ldr	r1, [pc, #256]	; (8008ba8 <plug_holes+0x134>)
 8008aa6:	483e      	ldr	r0, [pc, #248]	; (8008ba0 <plug_holes+0x12c>)
 8008aa8:	f00a feee 	bl	8013888 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	791b      	ldrb	r3, [r3, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d006      	beq.n	8008ac2 <plug_holes+0x4e>
 8008ab4:	4b38      	ldr	r3, [pc, #224]	; (8008b98 <plug_holes+0x124>)
 8008ab6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008aba:	493c      	ldr	r1, [pc, #240]	; (8008bac <plug_holes+0x138>)
 8008abc:	4838      	ldr	r0, [pc, #224]	; (8008ba0 <plug_holes+0x12c>)
 8008abe:	f00a fee3 	bl	8013888 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008aca:	d906      	bls.n	8008ada <plug_holes+0x66>
 8008acc:	4b32      	ldr	r3, [pc, #200]	; (8008b98 <plug_holes+0x124>)
 8008ace:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008ad2:	4937      	ldr	r1, [pc, #220]	; (8008bb0 <plug_holes+0x13c>)
 8008ad4:	4832      	ldr	r0, [pc, #200]	; (8008ba0 <plug_holes+0x12c>)
 8008ad6:	f00a fed7 	bl	8013888 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff ffa4 	bl	8008a2c <ptr_to_mem>
 8008ae4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d024      	beq.n	8008b38 <plug_holes+0xc4>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	791b      	ldrb	r3, [r3, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d120      	bne.n	8008b38 <plug_holes+0xc4>
 8008af6:	4b2b      	ldr	r3, [pc, #172]	; (8008ba4 <plug_holes+0x130>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d01b      	beq.n	8008b38 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008b00:	4b2c      	ldr	r3, [pc, #176]	; (8008bb4 <plug_holes+0x140>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d102      	bne.n	8008b10 <plug_holes+0x9c>
      lfree = mem;
 8008b0a:	4a2a      	ldr	r2, [pc, #168]	; (8008bb4 <plug_holes+0x140>)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	881a      	ldrh	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008b20:	d00a      	beq.n	8008b38 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff ff80 	bl	8008a2c <ptr_to_mem>
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7ff ff8e 	bl	8008a50 <mem_to_ptr>
 8008b34:	4603      	mov	r3, r0
 8008b36:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	885b      	ldrh	r3, [r3, #2]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff ff75 	bl	8008a2c <ptr_to_mem>
 8008b42:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d01f      	beq.n	8008b8c <plug_holes+0x118>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	791b      	ldrb	r3, [r3, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d11b      	bne.n	8008b8c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008b54:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <plug_holes+0x140>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d102      	bne.n	8008b64 <plug_holes+0xf0>
      lfree = pmem;
 8008b5e:	4a15      	ldr	r2, [pc, #84]	; (8008bb4 <plug_holes+0x140>)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	881a      	ldrh	r2, [r3, #0]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008b74:	d00a      	beq.n	8008b8c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff ff56 	bl	8008a2c <ptr_to_mem>
 8008b80:	4604      	mov	r4, r0
 8008b82:	68b8      	ldr	r0, [r7, #8]
 8008b84:	f7ff ff64 	bl	8008a50 <mem_to_ptr>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008b8c:	bf00      	nop
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd90      	pop	{r4, r7, pc}
 8008b94:	20000154 	.word	0x20000154
 8008b98:	08014f04 	.word	0x08014f04
 8008b9c:	08014f34 	.word	0x08014f34
 8008ba0:	08014f4c 	.word	0x08014f4c
 8008ba4:	20000158 	.word	0x20000158
 8008ba8:	08014f74 	.word	0x08014f74
 8008bac:	08014f90 	.word	0x08014f90
 8008bb0:	08014fac 	.word	0x08014fac
 8008bb4:	2000015c 	.word	0x2000015c

08008bb8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008bbe:	4b18      	ldr	r3, [pc, #96]	; (8008c20 <mem_init+0x68>)
 8008bc0:	3303      	adds	r3, #3
 8008bc2:	f023 0303 	bic.w	r3, r3, #3
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4b16      	ldr	r3, [pc, #88]	; (8008c24 <mem_init+0x6c>)
 8008bca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008bcc:	4b15      	ldr	r3, [pc, #84]	; (8008c24 <mem_init+0x6c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008bd8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008be6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8008bea:	f7ff ff1f 	bl	8008a2c <ptr_to_mem>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	4a0d      	ldr	r2, [pc, #52]	; (8008c28 <mem_init+0x70>)
 8008bf2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008bf4:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <mem_init+0x70>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <mem_init+0x70>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008c04:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008c06:	4b08      	ldr	r3, [pc, #32]	; (8008c28 <mem_init+0x70>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008c0e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008c10:	4b04      	ldr	r3, [pc, #16]	; (8008c24 <mem_init+0x6c>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a05      	ldr	r2, [pc, #20]	; (8008c2c <mem_init+0x74>)
 8008c16:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	2000485c 	.word	0x2000485c
 8008c24:	20000154 	.word	0x20000154
 8008c28:	20000158 	.word	0x20000158
 8008c2c:	2000015c 	.word	0x2000015c

08008c30 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff ff09 	bl	8008a50 <mem_to_ptr>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff fef0 	bl	8008a2c <ptr_to_mem>
 8008c4c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	885b      	ldrh	r3, [r3, #2]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff feea 	bl	8008a2c <ptr_to_mem>
 8008c58:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008c62:	d818      	bhi.n	8008c96 <mem_link_valid+0x66>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	885b      	ldrh	r3, [r3, #2]
 8008c68:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008c6c:	d813      	bhi.n	8008c96 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008c72:	8afa      	ldrh	r2, [r7, #22]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d004      	beq.n	8008c82 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	8afa      	ldrh	r2, [r7, #22]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d109      	bne.n	8008c96 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008c82:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <mem_link_valid+0x74>)
 8008c84:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d006      	beq.n	8008c9a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	885b      	ldrh	r3, [r3, #2]
 8008c90:	8afa      	ldrh	r2, [r7, #22]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d001      	beq.n	8008c9a <mem_link_valid+0x6a>
    return 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e000      	b.n	8008c9c <mem_link_valid+0x6c>
  }
  return 1;
 8008c9a:	2301      	movs	r3, #1
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000158 	.word	0x20000158

08008ca8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d04c      	beq.n	8008d50 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f003 0303 	and.w	r3, r3, #3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d007      	beq.n	8008cd0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008cc0:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <mem_free+0xb0>)
 8008cc2:	f240 2273 	movw	r2, #627	; 0x273
 8008cc6:	4925      	ldr	r1, [pc, #148]	; (8008d5c <mem_free+0xb4>)
 8008cc8:	4825      	ldr	r0, [pc, #148]	; (8008d60 <mem_free+0xb8>)
 8008cca:	f00a fddd 	bl	8013888 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008cce:	e040      	b.n	8008d52 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3b08      	subs	r3, #8
 8008cd4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8008cd6:	4b23      	ldr	r3, [pc, #140]	; (8008d64 <mem_free+0xbc>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d306      	bcc.n	8008cee <mem_free+0x46>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f103 020c 	add.w	r2, r3, #12
 8008ce6:	4b20      	ldr	r3, [pc, #128]	; (8008d68 <mem_free+0xc0>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d907      	bls.n	8008cfe <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008cee:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <mem_free+0xb0>)
 8008cf0:	f240 227f 	movw	r2, #639	; 0x27f
 8008cf4:	491d      	ldr	r1, [pc, #116]	; (8008d6c <mem_free+0xc4>)
 8008cf6:	481a      	ldr	r0, [pc, #104]	; (8008d60 <mem_free+0xb8>)
 8008cf8:	f00a fdc6 	bl	8013888 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008cfc:	e029      	b.n	8008d52 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	791b      	ldrb	r3, [r3, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d107      	bne.n	8008d16 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <mem_free+0xb0>)
 8008d08:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008d0c:	4918      	ldr	r1, [pc, #96]	; (8008d70 <mem_free+0xc8>)
 8008d0e:	4814      	ldr	r0, [pc, #80]	; (8008d60 <mem_free+0xb8>)
 8008d10:	f00a fdba 	bl	8013888 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008d14:	e01d      	b.n	8008d52 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff ff8a 	bl	8008c30 <mem_link_valid>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d107      	bne.n	8008d32 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008d22:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <mem_free+0xb0>)
 8008d24:	f240 2295 	movw	r2, #661	; 0x295
 8008d28:	4912      	ldr	r1, [pc, #72]	; (8008d74 <mem_free+0xcc>)
 8008d2a:	480d      	ldr	r0, [pc, #52]	; (8008d60 <mem_free+0xb8>)
 8008d2c:	f00a fdac 	bl	8013888 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008d30:	e00f      	b.n	8008d52 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008d38:	4b0f      	ldr	r3, [pc, #60]	; (8008d78 <mem_free+0xd0>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d202      	bcs.n	8008d48 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008d42:	4a0d      	ldr	r2, [pc, #52]	; (8008d78 <mem_free+0xd0>)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f7ff fe93 	bl	8008a74 <plug_holes>
 8008d4e:	e000      	b.n	8008d52 <mem_free+0xaa>
    return;
 8008d50:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	08014f04 	.word	0x08014f04
 8008d5c:	08014fd8 	.word	0x08014fd8
 8008d60:	08014f4c 	.word	0x08014f4c
 8008d64:	20000154 	.word	0x20000154
 8008d68:	20000158 	.word	0x20000158
 8008d6c:	08014ffc 	.word	0x08014ffc
 8008d70:	08015018 	.word	0x08015018
 8008d74:	08015040 	.word	0x08015040
 8008d78:	2000015c 	.word	0x2000015c

08008d7c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008d88:	887b      	ldrh	r3, [r7, #2]
 8008d8a:	3303      	adds	r3, #3
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f023 0303 	bic.w	r3, r3, #3
 8008d92:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008d94:	8bfb      	ldrh	r3, [r7, #30]
 8008d96:	2b0b      	cmp	r3, #11
 8008d98:	d801      	bhi.n	8008d9e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008d9e:	8bfb      	ldrh	r3, [r7, #30]
 8008da0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008da4:	d803      	bhi.n	8008dae <mem_trim+0x32>
 8008da6:	8bfa      	ldrh	r2, [r7, #30]
 8008da8:	887b      	ldrh	r3, [r7, #2]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d201      	bcs.n	8008db2 <mem_trim+0x36>
    return NULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	e0cc      	b.n	8008f4c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008db2:	4b68      	ldr	r3, [pc, #416]	; (8008f54 <mem_trim+0x1d8>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d304      	bcc.n	8008dc6 <mem_trim+0x4a>
 8008dbc:	4b66      	ldr	r3, [pc, #408]	; (8008f58 <mem_trim+0x1dc>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d306      	bcc.n	8008dd4 <mem_trim+0x58>
 8008dc6:	4b65      	ldr	r3, [pc, #404]	; (8008f5c <mem_trim+0x1e0>)
 8008dc8:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008dcc:	4964      	ldr	r1, [pc, #400]	; (8008f60 <mem_trim+0x1e4>)
 8008dce:	4865      	ldr	r0, [pc, #404]	; (8008f64 <mem_trim+0x1e8>)
 8008dd0:	f00a fd5a 	bl	8013888 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008dd4:	4b5f      	ldr	r3, [pc, #380]	; (8008f54 <mem_trim+0x1d8>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d304      	bcc.n	8008de8 <mem_trim+0x6c>
 8008dde:	4b5e      	ldr	r3, [pc, #376]	; (8008f58 <mem_trim+0x1dc>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d301      	bcc.n	8008dec <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	e0af      	b.n	8008f4c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3b08      	subs	r3, #8
 8008df0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008df2:	69b8      	ldr	r0, [r7, #24]
 8008df4:	f7ff fe2c 	bl	8008a50 <mem_to_ptr>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	881a      	ldrh	r2, [r3, #0]
 8008e00:	8afb      	ldrh	r3, [r7, #22]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b08      	subs	r3, #8
 8008e08:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008e0a:	8bfa      	ldrh	r2, [r7, #30]
 8008e0c:	8abb      	ldrh	r3, [r7, #20]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d906      	bls.n	8008e20 <mem_trim+0xa4>
 8008e12:	4b52      	ldr	r3, [pc, #328]	; (8008f5c <mem_trim+0x1e0>)
 8008e14:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008e18:	4953      	ldr	r1, [pc, #332]	; (8008f68 <mem_trim+0x1ec>)
 8008e1a:	4852      	ldr	r0, [pc, #328]	; (8008f64 <mem_trim+0x1e8>)
 8008e1c:	f00a fd34 	bl	8013888 <iprintf>
  if (newsize > size) {
 8008e20:	8bfa      	ldrh	r2, [r7, #30]
 8008e22:	8abb      	ldrh	r3, [r7, #20]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d901      	bls.n	8008e2c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	e08f      	b.n	8008f4c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008e2c:	8bfa      	ldrh	r2, [r7, #30]
 8008e2e:	8abb      	ldrh	r3, [r7, #20]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d101      	bne.n	8008e38 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	e089      	b.n	8008f4c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff fdf5 	bl	8008a2c <ptr_to_mem>
 8008e42:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	791b      	ldrb	r3, [r3, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d13f      	bne.n	8008ecc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008e54:	d106      	bne.n	8008e64 <mem_trim+0xe8>
 8008e56:	4b41      	ldr	r3, [pc, #260]	; (8008f5c <mem_trim+0x1e0>)
 8008e58:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008e5c:	4943      	ldr	r1, [pc, #268]	; (8008f6c <mem_trim+0x1f0>)
 8008e5e:	4841      	ldr	r0, [pc, #260]	; (8008f64 <mem_trim+0x1e8>)
 8008e60:	f00a fd12 	bl	8013888 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008e6a:	8afa      	ldrh	r2, [r7, #22]
 8008e6c:	8bfb      	ldrh	r3, [r7, #30]
 8008e6e:	4413      	add	r3, r2
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	3308      	adds	r3, #8
 8008e74:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008e76:	4b3e      	ldr	r3, [pc, #248]	; (8008f70 <mem_trim+0x1f4>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d106      	bne.n	8008e8e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008e80:	89fb      	ldrh	r3, [r7, #14]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff fdd2 	bl	8008a2c <ptr_to_mem>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	4a39      	ldr	r2, [pc, #228]	; (8008f70 <mem_trim+0x1f4>)
 8008e8c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008e8e:	89fb      	ldrh	r3, [r7, #14]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff fdcb 	bl	8008a2c <ptr_to_mem>
 8008e96:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	89ba      	ldrh	r2, [r7, #12]
 8008ea2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	8afa      	ldrh	r2, [r7, #22]
 8008ea8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	89fa      	ldrh	r2, [r7, #14]
 8008eae:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008eb8:	d047      	beq.n	8008f4a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff fdb4 	bl	8008a2c <ptr_to_mem>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	89fb      	ldrh	r3, [r7, #14]
 8008ec8:	8053      	strh	r3, [r2, #2]
 8008eca:	e03e      	b.n	8008f4a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008ecc:	8bfb      	ldrh	r3, [r7, #30]
 8008ece:	f103 0214 	add.w	r2, r3, #20
 8008ed2:	8abb      	ldrh	r3, [r7, #20]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d838      	bhi.n	8008f4a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008ed8:	8afa      	ldrh	r2, [r7, #22]
 8008eda:	8bfb      	ldrh	r3, [r7, #30]
 8008edc:	4413      	add	r3, r2
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008eec:	d106      	bne.n	8008efc <mem_trim+0x180>
 8008eee:	4b1b      	ldr	r3, [pc, #108]	; (8008f5c <mem_trim+0x1e0>)
 8008ef0:	f240 3216 	movw	r2, #790	; 0x316
 8008ef4:	491d      	ldr	r1, [pc, #116]	; (8008f6c <mem_trim+0x1f0>)
 8008ef6:	481b      	ldr	r0, [pc, #108]	; (8008f64 <mem_trim+0x1e8>)
 8008ef8:	f00a fcc6 	bl	8013888 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008efc:	89fb      	ldrh	r3, [r7, #14]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff fd94 	bl	8008a2c <ptr_to_mem>
 8008f04:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008f06:	4b1a      	ldr	r3, [pc, #104]	; (8008f70 <mem_trim+0x1f4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d202      	bcs.n	8008f16 <mem_trim+0x19a>
      lfree = mem2;
 8008f10:	4a17      	ldr	r2, [pc, #92]	; (8008f70 <mem_trim+0x1f4>)
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	881a      	ldrh	r2, [r3, #0]
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	8afa      	ldrh	r2, [r7, #22]
 8008f28:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	89fa      	ldrh	r2, [r7, #14]
 8008f2e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008f38:	d007      	beq.n	8008f4a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff fd74 	bl	8008a2c <ptr_to_mem>
 8008f44:	4602      	mov	r2, r0
 8008f46:	89fb      	ldrh	r3, [r7, #14]
 8008f48:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008f4a:	687b      	ldr	r3, [r7, #4]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3720      	adds	r7, #32
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000154 	.word	0x20000154
 8008f58:	20000158 	.word	0x20000158
 8008f5c:	08014f04 	.word	0x08014f04
 8008f60:	08015074 	.word	0x08015074
 8008f64:	08014f4c 	.word	0x08014f4c
 8008f68:	0801508c 	.word	0x0801508c
 8008f6c:	080150ac 	.word	0x080150ac
 8008f70:	2000015c 	.word	0x2000015c

08008f74 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <mem_malloc+0x14>
    return NULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e0d9      	b.n	800913c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008f88:	88fb      	ldrh	r3, [r7, #6]
 8008f8a:	3303      	adds	r3, #3
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f023 0303 	bic.w	r3, r3, #3
 8008f92:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008f94:	8bbb      	ldrh	r3, [r7, #28]
 8008f96:	2b0b      	cmp	r3, #11
 8008f98:	d801      	bhi.n	8008f9e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008f9a:	230c      	movs	r3, #12
 8008f9c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008f9e:	8bbb      	ldrh	r3, [r7, #28]
 8008fa0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008fa4:	d803      	bhi.n	8008fae <mem_malloc+0x3a>
 8008fa6:	8bba      	ldrh	r2, [r7, #28]
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d201      	bcs.n	8008fb2 <mem_malloc+0x3e>
    return NULL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e0c4      	b.n	800913c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008fb2:	4b64      	ldr	r3, [pc, #400]	; (8009144 <mem_malloc+0x1d0>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff fd4a 	bl	8008a50 <mem_to_ptr>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	83fb      	strh	r3, [r7, #30]
 8008fc0:	e0b4      	b.n	800912c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008fc2:	8bfb      	ldrh	r3, [r7, #30]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff fd31 	bl	8008a2c <ptr_to_mem>
 8008fca:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	791b      	ldrb	r3, [r3, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f040 80a4 	bne.w	800911e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	8bfb      	ldrh	r3, [r7, #30]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	f1a3 0208 	sub.w	r2, r3, #8
 8008fe4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	f0c0 8099 	bcc.w	800911e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	8bfb      	ldrh	r3, [r7, #30]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	f1a3 0208 	sub.w	r2, r3, #8
 8008ffa:	8bbb      	ldrh	r3, [r7, #28]
 8008ffc:	3314      	adds	r3, #20
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d333      	bcc.n	800906a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009002:	8bfa      	ldrh	r2, [r7, #30]
 8009004:	8bbb      	ldrh	r3, [r7, #28]
 8009006:	4413      	add	r3, r2
 8009008:	b29b      	uxth	r3, r3
 800900a:	3308      	adds	r3, #8
 800900c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800900e:	8a7b      	ldrh	r3, [r7, #18]
 8009010:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009014:	d106      	bne.n	8009024 <mem_malloc+0xb0>
 8009016:	4b4c      	ldr	r3, [pc, #304]	; (8009148 <mem_malloc+0x1d4>)
 8009018:	f240 3287 	movw	r2, #903	; 0x387
 800901c:	494b      	ldr	r1, [pc, #300]	; (800914c <mem_malloc+0x1d8>)
 800901e:	484c      	ldr	r0, [pc, #304]	; (8009150 <mem_malloc+0x1dc>)
 8009020:	f00a fc32 	bl	8013888 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009024:	8a7b      	ldrh	r3, [r7, #18]
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff fd00 	bl	8008a2c <ptr_to_mem>
 800902c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	881a      	ldrh	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8bfa      	ldrh	r2, [r7, #30]
 8009040:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	8a7a      	ldrh	r2, [r7, #18]
 8009046:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2201      	movs	r2, #1
 800904c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009056:	d00b      	beq.n	8009070 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff fce5 	bl	8008a2c <ptr_to_mem>
 8009062:	4602      	mov	r2, r0
 8009064:	8a7b      	ldrh	r3, [r7, #18]
 8009066:	8053      	strh	r3, [r2, #2]
 8009068:	e002      	b.n	8009070 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2201      	movs	r2, #1
 800906e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009070:	4b34      	ldr	r3, [pc, #208]	; (8009144 <mem_malloc+0x1d0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	429a      	cmp	r2, r3
 8009078:	d127      	bne.n	80090ca <mem_malloc+0x156>
          struct mem *cur = lfree;
 800907a:	4b32      	ldr	r3, [pc, #200]	; (8009144 <mem_malloc+0x1d0>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009080:	e005      	b.n	800908e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff fcd0 	bl	8008a2c <ptr_to_mem>
 800908c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	791b      	ldrb	r3, [r3, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d004      	beq.n	80090a0 <mem_malloc+0x12c>
 8009096:	4b2f      	ldr	r3, [pc, #188]	; (8009154 <mem_malloc+0x1e0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	429a      	cmp	r2, r3
 800909e:	d1f0      	bne.n	8009082 <mem_malloc+0x10e>
          }
          lfree = cur;
 80090a0:	4a28      	ldr	r2, [pc, #160]	; (8009144 <mem_malloc+0x1d0>)
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80090a6:	4b27      	ldr	r3, [pc, #156]	; (8009144 <mem_malloc+0x1d0>)
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	4b2a      	ldr	r3, [pc, #168]	; (8009154 <mem_malloc+0x1e0>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d00b      	beq.n	80090ca <mem_malloc+0x156>
 80090b2:	4b24      	ldr	r3, [pc, #144]	; (8009144 <mem_malloc+0x1d0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	791b      	ldrb	r3, [r3, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <mem_malloc+0x156>
 80090bc:	4b22      	ldr	r3, [pc, #136]	; (8009148 <mem_malloc+0x1d4>)
 80090be:	f240 32b5 	movw	r2, #949	; 0x3b5
 80090c2:	4925      	ldr	r1, [pc, #148]	; (8009158 <mem_malloc+0x1e4>)
 80090c4:	4822      	ldr	r0, [pc, #136]	; (8009150 <mem_malloc+0x1dc>)
 80090c6:	f00a fbdf 	bl	8013888 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80090ca:	8bba      	ldrh	r2, [r7, #28]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	4413      	add	r3, r2
 80090d0:	3308      	adds	r3, #8
 80090d2:	4a20      	ldr	r2, [pc, #128]	; (8009154 <mem_malloc+0x1e0>)
 80090d4:	6812      	ldr	r2, [r2, #0]
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d906      	bls.n	80090e8 <mem_malloc+0x174>
 80090da:	4b1b      	ldr	r3, [pc, #108]	; (8009148 <mem_malloc+0x1d4>)
 80090dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 80090e0:	491e      	ldr	r1, [pc, #120]	; (800915c <mem_malloc+0x1e8>)
 80090e2:	481b      	ldr	r0, [pc, #108]	; (8009150 <mem_malloc+0x1dc>)
 80090e4:	f00a fbd0 	bl	8013888 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d006      	beq.n	8009100 <mem_malloc+0x18c>
 80090f2:	4b15      	ldr	r3, [pc, #84]	; (8009148 <mem_malloc+0x1d4>)
 80090f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80090f8:	4919      	ldr	r1, [pc, #100]	; (8009160 <mem_malloc+0x1ec>)
 80090fa:	4815      	ldr	r0, [pc, #84]	; (8009150 <mem_malloc+0x1dc>)
 80090fc:	f00a fbc4 	bl	8013888 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d006      	beq.n	8009118 <mem_malloc+0x1a4>
 800910a:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <mem_malloc+0x1d4>)
 800910c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009110:	4914      	ldr	r1, [pc, #80]	; (8009164 <mem_malloc+0x1f0>)
 8009112:	480f      	ldr	r0, [pc, #60]	; (8009150 <mem_malloc+0x1dc>)
 8009114:	f00a fbb8 	bl	8013888 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	3308      	adds	r3, #8
 800911c:	e00e      	b.n	800913c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800911e:	8bfb      	ldrh	r3, [r7, #30]
 8009120:	4618      	mov	r0, r3
 8009122:	f7ff fc83 	bl	8008a2c <ptr_to_mem>
 8009126:	4603      	mov	r3, r0
 8009128:	881b      	ldrh	r3, [r3, #0]
 800912a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800912c:	8bfa      	ldrh	r2, [r7, #30]
 800912e:	8bbb      	ldrh	r3, [r7, #28]
 8009130:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8009134:	429a      	cmp	r2, r3
 8009136:	f4ff af44 	bcc.w	8008fc2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3720      	adds	r7, #32
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	2000015c 	.word	0x2000015c
 8009148:	08014f04 	.word	0x08014f04
 800914c:	080150ac 	.word	0x080150ac
 8009150:	08014f4c 	.word	0x08014f4c
 8009154:	20000158 	.word	0x20000158
 8009158:	080150c0 	.word	0x080150c0
 800915c:	080150dc 	.word	0x080150dc
 8009160:	0801510c 	.word	0x0801510c
 8009164:	0801513c 	.word	0x0801513c

08009168 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	3303      	adds	r3, #3
 800917e:	f023 0303 	bic.w	r3, r3, #3
 8009182:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e011      	b.n	80091ae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	4413      	add	r3, r2
 80091a6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	885b      	ldrh	r3, [r3, #2]
 80091b2:	461a      	mov	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4293      	cmp	r3, r2
 80091b8:	dbe7      	blt.n	800918a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80091ba:	bf00      	nop
 80091bc:	bf00      	nop
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80091ce:	2300      	movs	r3, #0
 80091d0:	80fb      	strh	r3, [r7, #6]
 80091d2:	e009      	b.n	80091e8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80091d4:	88fb      	ldrh	r3, [r7, #6]
 80091d6:	4a08      	ldr	r2, [pc, #32]	; (80091f8 <memp_init+0x30>)
 80091d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091dc:	4618      	mov	r0, r3
 80091de:	f7ff ffc3 	bl	8009168 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80091e2:	88fb      	ldrh	r3, [r7, #6]
 80091e4:	3301      	adds	r3, #1
 80091e6:	80fb      	strh	r3, [r7, #6]
 80091e8:	88fb      	ldrh	r3, [r7, #6]
 80091ea:	2b08      	cmp	r3, #8
 80091ec:	d9f2      	bls.n	80091d4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	08017a0c 	.word	0x08017a0c

080091fc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d012      	beq.n	8009238 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d006      	beq.n	8009234 <do_memp_malloc_pool+0x38>
 8009226:	4b07      	ldr	r3, [pc, #28]	; (8009244 <do_memp_malloc_pool+0x48>)
 8009228:	f44f 728c 	mov.w	r2, #280	; 0x118
 800922c:	4906      	ldr	r1, [pc, #24]	; (8009248 <do_memp_malloc_pool+0x4c>)
 800922e:	4807      	ldr	r0, [pc, #28]	; (800924c <do_memp_malloc_pool+0x50>)
 8009230:	f00a fb2a 	bl	8013888 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	e000      	b.n	800923a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	08015160 	.word	0x08015160
 8009248:	08015190 	.word	0x08015190
 800924c:	080151b4 	.word	0x080151b4

08009250 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800925a:	79fb      	ldrb	r3, [r7, #7]
 800925c:	2b08      	cmp	r3, #8
 800925e:	d908      	bls.n	8009272 <memp_malloc+0x22>
 8009260:	4b0a      	ldr	r3, [pc, #40]	; (800928c <memp_malloc+0x3c>)
 8009262:	f240 1257 	movw	r2, #343	; 0x157
 8009266:	490a      	ldr	r1, [pc, #40]	; (8009290 <memp_malloc+0x40>)
 8009268:	480a      	ldr	r0, [pc, #40]	; (8009294 <memp_malloc+0x44>)
 800926a:	f00a fb0d 	bl	8013888 <iprintf>
 800926e:	2300      	movs	r3, #0
 8009270:	e008      	b.n	8009284 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	4a08      	ldr	r2, [pc, #32]	; (8009298 <memp_malloc+0x48>)
 8009276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff ffbe 	bl	80091fc <do_memp_malloc_pool>
 8009280:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009282:	68fb      	ldr	r3, [r7, #12]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	08015160 	.word	0x08015160
 8009290:	080151f0 	.word	0x080151f0
 8009294:	080151b4 	.word	0x080151b4
 8009298:	08017a0c 	.word	0x08017a0c

0800929c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	f003 0303 	and.w	r3, r3, #3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d006      	beq.n	80092be <do_memp_free_pool+0x22>
 80092b0:	4b0a      	ldr	r3, [pc, #40]	; (80092dc <do_memp_free_pool+0x40>)
 80092b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80092b6:	490a      	ldr	r1, [pc, #40]	; (80092e0 <do_memp_free_pool+0x44>)
 80092b8:	480a      	ldr	r0, [pc, #40]	; (80092e4 <do_memp_free_pool+0x48>)
 80092ba:	f00a fae5 	bl	8013888 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80092d4:	bf00      	nop
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	08015160 	.word	0x08015160
 80092e0:	08015210 	.word	0x08015210
 80092e4:	080151b4 	.word	0x080151b4

080092e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d907      	bls.n	800930a <memp_free+0x22>
 80092fa:	4b0c      	ldr	r3, [pc, #48]	; (800932c <memp_free+0x44>)
 80092fc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009300:	490b      	ldr	r1, [pc, #44]	; (8009330 <memp_free+0x48>)
 8009302:	480c      	ldr	r0, [pc, #48]	; (8009334 <memp_free+0x4c>)
 8009304:	f00a fac0 	bl	8013888 <iprintf>
 8009308:	e00c      	b.n	8009324 <memp_free+0x3c>

  if (mem == NULL) {
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d008      	beq.n	8009322 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	4a09      	ldr	r2, [pc, #36]	; (8009338 <memp_free+0x50>)
 8009314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff ffbe 	bl	800929c <do_memp_free_pool>
 8009320:	e000      	b.n	8009324 <memp_free+0x3c>
    return;
 8009322:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	08015160 	.word	0x08015160
 8009330:	08015230 	.word	0x08015230
 8009334:	080151b4 	.word	0x080151b4
 8009338:	08017a0c 	.word	0x08017a0c

0800933c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800933c:	b480      	push	{r7}
 800933e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009340:	bf00      	nop
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
	...

0800934c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d108      	bne.n	8009372 <netif_add+0x26>
 8009360:	4b57      	ldr	r3, [pc, #348]	; (80094c0 <netif_add+0x174>)
 8009362:	f240 1227 	movw	r2, #295	; 0x127
 8009366:	4957      	ldr	r1, [pc, #348]	; (80094c4 <netif_add+0x178>)
 8009368:	4857      	ldr	r0, [pc, #348]	; (80094c8 <netif_add+0x17c>)
 800936a:	f00a fa8d 	bl	8013888 <iprintf>
 800936e:	2300      	movs	r3, #0
 8009370:	e0a2      	b.n	80094b8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	d108      	bne.n	800938a <netif_add+0x3e>
 8009378:	4b51      	ldr	r3, [pc, #324]	; (80094c0 <netif_add+0x174>)
 800937a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800937e:	4953      	ldr	r1, [pc, #332]	; (80094cc <netif_add+0x180>)
 8009380:	4851      	ldr	r0, [pc, #324]	; (80094c8 <netif_add+0x17c>)
 8009382:	f00a fa81 	bl	8013888 <iprintf>
 8009386:	2300      	movs	r3, #0
 8009388:	e096      	b.n	80094b8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009390:	4b4f      	ldr	r3, [pc, #316]	; (80094d0 <netif_add+0x184>)
 8009392:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800939a:	4b4d      	ldr	r3, [pc, #308]	; (80094d0 <netif_add+0x184>)
 800939c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80093a4:	4b4a      	ldr	r3, [pc, #296]	; (80094d0 <netif_add+0x184>)
 80093a6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	4a45      	ldr	r2, [pc, #276]	; (80094d4 <netif_add+0x188>)
 80093be:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6a3a      	ldr	r2, [r7, #32]
 80093d8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80093da:	4b3f      	ldr	r3, [pc, #252]	; (80094d8 <netif_add+0x18c>)
 80093dc:	781a      	ldrb	r2, [r3, #0]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 f913 	bl	800961c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	4798      	blx	r3
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <netif_add+0xba>
    return NULL;
 8009402:	2300      	movs	r3, #0
 8009404:	e058      	b.n	80094b8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800940c:	2bff      	cmp	r3, #255	; 0xff
 800940e:	d103      	bne.n	8009418 <netif_add+0xcc>
        netif->num = 0;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800941c:	4b2f      	ldr	r3, [pc, #188]	; (80094dc <netif_add+0x190>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	617b      	str	r3, [r7, #20]
 8009422:	e02b      	b.n	800947c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	429a      	cmp	r2, r3
 800942a:	d106      	bne.n	800943a <netif_add+0xee>
 800942c:	4b24      	ldr	r3, [pc, #144]	; (80094c0 <netif_add+0x174>)
 800942e:	f240 128b 	movw	r2, #395	; 0x18b
 8009432:	492b      	ldr	r1, [pc, #172]	; (80094e0 <netif_add+0x194>)
 8009434:	4824      	ldr	r0, [pc, #144]	; (80094c8 <netif_add+0x17c>)
 8009436:	f00a fa27 	bl	8013888 <iprintf>
        num_netifs++;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	3301      	adds	r3, #1
 800943e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2bff      	cmp	r3, #255	; 0xff
 8009444:	dd06      	ble.n	8009454 <netif_add+0x108>
 8009446:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <netif_add+0x174>)
 8009448:	f240 128d 	movw	r2, #397	; 0x18d
 800944c:	4925      	ldr	r1, [pc, #148]	; (80094e4 <netif_add+0x198>)
 800944e:	481e      	ldr	r0, [pc, #120]	; (80094c8 <netif_add+0x17c>)
 8009450:	f00a fa1a 	bl	8013888 <iprintf>
        if (netif2->num == netif->num) {
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009460:	429a      	cmp	r2, r3
 8009462:	d108      	bne.n	8009476 <netif_add+0x12a>
          netif->num++;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800946a:	3301      	adds	r3, #1
 800946c:	b2da      	uxtb	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009474:	e005      	b.n	8009482 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1d0      	bne.n	8009424 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1be      	bne.n	8009406 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800948e:	2bfe      	cmp	r3, #254	; 0xfe
 8009490:	d103      	bne.n	800949a <netif_add+0x14e>
    netif_num = 0;
 8009492:	4b11      	ldr	r3, [pc, #68]	; (80094d8 <netif_add+0x18c>)
 8009494:	2200      	movs	r2, #0
 8009496:	701a      	strb	r2, [r3, #0]
 8009498:	e006      	b.n	80094a8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094a0:	3301      	adds	r3, #1
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	4b0c      	ldr	r3, [pc, #48]	; (80094d8 <netif_add+0x18c>)
 80094a6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80094a8:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <netif_add+0x190>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80094b0:	4a0a      	ldr	r2, [pc, #40]	; (80094dc <netif_add+0x190>)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80094b6:	68fb      	ldr	r3, [r7, #12]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	0801524c 	.word	0x0801524c
 80094c4:	080152e0 	.word	0x080152e0
 80094c8:	0801529c 	.word	0x0801529c
 80094cc:	080152fc 	.word	0x080152fc
 80094d0:	08017a70 	.word	0x08017a70
 80094d4:	0800982f 	.word	0x0800982f
 80094d8:	20000184 	.word	0x20000184
 80094dc:	20009f38 	.word	0x20009f38
 80094e0:	08015320 	.word	0x08015320
 80094e4:	08015334 	.word	0x08015334

080094e8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f002 fe21 	bl	800c13c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f007 fe71 	bl	80111e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d106      	bne.n	800952c <netif_do_set_ipaddr+0x20>
 800951e:	4b1d      	ldr	r3, [pc, #116]	; (8009594 <netif_do_set_ipaddr+0x88>)
 8009520:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009524:	491c      	ldr	r1, [pc, #112]	; (8009598 <netif_do_set_ipaddr+0x8c>)
 8009526:	481d      	ldr	r0, [pc, #116]	; (800959c <netif_do_set_ipaddr+0x90>)
 8009528:	f00a f9ae 	bl	8013888 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <netif_do_set_ipaddr+0x34>
 8009532:	4b18      	ldr	r3, [pc, #96]	; (8009594 <netif_do_set_ipaddr+0x88>)
 8009534:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009538:	4917      	ldr	r1, [pc, #92]	; (8009598 <netif_do_set_ipaddr+0x8c>)
 800953a:	4818      	ldr	r0, [pc, #96]	; (800959c <netif_do_set_ipaddr+0x90>)
 800953c:	f00a f9a4 	bl	8013888 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3304      	adds	r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	429a      	cmp	r2, r3
 800954c:	d01c      	beq.n	8009588 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	3304      	adds	r3, #4
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800955e:	f107 0314 	add.w	r3, r7, #20
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff ffbf 	bl	80094e8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <netif_do_set_ipaddr+0x6a>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	e000      	b.n	8009578 <netif_do_set_ipaddr+0x6c>
 8009576:	2300      	movs	r3, #0
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800957c:	2101      	movs	r1, #1
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f8d2 	bl	8009728 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009584:	2301      	movs	r3, #1
 8009586:	e000      	b.n	800958a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	0801524c 	.word	0x0801524c
 8009598:	08015364 	.word	0x08015364
 800959c:	0801529c 	.word	0x0801529c

080095a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3308      	adds	r3, #8
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d00a      	beq.n	80095d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <netif_do_set_netmask+0x26>
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	e000      	b.n	80095c8 <netif_do_set_netmask+0x28>
 80095c6:	2300      	movs	r3, #0
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80095cc:	2301      	movs	r3, #1
 80095ce:	e000      	b.n	80095d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80095de:	b480      	push	{r7}
 80095e0:	b085      	sub	sp, #20
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	330c      	adds	r3, #12
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d00a      	beq.n	800960e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <netif_do_set_gw+0x26>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	e000      	b.n	8009606 <netif_do_set_gw+0x28>
 8009604:	2300      	movs	r3, #0
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800960a:	2301      	movs	r3, #1
 800960c:	e000      	b.n	8009610 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800962e:	2300      	movs	r3, #0
 8009630:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009638:	4b1c      	ldr	r3, [pc, #112]	; (80096ac <netif_set_addr+0x90>)
 800963a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009642:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <netif_set_addr+0x90>)
 8009644:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800964c:	4b17      	ldr	r3, [pc, #92]	; (80096ac <netif_set_addr+0x90>)
 800964e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <netif_set_addr+0x42>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <netif_set_addr+0x46>
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <netif_set_addr+0x48>
 8009662:	2300      	movs	r3, #0
 8009664:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d006      	beq.n	800967a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800966c:	f107 0310 	add.w	r3, r7, #16
 8009670:	461a      	mov	r2, r3
 8009672:	68b9      	ldr	r1, [r7, #8]
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff ff49 	bl	800950c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800967a:	69fa      	ldr	r2, [r7, #28]
 800967c:	6879      	ldr	r1, [r7, #4]
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f7ff ff8e 	bl	80095a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009684:	69ba      	ldr	r2, [r7, #24]
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7ff ffa8 	bl	80095de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d106      	bne.n	80096a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009694:	f107 0310 	add.w	r3, r7, #16
 8009698:	461a      	mov	r2, r3
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7ff ff35 	bl	800950c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80096a2:	bf00      	nop
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	08017a70 	.word	0x08017a70

080096b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80096b8:	4a04      	ldr	r2, [pc, #16]	; (80096cc <netif_set_default+0x1c>)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80096be:	bf00      	nop
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	20009f3c 	.word	0x20009f3c

080096d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d107      	bne.n	80096ee <netif_set_up+0x1e>
 80096de:	4b0f      	ldr	r3, [pc, #60]	; (800971c <netif_set_up+0x4c>)
 80096e0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80096e4:	490e      	ldr	r1, [pc, #56]	; (8009720 <netif_set_up+0x50>)
 80096e6:	480f      	ldr	r0, [pc, #60]	; (8009724 <netif_set_up+0x54>)
 80096e8:	f00a f8ce 	bl	8013888 <iprintf>
 80096ec:	e013      	b.n	8009716 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80096f4:	f003 0301 	and.w	r3, r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10c      	bne.n	8009716 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009702:	f043 0301 	orr.w	r3, r3, #1
 8009706:	b2da      	uxtb	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800970e:	2103      	movs	r1, #3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f809 	bl	8009728 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	0801524c 	.word	0x0801524c
 8009720:	080153d4 	.word	0x080153d4
 8009724:	0801529c 	.word	0x0801529c

08009728 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d106      	bne.n	8009748 <netif_issue_reports+0x20>
 800973a:	4b18      	ldr	r3, [pc, #96]	; (800979c <netif_issue_reports+0x74>)
 800973c:	f240 326d 	movw	r2, #877	; 0x36d
 8009740:	4917      	ldr	r1, [pc, #92]	; (80097a0 <netif_issue_reports+0x78>)
 8009742:	4818      	ldr	r0, [pc, #96]	; (80097a4 <netif_issue_reports+0x7c>)
 8009744:	f00a f8a0 	bl	8013888 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800974e:	f003 0304 	and.w	r3, r3, #4
 8009752:	2b00      	cmp	r3, #0
 8009754:	d01e      	beq.n	8009794 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800975c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009760:	2b00      	cmp	r3, #0
 8009762:	d017      	beq.n	8009794 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d013      	beq.n	8009796 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3304      	adds	r3, #4
 8009772:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00e      	beq.n	8009796 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800977e:	f003 0308 	and.w	r3, r3, #8
 8009782:	2b00      	cmp	r3, #0
 8009784:	d007      	beq.n	8009796 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	3304      	adds	r3, #4
 800978a:	4619      	mov	r1, r3
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f008 fc93 	bl	80120b8 <etharp_request>
 8009792:	e000      	b.n	8009796 <netif_issue_reports+0x6e>
    return;
 8009794:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	0801524c 	.word	0x0801524c
 80097a0:	080153f0 	.word	0x080153f0
 80097a4:	0801529c 	.word	0x0801529c

080097a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d107      	bne.n	80097c6 <netif_set_down+0x1e>
 80097b6:	4b12      	ldr	r3, [pc, #72]	; (8009800 <netif_set_down+0x58>)
 80097b8:	f240 329b 	movw	r2, #923	; 0x39b
 80097bc:	4911      	ldr	r1, [pc, #68]	; (8009804 <netif_set_down+0x5c>)
 80097be:	4812      	ldr	r0, [pc, #72]	; (8009808 <netif_set_down+0x60>)
 80097c0:	f00a f862 	bl	8013888 <iprintf>
 80097c4:	e019      	b.n	80097fa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d012      	beq.n	80097fa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097da:	f023 0301 	bic.w	r3, r3, #1
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097ec:	f003 0308 	and.w	r3, r3, #8
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f008 f81d 	bl	8011834 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	0801524c 	.word	0x0801524c
 8009804:	08015414 	.word	0x08015414
 8009808:	0801529c 	.word	0x0801529c

0800980c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d002      	beq.n	8009822 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	61da      	str	r2, [r3, #28]
  }
}
 8009822:	bf00      	nop
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800982e:	b480      	push	{r7}
 8009830:	b085      	sub	sp, #20
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800983a:	f06f 030b 	mvn.w	r3, #11
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
	...

0800984c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d013      	beq.n	8009884 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800985c:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <netif_get_by_index+0x48>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]
 8009862:	e00c      	b.n	800987e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800986a:	3301      	adds	r3, #1
 800986c:	b2db      	uxtb	r3, r3
 800986e:	79fa      	ldrb	r2, [r7, #7]
 8009870:	429a      	cmp	r2, r3
 8009872:	d101      	bne.n	8009878 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	e006      	b.n	8009886 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1ef      	bne.n	8009864 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20009f38 	.word	0x20009f38

08009898 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800989e:	4b0c      	ldr	r3, [pc, #48]	; (80098d0 <pbuf_free_ooseq+0x38>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80098a4:	4b0b      	ldr	r3, [pc, #44]	; (80098d4 <pbuf_free_ooseq+0x3c>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	607b      	str	r3, [r7, #4]
 80098aa:	e00a      	b.n	80098c2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f002 fc7f 	bl	800c1b8 <tcp_free_ooseq>
      return;
 80098ba:	e005      	b.n	80098c8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	607b      	str	r3, [r7, #4]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1f1      	bne.n	80098ac <pbuf_free_ooseq+0x14>
    }
  }
}
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20009f40 	.word	0x20009f40
 80098d4:	20009f48 	.word	0x20009f48

080098d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80098d8:	b480      	push	{r7}
 80098da:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80098dc:	4b03      	ldr	r3, [pc, #12]	; (80098ec <pbuf_pool_is_empty+0x14>)
 80098de:	2201      	movs	r2, #1
 80098e0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80098e2:	bf00      	nop
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	20009f40 	.word	0x20009f40

080098f0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	4611      	mov	r1, r2
 80098fc:	461a      	mov	r2, r3
 80098fe:	460b      	mov	r3, r1
 8009900:	80fb      	strh	r3, [r7, #6]
 8009902:	4613      	mov	r3, r2
 8009904:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	88fa      	ldrh	r2, [r7, #6]
 8009916:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	88ba      	ldrh	r2, [r7, #4]
 800991c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800991e:	8b3b      	ldrh	r3, [r7, #24]
 8009920:	b2da      	uxtb	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	7f3a      	ldrb	r2, [r7, #28]
 800992a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2201      	movs	r2, #1
 8009930:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	73da      	strb	r2, [r3, #15]
}
 8009938:	bf00      	nop
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08c      	sub	sp, #48	; 0x30
 8009948:	af02      	add	r7, sp, #8
 800994a:	4603      	mov	r3, r0
 800994c:	71fb      	strb	r3, [r7, #7]
 800994e:	460b      	mov	r3, r1
 8009950:	80bb      	strh	r3, [r7, #4]
 8009952:	4613      	mov	r3, r2
 8009954:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800995a:	887b      	ldrh	r3, [r7, #2]
 800995c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009960:	d07f      	beq.n	8009a62 <pbuf_alloc+0x11e>
 8009962:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009966:	f300 80c8 	bgt.w	8009afa <pbuf_alloc+0x1b6>
 800996a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800996e:	d010      	beq.n	8009992 <pbuf_alloc+0x4e>
 8009970:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009974:	f300 80c1 	bgt.w	8009afa <pbuf_alloc+0x1b6>
 8009978:	2b01      	cmp	r3, #1
 800997a:	d002      	beq.n	8009982 <pbuf_alloc+0x3e>
 800997c:	2b41      	cmp	r3, #65	; 0x41
 800997e:	f040 80bc 	bne.w	8009afa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009982:	887a      	ldrh	r2, [r7, #2]
 8009984:	88bb      	ldrh	r3, [r7, #4]
 8009986:	4619      	mov	r1, r3
 8009988:	2000      	movs	r0, #0
 800998a:	f000 f8d1 	bl	8009b30 <pbuf_alloc_reference>
 800998e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009990:	e0bd      	b.n	8009b0e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009996:	2300      	movs	r3, #0
 8009998:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800999a:	88bb      	ldrh	r3, [r7, #4]
 800999c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800999e:	2008      	movs	r0, #8
 80099a0:	f7ff fc56 	bl	8009250 <memp_malloc>
 80099a4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d109      	bne.n	80099c0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80099ac:	f7ff ff94 	bl	80098d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <pbuf_alloc+0x78>
            pbuf_free(p);
 80099b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099b8:	f000 faa8 	bl	8009f0c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80099bc:	2300      	movs	r3, #0
 80099be:	e0a7      	b.n	8009b10 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80099c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099c2:	3303      	adds	r3, #3
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	8b7a      	ldrh	r2, [r7, #26]
 80099d4:	4293      	cmp	r3, r2
 80099d6:	bf28      	it	cs
 80099d8:	4613      	movcs	r3, r2
 80099da:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80099dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099de:	3310      	adds	r3, #16
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4413      	add	r3, r2
 80099e4:	3303      	adds	r3, #3
 80099e6:	f023 0303 	bic.w	r3, r3, #3
 80099ea:	4618      	mov	r0, r3
 80099ec:	89f9      	ldrh	r1, [r7, #14]
 80099ee:	8b7a      	ldrh	r2, [r7, #26]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9301      	str	r3, [sp, #4]
 80099f4:	887b      	ldrh	r3, [r7, #2]
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	460b      	mov	r3, r1
 80099fa:	4601      	mov	r1, r0
 80099fc:	6938      	ldr	r0, [r7, #16]
 80099fe:	f7ff ff77 	bl	80098f0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d006      	beq.n	8009a1c <pbuf_alloc+0xd8>
 8009a0e:	4b42      	ldr	r3, [pc, #264]	; (8009b18 <pbuf_alloc+0x1d4>)
 8009a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a14:	4941      	ldr	r1, [pc, #260]	; (8009b1c <pbuf_alloc+0x1d8>)
 8009a16:	4842      	ldr	r0, [pc, #264]	; (8009b20 <pbuf_alloc+0x1dc>)
 8009a18:	f009 ff36 	bl	8013888 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009a1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a1e:	3303      	adds	r3, #3
 8009a20:	f023 0303 	bic.w	r3, r3, #3
 8009a24:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009a28:	d106      	bne.n	8009a38 <pbuf_alloc+0xf4>
 8009a2a:	4b3b      	ldr	r3, [pc, #236]	; (8009b18 <pbuf_alloc+0x1d4>)
 8009a2c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009a30:	493c      	ldr	r1, [pc, #240]	; (8009b24 <pbuf_alloc+0x1e0>)
 8009a32:	483b      	ldr	r0, [pc, #236]	; (8009b20 <pbuf_alloc+0x1dc>)
 8009a34:	f009 ff28 	bl	8013888 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d102      	bne.n	8009a44 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24
 8009a42:	e002      	b.n	8009a4a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009a4e:	8b7a      	ldrh	r2, [r7, #26]
 8009a50:	89fb      	ldrh	r3, [r7, #14]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009a5a:	8b7b      	ldrh	r3, [r7, #26]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d19e      	bne.n	800999e <pbuf_alloc+0x5a>
      break;
 8009a60:	e055      	b.n	8009b0e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009a62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a64:	3303      	adds	r3, #3
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f023 0303 	bic.w	r3, r3, #3
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	88bb      	ldrh	r3, [r7, #4]
 8009a70:	3303      	adds	r3, #3
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	f023 0303 	bic.w	r3, r3, #3
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	4413      	add	r3, r2
 8009a7c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009a7e:	8b3b      	ldrh	r3, [r7, #24]
 8009a80:	3310      	adds	r3, #16
 8009a82:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009a84:	8b3a      	ldrh	r2, [r7, #24]
 8009a86:	88bb      	ldrh	r3, [r7, #4]
 8009a88:	3303      	adds	r3, #3
 8009a8a:	f023 0303 	bic.w	r3, r3, #3
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d306      	bcc.n	8009aa0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009a92:	8afa      	ldrh	r2, [r7, #22]
 8009a94:	88bb      	ldrh	r3, [r7, #4]
 8009a96:	3303      	adds	r3, #3
 8009a98:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d201      	bcs.n	8009aa4 <pbuf_alloc+0x160>
        return NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e035      	b.n	8009b10 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009aa4:	8afb      	ldrh	r3, [r7, #22]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff fa64 	bl	8008f74 <mem_malloc>
 8009aac:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <pbuf_alloc+0x174>
        return NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	e02b      	b.n	8009b10 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009ab8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009aba:	3310      	adds	r3, #16
 8009abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009abe:	4413      	add	r3, r2
 8009ac0:	3303      	adds	r3, #3
 8009ac2:	f023 0303 	bic.w	r3, r3, #3
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	88b9      	ldrh	r1, [r7, #4]
 8009aca:	88ba      	ldrh	r2, [r7, #4]
 8009acc:	2300      	movs	r3, #0
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	887b      	ldrh	r3, [r7, #2]
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ada:	f7ff ff09 	bl	80098f0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d010      	beq.n	8009b0c <pbuf_alloc+0x1c8>
 8009aea:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <pbuf_alloc+0x1d4>)
 8009aec:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009af0:	490d      	ldr	r1, [pc, #52]	; (8009b28 <pbuf_alloc+0x1e4>)
 8009af2:	480b      	ldr	r0, [pc, #44]	; (8009b20 <pbuf_alloc+0x1dc>)
 8009af4:	f009 fec8 	bl	8013888 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009af8:	e008      	b.n	8009b0c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009afa:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <pbuf_alloc+0x1d4>)
 8009afc:	f240 1227 	movw	r2, #295	; 0x127
 8009b00:	490a      	ldr	r1, [pc, #40]	; (8009b2c <pbuf_alloc+0x1e8>)
 8009b02:	4807      	ldr	r0, [pc, #28]	; (8009b20 <pbuf_alloc+0x1dc>)
 8009b04:	f009 fec0 	bl	8013888 <iprintf>
      return NULL;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	e001      	b.n	8009b10 <pbuf_alloc+0x1cc>
      break;
 8009b0c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3728      	adds	r7, #40	; 0x28
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	0801547c 	.word	0x0801547c
 8009b1c:	080154ac 	.word	0x080154ac
 8009b20:	080154dc 	.word	0x080154dc
 8009b24:	08015504 	.word	0x08015504
 8009b28:	08015538 	.word	0x08015538
 8009b2c:	08015564 	.word	0x08015564

08009b30 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af02      	add	r7, sp, #8
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	807b      	strh	r3, [r7, #2]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009b40:	883b      	ldrh	r3, [r7, #0]
 8009b42:	2b41      	cmp	r3, #65	; 0x41
 8009b44:	d009      	beq.n	8009b5a <pbuf_alloc_reference+0x2a>
 8009b46:	883b      	ldrh	r3, [r7, #0]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d006      	beq.n	8009b5a <pbuf_alloc_reference+0x2a>
 8009b4c:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <pbuf_alloc_reference+0x5c>)
 8009b4e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009b52:	490f      	ldr	r1, [pc, #60]	; (8009b90 <pbuf_alloc_reference+0x60>)
 8009b54:	480f      	ldr	r0, [pc, #60]	; (8009b94 <pbuf_alloc_reference+0x64>)
 8009b56:	f009 fe97 	bl	8013888 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009b5a:	2007      	movs	r0, #7
 8009b5c:	f7ff fb78 	bl	8009250 <memp_malloc>
 8009b60:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d101      	bne.n	8009b6c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	e00b      	b.n	8009b84 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009b6c:	8879      	ldrh	r1, [r7, #2]
 8009b6e:	887a      	ldrh	r2, [r7, #2]
 8009b70:	2300      	movs	r3, #0
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	883b      	ldrh	r3, [r7, #0]
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f7ff feb7 	bl	80098f0 <pbuf_init_alloced_pbuf>
  return p;
 8009b82:	68fb      	ldr	r3, [r7, #12]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	0801547c 	.word	0x0801547c
 8009b90:	08015580 	.word	0x08015580
 8009b94:	080154dc 	.word	0x080154dc

08009b98 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af02      	add	r7, sp, #8
 8009b9e:	607b      	str	r3, [r7, #4]
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	73fb      	strb	r3, [r7, #15]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	81bb      	strh	r3, [r7, #12]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009bb0:	8a7b      	ldrh	r3, [r7, #18]
 8009bb2:	3303      	adds	r3, #3
 8009bb4:	f023 0203 	bic.w	r2, r3, #3
 8009bb8:	89bb      	ldrh	r3, [r7, #12]
 8009bba:	441a      	add	r2, r3
 8009bbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d901      	bls.n	8009bc6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e018      	b.n	8009bf8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d007      	beq.n	8009bdc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009bcc:	8a7b      	ldrh	r3, [r7, #18]
 8009bce:	3303      	adds	r3, #3
 8009bd0:	f023 0303 	bic.w	r3, r3, #3
 8009bd4:	6a3a      	ldr	r2, [r7, #32]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]
 8009bda:	e001      	b.n	8009be0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	89b9      	ldrh	r1, [r7, #12]
 8009be4:	89ba      	ldrh	r2, [r7, #12]
 8009be6:	2302      	movs	r3, #2
 8009be8:	9301      	str	r3, [sp, #4]
 8009bea:	897b      	ldrh	r3, [r7, #10]
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	6979      	ldr	r1, [r7, #20]
 8009bf2:	f7ff fe7d 	bl	80098f0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009bf6:	687b      	ldr	r3, [r7, #4]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	460b      	mov	r3, r1
 8009c0a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d106      	bne.n	8009c20 <pbuf_realloc+0x20>
 8009c12:	4b3a      	ldr	r3, [pc, #232]	; (8009cfc <pbuf_realloc+0xfc>)
 8009c14:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009c18:	4939      	ldr	r1, [pc, #228]	; (8009d00 <pbuf_realloc+0x100>)
 8009c1a:	483a      	ldr	r0, [pc, #232]	; (8009d04 <pbuf_realloc+0x104>)
 8009c1c:	f009 fe34 	bl	8013888 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	891b      	ldrh	r3, [r3, #8]
 8009c24:	887a      	ldrh	r2, [r7, #2]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d263      	bcs.n	8009cf2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	891a      	ldrh	r2, [r3, #8]
 8009c2e:	887b      	ldrh	r3, [r7, #2]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009c34:	887b      	ldrh	r3, [r7, #2]
 8009c36:	817b      	strh	r3, [r7, #10]
  q = p;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009c3c:	e018      	b.n	8009c70 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	895b      	ldrh	r3, [r3, #10]
 8009c42:	897a      	ldrh	r2, [r7, #10]
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	891a      	ldrh	r2, [r3, #8]
 8009c4c:	893b      	ldrh	r3, [r7, #8]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d106      	bne.n	8009c70 <pbuf_realloc+0x70>
 8009c62:	4b26      	ldr	r3, [pc, #152]	; (8009cfc <pbuf_realloc+0xfc>)
 8009c64:	f240 12af 	movw	r2, #431	; 0x1af
 8009c68:	4927      	ldr	r1, [pc, #156]	; (8009d08 <pbuf_realloc+0x108>)
 8009c6a:	4826      	ldr	r0, [pc, #152]	; (8009d04 <pbuf_realloc+0x104>)
 8009c6c:	f009 fe0c 	bl	8013888 <iprintf>
  while (rem_len > q->len) {
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	895b      	ldrh	r3, [r3, #10]
 8009c74:	897a      	ldrh	r2, [r7, #10]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d8e1      	bhi.n	8009c3e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	7b1b      	ldrb	r3, [r3, #12]
 8009c7e:	f003 030f 	and.w	r3, r3, #15
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d121      	bne.n	8009cca <pbuf_realloc+0xca>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	895b      	ldrh	r3, [r3, #10]
 8009c8a:	897a      	ldrh	r2, [r7, #10]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d01c      	beq.n	8009cca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	7b5b      	ldrb	r3, [r3, #13]
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d116      	bne.n	8009cca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	897b      	ldrh	r3, [r7, #10]
 8009ca8:	4413      	add	r3, r2
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	4619      	mov	r1, r3
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff f864 	bl	8008d7c <mem_trim>
 8009cb4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d106      	bne.n	8009cca <pbuf_realloc+0xca>
 8009cbc:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <pbuf_realloc+0xfc>)
 8009cbe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009cc2:	4912      	ldr	r1, [pc, #72]	; (8009d0c <pbuf_realloc+0x10c>)
 8009cc4:	480f      	ldr	r0, [pc, #60]	; (8009d04 <pbuf_realloc+0x104>)
 8009cc6:	f009 fddf 	bl	8013888 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	897a      	ldrh	r2, [r7, #10]
 8009cce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	895a      	ldrh	r2, [r3, #10]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d004      	beq.n	8009cea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 f911 	bl	8009f0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]
 8009cf0:	e000      	b.n	8009cf4 <pbuf_realloc+0xf4>
    return;
 8009cf2:	bf00      	nop

}
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	0801547c 	.word	0x0801547c
 8009d00:	08015594 	.word	0x08015594
 8009d04:	080154dc 	.word	0x080154dc
 8009d08:	080155ac 	.word	0x080155ac
 8009d0c:	080155c4 	.word	0x080155c4

08009d10 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d106      	bne.n	8009d32 <pbuf_add_header_impl+0x22>
 8009d24:	4b2b      	ldr	r3, [pc, #172]	; (8009dd4 <pbuf_add_header_impl+0xc4>)
 8009d26:	f240 12df 	movw	r2, #479	; 0x1df
 8009d2a:	492b      	ldr	r1, [pc, #172]	; (8009dd8 <pbuf_add_header_impl+0xc8>)
 8009d2c:	482b      	ldr	r0, [pc, #172]	; (8009ddc <pbuf_add_header_impl+0xcc>)
 8009d2e:	f009 fdab 	bl	8013888 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d003      	beq.n	8009d40 <pbuf_add_header_impl+0x30>
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d3e:	d301      	bcc.n	8009d44 <pbuf_add_header_impl+0x34>
    return 1;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e043      	b.n	8009dcc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <pbuf_add_header_impl+0x3e>
    return 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e03e      	b.n	8009dcc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	891a      	ldrh	r2, [r3, #8]
 8009d56:	8a7b      	ldrh	r3, [r7, #18]
 8009d58:	4413      	add	r3, r2
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	8a7a      	ldrh	r2, [r7, #18]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d901      	bls.n	8009d66 <pbuf_add_header_impl+0x56>
    return 1;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e032      	b.n	8009dcc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	7b1b      	ldrb	r3, [r3, #12]
 8009d6a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009d6c:	8a3b      	ldrh	r3, [r7, #16]
 8009d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00c      	beq.n	8009d90 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	425b      	negs	r3, r3
 8009d7e:	4413      	add	r3, r2
 8009d80:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3310      	adds	r3, #16
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d20d      	bcs.n	8009da8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e01d      	b.n	8009dcc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d006      	beq.n	8009da4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	425b      	negs	r3, r3
 8009d9e:	4413      	add	r3, r2
 8009da0:	617b      	str	r3, [r7, #20]
 8009da2:	e001      	b.n	8009da8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e011      	b.n	8009dcc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	895a      	ldrh	r2, [r3, #10]
 8009db2:	8a7b      	ldrh	r3, [r7, #18]
 8009db4:	4413      	add	r3, r2
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	891a      	ldrh	r2, [r3, #8]
 8009dc0:	8a7b      	ldrh	r3, [r7, #18]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	811a      	strh	r2, [r3, #8]


  return 0;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	0801547c 	.word	0x0801547c
 8009dd8:	080155e0 	.word	0x080155e0
 8009ddc:	080154dc 	.word	0x080154dc

08009de0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009dea:	2200      	movs	r2, #0
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff ff8e 	bl	8009d10 <pbuf_add_header_impl>
 8009df4:	4603      	mov	r3, r0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d106      	bne.n	8009e1e <pbuf_remove_header+0x1e>
 8009e10:	4b20      	ldr	r3, [pc, #128]	; (8009e94 <pbuf_remove_header+0x94>)
 8009e12:	f240 224b 	movw	r2, #587	; 0x24b
 8009e16:	4920      	ldr	r1, [pc, #128]	; (8009e98 <pbuf_remove_header+0x98>)
 8009e18:	4820      	ldr	r0, [pc, #128]	; (8009e9c <pbuf_remove_header+0x9c>)
 8009e1a:	f009 fd35 	bl	8013888 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <pbuf_remove_header+0x2c>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e2a:	d301      	bcc.n	8009e30 <pbuf_remove_header+0x30>
    return 1;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e02c      	b.n	8009e8a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <pbuf_remove_header+0x3a>
    return 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	e027      	b.n	8009e8a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	895b      	ldrh	r3, [r3, #10]
 8009e42:	89fa      	ldrh	r2, [r7, #14]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d908      	bls.n	8009e5a <pbuf_remove_header+0x5a>
 8009e48:	4b12      	ldr	r3, [pc, #72]	; (8009e94 <pbuf_remove_header+0x94>)
 8009e4a:	f240 2255 	movw	r2, #597	; 0x255
 8009e4e:	4914      	ldr	r1, [pc, #80]	; (8009ea0 <pbuf_remove_header+0xa0>)
 8009e50:	4812      	ldr	r0, [pc, #72]	; (8009e9c <pbuf_remove_header+0x9c>)
 8009e52:	f009 fd19 	bl	8013888 <iprintf>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e017      	b.n	8009e8a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	441a      	add	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	895a      	ldrh	r2, [r3, #10]
 8009e70:	89fb      	ldrh	r3, [r7, #14]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	b29a      	uxth	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	891a      	ldrh	r2, [r3, #8]
 8009e7e:	89fb      	ldrh	r3, [r7, #14]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	0801547c 	.word	0x0801547c
 8009e98:	080155e0 	.word	0x080155e0
 8009e9c:	080154dc 	.word	0x080154dc
 8009ea0:	080155ec 	.word	0x080155ec

08009ea4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	807b      	strh	r3, [r7, #2]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009eb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	da08      	bge.n	8009ece <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009ebc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ec0:	425b      	negs	r3, r3
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff ff9b 	bl	8009e00 <pbuf_remove_header>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	e007      	b.n	8009ede <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009ece:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ed2:	787a      	ldrb	r2, [r7, #1]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff ff1a 	bl	8009d10 <pbuf_add_header_impl>
 8009edc:	4603      	mov	r3, r0
  }
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009ef2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7ff ffd2 	bl	8009ea4 <pbuf_header_impl>
 8009f00:	4603      	mov	r3, r0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10b      	bne.n	8009f32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d106      	bne.n	8009f2e <pbuf_free+0x22>
 8009f20:	4b38      	ldr	r3, [pc, #224]	; (800a004 <pbuf_free+0xf8>)
 8009f22:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009f26:	4938      	ldr	r1, [pc, #224]	; (800a008 <pbuf_free+0xfc>)
 8009f28:	4838      	ldr	r0, [pc, #224]	; (800a00c <pbuf_free+0x100>)
 8009f2a:	f009 fcad 	bl	8013888 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e063      	b.n	8009ffa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009f36:	e05c      	b.n	8009ff2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	7b9b      	ldrb	r3, [r3, #14]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <pbuf_free+0x42>
 8009f40:	4b30      	ldr	r3, [pc, #192]	; (800a004 <pbuf_free+0xf8>)
 8009f42:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009f46:	4932      	ldr	r1, [pc, #200]	; (800a010 <pbuf_free+0x104>)
 8009f48:	4830      	ldr	r0, [pc, #192]	; (800a00c <pbuf_free+0x100>)
 8009f4a:	f009 fc9d 	bl	8013888 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	7b9b      	ldrb	r3, [r3, #14]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	739a      	strb	r2, [r3, #14]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	7b9b      	ldrb	r3, [r3, #14]
 8009f5e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009f60:	7dbb      	ldrb	r3, [r7, #22]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d143      	bne.n	8009fee <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	7b1b      	ldrb	r3, [r3, #12]
 8009f70:	f003 030f 	and.w	r3, r3, #15
 8009f74:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	7b5b      	ldrb	r3, [r3, #13]
 8009f7a:	f003 0302 	and.w	r3, r3, #2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d011      	beq.n	8009fa6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d106      	bne.n	8009f9c <pbuf_free+0x90>
 8009f8e:	4b1d      	ldr	r3, [pc, #116]	; (800a004 <pbuf_free+0xf8>)
 8009f90:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009f94:	491f      	ldr	r1, [pc, #124]	; (800a014 <pbuf_free+0x108>)
 8009f96:	481d      	ldr	r0, [pc, #116]	; (800a00c <pbuf_free+0x100>)
 8009f98:	f009 fc76 	bl	8013888 <iprintf>
        pc->custom_free_function(p);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	4798      	blx	r3
 8009fa4:	e01d      	b.n	8009fe2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d104      	bne.n	8009fb6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	2008      	movs	r0, #8
 8009fb0:	f7ff f99a 	bl	80092e8 <memp_free>
 8009fb4:	e015      	b.n	8009fe2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d104      	bne.n	8009fc6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009fbc:	6879      	ldr	r1, [r7, #4]
 8009fbe:	2007      	movs	r0, #7
 8009fc0:	f7ff f992 	bl	80092e8 <memp_free>
 8009fc4:	e00d      	b.n	8009fe2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d103      	bne.n	8009fd4 <pbuf_free+0xc8>
          mem_free(p);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7fe fe6b 	bl	8008ca8 <mem_free>
 8009fd2:	e006      	b.n	8009fe2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009fd4:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <pbuf_free+0xf8>)
 8009fd6:	f240 320f 	movw	r2, #783	; 0x30f
 8009fda:	490f      	ldr	r1, [pc, #60]	; (800a018 <pbuf_free+0x10c>)
 8009fdc:	480b      	ldr	r0, [pc, #44]	; (800a00c <pbuf_free+0x100>)
 8009fde:	f009 fc53 	bl	8013888 <iprintf>
        }
      }
      count++;
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	607b      	str	r3, [r7, #4]
 8009fec:	e001      	b.n	8009ff2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d19f      	bne.n	8009f38 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	0801547c 	.word	0x0801547c
 800a008:	080155e0 	.word	0x080155e0
 800a00c:	080154dc 	.word	0x080154dc
 800a010:	0801560c 	.word	0x0801560c
 800a014:	08015624 	.word	0x08015624
 800a018:	08015648 	.word	0x08015648

0800a01c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a028:	e005      	b.n	800a036 <pbuf_clen+0x1a>
    ++len;
 800a02a:	89fb      	ldrh	r3, [r7, #14]
 800a02c:	3301      	adds	r3, #1
 800a02e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1f6      	bne.n	800a02a <pbuf_clen+0xe>
  }
  return len;
 800a03c:	89fb      	ldrh	r3, [r7, #14]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
	...

0800a04c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d010      	beq.n	800a07c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	7b9b      	ldrb	r3, [r3, #14]
 800a05e:	3301      	adds	r3, #1
 800a060:	b2da      	uxtb	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	7b9b      	ldrb	r3, [r3, #14]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <pbuf_ref+0x30>
 800a06e:	4b05      	ldr	r3, [pc, #20]	; (800a084 <pbuf_ref+0x38>)
 800a070:	f240 3242 	movw	r2, #834	; 0x342
 800a074:	4904      	ldr	r1, [pc, #16]	; (800a088 <pbuf_ref+0x3c>)
 800a076:	4805      	ldr	r0, [pc, #20]	; (800a08c <pbuf_ref+0x40>)
 800a078:	f009 fc06 	bl	8013888 <iprintf>
  }
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	0801547c 	.word	0x0801547c
 800a088:	0801565c 	.word	0x0801565c
 800a08c:	080154dc 	.word	0x080154dc

0800a090 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <pbuf_cat+0x16>
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d107      	bne.n	800a0b6 <pbuf_cat+0x26>
 800a0a6:	4b20      	ldr	r3, [pc, #128]	; (800a128 <pbuf_cat+0x98>)
 800a0a8:	f240 3259 	movw	r2, #857	; 0x359
 800a0ac:	491f      	ldr	r1, [pc, #124]	; (800a12c <pbuf_cat+0x9c>)
 800a0ae:	4820      	ldr	r0, [pc, #128]	; (800a130 <pbuf_cat+0xa0>)
 800a0b0:	f009 fbea 	bl	8013888 <iprintf>
 800a0b4:	e034      	b.n	800a120 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	e00a      	b.n	800a0d2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	891a      	ldrh	r2, [r3, #8]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	891b      	ldrh	r3, [r3, #8]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1f0      	bne.n	800a0bc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	891a      	ldrh	r2, [r3, #8]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	895b      	ldrh	r3, [r3, #10]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d006      	beq.n	800a0f4 <pbuf_cat+0x64>
 800a0e6:	4b10      	ldr	r3, [pc, #64]	; (800a128 <pbuf_cat+0x98>)
 800a0e8:	f240 3262 	movw	r2, #866	; 0x362
 800a0ec:	4911      	ldr	r1, [pc, #68]	; (800a134 <pbuf_cat+0xa4>)
 800a0ee:	4810      	ldr	r0, [pc, #64]	; (800a130 <pbuf_cat+0xa0>)
 800a0f0:	f009 fbca 	bl	8013888 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d006      	beq.n	800a10a <pbuf_cat+0x7a>
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	; (800a128 <pbuf_cat+0x98>)
 800a0fe:	f240 3263 	movw	r2, #867	; 0x363
 800a102:	490d      	ldr	r1, [pc, #52]	; (800a138 <pbuf_cat+0xa8>)
 800a104:	480a      	ldr	r0, [pc, #40]	; (800a130 <pbuf_cat+0xa0>)
 800a106:	f009 fbbf 	bl	8013888 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	891a      	ldrh	r2, [r3, #8]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	891b      	ldrh	r3, [r3, #8]
 800a112:	4413      	add	r3, r2
 800a114:	b29a      	uxth	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	0801547c 	.word	0x0801547c
 800a12c:	08015670 	.word	0x08015670
 800a130:	080154dc 	.word	0x080154dc
 800a134:	080156a8 	.word	0x080156a8
 800a138:	080156d8 	.word	0x080156d8

0800a13c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff ffa1 	bl	800a090 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a14e:	6838      	ldr	r0, [r7, #0]
 800a150:	f7ff ff7c 	bl	800a04c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a154:	bf00      	nop
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a166:	2300      	movs	r3, #0
 800a168:	617b      	str	r3, [r7, #20]
 800a16a:	2300      	movs	r3, #0
 800a16c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d008      	beq.n	800a186 <pbuf_copy+0x2a>
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d005      	beq.n	800a186 <pbuf_copy+0x2a>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	891a      	ldrh	r2, [r3, #8]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	891b      	ldrh	r3, [r3, #8]
 800a182:	429a      	cmp	r2, r3
 800a184:	d209      	bcs.n	800a19a <pbuf_copy+0x3e>
 800a186:	4b57      	ldr	r3, [pc, #348]	; (800a2e4 <pbuf_copy+0x188>)
 800a188:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a18c:	4956      	ldr	r1, [pc, #344]	; (800a2e8 <pbuf_copy+0x18c>)
 800a18e:	4857      	ldr	r0, [pc, #348]	; (800a2ec <pbuf_copy+0x190>)
 800a190:	f009 fb7a 	bl	8013888 <iprintf>
 800a194:	f06f 030f 	mvn.w	r3, #15
 800a198:	e09f      	b.n	800a2da <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	895b      	ldrh	r3, [r3, #10]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	1ad2      	subs	r2, r2, r3
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	895b      	ldrh	r3, [r3, #10]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	1acb      	subs	r3, r1, r3
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d306      	bcc.n	800a1c0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	895b      	ldrh	r3, [r3, #10]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	60fb      	str	r3, [r7, #12]
 800a1be:	e005      	b.n	800a1cc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	895b      	ldrh	r3, [r3, #10]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	18d0      	adds	r0, r2, r3
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	4413      	add	r3, r2
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	f009 fb22 	bl	8013828 <memcpy>
    offset_to += len;
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	895b      	ldrh	r3, [r3, #10]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d906      	bls.n	800a20e <pbuf_copy+0xb2>
 800a200:	4b38      	ldr	r3, [pc, #224]	; (800a2e4 <pbuf_copy+0x188>)
 800a202:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a206:	493a      	ldr	r1, [pc, #232]	; (800a2f0 <pbuf_copy+0x194>)
 800a208:	4838      	ldr	r0, [pc, #224]	; (800a2ec <pbuf_copy+0x190>)
 800a20a:	f009 fb3d 	bl	8013888 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	895b      	ldrh	r3, [r3, #10]
 800a212:	461a      	mov	r2, r3
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	4293      	cmp	r3, r2
 800a218:	d906      	bls.n	800a228 <pbuf_copy+0xcc>
 800a21a:	4b32      	ldr	r3, [pc, #200]	; (800a2e4 <pbuf_copy+0x188>)
 800a21c:	f240 32da 	movw	r2, #986	; 0x3da
 800a220:	4934      	ldr	r1, [pc, #208]	; (800a2f4 <pbuf_copy+0x198>)
 800a222:	4832      	ldr	r0, [pc, #200]	; (800a2ec <pbuf_copy+0x190>)
 800a224:	f009 fb30 	bl	8013888 <iprintf>
    if (offset_from >= p_from->len) {
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	895b      	ldrh	r3, [r3, #10]
 800a22c:	461a      	mov	r2, r3
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	4293      	cmp	r3, r2
 800a232:	d304      	bcc.n	800a23e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	895b      	ldrh	r3, [r3, #10]
 800a242:	461a      	mov	r2, r3
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	4293      	cmp	r3, r2
 800a248:	d114      	bne.n	800a274 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10c      	bne.n	800a274 <pbuf_copy+0x118>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d009      	beq.n	800a274 <pbuf_copy+0x118>
 800a260:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <pbuf_copy+0x188>)
 800a262:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a266:	4924      	ldr	r1, [pc, #144]	; (800a2f8 <pbuf_copy+0x19c>)
 800a268:	4820      	ldr	r0, [pc, #128]	; (800a2ec <pbuf_copy+0x190>)
 800a26a:	f009 fb0d 	bl	8013888 <iprintf>
 800a26e:	f06f 030f 	mvn.w	r3, #15
 800a272:	e032      	b.n	800a2da <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d013      	beq.n	800a2a2 <pbuf_copy+0x146>
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	895a      	ldrh	r2, [r3, #10]
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	891b      	ldrh	r3, [r3, #8]
 800a282:	429a      	cmp	r2, r3
 800a284:	d10d      	bne.n	800a2a2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d009      	beq.n	800a2a2 <pbuf_copy+0x146>
 800a28e:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <pbuf_copy+0x188>)
 800a290:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a294:	4919      	ldr	r1, [pc, #100]	; (800a2fc <pbuf_copy+0x1a0>)
 800a296:	4815      	ldr	r0, [pc, #84]	; (800a2ec <pbuf_copy+0x190>)
 800a298:	f009 faf6 	bl	8013888 <iprintf>
 800a29c:	f06f 0305 	mvn.w	r3, #5
 800a2a0:	e01b      	b.n	800a2da <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d013      	beq.n	800a2d0 <pbuf_copy+0x174>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	895a      	ldrh	r2, [r3, #10]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	891b      	ldrh	r3, [r3, #8]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d10d      	bne.n	800a2d0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d009      	beq.n	800a2d0 <pbuf_copy+0x174>
 800a2bc:	4b09      	ldr	r3, [pc, #36]	; (800a2e4 <pbuf_copy+0x188>)
 800a2be:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a2c2:	490e      	ldr	r1, [pc, #56]	; (800a2fc <pbuf_copy+0x1a0>)
 800a2c4:	4809      	ldr	r0, [pc, #36]	; (800a2ec <pbuf_copy+0x190>)
 800a2c6:	f009 fadf 	bl	8013888 <iprintf>
 800a2ca:	f06f 0305 	mvn.w	r3, #5
 800a2ce:	e004      	b.n	800a2da <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f47f af61 	bne.w	800a19a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	0801547c 	.word	0x0801547c
 800a2e8:	08015724 	.word	0x08015724
 800a2ec:	080154dc 	.word	0x080154dc
 800a2f0:	08015754 	.word	0x08015754
 800a2f4:	0801576c 	.word	0x0801576c
 800a2f8:	08015788 	.word	0x08015788
 800a2fc:	08015798 	.word	0x08015798

0800a300 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b088      	sub	sp, #32
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	4611      	mov	r1, r2
 800a30c:	461a      	mov	r2, r3
 800a30e:	460b      	mov	r3, r1
 800a310:	80fb      	strh	r3, [r7, #6]
 800a312:	4613      	mov	r3, r2
 800a314:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d108      	bne.n	800a336 <pbuf_copy_partial+0x36>
 800a324:	4b2b      	ldr	r3, [pc, #172]	; (800a3d4 <pbuf_copy_partial+0xd4>)
 800a326:	f240 420a 	movw	r2, #1034	; 0x40a
 800a32a:	492b      	ldr	r1, [pc, #172]	; (800a3d8 <pbuf_copy_partial+0xd8>)
 800a32c:	482b      	ldr	r0, [pc, #172]	; (800a3dc <pbuf_copy_partial+0xdc>)
 800a32e:	f009 faab 	bl	8013888 <iprintf>
 800a332:	2300      	movs	r3, #0
 800a334:	e04a      	b.n	800a3cc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d108      	bne.n	800a34e <pbuf_copy_partial+0x4e>
 800a33c:	4b25      	ldr	r3, [pc, #148]	; (800a3d4 <pbuf_copy_partial+0xd4>)
 800a33e:	f240 420b 	movw	r2, #1035	; 0x40b
 800a342:	4927      	ldr	r1, [pc, #156]	; (800a3e0 <pbuf_copy_partial+0xe0>)
 800a344:	4825      	ldr	r0, [pc, #148]	; (800a3dc <pbuf_copy_partial+0xdc>)
 800a346:	f009 fa9f 	bl	8013888 <iprintf>
 800a34a:	2300      	movs	r3, #0
 800a34c:	e03e      	b.n	800a3cc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	61fb      	str	r3, [r7, #28]
 800a352:	e034      	b.n	800a3be <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a354:	88bb      	ldrh	r3, [r7, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00a      	beq.n	800a370 <pbuf_copy_partial+0x70>
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	895b      	ldrh	r3, [r3, #10]
 800a35e:	88ba      	ldrh	r2, [r7, #4]
 800a360:	429a      	cmp	r2, r3
 800a362:	d305      	bcc.n	800a370 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	895b      	ldrh	r3, [r3, #10]
 800a368:	88ba      	ldrh	r2, [r7, #4]
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	80bb      	strh	r3, [r7, #4]
 800a36e:	e023      	b.n	800a3b8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	895a      	ldrh	r2, [r3, #10]
 800a374:	88bb      	ldrh	r3, [r7, #4]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a37a:	8b3a      	ldrh	r2, [r7, #24]
 800a37c:	88fb      	ldrh	r3, [r7, #6]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d901      	bls.n	800a386 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a382:	88fb      	ldrh	r3, [r7, #6]
 800a384:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a386:	8b7b      	ldrh	r3, [r7, #26]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	18d0      	adds	r0, r2, r3
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	88bb      	ldrh	r3, [r7, #4]
 800a392:	4413      	add	r3, r2
 800a394:	8b3a      	ldrh	r2, [r7, #24]
 800a396:	4619      	mov	r1, r3
 800a398:	f009 fa46 	bl	8013828 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a39c:	8afa      	ldrh	r2, [r7, #22]
 800a39e:	8b3b      	ldrh	r3, [r7, #24]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a3a4:	8b7a      	ldrh	r2, [r7, #26]
 800a3a6:	8b3b      	ldrh	r3, [r7, #24]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a3ac:	88fa      	ldrh	r2, [r7, #6]
 800a3ae:	8b3b      	ldrh	r3, [r7, #24]
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	61fb      	str	r3, [r7, #28]
 800a3be:	88fb      	ldrh	r3, [r7, #6]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <pbuf_copy_partial+0xca>
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1c4      	bne.n	800a354 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a3ca:	8afb      	ldrh	r3, [r7, #22]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3720      	adds	r7, #32
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	0801547c 	.word	0x0801547c
 800a3d8:	080157c4 	.word	0x080157c4
 800a3dc:	080154dc 	.word	0x080154dc
 800a3e0:	080157e4 	.word	0x080157e4

0800a3e4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800a3f2:	88fb      	ldrh	r3, [r7, #6]
 800a3f4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d109      	bne.n	800a414 <pbuf_take+0x30>
 800a400:	4b3a      	ldr	r3, [pc, #232]	; (800a4ec <pbuf_take+0x108>)
 800a402:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800a406:	493a      	ldr	r1, [pc, #232]	; (800a4f0 <pbuf_take+0x10c>)
 800a408:	483a      	ldr	r0, [pc, #232]	; (800a4f4 <pbuf_take+0x110>)
 800a40a:	f009 fa3d 	bl	8013888 <iprintf>
 800a40e:	f06f 030f 	mvn.w	r3, #15
 800a412:	e067      	b.n	800a4e4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <pbuf_take+0x4a>
 800a41a:	4b34      	ldr	r3, [pc, #208]	; (800a4ec <pbuf_take+0x108>)
 800a41c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800a420:	4935      	ldr	r1, [pc, #212]	; (800a4f8 <pbuf_take+0x114>)
 800a422:	4834      	ldr	r0, [pc, #208]	; (800a4f4 <pbuf_take+0x110>)
 800a424:	f009 fa30 	bl	8013888 <iprintf>
 800a428:	f06f 030f 	mvn.w	r3, #15
 800a42c:	e05a      	b.n	800a4e4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	891b      	ldrh	r3, [r3, #8]
 800a432:	88fa      	ldrh	r2, [r7, #6]
 800a434:	429a      	cmp	r2, r3
 800a436:	d909      	bls.n	800a44c <pbuf_take+0x68>
 800a438:	4b2c      	ldr	r3, [pc, #176]	; (800a4ec <pbuf_take+0x108>)
 800a43a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800a43e:	492f      	ldr	r1, [pc, #188]	; (800a4fc <pbuf_take+0x118>)
 800a440:	482c      	ldr	r0, [pc, #176]	; (800a4f4 <pbuf_take+0x110>)
 800a442:	f009 fa21 	bl	8013888 <iprintf>
 800a446:	f04f 33ff 	mov.w	r3, #4294967295
 800a44a:	e04b      	b.n	800a4e4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d007      	beq.n	800a462 <pbuf_take+0x7e>
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d004      	beq.n	800a462 <pbuf_take+0x7e>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	891b      	ldrh	r3, [r3, #8]
 800a45c:	88fa      	ldrh	r2, [r7, #6]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d902      	bls.n	800a468 <pbuf_take+0x84>
    return ERR_ARG;
 800a462:	f06f 030f 	mvn.w	r3, #15
 800a466:	e03d      	b.n	800a4e4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	61fb      	str	r3, [r7, #28]
 800a46c:	e028      	b.n	800a4c0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d106      	bne.n	800a482 <pbuf_take+0x9e>
 800a474:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <pbuf_take+0x108>)
 800a476:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800a47a:	4921      	ldr	r1, [pc, #132]	; (800a500 <pbuf_take+0x11c>)
 800a47c:	481d      	ldr	r0, [pc, #116]	; (800a4f4 <pbuf_take+0x110>)
 800a47e:	f009 fa03 	bl	8013888 <iprintf>
    buf_copy_len = total_copy_len;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	895b      	ldrh	r3, [r3, #10]
 800a48a:	461a      	mov	r2, r3
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	4293      	cmp	r3, r2
 800a490:	d902      	bls.n	800a498 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	895b      	ldrh	r3, [r3, #10]
 800a496:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	6858      	ldr	r0, [r3, #4]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	f009 f9bf 	bl	8013828 <memcpy>
    total_copy_len -= buf_copy_len;
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	61fb      	str	r3, [r7, #28]
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1d3      	bne.n	800a46e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d103      	bne.n	800a4d4 <pbuf_take+0xf0>
 800a4cc:	88fb      	ldrh	r3, [r7, #6]
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d006      	beq.n	800a4e2 <pbuf_take+0xfe>
 800a4d4:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <pbuf_take+0x108>)
 800a4d6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800a4da:	490a      	ldr	r1, [pc, #40]	; (800a504 <pbuf_take+0x120>)
 800a4dc:	4805      	ldr	r0, [pc, #20]	; (800a4f4 <pbuf_take+0x110>)
 800a4de:	f009 f9d3 	bl	8013888 <iprintf>
  return ERR_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3720      	adds	r7, #32
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	0801547c 	.word	0x0801547c
 800a4f0:	08015854 	.word	0x08015854
 800a4f4:	080154dc 	.word	0x080154dc
 800a4f8:	0801586c 	.word	0x0801586c
 800a4fc:	08015888 	.word	0x08015888
 800a500:	080158a8 	.word	0x080158a8
 800a504:	080158c0 	.word	0x080158c0

0800a508 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	603a      	str	r2, [r7, #0]
 800a512:	71fb      	strb	r3, [r7, #7]
 800a514:	460b      	mov	r3, r1
 800a516:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	8919      	ldrh	r1, [r3, #8]
 800a51c:	88ba      	ldrh	r2, [r7, #4]
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff fa0f 	bl	8009944 <pbuf_alloc>
 800a526:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <pbuf_clone+0x2a>
    return NULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	e011      	b.n	800a556 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f7ff fe11 	bl	800a15c <pbuf_copy>
 800a53a:	4603      	mov	r3, r0
 800a53c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a53e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d006      	beq.n	800a554 <pbuf_clone+0x4c>
 800a546:	4b06      	ldr	r3, [pc, #24]	; (800a560 <pbuf_clone+0x58>)
 800a548:	f240 5224 	movw	r2, #1316	; 0x524
 800a54c:	4905      	ldr	r1, [pc, #20]	; (800a564 <pbuf_clone+0x5c>)
 800a54e:	4806      	ldr	r0, [pc, #24]	; (800a568 <pbuf_clone+0x60>)
 800a550:	f009 f99a 	bl	8013888 <iprintf>
  return q;
 800a554:	68fb      	ldr	r3, [r7, #12]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	0801547c 	.word	0x0801547c
 800a564:	080158f0 	.word	0x080158f0
 800a568:	080154dc 	.word	0x080154dc

0800a56c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a570:	f009 f9a2 	bl	80138b8 <rand>
 800a574:	4603      	mov	r3, r0
 800a576:	b29b      	uxth	r3, r3
 800a578:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a582:	b29a      	uxth	r2, r3
 800a584:	4b01      	ldr	r3, [pc, #4]	; (800a58c <tcp_init+0x20>)
 800a586:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a588:	bf00      	nop
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	2000007a 	.word	0x2000007a

0800a590 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	7d1b      	ldrb	r3, [r3, #20]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d105      	bne.n	800a5ac <tcp_free+0x1c>
 800a5a0:	4b06      	ldr	r3, [pc, #24]	; (800a5bc <tcp_free+0x2c>)
 800a5a2:	22d4      	movs	r2, #212	; 0xd4
 800a5a4:	4906      	ldr	r1, [pc, #24]	; (800a5c0 <tcp_free+0x30>)
 800a5a6:	4807      	ldr	r0, [pc, #28]	; (800a5c4 <tcp_free+0x34>)
 800a5a8:	f009 f96e 	bl	8013888 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	2001      	movs	r0, #1
 800a5b0:	f7fe fe9a 	bl	80092e8 <memp_free>
}
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	0801597c 	.word	0x0801597c
 800a5c0:	080159ac 	.word	0x080159ac
 800a5c4:	080159c0 	.word	0x080159c0

0800a5c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	7d1b      	ldrb	r3, [r3, #20]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d105      	bne.n	800a5e4 <tcp_free_listen+0x1c>
 800a5d8:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <tcp_free_listen+0x2c>)
 800a5da:	22df      	movs	r2, #223	; 0xdf
 800a5dc:	4906      	ldr	r1, [pc, #24]	; (800a5f8 <tcp_free_listen+0x30>)
 800a5de:	4807      	ldr	r0, [pc, #28]	; (800a5fc <tcp_free_listen+0x34>)
 800a5e0:	f009 f952 	bl	8013888 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	2002      	movs	r0, #2
 800a5e8:	f7fe fe7e 	bl	80092e8 <memp_free>
}
 800a5ec:	bf00      	nop
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	0801597c 	.word	0x0801597c
 800a5f8:	080159e8 	.word	0x080159e8
 800a5fc:	080159c0 	.word	0x080159c0

0800a600 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a604:	f001 f85c 	bl	800b6c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a608:	4b07      	ldr	r3, [pc, #28]	; (800a628 <tcp_tmr+0x28>)
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	3301      	adds	r3, #1
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	4b05      	ldr	r3, [pc, #20]	; (800a628 <tcp_tmr+0x28>)
 800a612:	701a      	strb	r2, [r3, #0]
 800a614:	4b04      	ldr	r3, [pc, #16]	; (800a628 <tcp_tmr+0x28>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d001      	beq.n	800a624 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a620:	f000 fd0e 	bl	800b040 <tcp_slowtmr>
  }
}
 800a624:	bf00      	nop
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20000185 	.word	0x20000185

0800a62c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d105      	bne.n	800a648 <tcp_remove_listener+0x1c>
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <tcp_remove_listener+0x48>)
 800a63e:	22ff      	movs	r2, #255	; 0xff
 800a640:	490d      	ldr	r1, [pc, #52]	; (800a678 <tcp_remove_listener+0x4c>)
 800a642:	480e      	ldr	r0, [pc, #56]	; (800a67c <tcp_remove_listener+0x50>)
 800a644:	f009 f920 	bl	8013888 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	e00a      	b.n	800a664 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	429a      	cmp	r2, r3
 800a656:	d102      	bne.n	800a65e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1f1      	bne.n	800a64e <tcp_remove_listener+0x22>
    }
  }
}
 800a66a:	bf00      	nop
 800a66c:	bf00      	nop
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	0801597c 	.word	0x0801597c
 800a678:	08015a04 	.word	0x08015a04
 800a67c:	080159c0 	.word	0x080159c0

0800a680 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <tcp_listen_closed+0x1c>
 800a68e:	4b14      	ldr	r3, [pc, #80]	; (800a6e0 <tcp_listen_closed+0x60>)
 800a690:	f240 1211 	movw	r2, #273	; 0x111
 800a694:	4913      	ldr	r1, [pc, #76]	; (800a6e4 <tcp_listen_closed+0x64>)
 800a696:	4814      	ldr	r0, [pc, #80]	; (800a6e8 <tcp_listen_closed+0x68>)
 800a698:	f009 f8f6 	bl	8013888 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	7d1b      	ldrb	r3, [r3, #20]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d006      	beq.n	800a6b2 <tcp_listen_closed+0x32>
 800a6a4:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <tcp_listen_closed+0x60>)
 800a6a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a6aa:	4910      	ldr	r1, [pc, #64]	; (800a6ec <tcp_listen_closed+0x6c>)
 800a6ac:	480e      	ldr	r0, [pc, #56]	; (800a6e8 <tcp_listen_closed+0x68>)
 800a6ae:	f009 f8eb 	bl	8013888 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	60fb      	str	r3, [r7, #12]
 800a6b6:	e00b      	b.n	800a6d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a6b8:	4a0d      	ldr	r2, [pc, #52]	; (800a6f0 <tcp_listen_closed+0x70>)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	6879      	ldr	r1, [r7, #4]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff ffb1 	bl	800a62c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	60fb      	str	r3, [r7, #12]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d9f0      	bls.n	800a6b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a6d6:	bf00      	nop
 800a6d8:	bf00      	nop
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	0801597c 	.word	0x0801597c
 800a6e4:	08015a2c 	.word	0x08015a2c
 800a6e8:	080159c0 	.word	0x080159c0
 800a6ec:	08015a38 	.word	0x08015a38
 800a6f0:	08017a48 	.word	0x08017a48

0800a6f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a6f4:	b5b0      	push	{r4, r5, r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af04      	add	r7, sp, #16
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d106      	bne.n	800a714 <tcp_close_shutdown+0x20>
 800a706:	4b63      	ldr	r3, [pc, #396]	; (800a894 <tcp_close_shutdown+0x1a0>)
 800a708:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a70c:	4962      	ldr	r1, [pc, #392]	; (800a898 <tcp_close_shutdown+0x1a4>)
 800a70e:	4863      	ldr	r0, [pc, #396]	; (800a89c <tcp_close_shutdown+0x1a8>)
 800a710:	f009 f8ba 	bl	8013888 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d066      	beq.n	800a7e8 <tcp_close_shutdown+0xf4>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	7d1b      	ldrb	r3, [r3, #20]
 800a71e:	2b04      	cmp	r3, #4
 800a720:	d003      	beq.n	800a72a <tcp_close_shutdown+0x36>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	7d1b      	ldrb	r3, [r3, #20]
 800a726:	2b07      	cmp	r3, #7
 800a728:	d15e      	bne.n	800a7e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d104      	bne.n	800a73c <tcp_close_shutdown+0x48>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a736:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a73a:	d055      	beq.n	800a7e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	8b5b      	ldrh	r3, [r3, #26]
 800a740:	f003 0310 	and.w	r3, r3, #16
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <tcp_close_shutdown+0x62>
 800a748:	4b52      	ldr	r3, [pc, #328]	; (800a894 <tcp_close_shutdown+0x1a0>)
 800a74a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a74e:	4954      	ldr	r1, [pc, #336]	; (800a8a0 <tcp_close_shutdown+0x1ac>)
 800a750:	4852      	ldr	r0, [pc, #328]	; (800a89c <tcp_close_shutdown+0x1a8>)
 800a752:	f009 f899 	bl	8013888 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a75e:	687d      	ldr	r5, [r7, #4]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3304      	adds	r3, #4
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	8ad2      	ldrh	r2, [r2, #22]
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	8b09      	ldrh	r1, [r1, #24]
 800a76c:	9102      	str	r1, [sp, #8]
 800a76e:	9201      	str	r2, [sp, #4]
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	462b      	mov	r3, r5
 800a774:	4622      	mov	r2, r4
 800a776:	4601      	mov	r1, r0
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f005 fd85 	bl	8010288 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f001 fb66 	bl	800be50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a784:	4b47      	ldr	r3, [pc, #284]	; (800a8a4 <tcp_close_shutdown+0x1b0>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d105      	bne.n	800a79a <tcp_close_shutdown+0xa6>
 800a78e:	4b45      	ldr	r3, [pc, #276]	; (800a8a4 <tcp_close_shutdown+0x1b0>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	4a43      	ldr	r2, [pc, #268]	; (800a8a4 <tcp_close_shutdown+0x1b0>)
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	e013      	b.n	800a7c2 <tcp_close_shutdown+0xce>
 800a79a:	4b42      	ldr	r3, [pc, #264]	; (800a8a4 <tcp_close_shutdown+0x1b0>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	e00c      	b.n	800a7bc <tcp_close_shutdown+0xc8>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d104      	bne.n	800a7b6 <tcp_close_shutdown+0xc2>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68da      	ldr	r2, [r3, #12]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	60da      	str	r2, [r3, #12]
 800a7b4:	e005      	b.n	800a7c2 <tcp_close_shutdown+0xce>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	60fb      	str	r3, [r7, #12]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1ef      	bne.n	800a7a2 <tcp_close_shutdown+0xae>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	60da      	str	r2, [r3, #12]
 800a7c8:	4b37      	ldr	r3, [pc, #220]	; (800a8a8 <tcp_close_shutdown+0x1b4>)
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a7ce:	4b37      	ldr	r3, [pc, #220]	; (800a8ac <tcp_close_shutdown+0x1b8>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d102      	bne.n	800a7de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a7d8:	f003 fffa 	bl	800e7d0 <tcp_trigger_input_pcb_close>
 800a7dc:	e002      	b.n	800a7e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fed6 	bl	800a590 <tcp_free>
      }
      return ERR_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	e050      	b.n	800a88a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	7d1b      	ldrb	r3, [r3, #20]
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d03b      	beq.n	800a868 <tcp_close_shutdown+0x174>
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	dc44      	bgt.n	800a87e <tcp_close_shutdown+0x18a>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <tcp_close_shutdown+0x10a>
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d02a      	beq.n	800a852 <tcp_close_shutdown+0x15e>
 800a7fc:	e03f      	b.n	800a87e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	8adb      	ldrh	r3, [r3, #22]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d021      	beq.n	800a84a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a806:	4b2a      	ldr	r3, [pc, #168]	; (800a8b0 <tcp_close_shutdown+0x1bc>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d105      	bne.n	800a81c <tcp_close_shutdown+0x128>
 800a810:	4b27      	ldr	r3, [pc, #156]	; (800a8b0 <tcp_close_shutdown+0x1bc>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	4a26      	ldr	r2, [pc, #152]	; (800a8b0 <tcp_close_shutdown+0x1bc>)
 800a818:	6013      	str	r3, [r2, #0]
 800a81a:	e013      	b.n	800a844 <tcp_close_shutdown+0x150>
 800a81c:	4b24      	ldr	r3, [pc, #144]	; (800a8b0 <tcp_close_shutdown+0x1bc>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	60bb      	str	r3, [r7, #8]
 800a822:	e00c      	b.n	800a83e <tcp_close_shutdown+0x14a>
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d104      	bne.n	800a838 <tcp_close_shutdown+0x144>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	60da      	str	r2, [r3, #12]
 800a836:	e005      	b.n	800a844 <tcp_close_shutdown+0x150>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	60bb      	str	r3, [r7, #8]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1ef      	bne.n	800a824 <tcp_close_shutdown+0x130>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f7ff fea0 	bl	800a590 <tcp_free>
      break;
 800a850:	e01a      	b.n	800a888 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff ff14 	bl	800a680 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	4816      	ldr	r0, [pc, #88]	; (800a8b4 <tcp_close_shutdown+0x1c0>)
 800a85c:	f001 fb48 	bl	800bef0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f7ff feb1 	bl	800a5c8 <tcp_free_listen>
      break;
 800a866:	e00f      	b.n	800a888 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a868:	6879      	ldr	r1, [r7, #4]
 800a86a:	480e      	ldr	r0, [pc, #56]	; (800a8a4 <tcp_close_shutdown+0x1b0>)
 800a86c:	f001 fb40 	bl	800bef0 <tcp_pcb_remove>
 800a870:	4b0d      	ldr	r3, [pc, #52]	; (800a8a8 <tcp_close_shutdown+0x1b4>)
 800a872:	2201      	movs	r2, #1
 800a874:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f7ff fe8a 	bl	800a590 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a87c:	e004      	b.n	800a888 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f81a 	bl	800a8b8 <tcp_close_shutdown_fin>
 800a884:	4603      	mov	r3, r0
 800a886:	e000      	b.n	800a88a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bdb0      	pop	{r4, r5, r7, pc}
 800a892:	bf00      	nop
 800a894:	0801597c 	.word	0x0801597c
 800a898:	08015a50 	.word	0x08015a50
 800a89c:	080159c0 	.word	0x080159c0
 800a8a0:	08015a70 	.word	0x08015a70
 800a8a4:	20009f48 	.word	0x20009f48
 800a8a8:	20009f44 	.word	0x20009f44
 800a8ac:	20009f5c 	.word	0x20009f5c
 800a8b0:	20009f54 	.word	0x20009f54
 800a8b4:	20009f50 	.word	0x20009f50

0800a8b8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d106      	bne.n	800a8d4 <tcp_close_shutdown_fin+0x1c>
 800a8c6:	4b2e      	ldr	r3, [pc, #184]	; (800a980 <tcp_close_shutdown_fin+0xc8>)
 800a8c8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a8cc:	492d      	ldr	r1, [pc, #180]	; (800a984 <tcp_close_shutdown_fin+0xcc>)
 800a8ce:	482e      	ldr	r0, [pc, #184]	; (800a988 <tcp_close_shutdown_fin+0xd0>)
 800a8d0:	f008 ffda 	bl	8013888 <iprintf>

  switch (pcb->state) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	7d1b      	ldrb	r3, [r3, #20]
 800a8d8:	2b07      	cmp	r3, #7
 800a8da:	d020      	beq.n	800a91e <tcp_close_shutdown_fin+0x66>
 800a8dc:	2b07      	cmp	r3, #7
 800a8de:	dc2b      	bgt.n	800a938 <tcp_close_shutdown_fin+0x80>
 800a8e0:	2b03      	cmp	r3, #3
 800a8e2:	d002      	beq.n	800a8ea <tcp_close_shutdown_fin+0x32>
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d00d      	beq.n	800a904 <tcp_close_shutdown_fin+0x4c>
 800a8e8:	e026      	b.n	800a938 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f004 fdda 	bl	800f4a4 <tcp_send_fin>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d11f      	bne.n	800a93c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2205      	movs	r2, #5
 800a900:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a902:	e01b      	b.n	800a93c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f004 fdcd 	bl	800f4a4 <tcp_send_fin>
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d114      	bne.n	800a940 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2205      	movs	r2, #5
 800a91a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a91c:	e010      	b.n	800a940 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f004 fdc0 	bl	800f4a4 <tcp_send_fin>
 800a924:	4603      	mov	r3, r0
 800a926:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d109      	bne.n	800a944 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2209      	movs	r2, #9
 800a934:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a936:	e005      	b.n	800a944 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	e01c      	b.n	800a976 <tcp_close_shutdown_fin+0xbe>
      break;
 800a93c:	bf00      	nop
 800a93e:	e002      	b.n	800a946 <tcp_close_shutdown_fin+0x8e>
      break;
 800a940:	bf00      	nop
 800a942:	e000      	b.n	800a946 <tcp_close_shutdown_fin+0x8e>
      break;
 800a944:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d103      	bne.n	800a956 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f004 fee6 	bl	800f720 <tcp_output>
 800a954:	e00d      	b.n	800a972 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95e:	d108      	bne.n	800a972 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	8b5b      	ldrh	r3, [r3, #26]
 800a964:	f043 0308 	orr.w	r3, r3, #8
 800a968:	b29a      	uxth	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	e001      	b.n	800a976 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	0801597c 	.word	0x0801597c
 800a984:	08015a2c 	.word	0x08015a2c
 800a988:	080159c0 	.word	0x080159c0

0800a98c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d109      	bne.n	800a9ae <tcp_close+0x22>
 800a99a:	4b0f      	ldr	r3, [pc, #60]	; (800a9d8 <tcp_close+0x4c>)
 800a99c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a9a0:	490e      	ldr	r1, [pc, #56]	; (800a9dc <tcp_close+0x50>)
 800a9a2:	480f      	ldr	r0, [pc, #60]	; (800a9e0 <tcp_close+0x54>)
 800a9a4:	f008 ff70 	bl	8013888 <iprintf>
 800a9a8:	f06f 030f 	mvn.w	r3, #15
 800a9ac:	e00f      	b.n	800a9ce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	7d1b      	ldrb	r3, [r3, #20]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d006      	beq.n	800a9c4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	8b5b      	ldrh	r3, [r3, #26]
 800a9ba:	f043 0310 	orr.w	r3, r3, #16
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a9c4:	2101      	movs	r1, #1
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff fe94 	bl	800a6f4 <tcp_close_shutdown>
 800a9cc:	4603      	mov	r3, r0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0801597c 	.word	0x0801597c
 800a9dc:	08015a8c 	.word	0x08015a8c
 800a9e0:	080159c0 	.word	0x080159c0

0800a9e4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08e      	sub	sp, #56	; 0x38
 800a9e8:	af04      	add	r7, sp, #16
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d107      	bne.n	800aa04 <tcp_abandon+0x20>
 800a9f4:	4b52      	ldr	r3, [pc, #328]	; (800ab40 <tcp_abandon+0x15c>)
 800a9f6:	f240 223d 	movw	r2, #573	; 0x23d
 800a9fa:	4952      	ldr	r1, [pc, #328]	; (800ab44 <tcp_abandon+0x160>)
 800a9fc:	4852      	ldr	r0, [pc, #328]	; (800ab48 <tcp_abandon+0x164>)
 800a9fe:	f008 ff43 	bl	8013888 <iprintf>
 800aa02:	e099      	b.n	800ab38 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	7d1b      	ldrb	r3, [r3, #20]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d106      	bne.n	800aa1a <tcp_abandon+0x36>
 800aa0c:	4b4c      	ldr	r3, [pc, #304]	; (800ab40 <tcp_abandon+0x15c>)
 800aa0e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800aa12:	494e      	ldr	r1, [pc, #312]	; (800ab4c <tcp_abandon+0x168>)
 800aa14:	484c      	ldr	r0, [pc, #304]	; (800ab48 <tcp_abandon+0x164>)
 800aa16:	f008 ff37 	bl	8013888 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	7d1b      	ldrb	r3, [r3, #20]
 800aa1e:	2b0a      	cmp	r3, #10
 800aa20:	d107      	bne.n	800aa32 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800aa22:	6879      	ldr	r1, [r7, #4]
 800aa24:	484a      	ldr	r0, [pc, #296]	; (800ab50 <tcp_abandon+0x16c>)
 800aa26:	f001 fa63 	bl	800bef0 <tcp_pcb_remove>
    tcp_free(pcb);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff fdb0 	bl	800a590 <tcp_free>
 800aa30:	e082      	b.n	800ab38 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa44:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa4c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	7d1b      	ldrb	r3, [r3, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d126      	bne.n	800aaaa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8adb      	ldrh	r3, [r3, #22]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d02e      	beq.n	800aac2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800aa64:	4b3b      	ldr	r3, [pc, #236]	; (800ab54 <tcp_abandon+0x170>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d105      	bne.n	800aa7a <tcp_abandon+0x96>
 800aa6e:	4b39      	ldr	r3, [pc, #228]	; (800ab54 <tcp_abandon+0x170>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	4a37      	ldr	r2, [pc, #220]	; (800ab54 <tcp_abandon+0x170>)
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	e013      	b.n	800aaa2 <tcp_abandon+0xbe>
 800aa7a:	4b36      	ldr	r3, [pc, #216]	; (800ab54 <tcp_abandon+0x170>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	61fb      	str	r3, [r7, #28]
 800aa80:	e00c      	b.n	800aa9c <tcp_abandon+0xb8>
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d104      	bne.n	800aa96 <tcp_abandon+0xb2>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68da      	ldr	r2, [r3, #12]
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	60da      	str	r2, [r3, #12]
 800aa94:	e005      	b.n	800aaa2 <tcp_abandon+0xbe>
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	61fb      	str	r3, [r7, #28]
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1ef      	bne.n	800aa82 <tcp_abandon+0x9e>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	60da      	str	r2, [r3, #12]
 800aaa8:	e00b      	b.n	800aac2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	8adb      	ldrh	r3, [r3, #22]
 800aab2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	4828      	ldr	r0, [pc, #160]	; (800ab58 <tcp_abandon+0x174>)
 800aab8:	f001 fa1a 	bl	800bef0 <tcp_pcb_remove>
 800aabc:	4b27      	ldr	r3, [pc, #156]	; (800ab5c <tcp_abandon+0x178>)
 800aabe:	2201      	movs	r2, #1
 800aac0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d004      	beq.n	800aad4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fed6 	bl	800b880 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d004      	beq.n	800aae6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 fecd 	bl	800b880 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d004      	beq.n	800aaf8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 fec4 	bl	800b880 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00e      	beq.n	800ab1c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	3304      	adds	r3, #4
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	8b12      	ldrh	r2, [r2, #24]
 800ab08:	9202      	str	r2, [sp, #8]
 800ab0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab0c:	9201      	str	r2, [sp, #4]
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	460b      	mov	r3, r1
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	69b9      	ldr	r1, [r7, #24]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f005 fbb6 	bl	8010288 <tcp_rst>
    }
    last_state = pcb->state;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	7d1b      	ldrb	r3, [r3, #20]
 800ab20:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff fd34 	bl	800a590 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d004      	beq.n	800ab38 <tcp_abandon+0x154>
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f06f 010c 	mvn.w	r1, #12
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	4798      	blx	r3
  }
}
 800ab38:	3728      	adds	r7, #40	; 0x28
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	0801597c 	.word	0x0801597c
 800ab44:	08015ac0 	.word	0x08015ac0
 800ab48:	080159c0 	.word	0x080159c0
 800ab4c:	08015adc 	.word	0x08015adc
 800ab50:	20009f58 	.word	0x20009f58
 800ab54:	20009f54 	.word	0x20009f54
 800ab58:	20009f48 	.word	0x20009f48
 800ab5c:	20009f44 	.word	0x20009f44

0800ab60 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ab68:	2101      	movs	r1, #1
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff ff3a 	bl	800a9e4 <tcp_abandon>
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	4613      	mov	r3, r2
 800ab84:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ab86:	2304      	movs	r3, #4
 800ab88:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ab90:	4b3e      	ldr	r3, [pc, #248]	; (800ac8c <tcp_bind+0x114>)
 800ab92:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d109      	bne.n	800abae <tcp_bind+0x36>
 800ab9a:	4b3d      	ldr	r3, [pc, #244]	; (800ac90 <tcp_bind+0x118>)
 800ab9c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800aba0:	493c      	ldr	r1, [pc, #240]	; (800ac94 <tcp_bind+0x11c>)
 800aba2:	483d      	ldr	r0, [pc, #244]	; (800ac98 <tcp_bind+0x120>)
 800aba4:	f008 fe70 	bl	8013888 <iprintf>
 800aba8:	f06f 030f 	mvn.w	r3, #15
 800abac:	e06a      	b.n	800ac84 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	7d1b      	ldrb	r3, [r3, #20]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d009      	beq.n	800abca <tcp_bind+0x52>
 800abb6:	4b36      	ldr	r3, [pc, #216]	; (800ac90 <tcp_bind+0x118>)
 800abb8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800abbc:	4937      	ldr	r1, [pc, #220]	; (800ac9c <tcp_bind+0x124>)
 800abbe:	4836      	ldr	r0, [pc, #216]	; (800ac98 <tcp_bind+0x120>)
 800abc0:	f008 fe62 	bl	8013888 <iprintf>
 800abc4:	f06f 0305 	mvn.w	r3, #5
 800abc8:	e05c      	b.n	800ac84 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800abca:	88fb      	ldrh	r3, [r7, #6]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d109      	bne.n	800abe4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800abd0:	f000 f9f0 	bl	800afb4 <tcp_new_port>
 800abd4:	4603      	mov	r3, r0
 800abd6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800abd8:	88fb      	ldrh	r3, [r7, #6]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d135      	bne.n	800ac4a <tcp_bind+0xd2>
      return ERR_BUF;
 800abde:	f06f 0301 	mvn.w	r3, #1
 800abe2:	e04f      	b.n	800ac84 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800abe4:	2300      	movs	r3, #0
 800abe6:	61fb      	str	r3, [r7, #28]
 800abe8:	e02b      	b.n	800ac42 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800abea:	4a2d      	ldr	r2, [pc, #180]	; (800aca0 <tcp_bind+0x128>)
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	e01e      	b.n	800ac36 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	8adb      	ldrh	r3, [r3, #22]
 800abfc:	88fa      	ldrh	r2, [r7, #6]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d116      	bne.n	800ac30 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ac02:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d010      	beq.n	800ac2a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00c      	beq.n	800ac2a <tcp_bind+0xb2>
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d009      	beq.n	800ac2a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d005      	beq.n	800ac2a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d102      	bne.n	800ac30 <tcp_bind+0xb8>
              return ERR_USE;
 800ac2a:	f06f 0307 	mvn.w	r3, #7
 800ac2e:	e029      	b.n	800ac84 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	61bb      	str	r3, [r7, #24]
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1dd      	bne.n	800abf8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	61fb      	str	r3, [r7, #28]
 800ac42:	69fa      	ldr	r2, [r7, #28]
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	dbcf      	blt.n	800abea <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d00c      	beq.n	800ac6a <tcp_bind+0xf2>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d008      	beq.n	800ac6a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <tcp_bind+0xec>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	e000      	b.n	800ac66 <tcp_bind+0xee>
 800ac64:	2300      	movs	r3, #0
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	88fa      	ldrh	r2, [r7, #6]
 800ac6e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ac70:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <tcp_bind+0x12c>)
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	60da      	str	r2, [r3, #12]
 800ac78:	4a0a      	ldr	r2, [pc, #40]	; (800aca4 <tcp_bind+0x12c>)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6013      	str	r3, [r2, #0]
 800ac7e:	f005 fcc5 	bl	801060c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3720      	adds	r7, #32
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	08017a70 	.word	0x08017a70
 800ac90:	0801597c 	.word	0x0801597c
 800ac94:	08015b10 	.word	0x08015b10
 800ac98:	080159c0 	.word	0x080159c0
 800ac9c:	08015b28 	.word	0x08015b28
 800aca0:	08017a48 	.word	0x08017a48
 800aca4:	20009f54 	.word	0x20009f54

0800aca8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	4613      	mov	r3, r2
 800acb4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d106      	bne.n	800acca <tcp_accept_null+0x22>
 800acbc:	4b07      	ldr	r3, [pc, #28]	; (800acdc <tcp_accept_null+0x34>)
 800acbe:	f240 320f 	movw	r2, #783	; 0x30f
 800acc2:	4907      	ldr	r1, [pc, #28]	; (800ace0 <tcp_accept_null+0x38>)
 800acc4:	4807      	ldr	r0, [pc, #28]	; (800ace4 <tcp_accept_null+0x3c>)
 800acc6:	f008 fddf 	bl	8013888 <iprintf>

  tcp_abort(pcb);
 800acca:	68b8      	ldr	r0, [r7, #8]
 800accc:	f7ff ff48 	bl	800ab60 <tcp_abort>

  return ERR_ABRT;
 800acd0:	f06f 030c 	mvn.w	r3, #12
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	0801597c 	.word	0x0801597c
 800ace0:	08015b50 	.word	0x08015b50
 800ace4:	080159c0 	.word	0x080159c0

0800ace8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	2200      	movs	r2, #0
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f806 	bl	800ad0c <tcp_listen_with_backlog_and_err>
 800ad00:	4603      	mov	r3, r0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	460b      	mov	r3, r1
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d109      	bne.n	800ad38 <tcp_listen_with_backlog_and_err+0x2c>
 800ad24:	4b47      	ldr	r3, [pc, #284]	; (800ae44 <tcp_listen_with_backlog_and_err+0x138>)
 800ad26:	f240 3259 	movw	r2, #857	; 0x359
 800ad2a:	4947      	ldr	r1, [pc, #284]	; (800ae48 <tcp_listen_with_backlog_and_err+0x13c>)
 800ad2c:	4847      	ldr	r0, [pc, #284]	; (800ae4c <tcp_listen_with_backlog_and_err+0x140>)
 800ad2e:	f008 fdab 	bl	8013888 <iprintf>
 800ad32:	23f0      	movs	r3, #240	; 0xf0
 800ad34:	76fb      	strb	r3, [r7, #27]
 800ad36:	e079      	b.n	800ae2c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	7d1b      	ldrb	r3, [r3, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d009      	beq.n	800ad54 <tcp_listen_with_backlog_and_err+0x48>
 800ad40:	4b40      	ldr	r3, [pc, #256]	; (800ae44 <tcp_listen_with_backlog_and_err+0x138>)
 800ad42:	f240 325a 	movw	r2, #858	; 0x35a
 800ad46:	4942      	ldr	r1, [pc, #264]	; (800ae50 <tcp_listen_with_backlog_and_err+0x144>)
 800ad48:	4840      	ldr	r0, [pc, #256]	; (800ae4c <tcp_listen_with_backlog_and_err+0x140>)
 800ad4a:	f008 fd9d 	bl	8013888 <iprintf>
 800ad4e:	23f1      	movs	r3, #241	; 0xf1
 800ad50:	76fb      	strb	r3, [r7, #27]
 800ad52:	e06b      	b.n	800ae2c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	7d1b      	ldrb	r3, [r3, #20]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d104      	bne.n	800ad66 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ad60:	23f7      	movs	r3, #247	; 0xf7
 800ad62:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ad64:	e062      	b.n	800ae2c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ad66:	2002      	movs	r0, #2
 800ad68:	f7fe fa72 	bl	8009250 <memp_malloc>
 800ad6c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ad74:	23ff      	movs	r3, #255	; 0xff
 800ad76:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ad78:	e058      	b.n	800ae2c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	691a      	ldr	r2, [r3, #16]
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	8ada      	ldrh	r2, [r3, #22]
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	7d5a      	ldrb	r2, [r3, #21]
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	7a5a      	ldrb	r2, [r3, #9]
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	2200      	movs	r2, #0
 800ada4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	7ada      	ldrb	r2, [r3, #11]
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	7a9a      	ldrb	r2, [r3, #10]
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	8adb      	ldrh	r3, [r3, #22]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d021      	beq.n	800ae0a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800adc6:	4b23      	ldr	r3, [pc, #140]	; (800ae54 <tcp_listen_with_backlog_and_err+0x148>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d105      	bne.n	800addc <tcp_listen_with_backlog_and_err+0xd0>
 800add0:	4b20      	ldr	r3, [pc, #128]	; (800ae54 <tcp_listen_with_backlog_and_err+0x148>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	4a1f      	ldr	r2, [pc, #124]	; (800ae54 <tcp_listen_with_backlog_and_err+0x148>)
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	e013      	b.n	800ae04 <tcp_listen_with_backlog_and_err+0xf8>
 800addc:	4b1d      	ldr	r3, [pc, #116]	; (800ae54 <tcp_listen_with_backlog_and_err+0x148>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	617b      	str	r3, [r7, #20]
 800ade2:	e00c      	b.n	800adfe <tcp_listen_with_backlog_and_err+0xf2>
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	429a      	cmp	r2, r3
 800adec:	d104      	bne.n	800adf8 <tcp_listen_with_backlog_and_err+0xec>
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	60da      	str	r2, [r3, #12]
 800adf6:	e005      	b.n	800ae04 <tcp_listen_with_backlog_and_err+0xf8>
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	617b      	str	r3, [r7, #20]
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1ef      	bne.n	800ade4 <tcp_listen_with_backlog_and_err+0xd8>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7ff fbc0 	bl	800a590 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	4a11      	ldr	r2, [pc, #68]	; (800ae58 <tcp_listen_with_backlog_and_err+0x14c>)
 800ae14:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ae16:	4b11      	ldr	r3, [pc, #68]	; (800ae5c <tcp_listen_with_backlog_and_err+0x150>)
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	60da      	str	r2, [r3, #12]
 800ae1e:	4a0f      	ldr	r2, [pc, #60]	; (800ae5c <tcp_listen_with_backlog_and_err+0x150>)
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	f005 fbf2 	bl	801060c <tcp_timer_needed>
  res = ERR_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	7efa      	ldrb	r2, [r7, #27]
 800ae36:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ae38:	69fb      	ldr	r3, [r7, #28]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3720      	adds	r7, #32
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	0801597c 	.word	0x0801597c
 800ae48:	08015b70 	.word	0x08015b70
 800ae4c:	080159c0 	.word	0x080159c0
 800ae50:	08015ba0 	.word	0x08015ba0
 800ae54:	20009f54 	.word	0x20009f54
 800ae58:	0800aca9 	.word	0x0800aca9
 800ae5c:	20009f50 	.word	0x20009f50

0800ae60 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d106      	bne.n	800ae7c <tcp_update_rcv_ann_wnd+0x1c>
 800ae6e:	4b25      	ldr	r3, [pc, #148]	; (800af04 <tcp_update_rcv_ann_wnd+0xa4>)
 800ae70:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ae74:	4924      	ldr	r1, [pc, #144]	; (800af08 <tcp_update_rcv_ann_wnd+0xa8>)
 800ae76:	4825      	ldr	r0, [pc, #148]	; (800af0c <tcp_update_rcv_ann_wnd+0xac>)
 800ae78:	f008 fd06 	bl	8013888 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ae84:	4413      	add	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ae90:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ae94:	bf28      	it	cs
 800ae96:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ae9a:	b292      	uxth	r2, r2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	db08      	blt.n	800aeb8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	e020      	b.n	800aefa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	dd03      	ble.n	800aece <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aecc:	e014      	b.n	800aef8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aee0:	d306      	bcc.n	800aef0 <tcp_update_rcv_ann_wnd+0x90>
 800aee2:	4b08      	ldr	r3, [pc, #32]	; (800af04 <tcp_update_rcv_ann_wnd+0xa4>)
 800aee4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800aee8:	4909      	ldr	r1, [pc, #36]	; (800af10 <tcp_update_rcv_ann_wnd+0xb0>)
 800aeea:	4808      	ldr	r0, [pc, #32]	; (800af0c <tcp_update_rcv_ann_wnd+0xac>)
 800aeec:	f008 fccc 	bl	8013888 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800aef8:	2300      	movs	r3, #0
  }
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	0801597c 	.word	0x0801597c
 800af08:	08015bd8 	.word	0x08015bd8
 800af0c:	080159c0 	.word	0x080159c0
 800af10:	08015bfc 	.word	0x08015bfc

0800af14 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d107      	bne.n	800af36 <tcp_recved+0x22>
 800af26:	4b1f      	ldr	r3, [pc, #124]	; (800afa4 <tcp_recved+0x90>)
 800af28:	f240 32cf 	movw	r2, #975	; 0x3cf
 800af2c:	491e      	ldr	r1, [pc, #120]	; (800afa8 <tcp_recved+0x94>)
 800af2e:	481f      	ldr	r0, [pc, #124]	; (800afac <tcp_recved+0x98>)
 800af30:	f008 fcaa 	bl	8013888 <iprintf>
 800af34:	e032      	b.n	800af9c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	7d1b      	ldrb	r3, [r3, #20]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d106      	bne.n	800af4c <tcp_recved+0x38>
 800af3e:	4b19      	ldr	r3, [pc, #100]	; (800afa4 <tcp_recved+0x90>)
 800af40:	f240 32d2 	movw	r2, #978	; 0x3d2
 800af44:	491a      	ldr	r1, [pc, #104]	; (800afb0 <tcp_recved+0x9c>)
 800af46:	4819      	ldr	r0, [pc, #100]	; (800afac <tcp_recved+0x98>)
 800af48:	f008 fc9e 	bl	8013888 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af50:	887b      	ldrh	r3, [r7, #2]
 800af52:	4413      	add	r3, r2
 800af54:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800af56:	89fb      	ldrh	r3, [r7, #14]
 800af58:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800af5c:	d804      	bhi.n	800af68 <tcp_recved+0x54>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af62:	89fa      	ldrh	r2, [r7, #14]
 800af64:	429a      	cmp	r2, r3
 800af66:	d204      	bcs.n	800af72 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800af6e:	851a      	strh	r2, [r3, #40]	; 0x28
 800af70:	e002      	b.n	800af78 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	89fa      	ldrh	r2, [r7, #14]
 800af76:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff ff71 	bl	800ae60 <tcp_update_rcv_ann_wnd>
 800af7e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800af86:	d309      	bcc.n	800af9c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	8b5b      	ldrh	r3, [r3, #26]
 800af8c:	f043 0302 	orr.w	r3, r3, #2
 800af90:	b29a      	uxth	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f004 fbc2 	bl	800f720 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	0801597c 	.word	0x0801597c
 800afa8:	08015c18 	.word	0x08015c18
 800afac:	080159c0 	.word	0x080159c0
 800afb0:	08015c30 	.word	0x08015c30

0800afb4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800afba:	2300      	movs	r3, #0
 800afbc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800afbe:	4b1e      	ldr	r3, [pc, #120]	; (800b038 <tcp_new_port+0x84>)
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	3301      	adds	r3, #1
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <tcp_new_port+0x84>)
 800afc8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800afca:	4b1b      	ldr	r3, [pc, #108]	; (800b038 <tcp_new_port+0x84>)
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d103      	bne.n	800afde <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800afd6:	4b18      	ldr	r3, [pc, #96]	; (800b038 <tcp_new_port+0x84>)
 800afd8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800afdc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800afde:	2300      	movs	r3, #0
 800afe0:	71fb      	strb	r3, [r7, #7]
 800afe2:	e01e      	b.n	800b022 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	4a15      	ldr	r2, [pc, #84]	; (800b03c <tcp_new_port+0x88>)
 800afe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	e011      	b.n	800b016 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	8ada      	ldrh	r2, [r3, #22]
 800aff6:	4b10      	ldr	r3, [pc, #64]	; (800b038 <tcp_new_port+0x84>)
 800aff8:	881b      	ldrh	r3, [r3, #0]
 800affa:	429a      	cmp	r2, r3
 800affc:	d108      	bne.n	800b010 <tcp_new_port+0x5c>
        n++;
 800affe:	88bb      	ldrh	r3, [r7, #4]
 800b000:	3301      	adds	r3, #1
 800b002:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b004:	88bb      	ldrh	r3, [r7, #4]
 800b006:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b00a:	d3d8      	bcc.n	800afbe <tcp_new_port+0xa>
          return 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	e00d      	b.n	800b02c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	603b      	str	r3, [r7, #0]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1ea      	bne.n	800aff2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b01c:	79fb      	ldrb	r3, [r7, #7]
 800b01e:	3301      	adds	r3, #1
 800b020:	71fb      	strb	r3, [r7, #7]
 800b022:	79fb      	ldrb	r3, [r7, #7]
 800b024:	2b03      	cmp	r3, #3
 800b026:	d9dd      	bls.n	800afe4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b028:	4b03      	ldr	r3, [pc, #12]	; (800b038 <tcp_new_port+0x84>)
 800b02a:	881b      	ldrh	r3, [r3, #0]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	2000007a 	.word	0x2000007a
 800b03c:	08017a48 	.word	0x08017a48

0800b040 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b040:	b5b0      	push	{r4, r5, r7, lr}
 800b042:	b090      	sub	sp, #64	; 0x40
 800b044:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b04c:	4b94      	ldr	r3, [pc, #592]	; (800b2a0 <tcp_slowtmr+0x260>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	3301      	adds	r3, #1
 800b052:	4a93      	ldr	r2, [pc, #588]	; (800b2a0 <tcp_slowtmr+0x260>)
 800b054:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b056:	4b93      	ldr	r3, [pc, #588]	; (800b2a4 <tcp_slowtmr+0x264>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	3301      	adds	r3, #1
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	4b91      	ldr	r3, [pc, #580]	; (800b2a4 <tcp_slowtmr+0x264>)
 800b060:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b066:	4b90      	ldr	r3, [pc, #576]	; (800b2a8 <tcp_slowtmr+0x268>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b06c:	e29d      	b.n	800b5aa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b070:	7d1b      	ldrb	r3, [r3, #20]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <tcp_slowtmr+0x44>
 800b076:	4b8d      	ldr	r3, [pc, #564]	; (800b2ac <tcp_slowtmr+0x26c>)
 800b078:	f240 42be 	movw	r2, #1214	; 0x4be
 800b07c:	498c      	ldr	r1, [pc, #560]	; (800b2b0 <tcp_slowtmr+0x270>)
 800b07e:	488d      	ldr	r0, [pc, #564]	; (800b2b4 <tcp_slowtmr+0x274>)
 800b080:	f008 fc02 	bl	8013888 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b086:	7d1b      	ldrb	r3, [r3, #20]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d106      	bne.n	800b09a <tcp_slowtmr+0x5a>
 800b08c:	4b87      	ldr	r3, [pc, #540]	; (800b2ac <tcp_slowtmr+0x26c>)
 800b08e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b092:	4989      	ldr	r1, [pc, #548]	; (800b2b8 <tcp_slowtmr+0x278>)
 800b094:	4887      	ldr	r0, [pc, #540]	; (800b2b4 <tcp_slowtmr+0x274>)
 800b096:	f008 fbf7 	bl	8013888 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09c:	7d1b      	ldrb	r3, [r3, #20]
 800b09e:	2b0a      	cmp	r3, #10
 800b0a0:	d106      	bne.n	800b0b0 <tcp_slowtmr+0x70>
 800b0a2:	4b82      	ldr	r3, [pc, #520]	; (800b2ac <tcp_slowtmr+0x26c>)
 800b0a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b0a8:	4984      	ldr	r1, [pc, #528]	; (800b2bc <tcp_slowtmr+0x27c>)
 800b0aa:	4882      	ldr	r0, [pc, #520]	; (800b2b4 <tcp_slowtmr+0x274>)
 800b0ac:	f008 fbec 	bl	8013888 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b2:	7f9a      	ldrb	r2, [r3, #30]
 800b0b4:	4b7b      	ldr	r3, [pc, #492]	; (800b2a4 <tcp_slowtmr+0x264>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d105      	bne.n	800b0c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b0c6:	e270      	b.n	800b5aa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b0c8:	4b76      	ldr	r3, [pc, #472]	; (800b2a4 <tcp_slowtmr+0x264>)
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0de:	7d1b      	ldrb	r3, [r3, #20]
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d10a      	bne.n	800b0fa <tcp_slowtmr+0xba>
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0ea:	2b05      	cmp	r3, #5
 800b0ec:	d905      	bls.n	800b0fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0f8:	e11e      	b.n	800b338 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b100:	2b0b      	cmp	r3, #11
 800b102:	d905      	bls.n	800b110 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b108:	3301      	adds	r3, #1
 800b10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b10e:	e113      	b.n	800b338 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b116:	2b00      	cmp	r3, #0
 800b118:	d075      	beq.n	800b206 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d006      	beq.n	800b130 <tcp_slowtmr+0xf0>
 800b122:	4b62      	ldr	r3, [pc, #392]	; (800b2ac <tcp_slowtmr+0x26c>)
 800b124:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b128:	4965      	ldr	r1, [pc, #404]	; (800b2c0 <tcp_slowtmr+0x280>)
 800b12a:	4862      	ldr	r0, [pc, #392]	; (800b2b4 <tcp_slowtmr+0x274>)
 800b12c:	f008 fbac 	bl	8013888 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d106      	bne.n	800b146 <tcp_slowtmr+0x106>
 800b138:	4b5c      	ldr	r3, [pc, #368]	; (800b2ac <tcp_slowtmr+0x26c>)
 800b13a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b13e:	4961      	ldr	r1, [pc, #388]	; (800b2c4 <tcp_slowtmr+0x284>)
 800b140:	485c      	ldr	r0, [pc, #368]	; (800b2b4 <tcp_slowtmr+0x274>)
 800b142:	f008 fba1 	bl	8013888 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b148:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b14c:	2b0b      	cmp	r3, #11
 800b14e:	d905      	bls.n	800b15c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b154:	3301      	adds	r3, #1
 800b156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b15a:	e0ed      	b.n	800b338 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b162:	3b01      	subs	r3, #1
 800b164:	4a58      	ldr	r2, [pc, #352]	; (800b2c8 <tcp_slowtmr+0x288>)
 800b166:	5cd3      	ldrb	r3, [r2, r3]
 800b168:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b170:	7c7a      	ldrb	r2, [r7, #17]
 800b172:	429a      	cmp	r2, r3
 800b174:	d907      	bls.n	800b186 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b178:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b17c:	3301      	adds	r3, #1
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b182:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b188:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b18c:	7c7a      	ldrb	r2, [r7, #17]
 800b18e:	429a      	cmp	r2, r3
 800b190:	f200 80d2 	bhi.w	800b338 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b194:	2301      	movs	r3, #1
 800b196:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d108      	bne.n	800b1b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b1a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1a4:	f005 f964 	bl	8010470 <tcp_zero_window_probe>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d014      	beq.n	800b1d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	623b      	str	r3, [r7, #32]
 800b1b2:	e011      	b.n	800b1d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1be:	f004 f829 	bl	800f214 <tcp_split_unsent_seg>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d107      	bne.n	800b1d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b1c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1ca:	f004 faa9 	bl	800f720 <tcp_output>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 80ac 	beq.w	800b338 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b1ee:	2b06      	cmp	r3, #6
 800b1f0:	f200 80a2 	bhi.w	800b338 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b200:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b204:	e098      	b.n	800b338 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b208:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	db0f      	blt.n	800b230 <tcp_slowtmr+0x1f0>
 800b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b212:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b216:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d008      	beq.n	800b230 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b224:	b29b      	uxth	r3, r3
 800b226:	3301      	adds	r3, #1
 800b228:	b29b      	uxth	r3, r3
 800b22a:	b21a      	sxth	r2, r3
 800b22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b232:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b238:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b23c:	429a      	cmp	r2, r3
 800b23e:	db7b      	blt.n	800b338 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b242:	f004 fd5f 	bl	800fd04 <tcp_rexmit_rto_prepare>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d007      	beq.n	800b25c <tcp_slowtmr+0x21c>
 800b24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b250:	2b00      	cmp	r3, #0
 800b252:	d171      	bne.n	800b338 <tcp_slowtmr+0x2f8>
 800b254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d06d      	beq.n	800b338 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25e:	7d1b      	ldrb	r3, [r3, #20]
 800b260:	2b02      	cmp	r3, #2
 800b262:	d03a      	beq.n	800b2da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b26a:	2b0c      	cmp	r3, #12
 800b26c:	bf28      	it	cs
 800b26e:	230c      	movcs	r3, #12
 800b270:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b274:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b278:	10db      	asrs	r3, r3, #3
 800b27a:	b21b      	sxth	r3, r3
 800b27c:	461a      	mov	r2, r3
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b284:	4413      	add	r3, r2
 800b286:	7efa      	ldrb	r2, [r7, #27]
 800b288:	4910      	ldr	r1, [pc, #64]	; (800b2cc <tcp_slowtmr+0x28c>)
 800b28a:	5c8a      	ldrb	r2, [r1, r2]
 800b28c:	4093      	lsls	r3, r2
 800b28e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b296:	4293      	cmp	r3, r2
 800b298:	dc1a      	bgt.n	800b2d0 <tcp_slowtmr+0x290>
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	b21a      	sxth	r2, r3
 800b29e:	e019      	b.n	800b2d4 <tcp_slowtmr+0x294>
 800b2a0:	20009f4c 	.word	0x20009f4c
 800b2a4:	20000186 	.word	0x20000186
 800b2a8:	20009f48 	.word	0x20009f48
 800b2ac:	0801597c 	.word	0x0801597c
 800b2b0:	08015cc0 	.word	0x08015cc0
 800b2b4:	080159c0 	.word	0x080159c0
 800b2b8:	08015cec 	.word	0x08015cec
 800b2bc:	08015d18 	.word	0x08015d18
 800b2c0:	08015d48 	.word	0x08015d48
 800b2c4:	08015d7c 	.word	0x08015d7c
 800b2c8:	08017a40 	.word	0x08017a40
 800b2cc:	08017a30 	.word	0x08017a30
 800b2d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	2200      	movs	r2, #0
 800b2de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	bf28      	it	cs
 800b2f0:	4613      	movcs	r3, r2
 800b2f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b2f4:	8a7b      	ldrh	r3, [r7, #18]
 800b2f6:	085b      	lsrs	r3, r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	429a      	cmp	r2, r3
 800b310:	d206      	bcs.n	800b320 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b316:	005b      	lsls	r3, r3, #1
 800b318:	b29a      	uxth	r2, r3
 800b31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b322:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32c:	2200      	movs	r2, #0
 800b32e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b334:	f004 fd56 	bl	800fde4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33a:	7d1b      	ldrb	r3, [r3, #20]
 800b33c:	2b06      	cmp	r3, #6
 800b33e:	d111      	bne.n	800b364 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	8b5b      	ldrh	r3, [r3, #26]
 800b344:	f003 0310 	and.w	r3, r3, #16
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00b      	beq.n	800b364 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b34c:	4b9c      	ldr	r3, [pc, #624]	; (800b5c0 <tcp_slowtmr+0x580>)
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	2b28      	cmp	r3, #40	; 0x28
 800b358:	d904      	bls.n	800b364 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b35a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b35e:	3301      	adds	r3, #1
 800b360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b366:	7a5b      	ldrb	r3, [r3, #9]
 800b368:	f003 0308 	and.w	r3, r3, #8
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d04a      	beq.n	800b406 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800b370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b372:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b374:	2b04      	cmp	r3, #4
 800b376:	d003      	beq.n	800b380 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b37c:	2b07      	cmp	r3, #7
 800b37e:	d142      	bne.n	800b406 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b380:	4b8f      	ldr	r3, [pc, #572]	; (800b5c0 <tcp_slowtmr+0x580>)
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b386:	6a1b      	ldr	r3, [r3, #32]
 800b388:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b390:	4b8c      	ldr	r3, [pc, #560]	; (800b5c4 <tcp_slowtmr+0x584>)
 800b392:	440b      	add	r3, r1
 800b394:	498c      	ldr	r1, [pc, #560]	; (800b5c8 <tcp_slowtmr+0x588>)
 800b396:	fba1 1303 	umull	r1, r3, r1, r3
 800b39a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d90a      	bls.n	800b3b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b3aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b3b4:	e027      	b.n	800b406 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3b6:	4b82      	ldr	r3, [pc, #520]	; (800b5c0 <tcp_slowtmr+0x580>)
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	4b7f      	ldr	r3, [pc, #508]	; (800b5cc <tcp_slowtmr+0x58c>)
 800b3d0:	fb03 f300 	mul.w	r3, r3, r0
 800b3d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b3d6:	497c      	ldr	r1, [pc, #496]	; (800b5c8 <tcp_slowtmr+0x588>)
 800b3d8:	fba1 1303 	umull	r1, r3, r1, r3
 800b3dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d911      	bls.n	800b406 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800b3e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3e4:	f005 f804 	bl	80103f0 <tcp_keepalive>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b3ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d107      	bne.n	800b406 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800b3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d011      	beq.n	800b432 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b40e:	4b6c      	ldr	r3, [pc, #432]	; (800b5c0 <tcp_slowtmr+0x580>)
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	1ad2      	subs	r2, r2, r3
 800b418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b41e:	4619      	mov	r1, r3
 800b420:	460b      	mov	r3, r1
 800b422:	005b      	lsls	r3, r3, #1
 800b424:	440b      	add	r3, r1
 800b426:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b428:	429a      	cmp	r2, r3
 800b42a:	d302      	bcc.n	800b432 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b42c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b42e:	f000 fec3 	bl	800c1b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b434:	7d1b      	ldrb	r3, [r3, #20]
 800b436:	2b03      	cmp	r3, #3
 800b438:	d10b      	bne.n	800b452 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b43a:	4b61      	ldr	r3, [pc, #388]	; (800b5c0 <tcp_slowtmr+0x580>)
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	2b28      	cmp	r3, #40	; 0x28
 800b446:	d904      	bls.n	800b452 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b44c:	3301      	adds	r3, #1
 800b44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	7d1b      	ldrb	r3, [r3, #20]
 800b456:	2b09      	cmp	r3, #9
 800b458:	d10b      	bne.n	800b472 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b45a:	4b59      	ldr	r3, [pc, #356]	; (800b5c0 <tcp_slowtmr+0x580>)
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	2bf0      	cmp	r3, #240	; 0xf0
 800b466:	d904      	bls.n	800b472 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800b468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b46c:	3301      	adds	r3, #1
 800b46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b476:	2b00      	cmp	r3, #0
 800b478:	d060      	beq.n	800b53c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b480:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b484:	f000 fce4 	bl	800be50 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d010      	beq.n	800b4b0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b48e:	4b50      	ldr	r3, [pc, #320]	; (800b5d0 <tcp_slowtmr+0x590>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b494:	429a      	cmp	r2, r3
 800b496:	d106      	bne.n	800b4a6 <tcp_slowtmr+0x466>
 800b498:	4b4e      	ldr	r3, [pc, #312]	; (800b5d4 <tcp_slowtmr+0x594>)
 800b49a:	f240 526d 	movw	r2, #1389	; 0x56d
 800b49e:	494e      	ldr	r1, [pc, #312]	; (800b5d8 <tcp_slowtmr+0x598>)
 800b4a0:	484e      	ldr	r0, [pc, #312]	; (800b5dc <tcp_slowtmr+0x59c>)
 800b4a2:	f008 f9f1 	bl	8013888 <iprintf>
        prev->next = pcb->next;
 800b4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a8:	68da      	ldr	r2, [r3, #12]
 800b4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ac:	60da      	str	r2, [r3, #12]
 800b4ae:	e00f      	b.n	800b4d0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b4b0:	4b47      	ldr	r3, [pc, #284]	; (800b5d0 <tcp_slowtmr+0x590>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d006      	beq.n	800b4c8 <tcp_slowtmr+0x488>
 800b4ba:	4b46      	ldr	r3, [pc, #280]	; (800b5d4 <tcp_slowtmr+0x594>)
 800b4bc:	f240 5271 	movw	r2, #1393	; 0x571
 800b4c0:	4947      	ldr	r1, [pc, #284]	; (800b5e0 <tcp_slowtmr+0x5a0>)
 800b4c2:	4846      	ldr	r0, [pc, #280]	; (800b5dc <tcp_slowtmr+0x59c>)
 800b4c4:	f008 f9e0 	bl	8013888 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	4a40      	ldr	r2, [pc, #256]	; (800b5d0 <tcp_slowtmr+0x590>)
 800b4ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b4d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d013      	beq.n	800b500 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b4e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4e8:	8ad2      	ldrh	r2, [r2, #22]
 800b4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4ec:	8b09      	ldrh	r1, [r1, #24]
 800b4ee:	9102      	str	r1, [sp, #8]
 800b4f0:	9201      	str	r2, [sp, #4]
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	462b      	mov	r3, r5
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4fc:	f004 fec4 	bl	8010288 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b508:	7d1b      	ldrb	r3, [r3, #20]
 800b50a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b516:	6838      	ldr	r0, [r7, #0]
 800b518:	f7ff f83a 	bl	800a590 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b51c:	4b31      	ldr	r3, [pc, #196]	; (800b5e4 <tcp_slowtmr+0x5a4>)
 800b51e:	2200      	movs	r2, #0
 800b520:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d004      	beq.n	800b532 <tcp_slowtmr+0x4f2>
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f06f 010c 	mvn.w	r1, #12
 800b52e:	68b8      	ldr	r0, [r7, #8]
 800b530:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b532:	4b2c      	ldr	r3, [pc, #176]	; (800b5e4 <tcp_slowtmr+0x5a4>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d037      	beq.n	800b5aa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800b53a:	e592      	b.n	800b062 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b548:	7f1b      	ldrb	r3, [r3, #28]
 800b54a:	3301      	adds	r3, #1
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b550:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b554:	7f1a      	ldrb	r2, [r3, #28]
 800b556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b558:	7f5b      	ldrb	r3, [r3, #29]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d325      	bcc.n	800b5aa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	2200      	movs	r2, #0
 800b562:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b564:	4b1f      	ldr	r3, [pc, #124]	; (800b5e4 <tcp_slowtmr+0x5a4>)
 800b566:	2200      	movs	r2, #0
 800b568:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00b      	beq.n	800b58c <tcp_slowtmr+0x54c>
 800b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b57c:	6912      	ldr	r2, [r2, #16]
 800b57e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b580:	4610      	mov	r0, r2
 800b582:	4798      	blx	r3
 800b584:	4603      	mov	r3, r0
 800b586:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b58a:	e002      	b.n	800b592 <tcp_slowtmr+0x552>
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b592:	4b14      	ldr	r3, [pc, #80]	; (800b5e4 <tcp_slowtmr+0x5a4>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d000      	beq.n	800b59c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800b59a:	e562      	b.n	800b062 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b59c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d102      	bne.n	800b5aa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800b5a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5a6:	f004 f8bb 	bl	800f720 <tcp_output>
  while (pcb != NULL) {
 800b5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f47f ad5e 	bne.w	800b06e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b5b6:	4b0c      	ldr	r3, [pc, #48]	; (800b5e8 <tcp_slowtmr+0x5a8>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b5bc:	e069      	b.n	800b692 <tcp_slowtmr+0x652>
 800b5be:	bf00      	nop
 800b5c0:	20009f4c 	.word	0x20009f4c
 800b5c4:	000a4cb8 	.word	0x000a4cb8
 800b5c8:	10624dd3 	.word	0x10624dd3
 800b5cc:	000124f8 	.word	0x000124f8
 800b5d0:	20009f48 	.word	0x20009f48
 800b5d4:	0801597c 	.word	0x0801597c
 800b5d8:	08015db4 	.word	0x08015db4
 800b5dc:	080159c0 	.word	0x080159c0
 800b5e0:	08015de0 	.word	0x08015de0
 800b5e4:	20009f44 	.word	0x20009f44
 800b5e8:	20009f58 	.word	0x20009f58
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ee:	7d1b      	ldrb	r3, [r3, #20]
 800b5f0:	2b0a      	cmp	r3, #10
 800b5f2:	d006      	beq.n	800b602 <tcp_slowtmr+0x5c2>
 800b5f4:	4b2b      	ldr	r3, [pc, #172]	; (800b6a4 <tcp_slowtmr+0x664>)
 800b5f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b5fa:	492b      	ldr	r1, [pc, #172]	; (800b6a8 <tcp_slowtmr+0x668>)
 800b5fc:	482b      	ldr	r0, [pc, #172]	; (800b6ac <tcp_slowtmr+0x66c>)
 800b5fe:	f008 f943 	bl	8013888 <iprintf>
    pcb_remove = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b608:	4b29      	ldr	r3, [pc, #164]	; (800b6b0 <tcp_slowtmr+0x670>)
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	2bf0      	cmp	r3, #240	; 0xf0
 800b614:	d904      	bls.n	800b620 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b61a:	3301      	adds	r3, #1
 800b61c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b624:	2b00      	cmp	r3, #0
 800b626:	d02f      	beq.n	800b688 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b62a:	f000 fc11 	bl	800be50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b630:	2b00      	cmp	r3, #0
 800b632:	d010      	beq.n	800b656 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b634:	4b1f      	ldr	r3, [pc, #124]	; (800b6b4 <tcp_slowtmr+0x674>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d106      	bne.n	800b64c <tcp_slowtmr+0x60c>
 800b63e:	4b19      	ldr	r3, [pc, #100]	; (800b6a4 <tcp_slowtmr+0x664>)
 800b640:	f240 52af 	movw	r2, #1455	; 0x5af
 800b644:	491c      	ldr	r1, [pc, #112]	; (800b6b8 <tcp_slowtmr+0x678>)
 800b646:	4819      	ldr	r0, [pc, #100]	; (800b6ac <tcp_slowtmr+0x66c>)
 800b648:	f008 f91e 	bl	8013888 <iprintf>
        prev->next = pcb->next;
 800b64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64e:	68da      	ldr	r2, [r3, #12]
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	60da      	str	r2, [r3, #12]
 800b654:	e00f      	b.n	800b676 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b656:	4b17      	ldr	r3, [pc, #92]	; (800b6b4 <tcp_slowtmr+0x674>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d006      	beq.n	800b66e <tcp_slowtmr+0x62e>
 800b660:	4b10      	ldr	r3, [pc, #64]	; (800b6a4 <tcp_slowtmr+0x664>)
 800b662:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b666:	4915      	ldr	r1, [pc, #84]	; (800b6bc <tcp_slowtmr+0x67c>)
 800b668:	4810      	ldr	r0, [pc, #64]	; (800b6ac <tcp_slowtmr+0x66c>)
 800b66a:	f008 f90d 	bl	8013888 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	4a10      	ldr	r2, [pc, #64]	; (800b6b4 <tcp_slowtmr+0x674>)
 800b674:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b680:	69f8      	ldr	r0, [r7, #28]
 800b682:	f7fe ff85 	bl	800a590 <tcp_free>
 800b686:	e004      	b.n	800b692 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1a9      	bne.n	800b5ec <tcp_slowtmr+0x5ac>
    }
  }
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	3730      	adds	r7, #48	; 0x30
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	0801597c 	.word	0x0801597c
 800b6a8:	08015e0c 	.word	0x08015e0c
 800b6ac:	080159c0 	.word	0x080159c0
 800b6b0:	20009f4c 	.word	0x20009f4c
 800b6b4:	20009f58 	.word	0x20009f58
 800b6b8:	08015e3c 	.word	0x08015e3c
 800b6bc:	08015e64 	.word	0x08015e64

0800b6c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b6c6:	4b2d      	ldr	r3, [pc, #180]	; (800b77c <tcp_fasttmr+0xbc>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	4b2b      	ldr	r3, [pc, #172]	; (800b77c <tcp_fasttmr+0xbc>)
 800b6d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b6d2:	4b2b      	ldr	r3, [pc, #172]	; (800b780 <tcp_fasttmr+0xc0>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b6d8:	e048      	b.n	800b76c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7f9a      	ldrb	r2, [r3, #30]
 800b6de:	4b27      	ldr	r3, [pc, #156]	; (800b77c <tcp_fasttmr+0xbc>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d03f      	beq.n	800b766 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b6e6:	4b25      	ldr	r3, [pc, #148]	; (800b77c <tcp_fasttmr+0xbc>)
 800b6e8:	781a      	ldrb	r2, [r3, #0]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	8b5b      	ldrh	r3, [r3, #26]
 800b6f2:	f003 0301 	and.w	r3, r3, #1
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d010      	beq.n	800b71c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	8b5b      	ldrh	r3, [r3, #26]
 800b6fe:	f043 0302 	orr.w	r3, r3, #2
 800b702:	b29a      	uxth	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f004 f809 	bl	800f720 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	8b5b      	ldrh	r3, [r3, #26]
 800b712:	f023 0303 	bic.w	r3, r3, #3
 800b716:	b29a      	uxth	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	8b5b      	ldrh	r3, [r3, #26]
 800b720:	f003 0308 	and.w	r3, r3, #8
 800b724:	2b00      	cmp	r3, #0
 800b726:	d009      	beq.n	800b73c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	8b5b      	ldrh	r3, [r3, #26]
 800b72c:	f023 0308 	bic.w	r3, r3, #8
 800b730:	b29a      	uxth	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7ff f8be 	bl	800a8b8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00a      	beq.n	800b760 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b74a:	4b0e      	ldr	r3, [pc, #56]	; (800b784 <tcp_fasttmr+0xc4>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f819 	bl	800b788 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b756:	4b0b      	ldr	r3, [pc, #44]	; (800b784 <tcp_fasttmr+0xc4>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d000      	beq.n	800b760 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b75e:	e7b8      	b.n	800b6d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	607b      	str	r3, [r7, #4]
 800b764:	e002      	b.n	800b76c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1b3      	bne.n	800b6da <tcp_fasttmr+0x1a>
    }
  }
}
 800b772:	bf00      	nop
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	20000186 	.word	0x20000186
 800b780:	20009f48 	.word	0x20009f48
 800b784:	20009f44 	.word	0x20009f44

0800b788 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b788:	b590      	push	{r4, r7, lr}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d109      	bne.n	800b7aa <tcp_process_refused_data+0x22>
 800b796:	4b37      	ldr	r3, [pc, #220]	; (800b874 <tcp_process_refused_data+0xec>)
 800b798:	f240 6209 	movw	r2, #1545	; 0x609
 800b79c:	4936      	ldr	r1, [pc, #216]	; (800b878 <tcp_process_refused_data+0xf0>)
 800b79e:	4837      	ldr	r0, [pc, #220]	; (800b87c <tcp_process_refused_data+0xf4>)
 800b7a0:	f008 f872 	bl	8013888 <iprintf>
 800b7a4:	f06f 030f 	mvn.w	r3, #15
 800b7a8:	e060      	b.n	800b86c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7ae:	7b5b      	ldrb	r3, [r3, #13]
 800b7b0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7b6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00b      	beq.n	800b7e0 <tcp_process_refused_data+0x58>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6918      	ldr	r0, [r3, #16]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	47a0      	blx	r4
 800b7da:	4603      	mov	r3, r0
 800b7dc:	73fb      	strb	r3, [r7, #15]
 800b7de:	e007      	b.n	800b7f0 <tcp_process_refused_data+0x68>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	f000 f8c2 	bl	800b970 <tcp_recv_null>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d12a      	bne.n	800b84e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b7f8:	7bbb      	ldrb	r3, [r7, #14]
 800b7fa:	f003 0320 	and.w	r3, r3, #32
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d033      	beq.n	800b86a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b806:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b80a:	d005      	beq.n	800b818 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b810:	3301      	adds	r3, #1
 800b812:	b29a      	uxth	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00b      	beq.n	800b83a <tcp_process_refused_data+0xb2>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6918      	ldr	r0, [r3, #16]
 800b82c:	2300      	movs	r3, #0
 800b82e:	2200      	movs	r2, #0
 800b830:	6879      	ldr	r1, [r7, #4]
 800b832:	47a0      	blx	r4
 800b834:	4603      	mov	r3, r0
 800b836:	73fb      	strb	r3, [r7, #15]
 800b838:	e001      	b.n	800b83e <tcp_process_refused_data+0xb6>
 800b83a:	2300      	movs	r3, #0
 800b83c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b842:	f113 0f0d 	cmn.w	r3, #13
 800b846:	d110      	bne.n	800b86a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b848:	f06f 030c 	mvn.w	r3, #12
 800b84c:	e00e      	b.n	800b86c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b852:	f113 0f0d 	cmn.w	r3, #13
 800b856:	d102      	bne.n	800b85e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b858:	f06f 030c 	mvn.w	r3, #12
 800b85c:	e006      	b.n	800b86c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b864:	f06f 0304 	mvn.w	r3, #4
 800b868:	e000      	b.n	800b86c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	bd90      	pop	{r4, r7, pc}
 800b874:	0801597c 	.word	0x0801597c
 800b878:	08015e8c 	.word	0x08015e8c
 800b87c:	080159c0 	.word	0x080159c0

0800b880 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b888:	e007      	b.n	800b89a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f80a 	bl	800b8aa <tcp_seg_free>
    seg = next;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1f4      	bne.n	800b88a <tcp_segs_free+0xa>
  }
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00c      	beq.n	800b8d2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d004      	beq.n	800b8ca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fe fb21 	bl	8009f0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b8ca:	6879      	ldr	r1, [r7, #4]
 800b8cc:	2003      	movs	r0, #3
 800b8ce:	f7fd fd0b 	bl	80092e8 <memp_free>
  }
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d107      	bne.n	800b8fe <tcp_setprio+0x22>
 800b8ee:	4b07      	ldr	r3, [pc, #28]	; (800b90c <tcp_setprio+0x30>)
 800b8f0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800b8f4:	4906      	ldr	r1, [pc, #24]	; (800b910 <tcp_setprio+0x34>)
 800b8f6:	4807      	ldr	r0, [pc, #28]	; (800b914 <tcp_setprio+0x38>)
 800b8f8:	f007 ffc6 	bl	8013888 <iprintf>
 800b8fc:	e002      	b.n	800b904 <tcp_setprio+0x28>

  pcb->prio = prio;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	78fa      	ldrb	r2, [r7, #3]
 800b902:	755a      	strb	r2, [r3, #21]
}
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	0801597c 	.word	0x0801597c
 800b910:	08015eb4 	.word	0x08015eb4
 800b914:	080159c0 	.word	0x080159c0

0800b918 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <tcp_seg_copy+0x1c>
 800b926:	4b0f      	ldr	r3, [pc, #60]	; (800b964 <tcp_seg_copy+0x4c>)
 800b928:	f240 6282 	movw	r2, #1666	; 0x682
 800b92c:	490e      	ldr	r1, [pc, #56]	; (800b968 <tcp_seg_copy+0x50>)
 800b92e:	480f      	ldr	r0, [pc, #60]	; (800b96c <tcp_seg_copy+0x54>)
 800b930:	f007 ffaa 	bl	8013888 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b934:	2003      	movs	r0, #3
 800b936:	f7fd fc8b 	bl	8009250 <memp_malloc>
 800b93a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d101      	bne.n	800b946 <tcp_seg_copy+0x2e>
    return NULL;
 800b942:	2300      	movs	r3, #0
 800b944:	e00a      	b.n	800b95c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b946:	2210      	movs	r2, #16
 800b948:	6879      	ldr	r1, [r7, #4]
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f007 ff6c 	bl	8013828 <memcpy>
  pbuf_ref(cseg->p);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	4618      	mov	r0, r3
 800b956:	f7fe fb79 	bl	800a04c <pbuf_ref>
  return cseg;
 800b95a:	68fb      	ldr	r3, [r7, #12]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	0801597c 	.word	0x0801597c
 800b968:	08015ed0 	.word	0x08015ed0
 800b96c:	080159c0 	.word	0x080159c0

0800b970 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
 800b97c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d109      	bne.n	800b998 <tcp_recv_null+0x28>
 800b984:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <tcp_recv_null+0x60>)
 800b986:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b98a:	4912      	ldr	r1, [pc, #72]	; (800b9d4 <tcp_recv_null+0x64>)
 800b98c:	4812      	ldr	r0, [pc, #72]	; (800b9d8 <tcp_recv_null+0x68>)
 800b98e:	f007 ff7b 	bl	8013888 <iprintf>
 800b992:	f06f 030f 	mvn.w	r3, #15
 800b996:	e016      	b.n	800b9c6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d009      	beq.n	800b9b2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	891b      	ldrh	r3, [r3, #8]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	68b8      	ldr	r0, [r7, #8]
 800b9a6:	f7ff fab5 	bl	800af14 <tcp_recved>
    pbuf_free(p);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7fe faae 	bl	8009f0c <pbuf_free>
 800b9b0:	e008      	b.n	800b9c4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b9b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d104      	bne.n	800b9c4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b9ba:	68b8      	ldr	r0, [r7, #8]
 800b9bc:	f7fe ffe6 	bl	800a98c <tcp_close>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	e000      	b.n	800b9c6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	0801597c 	.word	0x0801597c
 800b9d4:	08015eec 	.word	0x08015eec
 800b9d8:	080159c0 	.word	0x080159c0

0800b9dc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b9e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	db01      	blt.n	800b9f2 <tcp_kill_prio+0x16>
 800b9ee:	79fb      	ldrb	r3, [r7, #7]
 800b9f0:	e000      	b.n	800b9f4 <tcp_kill_prio+0x18>
 800b9f2:	237f      	movs	r3, #127	; 0x7f
 800b9f4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b9f6:	7afb      	ldrb	r3, [r7, #11]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d034      	beq.n	800ba66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b9fc:	7afb      	ldrb	r3, [r7, #11]
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba0a:	4b19      	ldr	r3, [pc, #100]	; (800ba70 <tcp_kill_prio+0x94>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	617b      	str	r3, [r7, #20]
 800ba10:	e01f      	b.n	800ba52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	7d5b      	ldrb	r3, [r3, #21]
 800ba16:	7afa      	ldrb	r2, [r7, #11]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d80c      	bhi.n	800ba36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ba20:	7afa      	ldrb	r2, [r7, #11]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d112      	bne.n	800ba4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ba26:	4b13      	ldr	r3, [pc, #76]	; (800ba74 <tcp_kill_prio+0x98>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	1ad3      	subs	r3, r2, r3
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d80a      	bhi.n	800ba4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ba36:	4b0f      	ldr	r3, [pc, #60]	; (800ba74 <tcp_kill_prio+0x98>)
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	6a1b      	ldr	r3, [r3, #32]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	7d5b      	ldrb	r3, [r3, #21]
 800ba4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	617b      	str	r3, [r7, #20]
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1dc      	bne.n	800ba12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ba5e:	6938      	ldr	r0, [r7, #16]
 800ba60:	f7ff f87e 	bl	800ab60 <tcp_abort>
 800ba64:	e000      	b.n	800ba68 <tcp_kill_prio+0x8c>
    return;
 800ba66:	bf00      	nop
  }
}
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	20009f48 	.word	0x20009f48
 800ba74:	20009f4c 	.word	0x20009f4c

0800ba78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	4603      	mov	r3, r0
 800ba80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ba82:	79fb      	ldrb	r3, [r7, #7]
 800ba84:	2b08      	cmp	r3, #8
 800ba86:	d009      	beq.n	800ba9c <tcp_kill_state+0x24>
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	2b09      	cmp	r3, #9
 800ba8c:	d006      	beq.n	800ba9c <tcp_kill_state+0x24>
 800ba8e:	4b1a      	ldr	r3, [pc, #104]	; (800baf8 <tcp_kill_state+0x80>)
 800ba90:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ba94:	4919      	ldr	r1, [pc, #100]	; (800bafc <tcp_kill_state+0x84>)
 800ba96:	481a      	ldr	r0, [pc, #104]	; (800bb00 <tcp_kill_state+0x88>)
 800ba98:	f007 fef6 	bl	8013888 <iprintf>

  inactivity = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800baa0:	2300      	movs	r3, #0
 800baa2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800baa4:	4b17      	ldr	r3, [pc, #92]	; (800bb04 <tcp_kill_state+0x8c>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	617b      	str	r3, [r7, #20]
 800baaa:	e017      	b.n	800badc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	7d1b      	ldrb	r3, [r3, #20]
 800bab0:	79fa      	ldrb	r2, [r7, #7]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d10f      	bne.n	800bad6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bab6:	4b14      	ldr	r3, [pc, #80]	; (800bb08 <tcp_kill_state+0x90>)
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	6a1b      	ldr	r3, [r3, #32]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d807      	bhi.n	800bad6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bac6:	4b10      	ldr	r3, [pc, #64]	; (800bb08 <tcp_kill_state+0x90>)
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	617b      	str	r3, [r7, #20]
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1e4      	bne.n	800baac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bae8:	2100      	movs	r1, #0
 800baea:	6938      	ldr	r0, [r7, #16]
 800baec:	f7fe ff7a 	bl	800a9e4 <tcp_abandon>
  }
}
 800baf0:	bf00      	nop
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	0801597c 	.word	0x0801597c
 800bafc:	08015f08 	.word	0x08015f08
 800bb00:	080159c0 	.word	0x080159c0
 800bb04:	20009f48 	.word	0x20009f48
 800bb08:	20009f4c 	.word	0x20009f4c

0800bb0c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb1a:	4b12      	ldr	r3, [pc, #72]	; (800bb64 <tcp_kill_timewait+0x58>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	e012      	b.n	800bb48 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb22:	4b11      	ldr	r3, [pc, #68]	; (800bb68 <tcp_kill_timewait+0x5c>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d807      	bhi.n	800bb42 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bb32:	4b0d      	ldr	r3, [pc, #52]	; (800bb68 <tcp_kill_timewait+0x5c>)
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1e9      	bne.n	800bb22 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d002      	beq.n	800bb5a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bb54:	68b8      	ldr	r0, [r7, #8]
 800bb56:	f7ff f803 	bl	800ab60 <tcp_abort>
  }
}
 800bb5a:	bf00      	nop
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20009f58 	.word	0x20009f58
 800bb68:	20009f4c 	.word	0x20009f4c

0800bb6c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bb72:	4b10      	ldr	r3, [pc, #64]	; (800bbb4 <tcp_handle_closepend+0x48>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bb78:	e014      	b.n	800bba4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	8b5b      	ldrh	r3, [r3, #26]
 800bb84:	f003 0308 	and.w	r3, r3, #8
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d009      	beq.n	800bba0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	8b5b      	ldrh	r3, [r3, #26]
 800bb90:	f023 0308 	bic.w	r3, r3, #8
 800bb94:	b29a      	uxth	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7fe fe8c 	bl	800a8b8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1e7      	bne.n	800bb7a <tcp_handle_closepend+0xe>
  }
}
 800bbaa:	bf00      	nop
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	20009f48 	.word	0x20009f48

0800bbb8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	f7fd fb44 	bl	8009250 <memp_malloc>
 800bbc8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d126      	bne.n	800bc1e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bbd0:	f7ff ffcc 	bl	800bb6c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bbd4:	f7ff ff9a 	bl	800bb0c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbd8:	2001      	movs	r0, #1
 800bbda:	f7fd fb39 	bl	8009250 <memp_malloc>
 800bbde:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d11b      	bne.n	800bc1e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bbe6:	2009      	movs	r0, #9
 800bbe8:	f7ff ff46 	bl	800ba78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbec:	2001      	movs	r0, #1
 800bbee:	f7fd fb2f 	bl	8009250 <memp_malloc>
 800bbf2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d111      	bne.n	800bc1e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bbfa:	2008      	movs	r0, #8
 800bbfc:	f7ff ff3c 	bl	800ba78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc00:	2001      	movs	r0, #1
 800bc02:	f7fd fb25 	bl	8009250 <memp_malloc>
 800bc06:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d107      	bne.n	800bc1e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7ff fee3 	bl	800b9dc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc16:	2001      	movs	r0, #1
 800bc18:	f7fd fb1a 	bl	8009250 <memp_malloc>
 800bc1c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d03f      	beq.n	800bca4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bc24:	229c      	movs	r2, #156	; 0x9c
 800bc26:	2100      	movs	r1, #0
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f007 fe25 	bl	8013878 <memset>
    pcb->prio = prio;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	79fa      	ldrb	r2, [r7, #7]
 800bc32:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bc3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bc44:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	22ff      	movs	r2, #255	; 0xff
 800bc52:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bc5a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2206      	movs	r2, #6
 800bc60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2206      	movs	r2, #6
 800bc68:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc70:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bc7a:	4b0d      	ldr	r3, [pc, #52]	; (800bcb0 <tcp_alloc+0xf8>)
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bc82:	4b0c      	ldr	r3, [pc, #48]	; (800bcb4 <tcp_alloc+0xfc>)
 800bc84:	781a      	ldrb	r2, [r3, #0]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bc90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4a08      	ldr	r2, [pc, #32]	; (800bcb8 <tcp_alloc+0x100>)
 800bc98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4a07      	ldr	r2, [pc, #28]	; (800bcbc <tcp_alloc+0x104>)
 800bca0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bca4:	68fb      	ldr	r3, [r7, #12]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	20009f4c 	.word	0x20009f4c
 800bcb4:	20000186 	.word	0x20000186
 800bcb8:	0800b971 	.word	0x0800b971
 800bcbc:	006ddd00 	.word	0x006ddd00

0800bcc0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800bcc4:	2040      	movs	r0, #64	; 0x40
 800bcc6:	f7ff ff77 	bl	800bbb8 <tcp_alloc>
 800bcca:	4603      	mov	r3, r0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	611a      	str	r2, [r3, #16]
  }
}
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
	...

0800bcf4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00e      	beq.n	800bd22 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	7d1b      	ldrb	r3, [r3, #20]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d106      	bne.n	800bd1a <tcp_recv+0x26>
 800bd0c:	4b07      	ldr	r3, [pc, #28]	; (800bd2c <tcp_recv+0x38>)
 800bd0e:	f240 72df 	movw	r2, #2015	; 0x7df
 800bd12:	4907      	ldr	r1, [pc, #28]	; (800bd30 <tcp_recv+0x3c>)
 800bd14:	4807      	ldr	r0, [pc, #28]	; (800bd34 <tcp_recv+0x40>)
 800bd16:	f007 fdb7 	bl	8013888 <iprintf>
    pcb->recv = recv;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800bd22:	bf00      	nop
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	0801597c 	.word	0x0801597c
 800bd30:	08015f18 	.word	0x08015f18
 800bd34:	080159c0 	.word	0x080159c0

0800bd38 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00e      	beq.n	800bd66 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	7d1b      	ldrb	r3, [r3, #20]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d106      	bne.n	800bd5e <tcp_sent+0x26>
 800bd50:	4b07      	ldr	r3, [pc, #28]	; (800bd70 <tcp_sent+0x38>)
 800bd52:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800bd56:	4907      	ldr	r1, [pc, #28]	; (800bd74 <tcp_sent+0x3c>)
 800bd58:	4807      	ldr	r0, [pc, #28]	; (800bd78 <tcp_sent+0x40>)
 800bd5a:	f007 fd95 	bl	8013888 <iprintf>
    pcb->sent = sent;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	683a      	ldr	r2, [r7, #0]
 800bd62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800bd66:	bf00      	nop
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	0801597c 	.word	0x0801597c
 800bd74:	08015f40 	.word	0x08015f40
 800bd78:	080159c0 	.word	0x080159c0

0800bd7c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00e      	beq.n	800bdaa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	7d1b      	ldrb	r3, [r3, #20]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d106      	bne.n	800bda2 <tcp_err+0x26>
 800bd94:	4b07      	ldr	r3, [pc, #28]	; (800bdb4 <tcp_err+0x38>)
 800bd96:	f640 020d 	movw	r2, #2061	; 0x80d
 800bd9a:	4907      	ldr	r1, [pc, #28]	; (800bdb8 <tcp_err+0x3c>)
 800bd9c:	4807      	ldr	r0, [pc, #28]	; (800bdbc <tcp_err+0x40>)
 800bd9e:	f007 fd73 	bl	8013888 <iprintf>
    pcb->errf = err;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800bdaa:	bf00      	nop
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	0801597c 	.word	0x0801597c
 800bdb8:	08015f68 	.word	0x08015f68
 800bdbc:	080159c0 	.word	0x080159c0

0800bdc0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d008      	beq.n	800bde2 <tcp_accept+0x22>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	7d1b      	ldrb	r3, [r3, #20]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d104      	bne.n	800bde2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	683a      	ldr	r2, [r7, #0]
 800bde0:	619a      	str	r2, [r3, #24]
  }
}
 800bde2:	bf00      	nop
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
	...

0800bdf0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d107      	bne.n	800be14 <tcp_poll+0x24>
 800be04:	4b0e      	ldr	r3, [pc, #56]	; (800be40 <tcp_poll+0x50>)
 800be06:	f640 023d 	movw	r2, #2109	; 0x83d
 800be0a:	490e      	ldr	r1, [pc, #56]	; (800be44 <tcp_poll+0x54>)
 800be0c:	480e      	ldr	r0, [pc, #56]	; (800be48 <tcp_poll+0x58>)
 800be0e:	f007 fd3b 	bl	8013888 <iprintf>
 800be12:	e011      	b.n	800be38 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	7d1b      	ldrb	r3, [r3, #20]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d106      	bne.n	800be2a <tcp_poll+0x3a>
 800be1c:	4b08      	ldr	r3, [pc, #32]	; (800be40 <tcp_poll+0x50>)
 800be1e:	f640 023e 	movw	r2, #2110	; 0x83e
 800be22:	490a      	ldr	r1, [pc, #40]	; (800be4c <tcp_poll+0x5c>)
 800be24:	4808      	ldr	r0, [pc, #32]	; (800be48 <tcp_poll+0x58>)
 800be26:	f007 fd2f 	bl	8013888 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	79fa      	ldrb	r2, [r7, #7]
 800be36:	775a      	strb	r2, [r3, #29]
}
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	0801597c 	.word	0x0801597c
 800be44:	08015f90 	.word	0x08015f90
 800be48:	080159c0 	.word	0x080159c0
 800be4c:	08015fa8 	.word	0x08015fa8

0800be50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d107      	bne.n	800be6e <tcp_pcb_purge+0x1e>
 800be5e:	4b21      	ldr	r3, [pc, #132]	; (800bee4 <tcp_pcb_purge+0x94>)
 800be60:	f640 0251 	movw	r2, #2129	; 0x851
 800be64:	4920      	ldr	r1, [pc, #128]	; (800bee8 <tcp_pcb_purge+0x98>)
 800be66:	4821      	ldr	r0, [pc, #132]	; (800beec <tcp_pcb_purge+0x9c>)
 800be68:	f007 fd0e 	bl	8013888 <iprintf>
 800be6c:	e037      	b.n	800bede <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	7d1b      	ldrb	r3, [r3, #20]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d033      	beq.n	800bede <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800be7a:	2b0a      	cmp	r3, #10
 800be7c:	d02f      	beq.n	800bede <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800be82:	2b01      	cmp	r3, #1
 800be84:	d02b      	beq.n	800bede <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d007      	beq.n	800be9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be92:	4618      	mov	r0, r3
 800be94:	f7fe f83a 	bl	8009f0c <pbuf_free>
      pcb->refused_data = NULL;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d002      	beq.n	800beac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f986 	bl	800c1b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beb2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beb8:	4618      	mov	r0, r3
 800beba:	f7ff fce1 	bl	800b880 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff fcdc 	bl	800b880 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	66da      	str	r2, [r3, #108]	; 0x6c
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	0801597c 	.word	0x0801597c
 800bee8:	08015fc8 	.word	0x08015fc8
 800beec:	080159c0 	.word	0x080159c0

0800bef0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d106      	bne.n	800bf0e <tcp_pcb_remove+0x1e>
 800bf00:	4b3e      	ldr	r3, [pc, #248]	; (800bffc <tcp_pcb_remove+0x10c>)
 800bf02:	f640 0283 	movw	r2, #2179	; 0x883
 800bf06:	493e      	ldr	r1, [pc, #248]	; (800c000 <tcp_pcb_remove+0x110>)
 800bf08:	483e      	ldr	r0, [pc, #248]	; (800c004 <tcp_pcb_remove+0x114>)
 800bf0a:	f007 fcbd 	bl	8013888 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d106      	bne.n	800bf22 <tcp_pcb_remove+0x32>
 800bf14:	4b39      	ldr	r3, [pc, #228]	; (800bffc <tcp_pcb_remove+0x10c>)
 800bf16:	f640 0284 	movw	r2, #2180	; 0x884
 800bf1a:	493b      	ldr	r1, [pc, #236]	; (800c008 <tcp_pcb_remove+0x118>)
 800bf1c:	4839      	ldr	r0, [pc, #228]	; (800c004 <tcp_pcb_remove+0x114>)
 800bf1e:	f007 fcb3 	bl	8013888 <iprintf>

  TCP_RMV(pcblist, pcb);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d105      	bne.n	800bf38 <tcp_pcb_remove+0x48>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68da      	ldr	r2, [r3, #12]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	e013      	b.n	800bf60 <tcp_pcb_remove+0x70>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60fb      	str	r3, [r7, #12]
 800bf3e:	e00c      	b.n	800bf5a <tcp_pcb_remove+0x6a>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d104      	bne.n	800bf54 <tcp_pcb_remove+0x64>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	68da      	ldr	r2, [r3, #12]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	60da      	str	r2, [r3, #12]
 800bf52:	e005      	b.n	800bf60 <tcp_pcb_remove+0x70>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	60fb      	str	r3, [r7, #12]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1ef      	bne.n	800bf40 <tcp_pcb_remove+0x50>
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	2200      	movs	r2, #0
 800bf64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bf66:	6838      	ldr	r0, [r7, #0]
 800bf68:	f7ff ff72 	bl	800be50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	7d1b      	ldrb	r3, [r3, #20]
 800bf70:	2b0a      	cmp	r3, #10
 800bf72:	d013      	beq.n	800bf9c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d00f      	beq.n	800bf9c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	8b5b      	ldrh	r3, [r3, #26]
 800bf80:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d009      	beq.n	800bf9c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	8b5b      	ldrh	r3, [r3, #26]
 800bf8c:	f043 0302 	orr.w	r3, r3, #2
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bf96:	6838      	ldr	r0, [r7, #0]
 800bf98:	f003 fbc2 	bl	800f720 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	7d1b      	ldrb	r3, [r3, #20]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d020      	beq.n	800bfe6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d006      	beq.n	800bfba <tcp_pcb_remove+0xca>
 800bfac:	4b13      	ldr	r3, [pc, #76]	; (800bffc <tcp_pcb_remove+0x10c>)
 800bfae:	f640 0293 	movw	r2, #2195	; 0x893
 800bfb2:	4916      	ldr	r1, [pc, #88]	; (800c00c <tcp_pcb_remove+0x11c>)
 800bfb4:	4813      	ldr	r0, [pc, #76]	; (800c004 <tcp_pcb_remove+0x114>)
 800bfb6:	f007 fc67 	bl	8013888 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d006      	beq.n	800bfd0 <tcp_pcb_remove+0xe0>
 800bfc2:	4b0e      	ldr	r3, [pc, #56]	; (800bffc <tcp_pcb_remove+0x10c>)
 800bfc4:	f640 0294 	movw	r2, #2196	; 0x894
 800bfc8:	4911      	ldr	r1, [pc, #68]	; (800c010 <tcp_pcb_remove+0x120>)
 800bfca:	480e      	ldr	r0, [pc, #56]	; (800c004 <tcp_pcb_remove+0x114>)
 800bfcc:	f007 fc5c 	bl	8013888 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d006      	beq.n	800bfe6 <tcp_pcb_remove+0xf6>
 800bfd8:	4b08      	ldr	r3, [pc, #32]	; (800bffc <tcp_pcb_remove+0x10c>)
 800bfda:	f640 0296 	movw	r2, #2198	; 0x896
 800bfde:	490d      	ldr	r1, [pc, #52]	; (800c014 <tcp_pcb_remove+0x124>)
 800bfe0:	4808      	ldr	r0, [pc, #32]	; (800c004 <tcp_pcb_remove+0x114>)
 800bfe2:	f007 fc51 	bl	8013888 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	2200      	movs	r2, #0
 800bff0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bff2:	bf00      	nop
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	0801597c 	.word	0x0801597c
 800c000:	08015fe4 	.word	0x08015fe4
 800c004:	080159c0 	.word	0x080159c0
 800c008:	08016000 	.word	0x08016000
 800c00c:	08016020 	.word	0x08016020
 800c010:	08016038 	.word	0x08016038
 800c014:	08016054 	.word	0x08016054

0800c018 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d106      	bne.n	800c034 <tcp_next_iss+0x1c>
 800c026:	4b0a      	ldr	r3, [pc, #40]	; (800c050 <tcp_next_iss+0x38>)
 800c028:	f640 02af 	movw	r2, #2223	; 0x8af
 800c02c:	4909      	ldr	r1, [pc, #36]	; (800c054 <tcp_next_iss+0x3c>)
 800c02e:	480a      	ldr	r0, [pc, #40]	; (800c058 <tcp_next_iss+0x40>)
 800c030:	f007 fc2a 	bl	8013888 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c034:	4b09      	ldr	r3, [pc, #36]	; (800c05c <tcp_next_iss+0x44>)
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	4b09      	ldr	r3, [pc, #36]	; (800c060 <tcp_next_iss+0x48>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4413      	add	r3, r2
 800c03e:	4a07      	ldr	r2, [pc, #28]	; (800c05c <tcp_next_iss+0x44>)
 800c040:	6013      	str	r3, [r2, #0]
  return iss;
 800c042:	4b06      	ldr	r3, [pc, #24]	; (800c05c <tcp_next_iss+0x44>)
 800c044:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	0801597c 	.word	0x0801597c
 800c054:	0801606c 	.word	0x0801606c
 800c058:	080159c0 	.word	0x080159c0
 800c05c:	2000007c 	.word	0x2000007c
 800c060:	20009f4c 	.word	0x20009f4c

0800c064 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d106      	bne.n	800c086 <tcp_eff_send_mss_netif+0x22>
 800c078:	4b14      	ldr	r3, [pc, #80]	; (800c0cc <tcp_eff_send_mss_netif+0x68>)
 800c07a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c07e:	4914      	ldr	r1, [pc, #80]	; (800c0d0 <tcp_eff_send_mss_netif+0x6c>)
 800c080:	4814      	ldr	r0, [pc, #80]	; (800c0d4 <tcp_eff_send_mss_netif+0x70>)
 800c082:	f007 fc01 	bl	8013888 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c08c:	89fb      	ldrh	r3, [r7, #14]
 800c08e:	e019      	b.n	800c0c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c094:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c096:	8afb      	ldrh	r3, [r7, #22]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d012      	beq.n	800c0c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c09c:	2328      	movs	r3, #40	; 0x28
 800c09e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c0a0:	8afa      	ldrh	r2, [r7, #22]
 800c0a2:	8abb      	ldrh	r3, [r7, #20]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d904      	bls.n	800c0b2 <tcp_eff_send_mss_netif+0x4e>
 800c0a8:	8afa      	ldrh	r2, [r7, #22]
 800c0aa:	8abb      	ldrh	r3, [r7, #20]
 800c0ac:	1ad3      	subs	r3, r2, r3
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	e000      	b.n	800c0b4 <tcp_eff_send_mss_netif+0x50>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c0b6:	8a7a      	ldrh	r2, [r7, #18]
 800c0b8:	89fb      	ldrh	r3, [r7, #14]
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	bf28      	it	cs
 800c0be:	4613      	movcs	r3, r2
 800c0c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c0c2:	89fb      	ldrh	r3, [r7, #14]
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3718      	adds	r7, #24
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	0801597c 	.word	0x0801597c
 800c0d0:	08016088 	.word	0x08016088
 800c0d4:	080159c0 	.word	0x080159c0

0800c0d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d119      	bne.n	800c120 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c0ec:	4b10      	ldr	r3, [pc, #64]	; (800c130 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c0ee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c0f2:	4910      	ldr	r1, [pc, #64]	; (800c134 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c0f4:	4810      	ldr	r0, [pc, #64]	; (800c138 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c0f6:	f007 fbc7 	bl	8013888 <iprintf>

  while (pcb != NULL) {
 800c0fa:	e011      	b.n	800c120 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	429a      	cmp	r2, r3
 800c106:	d108      	bne.n	800c11a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c10e:	68f8      	ldr	r0, [r7, #12]
 800c110:	f7fe fd26 	bl	800ab60 <tcp_abort>
      pcb = next;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	e002      	b.n	800c120 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1ea      	bne.n	800c0fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c126:	bf00      	nop
 800c128:	bf00      	nop
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	0801597c 	.word	0x0801597c
 800c134:	080160b0 	.word	0x080160b0
 800c138:	080159c0 	.word	0x080159c0

0800c13c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d02a      	beq.n	800c1a2 <tcp_netif_ip_addr_changed+0x66>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d026      	beq.n	800c1a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c154:	4b15      	ldr	r3, [pc, #84]	; (800c1ac <tcp_netif_ip_addr_changed+0x70>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7ff ffbc 	bl	800c0d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c160:	4b13      	ldr	r3, [pc, #76]	; (800c1b0 <tcp_netif_ip_addr_changed+0x74>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7ff ffb6 	bl	800c0d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d017      	beq.n	800c1a2 <tcp_netif_ip_addr_changed+0x66>
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d013      	beq.n	800c1a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c17a:	4b0e      	ldr	r3, [pc, #56]	; (800c1b4 <tcp_netif_ip_addr_changed+0x78>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	60fb      	str	r3, [r7, #12]
 800c180:	e00c      	b.n	800c19c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d103      	bne.n	800c196 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1ef      	bne.n	800c182 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c1a2:	bf00      	nop
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20009f48 	.word	0x20009f48
 800c1b0:	20009f54 	.word	0x20009f54
 800c1b4:	20009f50 	.word	0x20009f50

0800c1b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d007      	beq.n	800c1d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7ff fb57 	bl	800b880 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c1d8:	bf00      	nop
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}

0800c1e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c1e0:	b590      	push	{r4, r7, lr}
 800c1e2:	b08d      	sub	sp, #52	; 0x34
 800c1e4:	af04      	add	r7, sp, #16
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d105      	bne.n	800c1fc <tcp_input+0x1c>
 800c1f0:	4b9b      	ldr	r3, [pc, #620]	; (800c460 <tcp_input+0x280>)
 800c1f2:	2283      	movs	r2, #131	; 0x83
 800c1f4:	499b      	ldr	r1, [pc, #620]	; (800c464 <tcp_input+0x284>)
 800c1f6:	489c      	ldr	r0, [pc, #624]	; (800c468 <tcp_input+0x288>)
 800c1f8:	f007 fb46 	bl	8013888 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	4a9a      	ldr	r2, [pc, #616]	; (800c46c <tcp_input+0x28c>)
 800c202:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	895b      	ldrh	r3, [r3, #10]
 800c208:	2b13      	cmp	r3, #19
 800c20a:	f240 83c4 	bls.w	800c996 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c20e:	4b98      	ldr	r3, [pc, #608]	; (800c470 <tcp_input+0x290>)
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	4a97      	ldr	r2, [pc, #604]	; (800c470 <tcp_input+0x290>)
 800c214:	6812      	ldr	r2, [r2, #0]
 800c216:	4611      	mov	r1, r2
 800c218:	4618      	mov	r0, r3
 800c21a:	f006 fb83 	bl	8012924 <ip4_addr_isbroadcast_u32>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	f040 83ba 	bne.w	800c99a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c226:	4b92      	ldr	r3, [pc, #584]	; (800c470 <tcp_input+0x290>)
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c22e:	2be0      	cmp	r3, #224	; 0xe0
 800c230:	f000 83b3 	beq.w	800c99a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c234:	4b8d      	ldr	r3, [pc, #564]	; (800c46c <tcp_input+0x28c>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	899b      	ldrh	r3, [r3, #12]
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fc fbb1 	bl	80089a4 <lwip_htons>
 800c242:	4603      	mov	r3, r0
 800c244:	0b1b      	lsrs	r3, r3, #12
 800c246:	b29b      	uxth	r3, r3
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c24e:	7cbb      	ldrb	r3, [r7, #18]
 800c250:	2b13      	cmp	r3, #19
 800c252:	f240 83a4 	bls.w	800c99e <tcp_input+0x7be>
 800c256:	7cbb      	ldrb	r3, [r7, #18]
 800c258:	b29a      	uxth	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	891b      	ldrh	r3, [r3, #8]
 800c25e:	429a      	cmp	r2, r3
 800c260:	f200 839d 	bhi.w	800c99e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c264:	7cbb      	ldrb	r3, [r7, #18]
 800c266:	b29b      	uxth	r3, r3
 800c268:	3b14      	subs	r3, #20
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	4b81      	ldr	r3, [pc, #516]	; (800c474 <tcp_input+0x294>)
 800c26e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c270:	4b81      	ldr	r3, [pc, #516]	; (800c478 <tcp_input+0x298>)
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	895a      	ldrh	r2, [r3, #10]
 800c27a:	7cbb      	ldrb	r3, [r7, #18]
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	429a      	cmp	r2, r3
 800c280:	d309      	bcc.n	800c296 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c282:	4b7c      	ldr	r3, [pc, #496]	; (800c474 <tcp_input+0x294>)
 800c284:	881a      	ldrh	r2, [r3, #0]
 800c286:	4b7d      	ldr	r3, [pc, #500]	; (800c47c <tcp_input+0x29c>)
 800c288:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c28a:	7cbb      	ldrb	r3, [r7, #18]
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7fd fdb6 	bl	8009e00 <pbuf_remove_header>
 800c294:	e04e      	b.n	800c334 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d105      	bne.n	800c2aa <tcp_input+0xca>
 800c29e:	4b70      	ldr	r3, [pc, #448]	; (800c460 <tcp_input+0x280>)
 800c2a0:	22c2      	movs	r2, #194	; 0xc2
 800c2a2:	4977      	ldr	r1, [pc, #476]	; (800c480 <tcp_input+0x2a0>)
 800c2a4:	4870      	ldr	r0, [pc, #448]	; (800c468 <tcp_input+0x288>)
 800c2a6:	f007 faef 	bl	8013888 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c2aa:	2114      	movs	r1, #20
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7fd fda7 	bl	8009e00 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	895a      	ldrh	r2, [r3, #10]
 800c2b6:	4b71      	ldr	r3, [pc, #452]	; (800c47c <tcp_input+0x29c>)
 800c2b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c2ba:	4b6e      	ldr	r3, [pc, #440]	; (800c474 <tcp_input+0x294>)
 800c2bc:	881a      	ldrh	r2, [r3, #0]
 800c2be:	4b6f      	ldr	r3, [pc, #444]	; (800c47c <tcp_input+0x29c>)
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c2c6:	4b6d      	ldr	r3, [pc, #436]	; (800c47c <tcp_input+0x29c>)
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f7fd fd97 	bl	8009e00 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	895b      	ldrh	r3, [r3, #10]
 800c2d8:	8a3a      	ldrh	r2, [r7, #16]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	f200 8361 	bhi.w	800c9a2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	4a64      	ldr	r2, [pc, #400]	; (800c478 <tcp_input+0x298>)
 800c2e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	8a3a      	ldrh	r2, [r7, #16]
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fd fd84 	bl	8009e00 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	891a      	ldrh	r2, [r3, #8]
 800c2fc:	8a3b      	ldrh	r3, [r7, #16]
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	b29a      	uxth	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	895b      	ldrh	r3, [r3, #10]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d005      	beq.n	800c31a <tcp_input+0x13a>
 800c30e:	4b54      	ldr	r3, [pc, #336]	; (800c460 <tcp_input+0x280>)
 800c310:	22df      	movs	r2, #223	; 0xdf
 800c312:	495c      	ldr	r1, [pc, #368]	; (800c484 <tcp_input+0x2a4>)
 800c314:	4854      	ldr	r0, [pc, #336]	; (800c468 <tcp_input+0x288>)
 800c316:	f007 fab7 	bl	8013888 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	891a      	ldrh	r2, [r3, #8]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	891b      	ldrh	r3, [r3, #8]
 800c324:	429a      	cmp	r2, r3
 800c326:	d005      	beq.n	800c334 <tcp_input+0x154>
 800c328:	4b4d      	ldr	r3, [pc, #308]	; (800c460 <tcp_input+0x280>)
 800c32a:	22e0      	movs	r2, #224	; 0xe0
 800c32c:	4956      	ldr	r1, [pc, #344]	; (800c488 <tcp_input+0x2a8>)
 800c32e:	484e      	ldr	r0, [pc, #312]	; (800c468 <tcp_input+0x288>)
 800c330:	f007 faaa 	bl	8013888 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c334:	4b4d      	ldr	r3, [pc, #308]	; (800c46c <tcp_input+0x28c>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	881b      	ldrh	r3, [r3, #0]
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	4a4b      	ldr	r2, [pc, #300]	; (800c46c <tcp_input+0x28c>)
 800c33e:	6814      	ldr	r4, [r2, #0]
 800c340:	4618      	mov	r0, r3
 800c342:	f7fc fb2f 	bl	80089a4 <lwip_htons>
 800c346:	4603      	mov	r3, r0
 800c348:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c34a:	4b48      	ldr	r3, [pc, #288]	; (800c46c <tcp_input+0x28c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	885b      	ldrh	r3, [r3, #2]
 800c350:	b29b      	uxth	r3, r3
 800c352:	4a46      	ldr	r2, [pc, #280]	; (800c46c <tcp_input+0x28c>)
 800c354:	6814      	ldr	r4, [r2, #0]
 800c356:	4618      	mov	r0, r3
 800c358:	f7fc fb24 	bl	80089a4 <lwip_htons>
 800c35c:	4603      	mov	r3, r0
 800c35e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c360:	4b42      	ldr	r3, [pc, #264]	; (800c46c <tcp_input+0x28c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	4a41      	ldr	r2, [pc, #260]	; (800c46c <tcp_input+0x28c>)
 800c368:	6814      	ldr	r4, [r2, #0]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fc fb2f 	bl	80089ce <lwip_htonl>
 800c370:	4603      	mov	r3, r0
 800c372:	6063      	str	r3, [r4, #4]
 800c374:	6863      	ldr	r3, [r4, #4]
 800c376:	4a45      	ldr	r2, [pc, #276]	; (800c48c <tcp_input+0x2ac>)
 800c378:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c37a:	4b3c      	ldr	r3, [pc, #240]	; (800c46c <tcp_input+0x28c>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	4a3a      	ldr	r2, [pc, #232]	; (800c46c <tcp_input+0x28c>)
 800c382:	6814      	ldr	r4, [r2, #0]
 800c384:	4618      	mov	r0, r3
 800c386:	f7fc fb22 	bl	80089ce <lwip_htonl>
 800c38a:	4603      	mov	r3, r0
 800c38c:	60a3      	str	r3, [r4, #8]
 800c38e:	68a3      	ldr	r3, [r4, #8]
 800c390:	4a3f      	ldr	r2, [pc, #252]	; (800c490 <tcp_input+0x2b0>)
 800c392:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c394:	4b35      	ldr	r3, [pc, #212]	; (800c46c <tcp_input+0x28c>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	89db      	ldrh	r3, [r3, #14]
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	4a33      	ldr	r2, [pc, #204]	; (800c46c <tcp_input+0x28c>)
 800c39e:	6814      	ldr	r4, [r2, #0]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fc faff 	bl	80089a4 <lwip_htons>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c3aa:	4b30      	ldr	r3, [pc, #192]	; (800c46c <tcp_input+0x28c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	899b      	ldrh	r3, [r3, #12]
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fc faf6 	bl	80089a4 <lwip_htons>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3c0:	b2da      	uxtb	r2, r3
 800c3c2:	4b34      	ldr	r3, [pc, #208]	; (800c494 <tcp_input+0x2b4>)
 800c3c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	891a      	ldrh	r2, [r3, #8]
 800c3ca:	4b33      	ldr	r3, [pc, #204]	; (800c498 <tcp_input+0x2b8>)
 800c3cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c3ce:	4b31      	ldr	r3, [pc, #196]	; (800c494 <tcp_input+0x2b4>)
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	f003 0303 	and.w	r3, r3, #3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00c      	beq.n	800c3f4 <tcp_input+0x214>
    tcplen++;
 800c3da:	4b2f      	ldr	r3, [pc, #188]	; (800c498 <tcp_input+0x2b8>)
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	4b2d      	ldr	r3, [pc, #180]	; (800c498 <tcp_input+0x2b8>)
 800c3e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	891a      	ldrh	r2, [r3, #8]
 800c3ea:	4b2b      	ldr	r3, [pc, #172]	; (800c498 <tcp_input+0x2b8>)
 800c3ec:	881b      	ldrh	r3, [r3, #0]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	f200 82d9 	bhi.w	800c9a6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3f8:	4b28      	ldr	r3, [pc, #160]	; (800c49c <tcp_input+0x2bc>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	e09d      	b.n	800c53c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	7d1b      	ldrb	r3, [r3, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d105      	bne.n	800c414 <tcp_input+0x234>
 800c408:	4b15      	ldr	r3, [pc, #84]	; (800c460 <tcp_input+0x280>)
 800c40a:	22fb      	movs	r2, #251	; 0xfb
 800c40c:	4924      	ldr	r1, [pc, #144]	; (800c4a0 <tcp_input+0x2c0>)
 800c40e:	4816      	ldr	r0, [pc, #88]	; (800c468 <tcp_input+0x288>)
 800c410:	f007 fa3a 	bl	8013888 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	7d1b      	ldrb	r3, [r3, #20]
 800c418:	2b0a      	cmp	r3, #10
 800c41a:	d105      	bne.n	800c428 <tcp_input+0x248>
 800c41c:	4b10      	ldr	r3, [pc, #64]	; (800c460 <tcp_input+0x280>)
 800c41e:	22fc      	movs	r2, #252	; 0xfc
 800c420:	4920      	ldr	r1, [pc, #128]	; (800c4a4 <tcp_input+0x2c4>)
 800c422:	4811      	ldr	r0, [pc, #68]	; (800c468 <tcp_input+0x288>)
 800c424:	f007 fa30 	bl	8013888 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	7d1b      	ldrb	r3, [r3, #20]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d105      	bne.n	800c43c <tcp_input+0x25c>
 800c430:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <tcp_input+0x280>)
 800c432:	22fd      	movs	r2, #253	; 0xfd
 800c434:	491c      	ldr	r1, [pc, #112]	; (800c4a8 <tcp_input+0x2c8>)
 800c436:	480c      	ldr	r0, [pc, #48]	; (800c468 <tcp_input+0x288>)
 800c438:	f007 fa26 	bl	8013888 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	7a1b      	ldrb	r3, [r3, #8]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d033      	beq.n	800c4ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	7a1a      	ldrb	r2, [r3, #8]
 800c448:	4b09      	ldr	r3, [pc, #36]	; (800c470 <tcp_input+0x290>)
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c450:	3301      	adds	r3, #1
 800c452:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c454:	429a      	cmp	r2, r3
 800c456:	d029      	beq.n	800c4ac <tcp_input+0x2cc>
      prev = pcb;
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	61bb      	str	r3, [r7, #24]
      continue;
 800c45c:	e06b      	b.n	800c536 <tcp_input+0x356>
 800c45e:	bf00      	nop
 800c460:	080160e4 	.word	0x080160e4
 800c464:	08016118 	.word	0x08016118
 800c468:	08016130 	.word	0x08016130
 800c46c:	20000198 	.word	0x20000198
 800c470:	20004844 	.word	0x20004844
 800c474:	2000019c 	.word	0x2000019c
 800c478:	200001a0 	.word	0x200001a0
 800c47c:	2000019e 	.word	0x2000019e
 800c480:	08016158 	.word	0x08016158
 800c484:	08016168 	.word	0x08016168
 800c488:	08016174 	.word	0x08016174
 800c48c:	200001a8 	.word	0x200001a8
 800c490:	200001ac 	.word	0x200001ac
 800c494:	200001b4 	.word	0x200001b4
 800c498:	200001b2 	.word	0x200001b2
 800c49c:	20009f48 	.word	0x20009f48
 800c4a0:	08016194 	.word	0x08016194
 800c4a4:	080161bc 	.word	0x080161bc
 800c4a8:	080161e8 	.word	0x080161e8
    }

    if (pcb->remote_port == tcphdr->src &&
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	8b1a      	ldrh	r2, [r3, #24]
 800c4b0:	4b94      	ldr	r3, [pc, #592]	; (800c704 <tcp_input+0x524>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d13a      	bne.n	800c532 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	8ada      	ldrh	r2, [r3, #22]
 800c4c0:	4b90      	ldr	r3, [pc, #576]	; (800c704 <tcp_input+0x524>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	885b      	ldrh	r3, [r3, #2]
 800c4c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d132      	bne.n	800c532 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	4b8d      	ldr	r3, [pc, #564]	; (800c708 <tcp_input+0x528>)
 800c4d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d12c      	bne.n	800c532 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	4b8a      	ldr	r3, [pc, #552]	; (800c708 <tcp_input+0x528>)
 800c4de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d126      	bne.n	800c532 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	69fa      	ldr	r2, [r7, #28]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d106      	bne.n	800c4fc <tcp_input+0x31c>
 800c4ee:	4b87      	ldr	r3, [pc, #540]	; (800c70c <tcp_input+0x52c>)
 800c4f0:	f240 120d 	movw	r2, #269	; 0x10d
 800c4f4:	4986      	ldr	r1, [pc, #536]	; (800c710 <tcp_input+0x530>)
 800c4f6:	4887      	ldr	r0, [pc, #540]	; (800c714 <tcp_input+0x534>)
 800c4f8:	f007 f9c6 	bl	8013888 <iprintf>
      if (prev != NULL) {
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00a      	beq.n	800c518 <tcp_input+0x338>
        prev->next = pcb->next;
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	68da      	ldr	r2, [r3, #12]
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c50a:	4b83      	ldr	r3, [pc, #524]	; (800c718 <tcp_input+0x538>)
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c512:	4a81      	ldr	r2, [pc, #516]	; (800c718 <tcp_input+0x538>)
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c518:	69fb      	ldr	r3, [r7, #28]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d111      	bne.n	800c546 <tcp_input+0x366>
 800c522:	4b7a      	ldr	r3, [pc, #488]	; (800c70c <tcp_input+0x52c>)
 800c524:	f240 1215 	movw	r2, #277	; 0x115
 800c528:	497c      	ldr	r1, [pc, #496]	; (800c71c <tcp_input+0x53c>)
 800c52a:	487a      	ldr	r0, [pc, #488]	; (800c714 <tcp_input+0x534>)
 800c52c:	f007 f9ac 	bl	8013888 <iprintf>
      break;
 800c530:	e009      	b.n	800c546 <tcp_input+0x366>
    }
    prev = pcb;
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	61fb      	str	r3, [r7, #28]
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f47f af5e 	bne.w	800c400 <tcp_input+0x220>
 800c544:	e000      	b.n	800c548 <tcp_input+0x368>
      break;
 800c546:	bf00      	nop
  }

  if (pcb == NULL) {
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f040 8095 	bne.w	800c67a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c550:	4b73      	ldr	r3, [pc, #460]	; (800c720 <tcp_input+0x540>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	61fb      	str	r3, [r7, #28]
 800c556:	e03f      	b.n	800c5d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	7d1b      	ldrb	r3, [r3, #20]
 800c55c:	2b0a      	cmp	r3, #10
 800c55e:	d006      	beq.n	800c56e <tcp_input+0x38e>
 800c560:	4b6a      	ldr	r3, [pc, #424]	; (800c70c <tcp_input+0x52c>)
 800c562:	f240 121f 	movw	r2, #287	; 0x11f
 800c566:	496f      	ldr	r1, [pc, #444]	; (800c724 <tcp_input+0x544>)
 800c568:	486a      	ldr	r0, [pc, #424]	; (800c714 <tcp_input+0x534>)
 800c56a:	f007 f98d 	bl	8013888 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	7a1b      	ldrb	r3, [r3, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d009      	beq.n	800c58a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	7a1a      	ldrb	r2, [r3, #8]
 800c57a:	4b63      	ldr	r3, [pc, #396]	; (800c708 <tcp_input+0x528>)
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c582:	3301      	adds	r3, #1
 800c584:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c586:	429a      	cmp	r2, r3
 800c588:	d122      	bne.n	800c5d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	8b1a      	ldrh	r2, [r3, #24]
 800c58e:	4b5d      	ldr	r3, [pc, #372]	; (800c704 <tcp_input+0x524>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	881b      	ldrh	r3, [r3, #0]
 800c594:	b29b      	uxth	r3, r3
 800c596:	429a      	cmp	r2, r3
 800c598:	d11b      	bne.n	800c5d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	8ada      	ldrh	r2, [r3, #22]
 800c59e:	4b59      	ldr	r3, [pc, #356]	; (800c704 <tcp_input+0x524>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	885b      	ldrh	r3, [r3, #2]
 800c5a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d113      	bne.n	800c5d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	4b56      	ldr	r3, [pc, #344]	; (800c708 <tcp_input+0x528>)
 800c5b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d10d      	bne.n	800c5d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	4b53      	ldr	r3, [pc, #332]	; (800c708 <tcp_input+0x528>)
 800c5bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d107      	bne.n	800c5d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c5c2:	69f8      	ldr	r0, [r7, #28]
 800c5c4:	f000 fb54 	bl	800cc70 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7fd fc9f 	bl	8009f0c <pbuf_free>
        return;
 800c5ce:	e1f0      	b.n	800c9b2 <tcp_input+0x7d2>
        continue;
 800c5d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5d2:	69fb      	ldr	r3, [r7, #28]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	61fb      	str	r3, [r7, #28]
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1bc      	bne.n	800c558 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c5e2:	4b51      	ldr	r3, [pc, #324]	; (800c728 <tcp_input+0x548>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	617b      	str	r3, [r7, #20]
 800c5e8:	e02a      	b.n	800c640 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	7a1b      	ldrb	r3, [r3, #8]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00c      	beq.n	800c60c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	7a1a      	ldrb	r2, [r3, #8]
 800c5f6:	4b44      	ldr	r3, [pc, #272]	; (800c708 <tcp_input+0x528>)
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5fe:	3301      	adds	r3, #1
 800c600:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c602:	429a      	cmp	r2, r3
 800c604:	d002      	beq.n	800c60c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	61bb      	str	r3, [r7, #24]
        continue;
 800c60a:	e016      	b.n	800c63a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	8ada      	ldrh	r2, [r3, #22]
 800c610:	4b3c      	ldr	r3, [pc, #240]	; (800c704 <tcp_input+0x524>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	885b      	ldrh	r3, [r3, #2]
 800c616:	b29b      	uxth	r3, r3
 800c618:	429a      	cmp	r2, r3
 800c61a:	d10c      	bne.n	800c636 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	4b39      	ldr	r3, [pc, #228]	; (800c708 <tcp_input+0x528>)
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	429a      	cmp	r2, r3
 800c626:	d00f      	beq.n	800c648 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00d      	beq.n	800c64a <tcp_input+0x46a>
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d009      	beq.n	800c64a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	617b      	str	r3, [r7, #20]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1d1      	bne.n	800c5ea <tcp_input+0x40a>
 800c646:	e000      	b.n	800c64a <tcp_input+0x46a>
            break;
 800c648:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d014      	beq.n	800c67a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00a      	beq.n	800c66c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c65e:	4b32      	ldr	r3, [pc, #200]	; (800c728 <tcp_input+0x548>)
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c666:	4a30      	ldr	r2, [pc, #192]	; (800c728 <tcp_input+0x548>)
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c66c:	6978      	ldr	r0, [r7, #20]
 800c66e:	f000 fa01 	bl	800ca74 <tcp_listen_input>
      }
      pbuf_free(p);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7fd fc4a 	bl	8009f0c <pbuf_free>
      return;
 800c678:	e19b      	b.n	800c9b2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f000 8160 	beq.w	800c942 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c682:	4b2a      	ldr	r3, [pc, #168]	; (800c72c <tcp_input+0x54c>)
 800c684:	2200      	movs	r2, #0
 800c686:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	891a      	ldrh	r2, [r3, #8]
 800c68c:	4b27      	ldr	r3, [pc, #156]	; (800c72c <tcp_input+0x54c>)
 800c68e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c690:	4a26      	ldr	r2, [pc, #152]	; (800c72c <tcp_input+0x54c>)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c696:	4b1b      	ldr	r3, [pc, #108]	; (800c704 <tcp_input+0x524>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a24      	ldr	r2, [pc, #144]	; (800c72c <tcp_input+0x54c>)
 800c69c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c69e:	4b24      	ldr	r3, [pc, #144]	; (800c730 <tcp_input+0x550>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c6a4:	4b23      	ldr	r3, [pc, #140]	; (800c734 <tcp_input+0x554>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c6aa:	4b23      	ldr	r3, [pc, #140]	; (800c738 <tcp_input+0x558>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c6b0:	4b22      	ldr	r3, [pc, #136]	; (800c73c <tcp_input+0x55c>)
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	f003 0308 	and.w	r3, r3, #8
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d006      	beq.n	800c6ca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	7b5b      	ldrb	r3, [r3, #13]
 800c6c0:	f043 0301 	orr.w	r3, r3, #1
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d038      	beq.n	800c744 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c6d2:	69f8      	ldr	r0, [r7, #28]
 800c6d4:	f7ff f858 	bl	800b788 <tcp_process_refused_data>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	f113 0f0d 	cmn.w	r3, #13
 800c6de:	d007      	beq.n	800c6f0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d02d      	beq.n	800c744 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c6e8:	4b15      	ldr	r3, [pc, #84]	; (800c740 <tcp_input+0x560>)
 800c6ea:	881b      	ldrh	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d029      	beq.n	800c744 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f040 8104 	bne.w	800c902 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c6fa:	69f8      	ldr	r0, [r7, #28]
 800c6fc:	f003 fe16 	bl	801032c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c700:	e0ff      	b.n	800c902 <tcp_input+0x722>
 800c702:	bf00      	nop
 800c704:	20000198 	.word	0x20000198
 800c708:	20004844 	.word	0x20004844
 800c70c:	080160e4 	.word	0x080160e4
 800c710:	08016210 	.word	0x08016210
 800c714:	08016130 	.word	0x08016130
 800c718:	20009f48 	.word	0x20009f48
 800c71c:	0801623c 	.word	0x0801623c
 800c720:	20009f58 	.word	0x20009f58
 800c724:	08016268 	.word	0x08016268
 800c728:	20009f50 	.word	0x20009f50
 800c72c:	20000188 	.word	0x20000188
 800c730:	200001b8 	.word	0x200001b8
 800c734:	200001b5 	.word	0x200001b5
 800c738:	200001b0 	.word	0x200001b0
 800c73c:	200001b4 	.word	0x200001b4
 800c740:	200001b2 	.word	0x200001b2
      }
    }
    tcp_input_pcb = pcb;
 800c744:	4a9c      	ldr	r2, [pc, #624]	; (800c9b8 <tcp_input+0x7d8>)
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c74a:	69f8      	ldr	r0, [r7, #28]
 800c74c:	f000 fb0a 	bl	800cd64 <tcp_process>
 800c750:	4603      	mov	r3, r0
 800c752:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c754:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c758:	f113 0f0d 	cmn.w	r3, #13
 800c75c:	f000 80d3 	beq.w	800c906 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800c760:	4b96      	ldr	r3, [pc, #600]	; (800c9bc <tcp_input+0x7dc>)
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	f003 0308 	and.w	r3, r3, #8
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d015      	beq.n	800c798 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c772:	2b00      	cmp	r3, #0
 800c774:	d008      	beq.n	800c788 <tcp_input+0x5a8>
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c77c:	69fa      	ldr	r2, [r7, #28]
 800c77e:	6912      	ldr	r2, [r2, #16]
 800c780:	f06f 010d 	mvn.w	r1, #13
 800c784:	4610      	mov	r0, r2
 800c786:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c788:	69f9      	ldr	r1, [r7, #28]
 800c78a:	488d      	ldr	r0, [pc, #564]	; (800c9c0 <tcp_input+0x7e0>)
 800c78c:	f7ff fbb0 	bl	800bef0 <tcp_pcb_remove>
        tcp_free(pcb);
 800c790:	69f8      	ldr	r0, [r7, #28]
 800c792:	f7fd fefd 	bl	800a590 <tcp_free>
 800c796:	e0c1      	b.n	800c91c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800c798:	2300      	movs	r3, #0
 800c79a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c79c:	4b89      	ldr	r3, [pc, #548]	; (800c9c4 <tcp_input+0x7e4>)
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d01d      	beq.n	800c7e0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c7a4:	4b87      	ldr	r3, [pc, #540]	; (800c9c4 <tcp_input+0x7e4>)
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00a      	beq.n	800c7ca <tcp_input+0x5ea>
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7ba:	69fa      	ldr	r2, [r7, #28]
 800c7bc:	6910      	ldr	r0, [r2, #16]
 800c7be:	89fa      	ldrh	r2, [r7, #14]
 800c7c0:	69f9      	ldr	r1, [r7, #28]
 800c7c2:	4798      	blx	r3
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	74fb      	strb	r3, [r7, #19]
 800c7c8:	e001      	b.n	800c7ce <tcp_input+0x5ee>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c7ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7d2:	f113 0f0d 	cmn.w	r3, #13
 800c7d6:	f000 8098 	beq.w	800c90a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c7da:	4b7a      	ldr	r3, [pc, #488]	; (800c9c4 <tcp_input+0x7e4>)
 800c7dc:	2200      	movs	r2, #0
 800c7de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c7e0:	69f8      	ldr	r0, [r7, #28]
 800c7e2:	f000 f907 	bl	800c9f4 <tcp_input_delayed_close>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f040 8090 	bne.w	800c90e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c7ee:	4b76      	ldr	r3, [pc, #472]	; (800c9c8 <tcp_input+0x7e8>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d041      	beq.n	800c87a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d006      	beq.n	800c80c <tcp_input+0x62c>
 800c7fe:	4b73      	ldr	r3, [pc, #460]	; (800c9cc <tcp_input+0x7ec>)
 800c800:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c804:	4972      	ldr	r1, [pc, #456]	; (800c9d0 <tcp_input+0x7f0>)
 800c806:	4873      	ldr	r0, [pc, #460]	; (800c9d4 <tcp_input+0x7f4>)
 800c808:	f007 f83e 	bl	8013888 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	8b5b      	ldrh	r3, [r3, #26]
 800c810:	f003 0310 	and.w	r3, r3, #16
 800c814:	2b00      	cmp	r3, #0
 800c816:	d008      	beq.n	800c82a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c818:	4b6b      	ldr	r3, [pc, #428]	; (800c9c8 <tcp_input+0x7e8>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fd fb75 	bl	8009f0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c822:	69f8      	ldr	r0, [r7, #28]
 800c824:	f7fe f99c 	bl	800ab60 <tcp_abort>
            goto aborted;
 800c828:	e078      	b.n	800c91c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00c      	beq.n	800c84e <tcp_input+0x66e>
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	6918      	ldr	r0, [r3, #16]
 800c83e:	4b62      	ldr	r3, [pc, #392]	; (800c9c8 <tcp_input+0x7e8>)
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	2300      	movs	r3, #0
 800c844:	69f9      	ldr	r1, [r7, #28]
 800c846:	47a0      	blx	r4
 800c848:	4603      	mov	r3, r0
 800c84a:	74fb      	strb	r3, [r7, #19]
 800c84c:	e008      	b.n	800c860 <tcp_input+0x680>
 800c84e:	4b5e      	ldr	r3, [pc, #376]	; (800c9c8 <tcp_input+0x7e8>)
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	2300      	movs	r3, #0
 800c854:	69f9      	ldr	r1, [r7, #28]
 800c856:	2000      	movs	r0, #0
 800c858:	f7ff f88a 	bl	800b970 <tcp_recv_null>
 800c85c:	4603      	mov	r3, r0
 800c85e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c860:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c864:	f113 0f0d 	cmn.w	r3, #13
 800c868:	d053      	beq.n	800c912 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c86a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d003      	beq.n	800c87a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c872:	4b55      	ldr	r3, [pc, #340]	; (800c9c8 <tcp_input+0x7e8>)
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c87a:	4b50      	ldr	r3, [pc, #320]	; (800c9bc <tcp_input+0x7dc>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	f003 0320 	and.w	r3, r3, #32
 800c882:	2b00      	cmp	r3, #0
 800c884:	d030      	beq.n	800c8e8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d009      	beq.n	800c8a2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c892:	7b5a      	ldrb	r2, [r3, #13]
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c898:	f042 0220 	orr.w	r2, r2, #32
 800c89c:	b2d2      	uxtb	r2, r2
 800c89e:	735a      	strb	r2, [r3, #13]
 800c8a0:	e022      	b.n	800c8e8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8aa:	d005      	beq.n	800c8b8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d00b      	beq.n	800c8da <tcp_input+0x6fa>
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	6918      	ldr	r0, [r3, #16]
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	69f9      	ldr	r1, [r7, #28]
 800c8d2:	47a0      	blx	r4
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	74fb      	strb	r3, [r7, #19]
 800c8d8:	e001      	b.n	800c8de <tcp_input+0x6fe>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c8de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8e2:	f113 0f0d 	cmn.w	r3, #13
 800c8e6:	d016      	beq.n	800c916 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c8e8:	4b33      	ldr	r3, [pc, #204]	; (800c9b8 <tcp_input+0x7d8>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c8ee:	69f8      	ldr	r0, [r7, #28]
 800c8f0:	f000 f880 	bl	800c9f4 <tcp_input_delayed_close>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10f      	bne.n	800c91a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c8fa:	69f8      	ldr	r0, [r7, #28]
 800c8fc:	f002 ff10 	bl	800f720 <tcp_output>
 800c900:	e00c      	b.n	800c91c <tcp_input+0x73c>
        goto aborted;
 800c902:	bf00      	nop
 800c904:	e00a      	b.n	800c91c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c906:	bf00      	nop
 800c908:	e008      	b.n	800c91c <tcp_input+0x73c>
              goto aborted;
 800c90a:	bf00      	nop
 800c90c:	e006      	b.n	800c91c <tcp_input+0x73c>
          goto aborted;
 800c90e:	bf00      	nop
 800c910:	e004      	b.n	800c91c <tcp_input+0x73c>
            goto aborted;
 800c912:	bf00      	nop
 800c914:	e002      	b.n	800c91c <tcp_input+0x73c>
              goto aborted;
 800c916:	bf00      	nop
 800c918:	e000      	b.n	800c91c <tcp_input+0x73c>
          goto aborted;
 800c91a:	bf00      	nop
    tcp_input_pcb = NULL;
 800c91c:	4b26      	ldr	r3, [pc, #152]	; (800c9b8 <tcp_input+0x7d8>)
 800c91e:	2200      	movs	r2, #0
 800c920:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c922:	4b29      	ldr	r3, [pc, #164]	; (800c9c8 <tcp_input+0x7e8>)
 800c924:	2200      	movs	r2, #0
 800c926:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c928:	4b2b      	ldr	r3, [pc, #172]	; (800c9d8 <tcp_input+0x7f8>)
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d03f      	beq.n	800c9b0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800c930:	4b29      	ldr	r3, [pc, #164]	; (800c9d8 <tcp_input+0x7f8>)
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	4618      	mov	r0, r3
 800c936:	f7fd fae9 	bl	8009f0c <pbuf_free>
      inseg.p = NULL;
 800c93a:	4b27      	ldr	r3, [pc, #156]	; (800c9d8 <tcp_input+0x7f8>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c940:	e036      	b.n	800c9b0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c942:	4b26      	ldr	r3, [pc, #152]	; (800c9dc <tcp_input+0x7fc>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	899b      	ldrh	r3, [r3, #12]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fc f82a 	bl	80089a4 <lwip_htons>
 800c950:	4603      	mov	r3, r0
 800c952:	b2db      	uxtb	r3, r3
 800c954:	f003 0304 	and.w	r3, r3, #4
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d118      	bne.n	800c98e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c95c:	4b20      	ldr	r3, [pc, #128]	; (800c9e0 <tcp_input+0x800>)
 800c95e:	6819      	ldr	r1, [r3, #0]
 800c960:	4b20      	ldr	r3, [pc, #128]	; (800c9e4 <tcp_input+0x804>)
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	461a      	mov	r2, r3
 800c966:	4b20      	ldr	r3, [pc, #128]	; (800c9e8 <tcp_input+0x808>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c96c:	4b1b      	ldr	r3, [pc, #108]	; (800c9dc <tcp_input+0x7fc>)
 800c96e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c970:	885b      	ldrh	r3, [r3, #2]
 800c972:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c974:	4a19      	ldr	r2, [pc, #100]	; (800c9dc <tcp_input+0x7fc>)
 800c976:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c978:	8812      	ldrh	r2, [r2, #0]
 800c97a:	b292      	uxth	r2, r2
 800c97c:	9202      	str	r2, [sp, #8]
 800c97e:	9301      	str	r3, [sp, #4]
 800c980:	4b1a      	ldr	r3, [pc, #104]	; (800c9ec <tcp_input+0x80c>)
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	4b1a      	ldr	r3, [pc, #104]	; (800c9f0 <tcp_input+0x810>)
 800c986:	4602      	mov	r2, r0
 800c988:	2000      	movs	r0, #0
 800c98a:	f003 fc7d 	bl	8010288 <tcp_rst>
    pbuf_free(p);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7fd fabc 	bl	8009f0c <pbuf_free>
  return;
 800c994:	e00c      	b.n	800c9b0 <tcp_input+0x7d0>
    goto dropped;
 800c996:	bf00      	nop
 800c998:	e006      	b.n	800c9a8 <tcp_input+0x7c8>
    goto dropped;
 800c99a:	bf00      	nop
 800c99c:	e004      	b.n	800c9a8 <tcp_input+0x7c8>
    goto dropped;
 800c99e:	bf00      	nop
 800c9a0:	e002      	b.n	800c9a8 <tcp_input+0x7c8>
      goto dropped;
 800c9a2:	bf00      	nop
 800c9a4:	e000      	b.n	800c9a8 <tcp_input+0x7c8>
      goto dropped;
 800c9a6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7fd faaf 	bl	8009f0c <pbuf_free>
 800c9ae:	e000      	b.n	800c9b2 <tcp_input+0x7d2>
  return;
 800c9b0:	bf00      	nop
}
 800c9b2:	3724      	adds	r7, #36	; 0x24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd90      	pop	{r4, r7, pc}
 800c9b8:	20009f5c 	.word	0x20009f5c
 800c9bc:	200001b5 	.word	0x200001b5
 800c9c0:	20009f48 	.word	0x20009f48
 800c9c4:	200001b0 	.word	0x200001b0
 800c9c8:	200001b8 	.word	0x200001b8
 800c9cc:	080160e4 	.word	0x080160e4
 800c9d0:	08016298 	.word	0x08016298
 800c9d4:	08016130 	.word	0x08016130
 800c9d8:	20000188 	.word	0x20000188
 800c9dc:	20000198 	.word	0x20000198
 800c9e0:	200001ac 	.word	0x200001ac
 800c9e4:	200001b2 	.word	0x200001b2
 800c9e8:	200001a8 	.word	0x200001a8
 800c9ec:	20004854 	.word	0x20004854
 800c9f0:	20004858 	.word	0x20004858

0800c9f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d106      	bne.n	800ca10 <tcp_input_delayed_close+0x1c>
 800ca02:	4b17      	ldr	r3, [pc, #92]	; (800ca60 <tcp_input_delayed_close+0x6c>)
 800ca04:	f240 225a 	movw	r2, #602	; 0x25a
 800ca08:	4916      	ldr	r1, [pc, #88]	; (800ca64 <tcp_input_delayed_close+0x70>)
 800ca0a:	4817      	ldr	r0, [pc, #92]	; (800ca68 <tcp_input_delayed_close+0x74>)
 800ca0c:	f006 ff3c 	bl	8013888 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ca10:	4b16      	ldr	r3, [pc, #88]	; (800ca6c <tcp_input_delayed_close+0x78>)
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	f003 0310 	and.w	r3, r3, #16
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d01c      	beq.n	800ca56 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	8b5b      	ldrh	r3, [r3, #26]
 800ca20:	f003 0310 	and.w	r3, r3, #16
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10d      	bne.n	800ca44 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d008      	beq.n	800ca44 <tcp_input_delayed_close+0x50>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	6912      	ldr	r2, [r2, #16]
 800ca3c:	f06f 010e 	mvn.w	r1, #14
 800ca40:	4610      	mov	r0, r2
 800ca42:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ca44:	6879      	ldr	r1, [r7, #4]
 800ca46:	480a      	ldr	r0, [pc, #40]	; (800ca70 <tcp_input_delayed_close+0x7c>)
 800ca48:	f7ff fa52 	bl	800bef0 <tcp_pcb_remove>
    tcp_free(pcb);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f7fd fd9f 	bl	800a590 <tcp_free>
    return 1;
 800ca52:	2301      	movs	r3, #1
 800ca54:	e000      	b.n	800ca58 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	080160e4 	.word	0x080160e4
 800ca64:	080162b4 	.word	0x080162b4
 800ca68:	08016130 	.word	0x08016130
 800ca6c:	200001b5 	.word	0x200001b5
 800ca70:	20009f48 	.word	0x20009f48

0800ca74 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ca74:	b590      	push	{r4, r7, lr}
 800ca76:	b08b      	sub	sp, #44	; 0x2c
 800ca78:	af04      	add	r7, sp, #16
 800ca7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ca7c:	4b6f      	ldr	r3, [pc, #444]	; (800cc3c <tcp_listen_input+0x1c8>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	f003 0304 	and.w	r3, r3, #4
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f040 80d2 	bne.w	800cc2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <tcp_listen_input+0x2a>
 800ca90:	4b6b      	ldr	r3, [pc, #428]	; (800cc40 <tcp_listen_input+0x1cc>)
 800ca92:	f240 2281 	movw	r2, #641	; 0x281
 800ca96:	496b      	ldr	r1, [pc, #428]	; (800cc44 <tcp_listen_input+0x1d0>)
 800ca98:	486b      	ldr	r0, [pc, #428]	; (800cc48 <tcp_listen_input+0x1d4>)
 800ca9a:	f006 fef5 	bl	8013888 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ca9e:	4b67      	ldr	r3, [pc, #412]	; (800cc3c <tcp_listen_input+0x1c8>)
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	f003 0310 	and.w	r3, r3, #16
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d019      	beq.n	800cade <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800caaa:	4b68      	ldr	r3, [pc, #416]	; (800cc4c <tcp_listen_input+0x1d8>)
 800caac:	6819      	ldr	r1, [r3, #0]
 800caae:	4b68      	ldr	r3, [pc, #416]	; (800cc50 <tcp_listen_input+0x1dc>)
 800cab0:	881b      	ldrh	r3, [r3, #0]
 800cab2:	461a      	mov	r2, r3
 800cab4:	4b67      	ldr	r3, [pc, #412]	; (800cc54 <tcp_listen_input+0x1e0>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800caba:	4b67      	ldr	r3, [pc, #412]	; (800cc58 <tcp_listen_input+0x1e4>)
 800cabc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cabe:	885b      	ldrh	r3, [r3, #2]
 800cac0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cac2:	4a65      	ldr	r2, [pc, #404]	; (800cc58 <tcp_listen_input+0x1e4>)
 800cac4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cac6:	8812      	ldrh	r2, [r2, #0]
 800cac8:	b292      	uxth	r2, r2
 800caca:	9202      	str	r2, [sp, #8]
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	4b63      	ldr	r3, [pc, #396]	; (800cc5c <tcp_listen_input+0x1e8>)
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	4b63      	ldr	r3, [pc, #396]	; (800cc60 <tcp_listen_input+0x1ec>)
 800cad4:	4602      	mov	r2, r0
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f003 fbd6 	bl	8010288 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800cadc:	e0a9      	b.n	800cc32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800cade:	4b57      	ldr	r3, [pc, #348]	; (800cc3c <tcp_listen_input+0x1c8>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	f003 0302 	and.w	r3, r3, #2
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f000 80a3 	beq.w	800cc32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	7d5b      	ldrb	r3, [r3, #21]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff f861 	bl	800bbb8 <tcp_alloc>
 800caf6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d111      	bne.n	800cb22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00a      	beq.n	800cb1c <tcp_listen_input+0xa8>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	6910      	ldr	r0, [r2, #16]
 800cb0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb12:	2100      	movs	r1, #0
 800cb14:	4798      	blx	r3
 800cb16:	4603      	mov	r3, r0
 800cb18:	73bb      	strb	r3, [r7, #14]
      return;
 800cb1a:	e08b      	b.n	800cc34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cb1c:	23f0      	movs	r3, #240	; 0xf0
 800cb1e:	73bb      	strb	r3, [r7, #14]
      return;
 800cb20:	e088      	b.n	800cc34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cb22:	4b50      	ldr	r3, [pc, #320]	; (800cc64 <tcp_listen_input+0x1f0>)
 800cb24:	695a      	ldr	r2, [r3, #20]
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cb2a:	4b4e      	ldr	r3, [pc, #312]	; (800cc64 <tcp_listen_input+0x1f0>)
 800cb2c:	691a      	ldr	r2, [r3, #16]
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	8ada      	ldrh	r2, [r3, #22]
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cb3a:	4b47      	ldr	r3, [pc, #284]	; (800cc58 <tcp_listen_input+0x1e4>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	881b      	ldrh	r3, [r3, #0]
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	2203      	movs	r2, #3
 800cb4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cb4c:	4b41      	ldr	r3, [pc, #260]	; (800cc54 <tcp_listen_input+0x1e0>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	1c5a      	adds	r2, r3, #1
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cb5e:	6978      	ldr	r0, [r7, #20]
 800cb60:	f7ff fa5a 	bl	800c018 <tcp_next_iss>
 800cb64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	693a      	ldr	r2, [r7, #16]
 800cb6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	693a      	ldr	r2, [r7, #16]
 800cb76:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	693a      	ldr	r2, [r7, #16]
 800cb7c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cb7e:	4b35      	ldr	r3, [pc, #212]	; (800cc54 <tcp_listen_input+0x1e0>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	1e5a      	subs	r2, r3, #1
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	691a      	ldr	r2, [r3, #16]
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	7a5b      	ldrb	r3, [r3, #9]
 800cb9a:	f003 030c 	and.w	r3, r3, #12
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	7a1a      	ldrb	r2, [r3, #8]
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cbac:	4b2e      	ldr	r3, [pc, #184]	; (800cc68 <tcp_listen_input+0x1f4>)
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	60da      	str	r2, [r3, #12]
 800cbb4:	4a2c      	ldr	r2, [pc, #176]	; (800cc68 <tcp_listen_input+0x1f4>)
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	f003 fd27 	bl	801060c <tcp_timer_needed>
 800cbbe:	4b2b      	ldr	r3, [pc, #172]	; (800cc6c <tcp_listen_input+0x1f8>)
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cbc4:	6978      	ldr	r0, [r7, #20]
 800cbc6:	f001 fd8d 	bl	800e6e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cbca:	4b23      	ldr	r3, [pc, #140]	; (800cc58 <tcp_listen_input+0x1e4>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	89db      	ldrh	r3, [r3, #14]
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	3304      	adds	r3, #4
 800cbec:	4618      	mov	r0, r3
 800cbee:	f005 fc03 	bl	80123f8 <ip4_route>
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	3304      	adds	r3, #4
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f7ff fa32 	bl	800c064 <tcp_eff_send_mss_netif>
 800cc00:	4603      	mov	r3, r0
 800cc02:	461a      	mov	r2, r3
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cc08:	2112      	movs	r1, #18
 800cc0a:	6978      	ldr	r0, [r7, #20]
 800cc0c:	f002 fc9a 	bl	800f544 <tcp_enqueue_flags>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cc14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d004      	beq.n	800cc26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	6978      	ldr	r0, [r7, #20]
 800cc20:	f7fd fee0 	bl	800a9e4 <tcp_abandon>
      return;
 800cc24:	e006      	b.n	800cc34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cc26:	6978      	ldr	r0, [r7, #20]
 800cc28:	f002 fd7a 	bl	800f720 <tcp_output>
  return;
 800cc2c:	e001      	b.n	800cc32 <tcp_listen_input+0x1be>
    return;
 800cc2e:	bf00      	nop
 800cc30:	e000      	b.n	800cc34 <tcp_listen_input+0x1c0>
  return;
 800cc32:	bf00      	nop
}
 800cc34:	371c      	adds	r7, #28
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd90      	pop	{r4, r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	200001b4 	.word	0x200001b4
 800cc40:	080160e4 	.word	0x080160e4
 800cc44:	080162dc 	.word	0x080162dc
 800cc48:	08016130 	.word	0x08016130
 800cc4c:	200001ac 	.word	0x200001ac
 800cc50:	200001b2 	.word	0x200001b2
 800cc54:	200001a8 	.word	0x200001a8
 800cc58:	20000198 	.word	0x20000198
 800cc5c:	20004854 	.word	0x20004854
 800cc60:	20004858 	.word	0x20004858
 800cc64:	20004844 	.word	0x20004844
 800cc68:	20009f48 	.word	0x20009f48
 800cc6c:	20009f44 	.word	0x20009f44

0800cc70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af04      	add	r7, sp, #16
 800cc76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cc78:	4b2f      	ldr	r3, [pc, #188]	; (800cd38 <tcp_timewait_input+0xc8>)
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	f003 0304 	and.w	r3, r3, #4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d153      	bne.n	800cd2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d106      	bne.n	800cc98 <tcp_timewait_input+0x28>
 800cc8a:	4b2c      	ldr	r3, [pc, #176]	; (800cd3c <tcp_timewait_input+0xcc>)
 800cc8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cc90:	492b      	ldr	r1, [pc, #172]	; (800cd40 <tcp_timewait_input+0xd0>)
 800cc92:	482c      	ldr	r0, [pc, #176]	; (800cd44 <tcp_timewait_input+0xd4>)
 800cc94:	f006 fdf8 	bl	8013888 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cc98:	4b27      	ldr	r3, [pc, #156]	; (800cd38 <tcp_timewait_input+0xc8>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	f003 0302 	and.w	r3, r3, #2
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d02a      	beq.n	800ccfa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cca4:	4b28      	ldr	r3, [pc, #160]	; (800cd48 <tcp_timewait_input+0xd8>)
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	db2d      	blt.n	800cd0e <tcp_timewait_input+0x9e>
 800ccb2:	4b25      	ldr	r3, [pc, #148]	; (800cd48 <tcp_timewait_input+0xd8>)
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ccbe:	440b      	add	r3, r1
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	dc23      	bgt.n	800cd0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccc6:	4b21      	ldr	r3, [pc, #132]	; (800cd4c <tcp_timewait_input+0xdc>)
 800ccc8:	6819      	ldr	r1, [r3, #0]
 800ccca:	4b21      	ldr	r3, [pc, #132]	; (800cd50 <tcp_timewait_input+0xe0>)
 800cccc:	881b      	ldrh	r3, [r3, #0]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	4b1d      	ldr	r3, [pc, #116]	; (800cd48 <tcp_timewait_input+0xd8>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccd6:	4b1f      	ldr	r3, [pc, #124]	; (800cd54 <tcp_timewait_input+0xe4>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccda:	885b      	ldrh	r3, [r3, #2]
 800ccdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccde:	4a1d      	ldr	r2, [pc, #116]	; (800cd54 <tcp_timewait_input+0xe4>)
 800cce0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cce2:	8812      	ldrh	r2, [r2, #0]
 800cce4:	b292      	uxth	r2, r2
 800cce6:	9202      	str	r2, [sp, #8]
 800cce8:	9301      	str	r3, [sp, #4]
 800ccea:	4b1b      	ldr	r3, [pc, #108]	; (800cd58 <tcp_timewait_input+0xe8>)
 800ccec:	9300      	str	r3, [sp, #0]
 800ccee:	4b1b      	ldr	r3, [pc, #108]	; (800cd5c <tcp_timewait_input+0xec>)
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f003 fac8 	bl	8010288 <tcp_rst>
      return;
 800ccf8:	e01b      	b.n	800cd32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <tcp_timewait_input+0xc8>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d003      	beq.n	800cd0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cd06:	4b16      	ldr	r3, [pc, #88]	; (800cd60 <tcp_timewait_input+0xf0>)
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cd0e:	4b10      	ldr	r3, [pc, #64]	; (800cd50 <tcp_timewait_input+0xe0>)
 800cd10:	881b      	ldrh	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00c      	beq.n	800cd30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	8b5b      	ldrh	r3, [r3, #26]
 800cd1a:	f043 0302 	orr.w	r3, r3, #2
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f002 fcfb 	bl	800f720 <tcp_output>
  }
  return;
 800cd2a:	e001      	b.n	800cd30 <tcp_timewait_input+0xc0>
    return;
 800cd2c:	bf00      	nop
 800cd2e:	e000      	b.n	800cd32 <tcp_timewait_input+0xc2>
  return;
 800cd30:	bf00      	nop
}
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	200001b4 	.word	0x200001b4
 800cd3c:	080160e4 	.word	0x080160e4
 800cd40:	080162fc 	.word	0x080162fc
 800cd44:	08016130 	.word	0x08016130
 800cd48:	200001a8 	.word	0x200001a8
 800cd4c:	200001ac 	.word	0x200001ac
 800cd50:	200001b2 	.word	0x200001b2
 800cd54:	20000198 	.word	0x20000198
 800cd58:	20004854 	.word	0x20004854
 800cd5c:	20004858 	.word	0x20004858
 800cd60:	20009f4c 	.word	0x20009f4c

0800cd64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cd64:	b590      	push	{r4, r7, lr}
 800cd66:	b08d      	sub	sp, #52	; 0x34
 800cd68:	af04      	add	r7, sp, #16
 800cd6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d106      	bne.n	800cd88 <tcp_process+0x24>
 800cd7a:	4ba5      	ldr	r3, [pc, #660]	; (800d010 <tcp_process+0x2ac>)
 800cd7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cd80:	49a4      	ldr	r1, [pc, #656]	; (800d014 <tcp_process+0x2b0>)
 800cd82:	48a5      	ldr	r0, [pc, #660]	; (800d018 <tcp_process+0x2b4>)
 800cd84:	f006 fd80 	bl	8013888 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cd88:	4ba4      	ldr	r3, [pc, #656]	; (800d01c <tcp_process+0x2b8>)
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	f003 0304 	and.w	r3, r3, #4
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d04e      	beq.n	800ce32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	7d1b      	ldrb	r3, [r3, #20]
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d108      	bne.n	800cdae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cda0:	4b9f      	ldr	r3, [pc, #636]	; (800d020 <tcp_process+0x2bc>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d123      	bne.n	800cdf0 <tcp_process+0x8c>
        acceptable = 1;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	76fb      	strb	r3, [r7, #27]
 800cdac:	e020      	b.n	800cdf0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdb2:	4b9c      	ldr	r3, [pc, #624]	; (800d024 <tcp_process+0x2c0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d102      	bne.n	800cdc0 <tcp_process+0x5c>
        acceptable = 1;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	76fb      	strb	r3, [r7, #27]
 800cdbe:	e017      	b.n	800cdf0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cdc0:	4b98      	ldr	r3, [pc, #608]	; (800d024 <tcp_process+0x2c0>)
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	db10      	blt.n	800cdf0 <tcp_process+0x8c>
 800cdce:	4b95      	ldr	r3, [pc, #596]	; (800d024 <tcp_process+0x2c0>)
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd6:	6879      	ldr	r1, [r7, #4]
 800cdd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cdda:	440b      	add	r3, r1
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	dc06      	bgt.n	800cdf0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	8b5b      	ldrh	r3, [r3, #26]
 800cde6:	f043 0302 	orr.w	r3, r3, #2
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800cdf0:	7efb      	ldrb	r3, [r7, #27]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d01b      	beq.n	800ce2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	7d1b      	ldrb	r3, [r3, #20]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d106      	bne.n	800ce0c <tcp_process+0xa8>
 800cdfe:	4b84      	ldr	r3, [pc, #528]	; (800d010 <tcp_process+0x2ac>)
 800ce00:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ce04:	4988      	ldr	r1, [pc, #544]	; (800d028 <tcp_process+0x2c4>)
 800ce06:	4884      	ldr	r0, [pc, #528]	; (800d018 <tcp_process+0x2b4>)
 800ce08:	f006 fd3e 	bl	8013888 <iprintf>
      recv_flags |= TF_RESET;
 800ce0c:	4b87      	ldr	r3, [pc, #540]	; (800d02c <tcp_process+0x2c8>)
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	f043 0308 	orr.w	r3, r3, #8
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	4b85      	ldr	r3, [pc, #532]	; (800d02c <tcp_process+0x2c8>)
 800ce18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	8b5b      	ldrh	r3, [r3, #26]
 800ce1e:	f023 0301 	bic.w	r3, r3, #1
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ce28:	f06f 030d 	mvn.w	r3, #13
 800ce2c:	e37a      	b.n	800d524 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e378      	b.n	800d524 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ce32:	4b7a      	ldr	r3, [pc, #488]	; (800d01c <tcp_process+0x2b8>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	f003 0302 	and.w	r3, r3, #2
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d010      	beq.n	800ce60 <tcp_process+0xfc>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7d1b      	ldrb	r3, [r3, #20]
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	d00c      	beq.n	800ce60 <tcp_process+0xfc>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	7d1b      	ldrb	r3, [r3, #20]
 800ce4a:	2b03      	cmp	r3, #3
 800ce4c:	d008      	beq.n	800ce60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	8b5b      	ldrh	r3, [r3, #26]
 800ce52:	f043 0302 	orr.w	r3, r3, #2
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e361      	b.n	800d524 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	8b5b      	ldrh	r3, [r3, #26]
 800ce64:	f003 0310 	and.w	r3, r3, #16
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d103      	bne.n	800ce74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ce6c:	4b70      	ldr	r3, [pc, #448]	; (800d030 <tcp_process+0x2cc>)
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f001 fc2d 	bl	800e6e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7d1b      	ldrb	r3, [r3, #20]
 800ce8e:	3b02      	subs	r3, #2
 800ce90:	2b07      	cmp	r3, #7
 800ce92:	f200 8337 	bhi.w	800d504 <tcp_process+0x7a0>
 800ce96:	a201      	add	r2, pc, #4	; (adr r2, 800ce9c <tcp_process+0x138>)
 800ce98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce9c:	0800cebd 	.word	0x0800cebd
 800cea0:	0800d0ed 	.word	0x0800d0ed
 800cea4:	0800d265 	.word	0x0800d265
 800cea8:	0800d28f 	.word	0x0800d28f
 800ceac:	0800d3b3 	.word	0x0800d3b3
 800ceb0:	0800d265 	.word	0x0800d265
 800ceb4:	0800d43f 	.word	0x0800d43f
 800ceb8:	0800d4cf 	.word	0x0800d4cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cebc:	4b57      	ldr	r3, [pc, #348]	; (800d01c <tcp_process+0x2b8>)
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	f003 0310 	and.w	r3, r3, #16
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f000 80e4 	beq.w	800d092 <tcp_process+0x32e>
 800ceca:	4b54      	ldr	r3, [pc, #336]	; (800d01c <tcp_process+0x2b8>)
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	f003 0302 	and.w	r3, r3, #2
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f000 80dd 	beq.w	800d092 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cedc:	1c5a      	adds	r2, r3, #1
 800cede:	4b50      	ldr	r3, [pc, #320]	; (800d020 <tcp_process+0x2bc>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	f040 80d5 	bne.w	800d092 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cee8:	4b4e      	ldr	r3, [pc, #312]	; (800d024 <tcp_process+0x2c0>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	1c5a      	adds	r2, r3, #1
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800cefa:	4b49      	ldr	r3, [pc, #292]	; (800d020 <tcp_process+0x2bc>)
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cf02:	4b4c      	ldr	r3, [pc, #304]	; (800d034 <tcp_process+0x2d0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	89db      	ldrh	r3, [r3, #14]
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cf1c:	4b41      	ldr	r3, [pc, #260]	; (800d024 <tcp_process+0x2c0>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	1e5a      	subs	r2, r3, #1
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2204      	movs	r2, #4
 800cf2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	3304      	adds	r3, #4
 800cf34:	4618      	mov	r0, r3
 800cf36:	f005 fa5f 	bl	80123f8 <ip4_route>
 800cf3a:	4601      	mov	r1, r0
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	3304      	adds	r3, #4
 800cf40:	461a      	mov	r2, r3
 800cf42:	4620      	mov	r0, r4
 800cf44:	f7ff f88e 	bl	800c064 <tcp_eff_send_mss_netif>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf54:	009a      	lsls	r2, r3, #2
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	f241 111c 	movw	r1, #4380	; 0x111c
 800cf60:	428b      	cmp	r3, r1
 800cf62:	bf38      	it	cc
 800cf64:	460b      	movcc	r3, r1
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d204      	bcs.n	800cf74 <tcp_process+0x210>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	e00d      	b.n	800cf90 <tcp_process+0x22c>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf78:	005b      	lsls	r3, r3, #1
 800cf7a:	f241 121c 	movw	r2, #4380	; 0x111c
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d904      	bls.n	800cf8c <tcp_process+0x228>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf86:	005b      	lsls	r3, r3, #1
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	e001      	b.n	800cf90 <tcp_process+0x22c>
 800cf8c:	f241 131c 	movw	r3, #4380	; 0x111c
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d106      	bne.n	800cfae <tcp_process+0x24a>
 800cfa0:	4b1b      	ldr	r3, [pc, #108]	; (800d010 <tcp_process+0x2ac>)
 800cfa2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800cfa6:	4924      	ldr	r1, [pc, #144]	; (800d038 <tcp_process+0x2d4>)
 800cfa8:	481b      	ldr	r0, [pc, #108]	; (800d018 <tcp_process+0x2b4>)
 800cfaa:	f006 fc6d 	bl	8013888 <iprintf>
        --pcb->snd_queuelen;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfc2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cfc4:	69fb      	ldr	r3, [r7, #28]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d111      	bne.n	800cfee <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d106      	bne.n	800cfe4 <tcp_process+0x280>
 800cfd6:	4b0e      	ldr	r3, [pc, #56]	; (800d010 <tcp_process+0x2ac>)
 800cfd8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800cfdc:	4917      	ldr	r1, [pc, #92]	; (800d03c <tcp_process+0x2d8>)
 800cfde:	480e      	ldr	r0, [pc, #56]	; (800d018 <tcp_process+0x2b4>)
 800cfe0:	f006 fc52 	bl	8013888 <iprintf>
          pcb->unsent = rseg->next;
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	66da      	str	r2, [r3, #108]	; 0x6c
 800cfec:	e003      	b.n	800cff6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800cff6:	69f8      	ldr	r0, [r7, #28]
 800cff8:	f7fe fc57 	bl	800b8aa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d000:	2b00      	cmp	r3, #0
 800d002:	d11d      	bne.n	800d040 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d00a:	861a      	strh	r2, [r3, #48]	; 0x30
 800d00c:	e01f      	b.n	800d04e <tcp_process+0x2ea>
 800d00e:	bf00      	nop
 800d010:	080160e4 	.word	0x080160e4
 800d014:	0801631c 	.word	0x0801631c
 800d018:	08016130 	.word	0x08016130
 800d01c:	200001b4 	.word	0x200001b4
 800d020:	200001ac 	.word	0x200001ac
 800d024:	200001a8 	.word	0x200001a8
 800d028:	08016338 	.word	0x08016338
 800d02c:	200001b5 	.word	0x200001b5
 800d030:	20009f4c 	.word	0x20009f4c
 800d034:	20000198 	.word	0x20000198
 800d038:	08016358 	.word	0x08016358
 800d03c:	08016370 	.word	0x08016370
        } else {
          pcb->rtime = 0;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2200      	movs	r2, #0
 800d044:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00a      	beq.n	800d06e <tcp_process+0x30a>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	6910      	ldr	r0, [r2, #16]
 800d062:	2200      	movs	r2, #0
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	4798      	blx	r3
 800d068:	4603      	mov	r3, r0
 800d06a:	76bb      	strb	r3, [r7, #26]
 800d06c:	e001      	b.n	800d072 <tcp_process+0x30e>
 800d06e:	2300      	movs	r3, #0
 800d070:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d072:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d076:	f113 0f0d 	cmn.w	r3, #13
 800d07a:	d102      	bne.n	800d082 <tcp_process+0x31e>
          return ERR_ABRT;
 800d07c:	f06f 030c 	mvn.w	r3, #12
 800d080:	e250      	b.n	800d524 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	8b5b      	ldrh	r3, [r3, #26]
 800d086:	f043 0302 	orr.w	r3, r3, #2
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d090:	e23a      	b.n	800d508 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d092:	4b9d      	ldr	r3, [pc, #628]	; (800d308 <tcp_process+0x5a4>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	f003 0310 	and.w	r3, r3, #16
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f000 8234 	beq.w	800d508 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0a0:	4b9a      	ldr	r3, [pc, #616]	; (800d30c <tcp_process+0x5a8>)
 800d0a2:	6819      	ldr	r1, [r3, #0]
 800d0a4:	4b9a      	ldr	r3, [pc, #616]	; (800d310 <tcp_process+0x5ac>)
 800d0a6:	881b      	ldrh	r3, [r3, #0]
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	4b9a      	ldr	r3, [pc, #616]	; (800d314 <tcp_process+0x5b0>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0b0:	4b99      	ldr	r3, [pc, #612]	; (800d318 <tcp_process+0x5b4>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0b4:	885b      	ldrh	r3, [r3, #2]
 800d0b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0b8:	4a97      	ldr	r2, [pc, #604]	; (800d318 <tcp_process+0x5b4>)
 800d0ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0bc:	8812      	ldrh	r2, [r2, #0]
 800d0be:	b292      	uxth	r2, r2
 800d0c0:	9202      	str	r2, [sp, #8]
 800d0c2:	9301      	str	r3, [sp, #4]
 800d0c4:	4b95      	ldr	r3, [pc, #596]	; (800d31c <tcp_process+0x5b8>)
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	4b95      	ldr	r3, [pc, #596]	; (800d320 <tcp_process+0x5bc>)
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f003 f8db 	bl	8010288 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0d8:	2b05      	cmp	r3, #5
 800d0da:	f200 8215 	bhi.w	800d508 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f002 fea5 	bl	800fe34 <tcp_rexmit_rto>
      break;
 800d0ea:	e20d      	b.n	800d508 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d0ec:	4b86      	ldr	r3, [pc, #536]	; (800d308 <tcp_process+0x5a4>)
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	f003 0310 	and.w	r3, r3, #16
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 80a1 	beq.w	800d23c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d0fa:	4b84      	ldr	r3, [pc, #528]	; (800d30c <tcp_process+0x5a8>)
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	3b01      	subs	r3, #1
 800d106:	2b00      	cmp	r3, #0
 800d108:	db7e      	blt.n	800d208 <tcp_process+0x4a4>
 800d10a:	4b80      	ldr	r3, [pc, #512]	; (800d30c <tcp_process+0x5a8>)
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	2b00      	cmp	r3, #0
 800d116:	dc77      	bgt.n	800d208 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2204      	movs	r2, #4
 800d11c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d122:	2b00      	cmp	r3, #0
 800d124:	d102      	bne.n	800d12c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d126:	23fa      	movs	r3, #250	; 0xfa
 800d128:	76bb      	strb	r3, [r7, #26]
 800d12a:	e01d      	b.n	800d168 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d106      	bne.n	800d144 <tcp_process+0x3e0>
 800d136:	4b7b      	ldr	r3, [pc, #492]	; (800d324 <tcp_process+0x5c0>)
 800d138:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d13c:	497a      	ldr	r1, [pc, #488]	; (800d328 <tcp_process+0x5c4>)
 800d13e:	487b      	ldr	r0, [pc, #492]	; (800d32c <tcp_process+0x5c8>)
 800d140:	f006 fba2 	bl	8013888 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d148:	699b      	ldr	r3, [r3, #24]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00a      	beq.n	800d164 <tcp_process+0x400>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d152:	699b      	ldr	r3, [r3, #24]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	6910      	ldr	r0, [r2, #16]
 800d158:	2200      	movs	r2, #0
 800d15a:	6879      	ldr	r1, [r7, #4]
 800d15c:	4798      	blx	r3
 800d15e:	4603      	mov	r3, r0
 800d160:	76bb      	strb	r3, [r7, #26]
 800d162:	e001      	b.n	800d168 <tcp_process+0x404>
 800d164:	23f0      	movs	r3, #240	; 0xf0
 800d166:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d168:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00a      	beq.n	800d186 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d170:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d174:	f113 0f0d 	cmn.w	r3, #13
 800d178:	d002      	beq.n	800d180 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f7fd fcf0 	bl	800ab60 <tcp_abort>
            }
            return ERR_ABRT;
 800d180:	f06f 030c 	mvn.w	r3, #12
 800d184:	e1ce      	b.n	800d524 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 fae0 	bl	800d74c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d18c:	4b68      	ldr	r3, [pc, #416]	; (800d330 <tcp_process+0x5cc>)
 800d18e:	881b      	ldrh	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d005      	beq.n	800d1a0 <tcp_process+0x43c>
            recv_acked--;
 800d194:	4b66      	ldr	r3, [pc, #408]	; (800d330 <tcp_process+0x5cc>)
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	3b01      	subs	r3, #1
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	4b64      	ldr	r3, [pc, #400]	; (800d330 <tcp_process+0x5cc>)
 800d19e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1a4:	009a      	lsls	r2, r3, #2
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1aa:	005b      	lsls	r3, r3, #1
 800d1ac:	f241 111c 	movw	r1, #4380	; 0x111c
 800d1b0:	428b      	cmp	r3, r1
 800d1b2:	bf38      	it	cc
 800d1b4:	460b      	movcc	r3, r1
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d204      	bcs.n	800d1c4 <tcp_process+0x460>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	e00d      	b.n	800d1e0 <tcp_process+0x47c>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1c8:	005b      	lsls	r3, r3, #1
 800d1ca:	f241 121c 	movw	r2, #4380	; 0x111c
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d904      	bls.n	800d1dc <tcp_process+0x478>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1d6:	005b      	lsls	r3, r3, #1
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	e001      	b.n	800d1e0 <tcp_process+0x47c>
 800d1dc:	f241 131c 	movw	r3, #4380	; 0x111c
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d1e6:	4b53      	ldr	r3, [pc, #332]	; (800d334 <tcp_process+0x5d0>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	f003 0320 	and.w	r3, r3, #32
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d037      	beq.n	800d262 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	8b5b      	ldrh	r3, [r3, #26]
 800d1f6:	f043 0302 	orr.w	r3, r3, #2
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2207      	movs	r2, #7
 800d204:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d206:	e02c      	b.n	800d262 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d208:	4b40      	ldr	r3, [pc, #256]	; (800d30c <tcp_process+0x5a8>)
 800d20a:	6819      	ldr	r1, [r3, #0]
 800d20c:	4b40      	ldr	r3, [pc, #256]	; (800d310 <tcp_process+0x5ac>)
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	461a      	mov	r2, r3
 800d212:	4b40      	ldr	r3, [pc, #256]	; (800d314 <tcp_process+0x5b0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d218:	4b3f      	ldr	r3, [pc, #252]	; (800d318 <tcp_process+0x5b4>)
 800d21a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d21c:	885b      	ldrh	r3, [r3, #2]
 800d21e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d220:	4a3d      	ldr	r2, [pc, #244]	; (800d318 <tcp_process+0x5b4>)
 800d222:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d224:	8812      	ldrh	r2, [r2, #0]
 800d226:	b292      	uxth	r2, r2
 800d228:	9202      	str	r2, [sp, #8]
 800d22a:	9301      	str	r3, [sp, #4]
 800d22c:	4b3b      	ldr	r3, [pc, #236]	; (800d31c <tcp_process+0x5b8>)
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	4b3b      	ldr	r3, [pc, #236]	; (800d320 <tcp_process+0x5bc>)
 800d232:	4602      	mov	r2, r0
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f003 f827 	bl	8010288 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d23a:	e167      	b.n	800d50c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d23c:	4b32      	ldr	r3, [pc, #200]	; (800d308 <tcp_process+0x5a4>)
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	f003 0302 	and.w	r3, r3, #2
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 8161 	beq.w	800d50c <tcp_process+0x7a8>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	1e5a      	subs	r2, r3, #1
 800d250:	4b30      	ldr	r3, [pc, #192]	; (800d314 <tcp_process+0x5b0>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	429a      	cmp	r2, r3
 800d256:	f040 8159 	bne.w	800d50c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f002 fe0c 	bl	800fe78 <tcp_rexmit>
      break;
 800d260:	e154      	b.n	800d50c <tcp_process+0x7a8>
 800d262:	e153      	b.n	800d50c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f000 fa71 	bl	800d74c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d26a:	4b32      	ldr	r3, [pc, #200]	; (800d334 <tcp_process+0x5d0>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	f003 0320 	and.w	r3, r3, #32
 800d272:	2b00      	cmp	r3, #0
 800d274:	f000 814c 	beq.w	800d510 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	8b5b      	ldrh	r3, [r3, #26]
 800d27c:	f043 0302 	orr.w	r3, r3, #2
 800d280:	b29a      	uxth	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2207      	movs	r2, #7
 800d28a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d28c:	e140      	b.n	800d510 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fa5c 	bl	800d74c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d294:	4b27      	ldr	r3, [pc, #156]	; (800d334 <tcp_process+0x5d0>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	f003 0320 	and.w	r3, r3, #32
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d071      	beq.n	800d384 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2a0:	4b19      	ldr	r3, [pc, #100]	; (800d308 <tcp_process+0x5a4>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	f003 0310 	and.w	r3, r3, #16
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d060      	beq.n	800d36e <tcp_process+0x60a>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2b0:	4b16      	ldr	r3, [pc, #88]	; (800d30c <tcp_process+0x5a8>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d15a      	bne.n	800d36e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d156      	bne.n	800d36e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	8b5b      	ldrh	r3, [r3, #26]
 800d2c4:	f043 0302 	orr.w	r3, r3, #2
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7fe fdbe 	bl	800be50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d2d4:	4b18      	ldr	r3, [pc, #96]	; (800d338 <tcp_process+0x5d4>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d105      	bne.n	800d2ea <tcp_process+0x586>
 800d2de:	4b16      	ldr	r3, [pc, #88]	; (800d338 <tcp_process+0x5d4>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	4a14      	ldr	r2, [pc, #80]	; (800d338 <tcp_process+0x5d4>)
 800d2e6:	6013      	str	r3, [r2, #0]
 800d2e8:	e02e      	b.n	800d348 <tcp_process+0x5e4>
 800d2ea:	4b13      	ldr	r3, [pc, #76]	; (800d338 <tcp_process+0x5d4>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	617b      	str	r3, [r7, #20]
 800d2f0:	e027      	b.n	800d342 <tcp_process+0x5de>
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d11f      	bne.n	800d33c <tcp_process+0x5d8>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	68da      	ldr	r2, [r3, #12]
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	60da      	str	r2, [r3, #12]
 800d304:	e020      	b.n	800d348 <tcp_process+0x5e4>
 800d306:	bf00      	nop
 800d308:	200001b4 	.word	0x200001b4
 800d30c:	200001ac 	.word	0x200001ac
 800d310:	200001b2 	.word	0x200001b2
 800d314:	200001a8 	.word	0x200001a8
 800d318:	20000198 	.word	0x20000198
 800d31c:	20004854 	.word	0x20004854
 800d320:	20004858 	.word	0x20004858
 800d324:	080160e4 	.word	0x080160e4
 800d328:	08016384 	.word	0x08016384
 800d32c:	08016130 	.word	0x08016130
 800d330:	200001b0 	.word	0x200001b0
 800d334:	200001b5 	.word	0x200001b5
 800d338:	20009f48 	.word	0x20009f48
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	617b      	str	r3, [r7, #20]
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1d4      	bne.n	800d2f2 <tcp_process+0x58e>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	60da      	str	r2, [r3, #12]
 800d34e:	4b77      	ldr	r3, [pc, #476]	; (800d52c <tcp_process+0x7c8>)
 800d350:	2201      	movs	r2, #1
 800d352:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	220a      	movs	r2, #10
 800d358:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d35a:	4b75      	ldr	r3, [pc, #468]	; (800d530 <tcp_process+0x7cc>)
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	60da      	str	r2, [r3, #12]
 800d362:	4a73      	ldr	r2, [pc, #460]	; (800d530 <tcp_process+0x7cc>)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	f003 f950 	bl	801060c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d36c:	e0d2      	b.n	800d514 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	8b5b      	ldrh	r3, [r3, #26]
 800d372:	f043 0302 	orr.w	r3, r3, #2
 800d376:	b29a      	uxth	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2208      	movs	r2, #8
 800d380:	751a      	strb	r2, [r3, #20]
      break;
 800d382:	e0c7      	b.n	800d514 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d384:	4b6b      	ldr	r3, [pc, #428]	; (800d534 <tcp_process+0x7d0>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	f003 0310 	and.w	r3, r3, #16
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f000 80c1 	beq.w	800d514 <tcp_process+0x7b0>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d396:	4b68      	ldr	r3, [pc, #416]	; (800d538 <tcp_process+0x7d4>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	f040 80ba 	bne.w	800d514 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f040 80b5 	bne.w	800d514 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2206      	movs	r2, #6
 800d3ae:	751a      	strb	r2, [r3, #20]
      break;
 800d3b0:	e0b0      	b.n	800d514 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f9ca 	bl	800d74c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d3b8:	4b60      	ldr	r3, [pc, #384]	; (800d53c <tcp_process+0x7d8>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	f003 0320 	and.w	r3, r3, #32
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f000 80a9 	beq.w	800d518 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	8b5b      	ldrh	r3, [r3, #26]
 800d3ca:	f043 0302 	orr.w	r3, r3, #2
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7fe fd3b 	bl	800be50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d3da:	4b59      	ldr	r3, [pc, #356]	; (800d540 <tcp_process+0x7dc>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d105      	bne.n	800d3f0 <tcp_process+0x68c>
 800d3e4:	4b56      	ldr	r3, [pc, #344]	; (800d540 <tcp_process+0x7dc>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	4a55      	ldr	r2, [pc, #340]	; (800d540 <tcp_process+0x7dc>)
 800d3ec:	6013      	str	r3, [r2, #0]
 800d3ee:	e013      	b.n	800d418 <tcp_process+0x6b4>
 800d3f0:	4b53      	ldr	r3, [pc, #332]	; (800d540 <tcp_process+0x7dc>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	613b      	str	r3, [r7, #16]
 800d3f6:	e00c      	b.n	800d412 <tcp_process+0x6ae>
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d104      	bne.n	800d40c <tcp_process+0x6a8>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	68da      	ldr	r2, [r3, #12]
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	60da      	str	r2, [r3, #12]
 800d40a:	e005      	b.n	800d418 <tcp_process+0x6b4>
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	613b      	str	r3, [r7, #16]
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1ef      	bne.n	800d3f8 <tcp_process+0x694>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2200      	movs	r2, #0
 800d41c:	60da      	str	r2, [r3, #12]
 800d41e:	4b43      	ldr	r3, [pc, #268]	; (800d52c <tcp_process+0x7c8>)
 800d420:	2201      	movs	r2, #1
 800d422:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	220a      	movs	r2, #10
 800d428:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d42a:	4b41      	ldr	r3, [pc, #260]	; (800d530 <tcp_process+0x7cc>)
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	60da      	str	r2, [r3, #12]
 800d432:	4a3f      	ldr	r2, [pc, #252]	; (800d530 <tcp_process+0x7cc>)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6013      	str	r3, [r2, #0]
 800d438:	f003 f8e8 	bl	801060c <tcp_timer_needed>
      }
      break;
 800d43c:	e06c      	b.n	800d518 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f984 	bl	800d74c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d444:	4b3b      	ldr	r3, [pc, #236]	; (800d534 <tcp_process+0x7d0>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	f003 0310 	and.w	r3, r3, #16
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d065      	beq.n	800d51c <tcp_process+0x7b8>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d454:	4b38      	ldr	r3, [pc, #224]	; (800d538 <tcp_process+0x7d4>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d15f      	bne.n	800d51c <tcp_process+0x7b8>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d460:	2b00      	cmp	r3, #0
 800d462:	d15b      	bne.n	800d51c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7fe fcf3 	bl	800be50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d46a:	4b35      	ldr	r3, [pc, #212]	; (800d540 <tcp_process+0x7dc>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	429a      	cmp	r2, r3
 800d472:	d105      	bne.n	800d480 <tcp_process+0x71c>
 800d474:	4b32      	ldr	r3, [pc, #200]	; (800d540 <tcp_process+0x7dc>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	4a31      	ldr	r2, [pc, #196]	; (800d540 <tcp_process+0x7dc>)
 800d47c:	6013      	str	r3, [r2, #0]
 800d47e:	e013      	b.n	800d4a8 <tcp_process+0x744>
 800d480:	4b2f      	ldr	r3, [pc, #188]	; (800d540 <tcp_process+0x7dc>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	60fb      	str	r3, [r7, #12]
 800d486:	e00c      	b.n	800d4a2 <tcp_process+0x73e>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d104      	bne.n	800d49c <tcp_process+0x738>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	68da      	ldr	r2, [r3, #12]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	60da      	str	r2, [r3, #12]
 800d49a:	e005      	b.n	800d4a8 <tcp_process+0x744>
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d1ef      	bne.n	800d488 <tcp_process+0x724>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	60da      	str	r2, [r3, #12]
 800d4ae:	4b1f      	ldr	r3, [pc, #124]	; (800d52c <tcp_process+0x7c8>)
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	220a      	movs	r2, #10
 800d4b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d4ba:	4b1d      	ldr	r3, [pc, #116]	; (800d530 <tcp_process+0x7cc>)
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	60da      	str	r2, [r3, #12]
 800d4c2:	4a1b      	ldr	r2, [pc, #108]	; (800d530 <tcp_process+0x7cc>)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	f003 f8a0 	bl	801060c <tcp_timer_needed>
      }
      break;
 800d4cc:	e026      	b.n	800d51c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f93c 	bl	800d74c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d4d4:	4b17      	ldr	r3, [pc, #92]	; (800d534 <tcp_process+0x7d0>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	f003 0310 	and.w	r3, r3, #16
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d01f      	beq.n	800d520 <tcp_process+0x7bc>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4e4:	4b14      	ldr	r3, [pc, #80]	; (800d538 <tcp_process+0x7d4>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d119      	bne.n	800d520 <tcp_process+0x7bc>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d115      	bne.n	800d520 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d4f4:	4b11      	ldr	r3, [pc, #68]	; (800d53c <tcp_process+0x7d8>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	f043 0310 	orr.w	r3, r3, #16
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	4b0f      	ldr	r3, [pc, #60]	; (800d53c <tcp_process+0x7d8>)
 800d500:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d502:	e00d      	b.n	800d520 <tcp_process+0x7bc>
    default:
      break;
 800d504:	bf00      	nop
 800d506:	e00c      	b.n	800d522 <tcp_process+0x7be>
      break;
 800d508:	bf00      	nop
 800d50a:	e00a      	b.n	800d522 <tcp_process+0x7be>
      break;
 800d50c:	bf00      	nop
 800d50e:	e008      	b.n	800d522 <tcp_process+0x7be>
      break;
 800d510:	bf00      	nop
 800d512:	e006      	b.n	800d522 <tcp_process+0x7be>
      break;
 800d514:	bf00      	nop
 800d516:	e004      	b.n	800d522 <tcp_process+0x7be>
      break;
 800d518:	bf00      	nop
 800d51a:	e002      	b.n	800d522 <tcp_process+0x7be>
      break;
 800d51c:	bf00      	nop
 800d51e:	e000      	b.n	800d522 <tcp_process+0x7be>
      break;
 800d520:	bf00      	nop
  }
  return ERR_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3724      	adds	r7, #36	; 0x24
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd90      	pop	{r4, r7, pc}
 800d52c:	20009f44 	.word	0x20009f44
 800d530:	20009f58 	.word	0x20009f58
 800d534:	200001b4 	.word	0x200001b4
 800d538:	200001ac 	.word	0x200001ac
 800d53c:	200001b5 	.word	0x200001b5
 800d540:	20009f48 	.word	0x20009f48

0800d544 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d544:	b590      	push	{r4, r7, lr}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d106      	bne.n	800d562 <tcp_oos_insert_segment+0x1e>
 800d554:	4b3b      	ldr	r3, [pc, #236]	; (800d644 <tcp_oos_insert_segment+0x100>)
 800d556:	f240 421f 	movw	r2, #1055	; 0x41f
 800d55a:	493b      	ldr	r1, [pc, #236]	; (800d648 <tcp_oos_insert_segment+0x104>)
 800d55c:	483b      	ldr	r0, [pc, #236]	; (800d64c <tcp_oos_insert_segment+0x108>)
 800d55e:	f006 f993 	bl	8013888 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	899b      	ldrh	r3, [r3, #12]
 800d568:	b29b      	uxth	r3, r3
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fb fa1a 	bl	80089a4 <lwip_htons>
 800d570:	4603      	mov	r3, r0
 800d572:	b2db      	uxtb	r3, r3
 800d574:	f003 0301 	and.w	r3, r3, #1
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d028      	beq.n	800d5ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d57c:	6838      	ldr	r0, [r7, #0]
 800d57e:	f7fe f97f 	bl	800b880 <tcp_segs_free>
    next = NULL;
 800d582:	2300      	movs	r3, #0
 800d584:	603b      	str	r3, [r7, #0]
 800d586:	e056      	b.n	800d636 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	899b      	ldrh	r3, [r3, #12]
 800d58e:	b29b      	uxth	r3, r3
 800d590:	4618      	mov	r0, r3
 800d592:	f7fb fa07 	bl	80089a4 <lwip_htons>
 800d596:	4603      	mov	r3, r0
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	f003 0301 	and.w	r3, r3, #1
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00d      	beq.n	800d5be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	899b      	ldrh	r3, [r3, #12]
 800d5a8:	b29c      	uxth	r4, r3
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	f7fb f9fa 	bl	80089a4 <lwip_htons>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	4322      	orrs	r2, r4
 800d5ba:	b292      	uxth	r2, r2
 800d5bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f7fe f96e 	bl	800b8aa <tcp_seg_free>
    while (next &&
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00e      	beq.n	800d5f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	891b      	ldrh	r3, [r3, #8]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	4b1d      	ldr	r3, [pc, #116]	; (800d650 <tcp_oos_insert_segment+0x10c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	441a      	add	r2, r3
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	6839      	ldr	r1, [r7, #0]
 800d5e8:	8909      	ldrh	r1, [r1, #8]
 800d5ea:	440b      	add	r3, r1
 800d5ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	daca      	bge.n	800d588 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d01e      	beq.n	800d636 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	891b      	ldrh	r3, [r3, #8]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	4b14      	ldr	r3, [pc, #80]	; (800d650 <tcp_oos_insert_segment+0x10c>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	441a      	add	r2, r3
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	dd12      	ble.n	800d636 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	b29a      	uxth	r2, r3
 800d618:	4b0d      	ldr	r3, [pc, #52]	; (800d650 <tcp_oos_insert_segment+0x10c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	1ad3      	subs	r3, r2, r3
 800d620:	b29a      	uxth	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	891b      	ldrh	r3, [r3, #8]
 800d62e:	4619      	mov	r1, r3
 800d630:	4610      	mov	r0, r2
 800d632:	f7fc fae5 	bl	8009c00 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	601a      	str	r2, [r3, #0]
}
 800d63c:	bf00      	nop
 800d63e:	3714      	adds	r7, #20
 800d640:	46bd      	mov	sp, r7
 800d642:	bd90      	pop	{r4, r7, pc}
 800d644:	080160e4 	.word	0x080160e4
 800d648:	080163a4 	.word	0x080163a4
 800d64c:	08016130 	.word	0x08016130
 800d650:	200001a8 	.word	0x200001a8

0800d654 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d654:	b5b0      	push	{r4, r5, r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
 800d660:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d662:	e03e      	b.n	800d6e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	4618      	mov	r0, r3
 800d674:	f7fc fcd2 	bl	800a01c <pbuf_clen>
 800d678:	4603      	mov	r3, r0
 800d67a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d682:	8a7a      	ldrh	r2, [r7, #18]
 800d684:	429a      	cmp	r2, r3
 800d686:	d906      	bls.n	800d696 <tcp_free_acked_segments+0x42>
 800d688:	4b2a      	ldr	r3, [pc, #168]	; (800d734 <tcp_free_acked_segments+0xe0>)
 800d68a:	f240 4257 	movw	r2, #1111	; 0x457
 800d68e:	492a      	ldr	r1, [pc, #168]	; (800d738 <tcp_free_acked_segments+0xe4>)
 800d690:	482a      	ldr	r0, [pc, #168]	; (800d73c <tcp_free_acked_segments+0xe8>)
 800d692:	f006 f8f9 	bl	8013888 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d69c:	8a7b      	ldrh	r3, [r7, #18]
 800d69e:	1ad3      	subs	r3, r2, r3
 800d6a0:	b29a      	uxth	r2, r3
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	891a      	ldrh	r2, [r3, #8]
 800d6ac:	4b24      	ldr	r3, [pc, #144]	; (800d740 <tcp_free_acked_segments+0xec>)
 800d6ae:	881b      	ldrh	r3, [r3, #0]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	4b22      	ldr	r3, [pc, #136]	; (800d740 <tcp_free_acked_segments+0xec>)
 800d6b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d6b8:	6978      	ldr	r0, [r7, #20]
 800d6ba:	f7fe f8f6 	bl	800b8aa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00c      	beq.n	800d6e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d109      	bne.n	800d6e2 <tcp_free_acked_segments+0x8e>
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d106      	bne.n	800d6e2 <tcp_free_acked_segments+0x8e>
 800d6d4:	4b17      	ldr	r3, [pc, #92]	; (800d734 <tcp_free_acked_segments+0xe0>)
 800d6d6:	f240 4261 	movw	r2, #1121	; 0x461
 800d6da:	491a      	ldr	r1, [pc, #104]	; (800d744 <tcp_free_acked_segments+0xf0>)
 800d6dc:	4817      	ldr	r0, [pc, #92]	; (800d73c <tcp_free_acked_segments+0xe8>)
 800d6de:	f006 f8d3 	bl	8013888 <iprintf>
  while (seg_list != NULL &&
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d020      	beq.n	800d72a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fb f96d 	bl	80089ce <lwip_htonl>
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	891b      	ldrh	r3, [r3, #8]
 800d6fa:	461d      	mov	r5, r3
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	899b      	ldrh	r3, [r3, #12]
 800d702:	b29b      	uxth	r3, r3
 800d704:	4618      	mov	r0, r3
 800d706:	f7fb f94d 	bl	80089a4 <lwip_htons>
 800d70a:	4603      	mov	r3, r0
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	f003 0303 	and.w	r3, r3, #3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <tcp_free_acked_segments+0xc6>
 800d716:	2301      	movs	r3, #1
 800d718:	e000      	b.n	800d71c <tcp_free_acked_segments+0xc8>
 800d71a:	2300      	movs	r3, #0
 800d71c:	442b      	add	r3, r5
 800d71e:	18e2      	adds	r2, r4, r3
 800d720:	4b09      	ldr	r3, [pc, #36]	; (800d748 <tcp_free_acked_segments+0xf4>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d726:	2b00      	cmp	r3, #0
 800d728:	dd9c      	ble.n	800d664 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d72a:	68bb      	ldr	r3, [r7, #8]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3718      	adds	r7, #24
 800d730:	46bd      	mov	sp, r7
 800d732:	bdb0      	pop	{r4, r5, r7, pc}
 800d734:	080160e4 	.word	0x080160e4
 800d738:	080163cc 	.word	0x080163cc
 800d73c:	08016130 	.word	0x08016130
 800d740:	200001b0 	.word	0x200001b0
 800d744:	080163f4 	.word	0x080163f4
 800d748:	200001ac 	.word	0x200001ac

0800d74c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d74c:	b5b0      	push	{r4, r5, r7, lr}
 800d74e:	b094      	sub	sp, #80	; 0x50
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d106      	bne.n	800d76c <tcp_receive+0x20>
 800d75e:	4ba6      	ldr	r3, [pc, #664]	; (800d9f8 <tcp_receive+0x2ac>)
 800d760:	f240 427b 	movw	r2, #1147	; 0x47b
 800d764:	49a5      	ldr	r1, [pc, #660]	; (800d9fc <tcp_receive+0x2b0>)
 800d766:	48a6      	ldr	r0, [pc, #664]	; (800da00 <tcp_receive+0x2b4>)
 800d768:	f006 f88e 	bl	8013888 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	7d1b      	ldrb	r3, [r3, #20]
 800d770:	2b03      	cmp	r3, #3
 800d772:	d806      	bhi.n	800d782 <tcp_receive+0x36>
 800d774:	4ba0      	ldr	r3, [pc, #640]	; (800d9f8 <tcp_receive+0x2ac>)
 800d776:	f240 427c 	movw	r2, #1148	; 0x47c
 800d77a:	49a2      	ldr	r1, [pc, #648]	; (800da04 <tcp_receive+0x2b8>)
 800d77c:	48a0      	ldr	r0, [pc, #640]	; (800da00 <tcp_receive+0x2b4>)
 800d77e:	f006 f883 	bl	8013888 <iprintf>

  if (flags & TCP_ACK) {
 800d782:	4ba1      	ldr	r3, [pc, #644]	; (800da08 <tcp_receive+0x2bc>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	f003 0310 	and.w	r3, r3, #16
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f000 8263 	beq.w	800dc56 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d796:	461a      	mov	r2, r3
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d79c:	4413      	add	r3, r2
 800d79e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7a4:	4b99      	ldr	r3, [pc, #612]	; (800da0c <tcp_receive+0x2c0>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	1ad3      	subs	r3, r2, r3
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	db1b      	blt.n	800d7e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7b2:	4b96      	ldr	r3, [pc, #600]	; (800da0c <tcp_receive+0x2c0>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d106      	bne.n	800d7c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d7be:	4b94      	ldr	r3, [pc, #592]	; (800da10 <tcp_receive+0x2c4>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	db0e      	blt.n	800d7e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d7cc:	4b90      	ldr	r3, [pc, #576]	; (800da10 <tcp_receive+0x2c4>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d125      	bne.n	800d820 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d7d4:	4b8f      	ldr	r3, [pc, #572]	; (800da14 <tcp_receive+0x2c8>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	89db      	ldrh	r3, [r3, #14]
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d91c      	bls.n	800d820 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d7e6:	4b8b      	ldr	r3, [pc, #556]	; (800da14 <tcp_receive+0x2c8>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	89db      	ldrh	r3, [r3, #14]
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d800:	429a      	cmp	r2, r3
 800d802:	d205      	bcs.n	800d810 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d810:	4b7e      	ldr	r3, [pc, #504]	; (800da0c <tcp_receive+0x2c0>)
 800d812:	681a      	ldr	r2, [r3, #0]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d818:	4b7d      	ldr	r3, [pc, #500]	; (800da10 <tcp_receive+0x2c4>)
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d820:	4b7b      	ldr	r3, [pc, #492]	; (800da10 <tcp_receive+0x2c4>)
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	dc58      	bgt.n	800d8e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d82e:	4b7a      	ldr	r3, [pc, #488]	; (800da18 <tcp_receive+0x2cc>)
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d14b      	bne.n	800d8ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d840:	4413      	add	r3, r2
 800d842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d844:	429a      	cmp	r2, r3
 800d846:	d142      	bne.n	800d8ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d84e:	2b00      	cmp	r3, #0
 800d850:	db3d      	blt.n	800d8ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d856:	4b6e      	ldr	r3, [pc, #440]	; (800da10 <tcp_receive+0x2c4>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d137      	bne.n	800d8ce <tcp_receive+0x182>
              found_dupack = 1;
 800d85e:	2301      	movs	r3, #1
 800d860:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d868:	2bff      	cmp	r3, #255	; 0xff
 800d86a:	d007      	beq.n	800d87c <tcp_receive+0x130>
                ++pcb->dupacks;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d872:	3301      	adds	r3, #1
 800d874:	b2da      	uxtb	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d882:	2b03      	cmp	r3, #3
 800d884:	d91b      	bls.n	800d8be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d890:	4413      	add	r3, r2
 800d892:	b29a      	uxth	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d30a      	bcc.n	800d8b4 <tcp_receive+0x168>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8a8:	4413      	add	r3, r2
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d8b2:	e004      	b.n	800d8be <tcp_receive+0x172>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d902      	bls.n	800d8ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f002 fb41 	bl	800ff50 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f040 8160 	bne.w	800db96 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8de:	e15a      	b.n	800db96 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d8e0:	4b4b      	ldr	r3, [pc, #300]	; (800da10 <tcp_receive+0x2c4>)
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f2c0 814d 	blt.w	800db8c <tcp_receive+0x440>
 800d8f2:	4b47      	ldr	r3, [pc, #284]	; (800da10 <tcp_receive+0x2c4>)
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f300 8145 	bgt.w	800db8c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	8b5b      	ldrh	r3, [r3, #26]
 800d906:	f003 0304 	and.w	r3, r3, #4
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d010      	beq.n	800d930 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	8b5b      	ldrh	r3, [r3, #26]
 800d912:	f023 0304 	bic.w	r3, r3, #4
 800d916:	b29a      	uxth	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d93e:	10db      	asrs	r3, r3, #3
 800d940:	b21b      	sxth	r3, r3
 800d942:	b29a      	uxth	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	4413      	add	r3, r2
 800d94e:	b29b      	uxth	r3, r3
 800d950:	b21a      	sxth	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d958:	4b2d      	ldr	r3, [pc, #180]	; (800da10 <tcp_receive+0x2c4>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d962:	b29b      	uxth	r3, r3
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d970:	4b27      	ldr	r3, [pc, #156]	; (800da10 <tcp_receive+0x2c4>)
 800d972:	681a      	ldr	r2, [r3, #0]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	7d1b      	ldrb	r3, [r3, #20]
 800d97c:	2b03      	cmp	r3, #3
 800d97e:	f240 8096 	bls.w	800daae <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d98e:	429a      	cmp	r2, r3
 800d990:	d244      	bcs.n	800da1c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	8b5b      	ldrh	r3, [r3, #26]
 800d996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d001      	beq.n	800d9a2 <tcp_receive+0x256>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e000      	b.n	800d9a4 <tcp_receive+0x258>
 800d9a2:	2302      	movs	r3, #2
 800d9a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d9a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9b2:	fb12 f303 	smulbb	r3, r2, r3
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	bf28      	it	cs
 800d9be:	4613      	movcs	r3, r2
 800d9c0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d9c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d9ca:	4413      	add	r3, r2
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d309      	bcc.n	800d9ec <tcp_receive+0x2a0>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d9de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d9e0:	4413      	add	r3, r2
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d9ea:	e060      	b.n	800daae <tcp_receive+0x362>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d9f6:	e05a      	b.n	800daae <tcp_receive+0x362>
 800d9f8:	080160e4 	.word	0x080160e4
 800d9fc:	08016414 	.word	0x08016414
 800da00:	08016130 	.word	0x08016130
 800da04:	08016430 	.word	0x08016430
 800da08:	200001b4 	.word	0x200001b4
 800da0c:	200001a8 	.word	0x200001a8
 800da10:	200001ac 	.word	0x200001ac
 800da14:	20000198 	.word	0x20000198
 800da18:	200001b2 	.word	0x200001b2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da24:	4413      	add	r3, r2
 800da26:	b29a      	uxth	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da2e:	429a      	cmp	r2, r3
 800da30:	d309      	bcc.n	800da46 <tcp_receive+0x2fa>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da3a:	4413      	add	r3, r2
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800da44:	e004      	b.n	800da50 <tcp_receive+0x304>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d326      	bcc.n	800daae <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	b29a      	uxth	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da80:	4413      	add	r3, r2
 800da82:	b29a      	uxth	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d30a      	bcc.n	800daa4 <tcp_receive+0x358>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da98:	4413      	add	r3, r2
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800daa2:	e004      	b.n	800daae <tcp_receive+0x362>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800daaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab6:	4a98      	ldr	r2, [pc, #608]	; (800dd18 <tcp_receive+0x5cc>)
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f7ff fdcb 	bl	800d654 <tcp_free_acked_segments>
 800dabe:	4602      	mov	r2, r0
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dacc:	4a93      	ldr	r2, [pc, #588]	; (800dd1c <tcp_receive+0x5d0>)
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7ff fdc0 	bl	800d654 <tcp_free_acked_segments>
 800dad4:	4602      	mov	r2, r0
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d104      	bne.n	800daec <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dae8:	861a      	strh	r2, [r3, #48]	; 0x30
 800daea:	e002      	b.n	800daf2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d103      	bne.n	800db08 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800db0e:	4b84      	ldr	r3, [pc, #528]	; (800dd20 <tcp_receive+0x5d4>)
 800db10:	881b      	ldrh	r3, [r3, #0]
 800db12:	4413      	add	r3, r2
 800db14:	b29a      	uxth	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	8b5b      	ldrh	r3, [r3, #26]
 800db20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db24:	2b00      	cmp	r3, #0
 800db26:	d035      	beq.n	800db94 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d118      	bne.n	800db62 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00c      	beq.n	800db52 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	4618      	mov	r0, r3
 800db46:	f7fa ff42 	bl	80089ce <lwip_htonl>
 800db4a:	4603      	mov	r3, r0
 800db4c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800db4e:	2b00      	cmp	r3, #0
 800db50:	dc20      	bgt.n	800db94 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	8b5b      	ldrh	r3, [r3, #26]
 800db56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db60:	e018      	b.n	800db94 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fa ff2d 	bl	80089ce <lwip_htonl>
 800db74:	4603      	mov	r3, r0
 800db76:	1ae3      	subs	r3, r4, r3
 800db78:	2b00      	cmp	r3, #0
 800db7a:	dc0b      	bgt.n	800db94 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	8b5b      	ldrh	r3, [r3, #26]
 800db80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db84:	b29a      	uxth	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db8a:	e003      	b.n	800db94 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f002 fbcd 	bl	801032c <tcp_send_empty_ack>
 800db92:	e000      	b.n	800db96 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db94:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d05b      	beq.n	800dc56 <tcp_receive+0x50a>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dba2:	4b60      	ldr	r3, [pc, #384]	; (800dd24 <tcp_receive+0x5d8>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	da54      	bge.n	800dc56 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dbac:	4b5e      	ldr	r3, [pc, #376]	; (800dd28 <tcp_receive+0x5dc>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	1ad3      	subs	r3, r2, r3
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dbc0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dbca:	10db      	asrs	r3, r3, #3
 800dbcc:	b21b      	sxth	r3, r3
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	1ad3      	subs	r3, r2, r3
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dbe4:	4413      	add	r3, r2
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	b21a      	sxth	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800dbee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	da05      	bge.n	800dc02 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800dbf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dbfa:	425b      	negs	r3, r3
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dc02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc0c:	109b      	asrs	r3, r3, #2
 800dc0e:	b21b      	sxth	r3, r3
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	1ad3      	subs	r3, r2, r3
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dc26:	4413      	add	r3, r2
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	b21a      	sxth	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dc36:	10db      	asrs	r3, r3, #3
 800dc38:	b21b      	sxth	r3, r3
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	4413      	add	r3, r2
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	b21a      	sxth	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800dc56:	4b35      	ldr	r3, [pc, #212]	; (800dd2c <tcp_receive+0x5e0>)
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f000 84e1 	beq.w	800e622 <tcp_receive+0xed6>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	7d1b      	ldrb	r3, [r3, #20]
 800dc64:	2b06      	cmp	r3, #6
 800dc66:	f200 84dc 	bhi.w	800e622 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc6e:	4b30      	ldr	r3, [pc, #192]	; (800dd30 <tcp_receive+0x5e4>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	1ad3      	subs	r3, r2, r3
 800dc74:	3b01      	subs	r3, #1
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f2c0 808e 	blt.w	800dd98 <tcp_receive+0x64c>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc80:	4b2a      	ldr	r3, [pc, #168]	; (800dd2c <tcp_receive+0x5e0>)
 800dc82:	881b      	ldrh	r3, [r3, #0]
 800dc84:	4619      	mov	r1, r3
 800dc86:	4b2a      	ldr	r3, [pc, #168]	; (800dd30 <tcp_receive+0x5e4>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	440b      	add	r3, r1
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	3301      	adds	r3, #1
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f300 8081 	bgt.w	800dd98 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dc96:	4b27      	ldr	r3, [pc, #156]	; (800dd34 <tcp_receive+0x5e8>)
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dca0:	4b23      	ldr	r3, [pc, #140]	; (800dd30 <tcp_receive+0x5e4>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	1ad3      	subs	r3, r2, r3
 800dca6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dca8:	4b22      	ldr	r3, [pc, #136]	; (800dd34 <tcp_receive+0x5e8>)
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d106      	bne.n	800dcbe <tcp_receive+0x572>
 800dcb0:	4b21      	ldr	r3, [pc, #132]	; (800dd38 <tcp_receive+0x5ec>)
 800dcb2:	f240 5294 	movw	r2, #1428	; 0x594
 800dcb6:	4921      	ldr	r1, [pc, #132]	; (800dd3c <tcp_receive+0x5f0>)
 800dcb8:	4821      	ldr	r0, [pc, #132]	; (800dd40 <tcp_receive+0x5f4>)
 800dcba:	f005 fde5 	bl	8013888 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d906      	bls.n	800dcd6 <tcp_receive+0x58a>
 800dcc8:	4b1b      	ldr	r3, [pc, #108]	; (800dd38 <tcp_receive+0x5ec>)
 800dcca:	f240 5295 	movw	r2, #1429	; 0x595
 800dcce:	491d      	ldr	r1, [pc, #116]	; (800dd44 <tcp_receive+0x5f8>)
 800dcd0:	481b      	ldr	r0, [pc, #108]	; (800dd40 <tcp_receive+0x5f4>)
 800dcd2:	f005 fdd9 	bl	8013888 <iprintf>
      off = (u16_t)off32;
 800dcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dcdc:	4b15      	ldr	r3, [pc, #84]	; (800dd34 <tcp_receive+0x5e8>)
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	891b      	ldrh	r3, [r3, #8]
 800dce2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d906      	bls.n	800dcf8 <tcp_receive+0x5ac>
 800dcea:	4b13      	ldr	r3, [pc, #76]	; (800dd38 <tcp_receive+0x5ec>)
 800dcec:	f240 5297 	movw	r2, #1431	; 0x597
 800dcf0:	4915      	ldr	r1, [pc, #84]	; (800dd48 <tcp_receive+0x5fc>)
 800dcf2:	4813      	ldr	r0, [pc, #76]	; (800dd40 <tcp_receive+0x5f4>)
 800dcf4:	f005 fdc8 	bl	8013888 <iprintf>
      inseg.len -= off;
 800dcf8:	4b0e      	ldr	r3, [pc, #56]	; (800dd34 <tcp_receive+0x5e8>)
 800dcfa:	891a      	ldrh	r2, [r3, #8]
 800dcfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	4b0b      	ldr	r3, [pc, #44]	; (800dd34 <tcp_receive+0x5e8>)
 800dd06:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dd08:	4b0a      	ldr	r3, [pc, #40]	; (800dd34 <tcp_receive+0x5e8>)
 800dd0a:	685b      	ldr	r3, [r3, #4]
 800dd0c:	891a      	ldrh	r2, [r3, #8]
 800dd0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800dd16:	e029      	b.n	800dd6c <tcp_receive+0x620>
 800dd18:	0801644c 	.word	0x0801644c
 800dd1c:	08016454 	.word	0x08016454
 800dd20:	200001b0 	.word	0x200001b0
 800dd24:	200001ac 	.word	0x200001ac
 800dd28:	20009f4c 	.word	0x20009f4c
 800dd2c:	200001b2 	.word	0x200001b2
 800dd30:	200001a8 	.word	0x200001a8
 800dd34:	20000188 	.word	0x20000188
 800dd38:	080160e4 	.word	0x080160e4
 800dd3c:	0801645c 	.word	0x0801645c
 800dd40:	08016130 	.word	0x08016130
 800dd44:	0801646c 	.word	0x0801646c
 800dd48:	0801647c 	.word	0x0801647c
        off -= p->len;
 800dd4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd4e:	895b      	ldrh	r3, [r3, #10]
 800dd50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dd5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd5c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dd5e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dd60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd62:	2200      	movs	r2, #0
 800dd64:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dd66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800dd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd6e:	895b      	ldrh	r3, [r3, #10]
 800dd70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d8e9      	bhi.n	800dd4c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dd78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dd80:	f7fc f83e 	bl	8009e00 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd88:	4a91      	ldr	r2, [pc, #580]	; (800dfd0 <tcp_receive+0x884>)
 800dd8a:	6013      	str	r3, [r2, #0]
 800dd8c:	4b91      	ldr	r3, [pc, #580]	; (800dfd4 <tcp_receive+0x888>)
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	4a8f      	ldr	r2, [pc, #572]	; (800dfd0 <tcp_receive+0x884>)
 800dd92:	6812      	ldr	r2, [r2, #0]
 800dd94:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dd96:	e00d      	b.n	800ddb4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dd98:	4b8d      	ldr	r3, [pc, #564]	; (800dfd0 <tcp_receive+0x884>)
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda0:	1ad3      	subs	r3, r2, r3
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	da06      	bge.n	800ddb4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	8b5b      	ldrh	r3, [r3, #26]
 800ddaa:	f043 0302 	orr.w	r3, r3, #2
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ddb4:	4b86      	ldr	r3, [pc, #536]	; (800dfd0 <tcp_receive+0x884>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f2c0 842a 	blt.w	800e618 <tcp_receive+0xecc>
 800ddc4:	4b82      	ldr	r3, [pc, #520]	; (800dfd0 <tcp_receive+0x884>)
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddcc:	6879      	ldr	r1, [r7, #4]
 800ddce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ddd0:	440b      	add	r3, r1
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f300 841e 	bgt.w	800e618 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dde0:	4b7b      	ldr	r3, [pc, #492]	; (800dfd0 <tcp_receive+0x884>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	f040 829a 	bne.w	800e31e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ddea:	4b7a      	ldr	r3, [pc, #488]	; (800dfd4 <tcp_receive+0x888>)
 800ddec:	891c      	ldrh	r4, [r3, #8]
 800ddee:	4b79      	ldr	r3, [pc, #484]	; (800dfd4 <tcp_receive+0x888>)
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	899b      	ldrh	r3, [r3, #12]
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fa fdd4 	bl	80089a4 <lwip_htons>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	f003 0303 	and.w	r3, r3, #3
 800de04:	2b00      	cmp	r3, #0
 800de06:	d001      	beq.n	800de0c <tcp_receive+0x6c0>
 800de08:	2301      	movs	r3, #1
 800de0a:	e000      	b.n	800de0e <tcp_receive+0x6c2>
 800de0c:	2300      	movs	r3, #0
 800de0e:	4423      	add	r3, r4
 800de10:	b29a      	uxth	r2, r3
 800de12:	4b71      	ldr	r3, [pc, #452]	; (800dfd8 <tcp_receive+0x88c>)
 800de14:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de1a:	4b6f      	ldr	r3, [pc, #444]	; (800dfd8 <tcp_receive+0x88c>)
 800de1c:	881b      	ldrh	r3, [r3, #0]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d275      	bcs.n	800df0e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800de22:	4b6c      	ldr	r3, [pc, #432]	; (800dfd4 <tcp_receive+0x888>)
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	899b      	ldrh	r3, [r3, #12]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fa fdba 	bl	80089a4 <lwip_htons>
 800de30:	4603      	mov	r3, r0
 800de32:	b2db      	uxtb	r3, r3
 800de34:	f003 0301 	and.w	r3, r3, #1
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d01f      	beq.n	800de7c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800de3c:	4b65      	ldr	r3, [pc, #404]	; (800dfd4 <tcp_receive+0x888>)
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	899b      	ldrh	r3, [r3, #12]
 800de42:	b29b      	uxth	r3, r3
 800de44:	b21b      	sxth	r3, r3
 800de46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800de4a:	b21c      	sxth	r4, r3
 800de4c:	4b61      	ldr	r3, [pc, #388]	; (800dfd4 <tcp_receive+0x888>)
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	899b      	ldrh	r3, [r3, #12]
 800de52:	b29b      	uxth	r3, r3
 800de54:	4618      	mov	r0, r3
 800de56:	f7fa fda5 	bl	80089a4 <lwip_htons>
 800de5a:	4603      	mov	r3, r0
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	b29b      	uxth	r3, r3
 800de60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800de64:	b29b      	uxth	r3, r3
 800de66:	4618      	mov	r0, r3
 800de68:	f7fa fd9c 	bl	80089a4 <lwip_htons>
 800de6c:	4603      	mov	r3, r0
 800de6e:	b21b      	sxth	r3, r3
 800de70:	4323      	orrs	r3, r4
 800de72:	b21a      	sxth	r2, r3
 800de74:	4b57      	ldr	r3, [pc, #348]	; (800dfd4 <tcp_receive+0x888>)
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	b292      	uxth	r2, r2
 800de7a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de80:	4b54      	ldr	r3, [pc, #336]	; (800dfd4 <tcp_receive+0x888>)
 800de82:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800de84:	4b53      	ldr	r3, [pc, #332]	; (800dfd4 <tcp_receive+0x888>)
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	899b      	ldrh	r3, [r3, #12]
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fa fd89 	bl	80089a4 <lwip_htons>
 800de92:	4603      	mov	r3, r0
 800de94:	b2db      	uxtb	r3, r3
 800de96:	f003 0302 	and.w	r3, r3, #2
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d005      	beq.n	800deaa <tcp_receive+0x75e>
            inseg.len -= 1;
 800de9e:	4b4d      	ldr	r3, [pc, #308]	; (800dfd4 <tcp_receive+0x888>)
 800dea0:	891b      	ldrh	r3, [r3, #8]
 800dea2:	3b01      	subs	r3, #1
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	4b4b      	ldr	r3, [pc, #300]	; (800dfd4 <tcp_receive+0x888>)
 800dea8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800deaa:	4b4a      	ldr	r3, [pc, #296]	; (800dfd4 <tcp_receive+0x888>)
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	4a49      	ldr	r2, [pc, #292]	; (800dfd4 <tcp_receive+0x888>)
 800deb0:	8912      	ldrh	r2, [r2, #8]
 800deb2:	4611      	mov	r1, r2
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fb fea3 	bl	8009c00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800deba:	4b46      	ldr	r3, [pc, #280]	; (800dfd4 <tcp_receive+0x888>)
 800debc:	891c      	ldrh	r4, [r3, #8]
 800debe:	4b45      	ldr	r3, [pc, #276]	; (800dfd4 <tcp_receive+0x888>)
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	899b      	ldrh	r3, [r3, #12]
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fa fd6c 	bl	80089a4 <lwip_htons>
 800decc:	4603      	mov	r3, r0
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 0303 	and.w	r3, r3, #3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <tcp_receive+0x790>
 800ded8:	2301      	movs	r3, #1
 800deda:	e000      	b.n	800dede <tcp_receive+0x792>
 800dedc:	2300      	movs	r3, #0
 800dede:	4423      	add	r3, r4
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	4b3d      	ldr	r3, [pc, #244]	; (800dfd8 <tcp_receive+0x88c>)
 800dee4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dee6:	4b3c      	ldr	r3, [pc, #240]	; (800dfd8 <tcp_receive+0x88c>)
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	461a      	mov	r2, r3
 800deec:	4b38      	ldr	r3, [pc, #224]	; (800dfd0 <tcp_receive+0x884>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	441a      	add	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def6:	6879      	ldr	r1, [r7, #4]
 800def8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800defa:	440b      	add	r3, r1
 800defc:	429a      	cmp	r2, r3
 800defe:	d006      	beq.n	800df0e <tcp_receive+0x7c2>
 800df00:	4b36      	ldr	r3, [pc, #216]	; (800dfdc <tcp_receive+0x890>)
 800df02:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800df06:	4936      	ldr	r1, [pc, #216]	; (800dfe0 <tcp_receive+0x894>)
 800df08:	4836      	ldr	r0, [pc, #216]	; (800dfe4 <tcp_receive+0x898>)
 800df0a:	f005 fcbd 	bl	8013888 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df12:	2b00      	cmp	r3, #0
 800df14:	f000 80e7 	beq.w	800e0e6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800df18:	4b2e      	ldr	r3, [pc, #184]	; (800dfd4 <tcp_receive+0x888>)
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	899b      	ldrh	r3, [r3, #12]
 800df1e:	b29b      	uxth	r3, r3
 800df20:	4618      	mov	r0, r3
 800df22:	f7fa fd3f 	bl	80089a4 <lwip_htons>
 800df26:	4603      	mov	r3, r0
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	f003 0301 	and.w	r3, r3, #1
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d010      	beq.n	800df54 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800df32:	e00a      	b.n	800df4a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df38:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7fd fcb0 	bl	800b8aa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d1f0      	bne.n	800df34 <tcp_receive+0x7e8>
 800df52:	e0c8      	b.n	800e0e6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df58:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800df5a:	e052      	b.n	800e002 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800df5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	899b      	ldrh	r3, [r3, #12]
 800df62:	b29b      	uxth	r3, r3
 800df64:	4618      	mov	r0, r3
 800df66:	f7fa fd1d 	bl	80089a4 <lwip_htons>
 800df6a:	4603      	mov	r3, r0
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	f003 0301 	and.w	r3, r3, #1
 800df72:	2b00      	cmp	r3, #0
 800df74:	d03d      	beq.n	800dff2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800df76:	4b17      	ldr	r3, [pc, #92]	; (800dfd4 <tcp_receive+0x888>)
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	899b      	ldrh	r3, [r3, #12]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fa fd10 	bl	80089a4 <lwip_htons>
 800df84:	4603      	mov	r3, r0
 800df86:	b2db      	uxtb	r3, r3
 800df88:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d130      	bne.n	800dff2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800df90:	4b10      	ldr	r3, [pc, #64]	; (800dfd4 <tcp_receive+0x888>)
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	899b      	ldrh	r3, [r3, #12]
 800df96:	b29c      	uxth	r4, r3
 800df98:	2001      	movs	r0, #1
 800df9a:	f7fa fd03 	bl	80089a4 <lwip_htons>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	4b0c      	ldr	r3, [pc, #48]	; (800dfd4 <tcp_receive+0x888>)
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	4322      	orrs	r2, r4
 800dfa8:	b292      	uxth	r2, r2
 800dfaa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800dfac:	4b09      	ldr	r3, [pc, #36]	; (800dfd4 <tcp_receive+0x888>)
 800dfae:	891c      	ldrh	r4, [r3, #8]
 800dfb0:	4b08      	ldr	r3, [pc, #32]	; (800dfd4 <tcp_receive+0x888>)
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	899b      	ldrh	r3, [r3, #12]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7fa fcf3 	bl	80089a4 <lwip_htons>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	f003 0303 	and.w	r3, r3, #3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00e      	beq.n	800dfe8 <tcp_receive+0x89c>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	e00d      	b.n	800dfea <tcp_receive+0x89e>
 800dfce:	bf00      	nop
 800dfd0:	200001a8 	.word	0x200001a8
 800dfd4:	20000188 	.word	0x20000188
 800dfd8:	200001b2 	.word	0x200001b2
 800dfdc:	080160e4 	.word	0x080160e4
 800dfe0:	0801648c 	.word	0x0801648c
 800dfe4:	08016130 	.word	0x08016130
 800dfe8:	2300      	movs	r3, #0
 800dfea:	4423      	add	r3, r4
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	4b98      	ldr	r3, [pc, #608]	; (800e250 <tcp_receive+0xb04>)
 800dff0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800dff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800dff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800dffc:	6938      	ldr	r0, [r7, #16]
 800dffe:	f7fd fc54 	bl	800b8aa <tcp_seg_free>
            while (next &&
 800e002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00e      	beq.n	800e026 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e008:	4b91      	ldr	r3, [pc, #580]	; (800e250 <tcp_receive+0xb04>)
 800e00a:	881b      	ldrh	r3, [r3, #0]
 800e00c:	461a      	mov	r2, r3
 800e00e:	4b91      	ldr	r3, [pc, #580]	; (800e254 <tcp_receive+0xb08>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	441a      	add	r2, r3
 800e014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e01c:	8909      	ldrh	r1, [r1, #8]
 800e01e:	440b      	add	r3, r1
 800e020:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e022:	2b00      	cmp	r3, #0
 800e024:	da9a      	bge.n	800df5c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d059      	beq.n	800e0e0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e02c:	4b88      	ldr	r3, [pc, #544]	; (800e250 <tcp_receive+0xb04>)
 800e02e:	881b      	ldrh	r3, [r3, #0]
 800e030:	461a      	mov	r2, r3
 800e032:	4b88      	ldr	r3, [pc, #544]	; (800e254 <tcp_receive+0xb08>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	441a      	add	r2, r3
 800e038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e040:	2b00      	cmp	r3, #0
 800e042:	dd4d      	ble.n	800e0e0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	4b81      	ldr	r3, [pc, #516]	; (800e254 <tcp_receive+0xb08>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	b29b      	uxth	r3, r3
 800e052:	1ad3      	subs	r3, r2, r3
 800e054:	b29a      	uxth	r2, r3
 800e056:	4b80      	ldr	r3, [pc, #512]	; (800e258 <tcp_receive+0xb0c>)
 800e058:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e05a:	4b7f      	ldr	r3, [pc, #508]	; (800e258 <tcp_receive+0xb0c>)
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	899b      	ldrh	r3, [r3, #12]
 800e060:	b29b      	uxth	r3, r3
 800e062:	4618      	mov	r0, r3
 800e064:	f7fa fc9e 	bl	80089a4 <lwip_htons>
 800e068:	4603      	mov	r3, r0
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	f003 0302 	and.w	r3, r3, #2
 800e070:	2b00      	cmp	r3, #0
 800e072:	d005      	beq.n	800e080 <tcp_receive+0x934>
                inseg.len -= 1;
 800e074:	4b78      	ldr	r3, [pc, #480]	; (800e258 <tcp_receive+0xb0c>)
 800e076:	891b      	ldrh	r3, [r3, #8]
 800e078:	3b01      	subs	r3, #1
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	4b76      	ldr	r3, [pc, #472]	; (800e258 <tcp_receive+0xb0c>)
 800e07e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e080:	4b75      	ldr	r3, [pc, #468]	; (800e258 <tcp_receive+0xb0c>)
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	4a74      	ldr	r2, [pc, #464]	; (800e258 <tcp_receive+0xb0c>)
 800e086:	8912      	ldrh	r2, [r2, #8]
 800e088:	4611      	mov	r1, r2
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fb fdb8 	bl	8009c00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e090:	4b71      	ldr	r3, [pc, #452]	; (800e258 <tcp_receive+0xb0c>)
 800e092:	891c      	ldrh	r4, [r3, #8]
 800e094:	4b70      	ldr	r3, [pc, #448]	; (800e258 <tcp_receive+0xb0c>)
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	899b      	ldrh	r3, [r3, #12]
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fa fc81 	bl	80089a4 <lwip_htons>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	f003 0303 	and.w	r3, r3, #3
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <tcp_receive+0x966>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e000      	b.n	800e0b4 <tcp_receive+0x968>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	4423      	add	r3, r4
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	4b65      	ldr	r3, [pc, #404]	; (800e250 <tcp_receive+0xb04>)
 800e0ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e0bc:	4b64      	ldr	r3, [pc, #400]	; (800e250 <tcp_receive+0xb04>)
 800e0be:	881b      	ldrh	r3, [r3, #0]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	4b64      	ldr	r3, [pc, #400]	; (800e254 <tcp_receive+0xb08>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	441a      	add	r2, r3
 800e0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ca:	68db      	ldr	r3, [r3, #12]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d006      	beq.n	800e0e0 <tcp_receive+0x994>
 800e0d2:	4b62      	ldr	r3, [pc, #392]	; (800e25c <tcp_receive+0xb10>)
 800e0d4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e0d8:	4961      	ldr	r1, [pc, #388]	; (800e260 <tcp_receive+0xb14>)
 800e0da:	4862      	ldr	r0, [pc, #392]	; (800e264 <tcp_receive+0xb18>)
 800e0dc:	f005 fbd4 	bl	8013888 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0e4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e0e6:	4b5a      	ldr	r3, [pc, #360]	; (800e250 <tcp_receive+0xb04>)
 800e0e8:	881b      	ldrh	r3, [r3, #0]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	4b59      	ldr	r3, [pc, #356]	; (800e254 <tcp_receive+0xb08>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	441a      	add	r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0fa:	4b55      	ldr	r3, [pc, #340]	; (800e250 <tcp_receive+0xb04>)
 800e0fc:	881b      	ldrh	r3, [r3, #0]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d206      	bcs.n	800e110 <tcp_receive+0x9c4>
 800e102:	4b56      	ldr	r3, [pc, #344]	; (800e25c <tcp_receive+0xb10>)
 800e104:	f240 6207 	movw	r2, #1543	; 0x607
 800e108:	4957      	ldr	r1, [pc, #348]	; (800e268 <tcp_receive+0xb1c>)
 800e10a:	4856      	ldr	r0, [pc, #344]	; (800e264 <tcp_receive+0xb18>)
 800e10c:	f005 fbbc 	bl	8013888 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e114:	4b4e      	ldr	r3, [pc, #312]	; (800e250 <tcp_receive+0xb04>)
 800e116:	881b      	ldrh	r3, [r3, #0]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7fc fe9d 	bl	800ae60 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e126:	4b4c      	ldr	r3, [pc, #304]	; (800e258 <tcp_receive+0xb0c>)
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	891b      	ldrh	r3, [r3, #8]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d006      	beq.n	800e13e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e130:	4b49      	ldr	r3, [pc, #292]	; (800e258 <tcp_receive+0xb0c>)
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	4a4d      	ldr	r2, [pc, #308]	; (800e26c <tcp_receive+0xb20>)
 800e136:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e138:	4b47      	ldr	r3, [pc, #284]	; (800e258 <tcp_receive+0xb0c>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e13e:	4b46      	ldr	r3, [pc, #280]	; (800e258 <tcp_receive+0xb0c>)
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	899b      	ldrh	r3, [r3, #12]
 800e144:	b29b      	uxth	r3, r3
 800e146:	4618      	mov	r0, r3
 800e148:	f7fa fc2c 	bl	80089a4 <lwip_htons>
 800e14c:	4603      	mov	r3, r0
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	f003 0301 	and.w	r3, r3, #1
 800e154:	2b00      	cmp	r3, #0
 800e156:	f000 80b8 	beq.w	800e2ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e15a:	4b45      	ldr	r3, [pc, #276]	; (800e270 <tcp_receive+0xb24>)
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	f043 0320 	orr.w	r3, r3, #32
 800e162:	b2da      	uxtb	r2, r3
 800e164:	4b42      	ldr	r3, [pc, #264]	; (800e270 <tcp_receive+0xb24>)
 800e166:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e168:	e0af      	b.n	800e2ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e16e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	4a36      	ldr	r2, [pc, #216]	; (800e254 <tcp_receive+0xb08>)
 800e17a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	891b      	ldrh	r3, [r3, #8]
 800e180:	461c      	mov	r4, r3
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	68db      	ldr	r3, [r3, #12]
 800e186:	899b      	ldrh	r3, [r3, #12]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fa fc0a 	bl	80089a4 <lwip_htons>
 800e190:	4603      	mov	r3, r0
 800e192:	b2db      	uxtb	r3, r3
 800e194:	f003 0303 	and.w	r3, r3, #3
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d001      	beq.n	800e1a0 <tcp_receive+0xa54>
 800e19c:	2301      	movs	r3, #1
 800e19e:	e000      	b.n	800e1a2 <tcp_receive+0xa56>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	191a      	adds	r2, r3, r4
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a8:	441a      	add	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1b2:	461c      	mov	r4, r3
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	891b      	ldrh	r3, [r3, #8]
 800e1b8:	461d      	mov	r5, r3
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	68db      	ldr	r3, [r3, #12]
 800e1be:	899b      	ldrh	r3, [r3, #12]
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fa fbee 	bl	80089a4 <lwip_htons>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	f003 0303 	and.w	r3, r3, #3
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d001      	beq.n	800e1d8 <tcp_receive+0xa8c>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	e000      	b.n	800e1da <tcp_receive+0xa8e>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	442b      	add	r3, r5
 800e1dc:	429c      	cmp	r4, r3
 800e1de:	d206      	bcs.n	800e1ee <tcp_receive+0xaa2>
 800e1e0:	4b1e      	ldr	r3, [pc, #120]	; (800e25c <tcp_receive+0xb10>)
 800e1e2:	f240 622b 	movw	r2, #1579	; 0x62b
 800e1e6:	4923      	ldr	r1, [pc, #140]	; (800e274 <tcp_receive+0xb28>)
 800e1e8:	481e      	ldr	r0, [pc, #120]	; (800e264 <tcp_receive+0xb18>)
 800e1ea:	f005 fb4d 	bl	8013888 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	891b      	ldrh	r3, [r3, #8]
 800e1f2:	461c      	mov	r4, r3
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	899b      	ldrh	r3, [r3, #12]
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fa fbd1 	bl	80089a4 <lwip_htons>
 800e202:	4603      	mov	r3, r0
 800e204:	b2db      	uxtb	r3, r3
 800e206:	f003 0303 	and.w	r3, r3, #3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <tcp_receive+0xac6>
 800e20e:	2301      	movs	r3, #1
 800e210:	e000      	b.n	800e214 <tcp_receive+0xac8>
 800e212:	2300      	movs	r3, #0
 800e214:	1919      	adds	r1, r3, r4
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e21a:	b28b      	uxth	r3, r1
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	b29a      	uxth	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7fc fe1b 	bl	800ae60 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	891b      	ldrh	r3, [r3, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d028      	beq.n	800e286 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e234:	4b0d      	ldr	r3, [pc, #52]	; (800e26c <tcp_receive+0xb20>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d01d      	beq.n	800e278 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e23c:	4b0b      	ldr	r3, [pc, #44]	; (800e26c <tcp_receive+0xb20>)
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	4619      	mov	r1, r3
 800e246:	4610      	mov	r0, r2
 800e248:	f7fb ff22 	bl	800a090 <pbuf_cat>
 800e24c:	e018      	b.n	800e280 <tcp_receive+0xb34>
 800e24e:	bf00      	nop
 800e250:	200001b2 	.word	0x200001b2
 800e254:	200001a8 	.word	0x200001a8
 800e258:	20000188 	.word	0x20000188
 800e25c:	080160e4 	.word	0x080160e4
 800e260:	080164c4 	.word	0x080164c4
 800e264:	08016130 	.word	0x08016130
 800e268:	08016500 	.word	0x08016500
 800e26c:	200001b8 	.word	0x200001b8
 800e270:	200001b5 	.word	0x200001b5
 800e274:	08016520 	.word	0x08016520
            } else {
              recv_data = cseg->p;
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	4a70      	ldr	r2, [pc, #448]	; (800e440 <tcp_receive+0xcf4>)
 800e27e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2200      	movs	r2, #0
 800e284:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	899b      	ldrh	r3, [r3, #12]
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fa fb88 	bl	80089a4 <lwip_htons>
 800e294:	4603      	mov	r3, r0
 800e296:	b2db      	uxtb	r3, r3
 800e298:	f003 0301 	and.w	r3, r3, #1
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00d      	beq.n	800e2bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e2a0:	4b68      	ldr	r3, [pc, #416]	; (800e444 <tcp_receive+0xcf8>)
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	f043 0320 	orr.w	r3, r3, #32
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	4b66      	ldr	r3, [pc, #408]	; (800e444 <tcp_receive+0xcf8>)
 800e2ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	7d1b      	ldrb	r3, [r3, #20]
 800e2b2:	2b04      	cmp	r3, #4
 800e2b4:	d102      	bne.n	800e2bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2207      	movs	r2, #7
 800e2ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e2c4:	68b8      	ldr	r0, [r7, #8]
 800e2c6:	f7fd faf0 	bl	800b8aa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d008      	beq.n	800e2e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	685a      	ldr	r2, [r3, #4]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	f43f af43 	beq.w	800e16a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	8b5b      	ldrh	r3, [r3, #26]
 800e2e8:	f003 0301 	and.w	r3, r3, #1
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00e      	beq.n	800e30e <tcp_receive+0xbc2>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	8b5b      	ldrh	r3, [r3, #26]
 800e2f4:	f023 0301 	bic.w	r3, r3, #1
 800e2f8:	b29a      	uxth	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	835a      	strh	r2, [r3, #26]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	8b5b      	ldrh	r3, [r3, #26]
 800e302:	f043 0302 	orr.w	r3, r3, #2
 800e306:	b29a      	uxth	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e30c:	e188      	b.n	800e620 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	8b5b      	ldrh	r3, [r3, #26]
 800e312:	f043 0301 	orr.w	r3, r3, #1
 800e316:	b29a      	uxth	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e31c:	e180      	b.n	800e620 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e322:	2b00      	cmp	r3, #0
 800e324:	d106      	bne.n	800e334 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e326:	4848      	ldr	r0, [pc, #288]	; (800e448 <tcp_receive+0xcfc>)
 800e328:	f7fd faf6 	bl	800b918 <tcp_seg_copy>
 800e32c:	4602      	mov	r2, r0
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	675a      	str	r2, [r3, #116]	; 0x74
 800e332:	e16d      	b.n	800e610 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e334:	2300      	movs	r3, #0
 800e336:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e33c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e33e:	e157      	b.n	800e5f0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800e340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	4b41      	ldr	r3, [pc, #260]	; (800e44c <tcp_receive+0xd00>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d11d      	bne.n	800e38a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e34e:	4b3e      	ldr	r3, [pc, #248]	; (800e448 <tcp_receive+0xcfc>)
 800e350:	891a      	ldrh	r2, [r3, #8]
 800e352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e354:	891b      	ldrh	r3, [r3, #8]
 800e356:	429a      	cmp	r2, r3
 800e358:	f240 814f 	bls.w	800e5fa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e35c:	483a      	ldr	r0, [pc, #232]	; (800e448 <tcp_receive+0xcfc>)
 800e35e:	f7fd fadb 	bl	800b918 <tcp_seg_copy>
 800e362:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	2b00      	cmp	r3, #0
 800e368:	f000 8149 	beq.w	800e5fe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800e36c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d003      	beq.n	800e37a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e374:	697a      	ldr	r2, [r7, #20]
 800e376:	601a      	str	r2, [r3, #0]
 800e378:	e002      	b.n	800e380 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	697a      	ldr	r2, [r7, #20]
 800e37e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e380:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e382:	6978      	ldr	r0, [r7, #20]
 800e384:	f7ff f8de 	bl	800d544 <tcp_oos_insert_segment>
                }
                break;
 800e388:	e139      	b.n	800e5fe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d117      	bne.n	800e3c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e390:	4b2e      	ldr	r3, [pc, #184]	; (800e44c <tcp_receive+0xd00>)
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	1ad3      	subs	r3, r2, r3
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	da57      	bge.n	800e450 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e3a0:	4829      	ldr	r0, [pc, #164]	; (800e448 <tcp_receive+0xcfc>)
 800e3a2:	f7fd fab9 	bl	800b918 <tcp_seg_copy>
 800e3a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e3a8:	69bb      	ldr	r3, [r7, #24]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f000 8129 	beq.w	800e602 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	69ba      	ldr	r2, [r7, #24]
 800e3b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e3b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e3b8:	69b8      	ldr	r0, [r7, #24]
 800e3ba:	f7ff f8c3 	bl	800d544 <tcp_oos_insert_segment>
                  }
                  break;
 800e3be:	e120      	b.n	800e602 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e3c0:	4b22      	ldr	r3, [pc, #136]	; (800e44c <tcp_receive+0xd00>)
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	db3e      	blt.n	800e450 <tcp_receive+0xd04>
 800e3d2:	4b1e      	ldr	r3, [pc, #120]	; (800e44c <tcp_receive+0xd00>)
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	3301      	adds	r3, #1
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	dc35      	bgt.n	800e450 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e3e4:	4818      	ldr	r0, [pc, #96]	; (800e448 <tcp_receive+0xcfc>)
 800e3e6:	f7fd fa97 	bl	800b918 <tcp_seg_copy>
 800e3ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f000 8109 	beq.w	800e606 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e3f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3fc:	8912      	ldrh	r2, [r2, #8]
 800e3fe:	441a      	add	r2, r3
 800e400:	4b12      	ldr	r3, [pc, #72]	; (800e44c <tcp_receive+0xd00>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	1ad3      	subs	r3, r2, r3
 800e406:	2b00      	cmp	r3, #0
 800e408:	dd12      	ble.n	800e430 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e40a:	4b10      	ldr	r3, [pc, #64]	; (800e44c <tcp_receive+0xd00>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	b29a      	uxth	r2, r3
 800e410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	b29b      	uxth	r3, r3
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	b29a      	uxth	r2, r3
 800e41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e41e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e422:	685a      	ldr	r2, [r3, #4]
 800e424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e426:	891b      	ldrh	r3, [r3, #8]
 800e428:	4619      	mov	r1, r3
 800e42a:	4610      	mov	r0, r2
 800e42c:	f7fb fbe8 	bl	8009c00 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e432:	69fa      	ldr	r2, [r7, #28]
 800e434:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e438:	69f8      	ldr	r0, [r7, #28]
 800e43a:	f7ff f883 	bl	800d544 <tcp_oos_insert_segment>
                  }
                  break;
 800e43e:	e0e2      	b.n	800e606 <tcp_receive+0xeba>
 800e440:	200001b8 	.word	0x200001b8
 800e444:	200001b5 	.word	0x200001b5
 800e448:	20000188 	.word	0x20000188
 800e44c:	200001a8 	.word	0x200001a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e452:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f040 80c6 	bne.w	800e5ea <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e45e:	4b80      	ldr	r3, [pc, #512]	; (800e660 <tcp_receive+0xf14>)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f340 80bd 	ble.w	800e5ea <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	899b      	ldrh	r3, [r3, #12]
 800e476:	b29b      	uxth	r3, r3
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fa fa93 	bl	80089a4 <lwip_htons>
 800e47e:	4603      	mov	r3, r0
 800e480:	b2db      	uxtb	r3, r3
 800e482:	f003 0301 	and.w	r3, r3, #1
 800e486:	2b00      	cmp	r3, #0
 800e488:	f040 80bf 	bne.w	800e60a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e48c:	4875      	ldr	r0, [pc, #468]	; (800e664 <tcp_receive+0xf18>)
 800e48e:	f7fd fa43 	bl	800b918 <tcp_seg_copy>
 800e492:	4602      	mov	r2, r0
 800e494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e496:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f000 80b6 	beq.w	800e60e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4aa:	8912      	ldrh	r2, [r2, #8]
 800e4ac:	441a      	add	r2, r3
 800e4ae:	4b6c      	ldr	r3, [pc, #432]	; (800e660 <tcp_receive+0xf14>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	dd12      	ble.n	800e4de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e4b8:	4b69      	ldr	r3, [pc, #420]	; (800e660 <tcp_receive+0xf14>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d0:	685a      	ldr	r2, [r3, #4]
 800e4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d4:	891b      	ldrh	r3, [r3, #8]
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4610      	mov	r0, r2
 800e4da:	f7fb fb91 	bl	8009c00 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e4de:	4b62      	ldr	r3, [pc, #392]	; (800e668 <tcp_receive+0xf1c>)
 800e4e0:	881b      	ldrh	r3, [r3, #0]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	4b5e      	ldr	r3, [pc, #376]	; (800e660 <tcp_receive+0xf14>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	441a      	add	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ee:	6879      	ldr	r1, [r7, #4]
 800e4f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4f2:	440b      	add	r3, r1
 800e4f4:	1ad3      	subs	r3, r2, r3
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f340 8089 	ble.w	800e60e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	899b      	ldrh	r3, [r3, #12]
 800e504:	b29b      	uxth	r3, r3
 800e506:	4618      	mov	r0, r3
 800e508:	f7fa fa4c 	bl	80089a4 <lwip_htons>
 800e50c:	4603      	mov	r3, r0
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	f003 0301 	and.w	r3, r3, #1
 800e514:	2b00      	cmp	r3, #0
 800e516:	d022      	beq.n	800e55e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	899b      	ldrh	r3, [r3, #12]
 800e520:	b29b      	uxth	r3, r3
 800e522:	b21b      	sxth	r3, r3
 800e524:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e528:	b21c      	sxth	r4, r3
 800e52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	899b      	ldrh	r3, [r3, #12]
 800e532:	b29b      	uxth	r3, r3
 800e534:	4618      	mov	r0, r3
 800e536:	f7fa fa35 	bl	80089a4 <lwip_htons>
 800e53a:	4603      	mov	r3, r0
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	b29b      	uxth	r3, r3
 800e540:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e544:	b29b      	uxth	r3, r3
 800e546:	4618      	mov	r0, r3
 800e548:	f7fa fa2c 	bl	80089a4 <lwip_htons>
 800e54c:	4603      	mov	r3, r0
 800e54e:	b21b      	sxth	r3, r3
 800e550:	4323      	orrs	r3, r4
 800e552:	b21a      	sxth	r2, r3
 800e554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	b292      	uxth	r2, r2
 800e55c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e562:	b29a      	uxth	r2, r3
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e568:	4413      	add	r3, r2
 800e56a:	b299      	uxth	r1, r3
 800e56c:	4b3c      	ldr	r3, [pc, #240]	; (800e660 <tcp_receive+0xf14>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	b29a      	uxth	r2, r3
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	1a8a      	subs	r2, r1, r2
 800e578:	b292      	uxth	r2, r2
 800e57a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	685a      	ldr	r2, [r3, #4]
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	891b      	ldrh	r3, [r3, #8]
 800e588:	4619      	mov	r1, r3
 800e58a:	4610      	mov	r0, r2
 800e58c:	f7fb fb38 	bl	8009c00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	891c      	ldrh	r4, [r3, #8]
 800e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	899b      	ldrh	r3, [r3, #12]
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fa f9ff 	bl	80089a4 <lwip_htons>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	f003 0303 	and.w	r3, r3, #3
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <tcp_receive+0xe6a>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e000      	b.n	800e5b8 <tcp_receive+0xe6c>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	4423      	add	r3, r4
 800e5ba:	b29a      	uxth	r2, r3
 800e5bc:	4b2a      	ldr	r3, [pc, #168]	; (800e668 <tcp_receive+0xf1c>)
 800e5be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e5c0:	4b29      	ldr	r3, [pc, #164]	; (800e668 <tcp_receive+0xf1c>)
 800e5c2:	881b      	ldrh	r3, [r3, #0]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	4b26      	ldr	r3, [pc, #152]	; (800e660 <tcp_receive+0xf14>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	441a      	add	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d0:	6879      	ldr	r1, [r7, #4]
 800e5d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5d4:	440b      	add	r3, r1
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d019      	beq.n	800e60e <tcp_receive+0xec2>
 800e5da:	4b24      	ldr	r3, [pc, #144]	; (800e66c <tcp_receive+0xf20>)
 800e5dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e5e0:	4923      	ldr	r1, [pc, #140]	; (800e670 <tcp_receive+0xf24>)
 800e5e2:	4824      	ldr	r0, [pc, #144]	; (800e674 <tcp_receive+0xf28>)
 800e5e4:	f005 f950 	bl	8013888 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e5e8:	e011      	b.n	800e60e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f47f aea4 	bne.w	800e340 <tcp_receive+0xbf4>
 800e5f8:	e00a      	b.n	800e610 <tcp_receive+0xec4>
                break;
 800e5fa:	bf00      	nop
 800e5fc:	e008      	b.n	800e610 <tcp_receive+0xec4>
                break;
 800e5fe:	bf00      	nop
 800e600:	e006      	b.n	800e610 <tcp_receive+0xec4>
                  break;
 800e602:	bf00      	nop
 800e604:	e004      	b.n	800e610 <tcp_receive+0xec4>
                  break;
 800e606:	bf00      	nop
 800e608:	e002      	b.n	800e610 <tcp_receive+0xec4>
                  break;
 800e60a:	bf00      	nop
 800e60c:	e000      	b.n	800e610 <tcp_receive+0xec4>
                break;
 800e60e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f001 fe8b 	bl	801032c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e616:	e003      	b.n	800e620 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f001 fe87 	bl	801032c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e61e:	e01a      	b.n	800e656 <tcp_receive+0xf0a>
 800e620:	e019      	b.n	800e656 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e622:	4b0f      	ldr	r3, [pc, #60]	; (800e660 <tcp_receive+0xf14>)
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	db0a      	blt.n	800e646 <tcp_receive+0xefa>
 800e630:	4b0b      	ldr	r3, [pc, #44]	; (800e660 <tcp_receive+0xf14>)
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e638:	6879      	ldr	r1, [r7, #4]
 800e63a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e63c:	440b      	add	r3, r1
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	3301      	adds	r3, #1
 800e642:	2b00      	cmp	r3, #0
 800e644:	dd07      	ble.n	800e656 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	8b5b      	ldrh	r3, [r3, #26]
 800e64a:	f043 0302 	orr.w	r3, r3, #2
 800e64e:	b29a      	uxth	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e654:	e7ff      	b.n	800e656 <tcp_receive+0xf0a>
 800e656:	bf00      	nop
 800e658:	3750      	adds	r7, #80	; 0x50
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bdb0      	pop	{r4, r5, r7, pc}
 800e65e:	bf00      	nop
 800e660:	200001a8 	.word	0x200001a8
 800e664:	20000188 	.word	0x20000188
 800e668:	200001b2 	.word	0x200001b2
 800e66c:	080160e4 	.word	0x080160e4
 800e670:	0801648c 	.word	0x0801648c
 800e674:	08016130 	.word	0x08016130

0800e678 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e67e:	4b15      	ldr	r3, [pc, #84]	; (800e6d4 <tcp_get_next_optbyte+0x5c>)
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	b291      	uxth	r1, r2
 800e686:	4a13      	ldr	r2, [pc, #76]	; (800e6d4 <tcp_get_next_optbyte+0x5c>)
 800e688:	8011      	strh	r1, [r2, #0]
 800e68a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e68c:	4b12      	ldr	r3, [pc, #72]	; (800e6d8 <tcp_get_next_optbyte+0x60>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d004      	beq.n	800e69e <tcp_get_next_optbyte+0x26>
 800e694:	4b11      	ldr	r3, [pc, #68]	; (800e6dc <tcp_get_next_optbyte+0x64>)
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	88fa      	ldrh	r2, [r7, #6]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d208      	bcs.n	800e6b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e69e:	4b10      	ldr	r3, [pc, #64]	; (800e6e0 <tcp_get_next_optbyte+0x68>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	3314      	adds	r3, #20
 800e6a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e6a6:	88fb      	ldrh	r3, [r7, #6]
 800e6a8:	683a      	ldr	r2, [r7, #0]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	e00b      	b.n	800e6c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e6b0:	88fb      	ldrh	r3, [r7, #6]
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	4b09      	ldr	r3, [pc, #36]	; (800e6dc <tcp_get_next_optbyte+0x64>)
 800e6b6:	881b      	ldrh	r3, [r3, #0]
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e6be:	4b06      	ldr	r3, [pc, #24]	; (800e6d8 <tcp_get_next_optbyte+0x60>)
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	797b      	ldrb	r3, [r7, #5]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	370c      	adds	r7, #12
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	200001a4 	.word	0x200001a4
 800e6d8:	200001a0 	.word	0x200001a0
 800e6dc:	2000019e 	.word	0x2000019e
 800e6e0:	20000198 	.word	0x20000198

0800e6e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d106      	bne.n	800e700 <tcp_parseopt+0x1c>
 800e6f2:	4b32      	ldr	r3, [pc, #200]	; (800e7bc <tcp_parseopt+0xd8>)
 800e6f4:	f240 727d 	movw	r2, #1917	; 0x77d
 800e6f8:	4931      	ldr	r1, [pc, #196]	; (800e7c0 <tcp_parseopt+0xdc>)
 800e6fa:	4832      	ldr	r0, [pc, #200]	; (800e7c4 <tcp_parseopt+0xe0>)
 800e6fc:	f005 f8c4 	bl	8013888 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e700:	4b31      	ldr	r3, [pc, #196]	; (800e7c8 <tcp_parseopt+0xe4>)
 800e702:	881b      	ldrh	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d055      	beq.n	800e7b4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e708:	4b30      	ldr	r3, [pc, #192]	; (800e7cc <tcp_parseopt+0xe8>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	801a      	strh	r2, [r3, #0]
 800e70e:	e045      	b.n	800e79c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e710:	f7ff ffb2 	bl	800e678 <tcp_get_next_optbyte>
 800e714:	4603      	mov	r3, r0
 800e716:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e718:	7bfb      	ldrb	r3, [r7, #15]
 800e71a:	2b02      	cmp	r3, #2
 800e71c:	d006      	beq.n	800e72c <tcp_parseopt+0x48>
 800e71e:	2b02      	cmp	r3, #2
 800e720:	dc2b      	bgt.n	800e77a <tcp_parseopt+0x96>
 800e722:	2b00      	cmp	r3, #0
 800e724:	d041      	beq.n	800e7aa <tcp_parseopt+0xc6>
 800e726:	2b01      	cmp	r3, #1
 800e728:	d127      	bne.n	800e77a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e72a:	e037      	b.n	800e79c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e72c:	f7ff ffa4 	bl	800e678 <tcp_get_next_optbyte>
 800e730:	4603      	mov	r3, r0
 800e732:	2b04      	cmp	r3, #4
 800e734:	d13b      	bne.n	800e7ae <tcp_parseopt+0xca>
 800e736:	4b25      	ldr	r3, [pc, #148]	; (800e7cc <tcp_parseopt+0xe8>)
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	3301      	adds	r3, #1
 800e73c:	4a22      	ldr	r2, [pc, #136]	; (800e7c8 <tcp_parseopt+0xe4>)
 800e73e:	8812      	ldrh	r2, [r2, #0]
 800e740:	4293      	cmp	r3, r2
 800e742:	da34      	bge.n	800e7ae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e744:	f7ff ff98 	bl	800e678 <tcp_get_next_optbyte>
 800e748:	4603      	mov	r3, r0
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	021b      	lsls	r3, r3, #8
 800e74e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e750:	f7ff ff92 	bl	800e678 <tcp_get_next_optbyte>
 800e754:	4603      	mov	r3, r0
 800e756:	b29a      	uxth	r2, r3
 800e758:	89bb      	ldrh	r3, [r7, #12]
 800e75a:	4313      	orrs	r3, r2
 800e75c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e75e:	89bb      	ldrh	r3, [r7, #12]
 800e760:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e764:	d804      	bhi.n	800e770 <tcp_parseopt+0x8c>
 800e766:	89bb      	ldrh	r3, [r7, #12]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d001      	beq.n	800e770 <tcp_parseopt+0x8c>
 800e76c:	89ba      	ldrh	r2, [r7, #12]
 800e76e:	e001      	b.n	800e774 <tcp_parseopt+0x90>
 800e770:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e778:	e010      	b.n	800e79c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e77a:	f7ff ff7d 	bl	800e678 <tcp_get_next_optbyte>
 800e77e:	4603      	mov	r3, r0
 800e780:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e782:	7afb      	ldrb	r3, [r7, #11]
 800e784:	2b01      	cmp	r3, #1
 800e786:	d914      	bls.n	800e7b2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e788:	7afb      	ldrb	r3, [r7, #11]
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	4b0f      	ldr	r3, [pc, #60]	; (800e7cc <tcp_parseopt+0xe8>)
 800e78e:	881b      	ldrh	r3, [r3, #0]
 800e790:	4413      	add	r3, r2
 800e792:	b29b      	uxth	r3, r3
 800e794:	3b02      	subs	r3, #2
 800e796:	b29a      	uxth	r2, r3
 800e798:	4b0c      	ldr	r3, [pc, #48]	; (800e7cc <tcp_parseopt+0xe8>)
 800e79a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e79c:	4b0b      	ldr	r3, [pc, #44]	; (800e7cc <tcp_parseopt+0xe8>)
 800e79e:	881a      	ldrh	r2, [r3, #0]
 800e7a0:	4b09      	ldr	r3, [pc, #36]	; (800e7c8 <tcp_parseopt+0xe4>)
 800e7a2:	881b      	ldrh	r3, [r3, #0]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d3b3      	bcc.n	800e710 <tcp_parseopt+0x2c>
 800e7a8:	e004      	b.n	800e7b4 <tcp_parseopt+0xd0>
          return;
 800e7aa:	bf00      	nop
 800e7ac:	e002      	b.n	800e7b4 <tcp_parseopt+0xd0>
            return;
 800e7ae:	bf00      	nop
 800e7b0:	e000      	b.n	800e7b4 <tcp_parseopt+0xd0>
            return;
 800e7b2:	bf00      	nop
      }
    }
  }
}
 800e7b4:	3710      	adds	r7, #16
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	080160e4 	.word	0x080160e4
 800e7c0:	08016548 	.word	0x08016548
 800e7c4:	08016130 	.word	0x08016130
 800e7c8:	2000019c 	.word	0x2000019c
 800e7cc:	200001a4 	.word	0x200001a4

0800e7d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e7d4:	4b05      	ldr	r3, [pc, #20]	; (800e7ec <tcp_trigger_input_pcb_close+0x1c>)
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	f043 0310 	orr.w	r3, r3, #16
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	4b03      	ldr	r3, [pc, #12]	; (800e7ec <tcp_trigger_input_pcb_close+0x1c>)
 800e7e0:	701a      	strb	r2, [r3, #0]
}
 800e7e2:	bf00      	nop
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ea:	4770      	bx	lr
 800e7ec:	200001b5 	.word	0x200001b5

0800e7f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00a      	beq.n	800e818 <tcp_route+0x28>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	7a1b      	ldrb	r3, [r3, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d006      	beq.n	800e818 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	7a1b      	ldrb	r3, [r3, #8]
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fb f81c 	bl	800984c <netif_get_by_index>
 800e814:	4603      	mov	r3, r0
 800e816:	e003      	b.n	800e820 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f003 fded 	bl	80123f8 <ip4_route>
 800e81e:	4603      	mov	r3, r0
  }
}
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e828:	b590      	push	{r4, r7, lr}
 800e82a:	b087      	sub	sp, #28
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	603b      	str	r3, [r7, #0]
 800e834:	4613      	mov	r3, r2
 800e836:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d105      	bne.n	800e84a <tcp_create_segment+0x22>
 800e83e:	4b44      	ldr	r3, [pc, #272]	; (800e950 <tcp_create_segment+0x128>)
 800e840:	22a3      	movs	r2, #163	; 0xa3
 800e842:	4944      	ldr	r1, [pc, #272]	; (800e954 <tcp_create_segment+0x12c>)
 800e844:	4844      	ldr	r0, [pc, #272]	; (800e958 <tcp_create_segment+0x130>)
 800e846:	f005 f81f 	bl	8013888 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d105      	bne.n	800e85c <tcp_create_segment+0x34>
 800e850:	4b3f      	ldr	r3, [pc, #252]	; (800e950 <tcp_create_segment+0x128>)
 800e852:	22a4      	movs	r2, #164	; 0xa4
 800e854:	4941      	ldr	r1, [pc, #260]	; (800e95c <tcp_create_segment+0x134>)
 800e856:	4840      	ldr	r0, [pc, #256]	; (800e958 <tcp_create_segment+0x130>)
 800e858:	f005 f816 	bl	8013888 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e85c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	b2db      	uxtb	r3, r3
 800e864:	f003 0304 	and.w	r3, r3, #4
 800e868:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e86a:	2003      	movs	r0, #3
 800e86c:	f7fa fcf0 	bl	8009250 <memp_malloc>
 800e870:	6138      	str	r0, [r7, #16]
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d104      	bne.n	800e882 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e878:	68b8      	ldr	r0, [r7, #8]
 800e87a:	f7fb fb47 	bl	8009f0c <pbuf_free>
    return NULL;
 800e87e:	2300      	movs	r3, #0
 800e880:	e061      	b.n	800e946 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e888:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	2200      	movs	r2, #0
 800e88e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	891a      	ldrh	r2, [r3, #8]
 800e89a:	7dfb      	ldrb	r3, [r7, #23]
 800e89c:	b29b      	uxth	r3, r3
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d205      	bcs.n	800e8ae <tcp_create_segment+0x86>
 800e8a2:	4b2b      	ldr	r3, [pc, #172]	; (800e950 <tcp_create_segment+0x128>)
 800e8a4:	22b0      	movs	r2, #176	; 0xb0
 800e8a6:	492e      	ldr	r1, [pc, #184]	; (800e960 <tcp_create_segment+0x138>)
 800e8a8:	482b      	ldr	r0, [pc, #172]	; (800e958 <tcp_create_segment+0x130>)
 800e8aa:	f004 ffed 	bl	8013888 <iprintf>
  seg->len = p->tot_len - optlen;
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	891a      	ldrh	r2, [r3, #8]
 800e8b2:	7dfb      	ldrb	r3, [r7, #23]
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	1ad3      	subs	r3, r2, r3
 800e8b8:	b29a      	uxth	r2, r3
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e8be:	2114      	movs	r1, #20
 800e8c0:	68b8      	ldr	r0, [r7, #8]
 800e8c2:	f7fb fa8d 	bl	8009de0 <pbuf_add_header>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d004      	beq.n	800e8d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e8cc:	6938      	ldr	r0, [r7, #16]
 800e8ce:	f7fc ffec 	bl	800b8aa <tcp_seg_free>
    return NULL;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	e037      	b.n	800e946 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	8ada      	ldrh	r2, [r3, #22]
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	68dc      	ldr	r4, [r3, #12]
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	f7fa f85b 	bl	80089a4 <lwip_htons>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	8b1a      	ldrh	r2, [r3, #24]
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	68dc      	ldr	r4, [r3, #12]
 800e8fa:	4610      	mov	r0, r2
 800e8fc:	f7fa f852 	bl	80089a4 <lwip_htons>
 800e900:	4603      	mov	r3, r0
 800e902:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	68dc      	ldr	r4, [r3, #12]
 800e908:	6838      	ldr	r0, [r7, #0]
 800e90a:	f7fa f860 	bl	80089ce <lwip_htonl>
 800e90e:	4603      	mov	r3, r0
 800e910:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e912:	7dfb      	ldrb	r3, [r7, #23]
 800e914:	089b      	lsrs	r3, r3, #2
 800e916:	b2db      	uxtb	r3, r3
 800e918:	b29b      	uxth	r3, r3
 800e91a:	3305      	adds	r3, #5
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	031b      	lsls	r3, r3, #12
 800e920:	b29a      	uxth	r2, r3
 800e922:	79fb      	ldrb	r3, [r7, #7]
 800e924:	b29b      	uxth	r3, r3
 800e926:	4313      	orrs	r3, r2
 800e928:	b29a      	uxth	r2, r3
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	68dc      	ldr	r4, [r3, #12]
 800e92e:	4610      	mov	r0, r2
 800e930:	f7fa f838 	bl	80089a4 <lwip_htons>
 800e934:	4603      	mov	r3, r0
 800e936:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	749a      	strb	r2, [r3, #18]
 800e940:	2200      	movs	r2, #0
 800e942:	74da      	strb	r2, [r3, #19]
  return seg;
 800e944:	693b      	ldr	r3, [r7, #16]
}
 800e946:	4618      	mov	r0, r3
 800e948:	371c      	adds	r7, #28
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd90      	pop	{r4, r7, pc}
 800e94e:	bf00      	nop
 800e950:	08016564 	.word	0x08016564
 800e954:	08016598 	.word	0x08016598
 800e958:	080165b8 	.word	0x080165b8
 800e95c:	080165e0 	.word	0x080165e0
 800e960:	08016604 	.word	0x08016604

0800e964 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b086      	sub	sp, #24
 800e968:	af00      	add	r7, sp, #0
 800e96a:	607b      	str	r3, [r7, #4]
 800e96c:	4603      	mov	r3, r0
 800e96e:	73fb      	strb	r3, [r7, #15]
 800e970:	460b      	mov	r3, r1
 800e972:	81bb      	strh	r3, [r7, #12]
 800e974:	4613      	mov	r3, r2
 800e976:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e978:	89bb      	ldrh	r3, [r7, #12]
 800e97a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d105      	bne.n	800e98e <tcp_pbuf_prealloc+0x2a>
 800e982:	4b30      	ldr	r3, [pc, #192]	; (800ea44 <tcp_pbuf_prealloc+0xe0>)
 800e984:	22e8      	movs	r2, #232	; 0xe8
 800e986:	4930      	ldr	r1, [pc, #192]	; (800ea48 <tcp_pbuf_prealloc+0xe4>)
 800e988:	4830      	ldr	r0, [pc, #192]	; (800ea4c <tcp_pbuf_prealloc+0xe8>)
 800e98a:	f004 ff7d 	bl	8013888 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800e98e:	6a3b      	ldr	r3, [r7, #32]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d105      	bne.n	800e9a0 <tcp_pbuf_prealloc+0x3c>
 800e994:	4b2b      	ldr	r3, [pc, #172]	; (800ea44 <tcp_pbuf_prealloc+0xe0>)
 800e996:	22e9      	movs	r2, #233	; 0xe9
 800e998:	492d      	ldr	r1, [pc, #180]	; (800ea50 <tcp_pbuf_prealloc+0xec>)
 800e99a:	482c      	ldr	r0, [pc, #176]	; (800ea4c <tcp_pbuf_prealloc+0xe8>)
 800e99c:	f004 ff74 	bl	8013888 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e9a0:	89ba      	ldrh	r2, [r7, #12]
 800e9a2:	897b      	ldrh	r3, [r7, #10]
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d221      	bcs.n	800e9ec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e9a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e9ac:	f003 0302 	and.w	r3, r3, #2
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d111      	bne.n	800e9d8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800e9b4:	6a3b      	ldr	r3, [r7, #32]
 800e9b6:	8b5b      	ldrh	r3, [r3, #26]
 800e9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d115      	bne.n	800e9ec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800e9c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d007      	beq.n	800e9d8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d103      	bne.n	800e9d8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d009      	beq.n	800e9ec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e9d8:	89bb      	ldrh	r3, [r7, #12]
 800e9da:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e9de:	f023 0203 	bic.w	r2, r3, #3
 800e9e2:	897b      	ldrh	r3, [r7, #10]
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	bf28      	it	cs
 800e9e8:	4613      	movcs	r3, r2
 800e9ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e9ec:	8af9      	ldrh	r1, [r7, #22]
 800e9ee:	7bfb      	ldrb	r3, [r7, #15]
 800e9f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fa ffa5 	bl	8009944 <pbuf_alloc>
 800e9fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d101      	bne.n	800ea06 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ea02:	2300      	movs	r3, #0
 800ea04:	e019      	b.n	800ea3a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d006      	beq.n	800ea1c <tcp_pbuf_prealloc+0xb8>
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	; (800ea44 <tcp_pbuf_prealloc+0xe0>)
 800ea10:	f240 120b 	movw	r2, #267	; 0x10b
 800ea14:	490f      	ldr	r1, [pc, #60]	; (800ea54 <tcp_pbuf_prealloc+0xf0>)
 800ea16:	480d      	ldr	r0, [pc, #52]	; (800ea4c <tcp_pbuf_prealloc+0xe8>)
 800ea18:	f004 ff36 	bl	8013888 <iprintf>
  *oversize = p->len - length;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	895a      	ldrh	r2, [r3, #10]
 800ea20:	89bb      	ldrh	r3, [r7, #12]
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	89ba      	ldrh	r2, [r7, #12]
 800ea2e:	811a      	strh	r2, [r3, #8]
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	891a      	ldrh	r2, [r3, #8]
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	815a      	strh	r2, [r3, #10]
  return p;
 800ea38:	693b      	ldr	r3, [r7, #16]
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3718      	adds	r7, #24
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	08016564 	.word	0x08016564
 800ea48:	0801661c 	.word	0x0801661c
 800ea4c:	080165b8 	.word	0x080165b8
 800ea50:	08016640 	.word	0x08016640
 800ea54:	08016660 	.word	0x08016660

0800ea58 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	460b      	mov	r3, r1
 800ea62:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d106      	bne.n	800ea78 <tcp_write_checks+0x20>
 800ea6a:	4b33      	ldr	r3, [pc, #204]	; (800eb38 <tcp_write_checks+0xe0>)
 800ea6c:	f240 1233 	movw	r2, #307	; 0x133
 800ea70:	4932      	ldr	r1, [pc, #200]	; (800eb3c <tcp_write_checks+0xe4>)
 800ea72:	4833      	ldr	r0, [pc, #204]	; (800eb40 <tcp_write_checks+0xe8>)
 800ea74:	f004 ff08 	bl	8013888 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	7d1b      	ldrb	r3, [r3, #20]
 800ea7c:	2b04      	cmp	r3, #4
 800ea7e:	d00e      	beq.n	800ea9e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ea84:	2b07      	cmp	r3, #7
 800ea86:	d00a      	beq.n	800ea9e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	d006      	beq.n	800ea9e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d002      	beq.n	800ea9e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ea98:	f06f 030a 	mvn.w	r3, #10
 800ea9c:	e048      	b.n	800eb30 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ea9e:	887b      	ldrh	r3, [r7, #2]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <tcp_write_checks+0x50>
    return ERR_OK;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	e043      	b.n	800eb30 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800eaae:	887a      	ldrh	r2, [r7, #2]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d909      	bls.n	800eac8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	8b5b      	ldrh	r3, [r3, #26]
 800eab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800eac2:	f04f 33ff 	mov.w	r3, #4294967295
 800eac6:	e033      	b.n	800eb30 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eace:	2b08      	cmp	r3, #8
 800ead0:	d909      	bls.n	800eae6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	8b5b      	ldrh	r3, [r3, #26]
 800ead6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eada:	b29a      	uxth	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800eae0:	f04f 33ff 	mov.w	r3, #4294967295
 800eae4:	e024      	b.n	800eb30 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d00f      	beq.n	800eb10 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d11a      	bne.n	800eb2e <tcp_write_checks+0xd6>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d116      	bne.n	800eb2e <tcp_write_checks+0xd6>
 800eb00:	4b0d      	ldr	r3, [pc, #52]	; (800eb38 <tcp_write_checks+0xe0>)
 800eb02:	f240 1255 	movw	r2, #341	; 0x155
 800eb06:	490f      	ldr	r1, [pc, #60]	; (800eb44 <tcp_write_checks+0xec>)
 800eb08:	480d      	ldr	r0, [pc, #52]	; (800eb40 <tcp_write_checks+0xe8>)
 800eb0a:	f004 febd 	bl	8013888 <iprintf>
 800eb0e:	e00e      	b.n	800eb2e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d103      	bne.n	800eb20 <tcp_write_checks+0xc8>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d006      	beq.n	800eb2e <tcp_write_checks+0xd6>
 800eb20:	4b05      	ldr	r3, [pc, #20]	; (800eb38 <tcp_write_checks+0xe0>)
 800eb22:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800eb26:	4908      	ldr	r1, [pc, #32]	; (800eb48 <tcp_write_checks+0xf0>)
 800eb28:	4805      	ldr	r0, [pc, #20]	; (800eb40 <tcp_write_checks+0xe8>)
 800eb2a:	f004 fead 	bl	8013888 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	08016564 	.word	0x08016564
 800eb3c:	08016674 	.word	0x08016674
 800eb40:	080165b8 	.word	0x080165b8
 800eb44:	08016694 	.word	0x08016694
 800eb48:	080166d0 	.word	0x080166d0

0800eb4c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800eb4c:	b590      	push	{r4, r7, lr}
 800eb4e:	b09b      	sub	sp, #108	; 0x6c
 800eb50:	af04      	add	r7, sp, #16
 800eb52:	60f8      	str	r0, [r7, #12]
 800eb54:	60b9      	str	r1, [r7, #8]
 800eb56:	4611      	mov	r1, r2
 800eb58:	461a      	mov	r2, r3
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	80fb      	strh	r3, [r7, #6]
 800eb5e:	4613      	mov	r3, r2
 800eb60:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800eb62:	2300      	movs	r3, #0
 800eb64:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800eb66:	2300      	movs	r3, #0
 800eb68:	653b      	str	r3, [r7, #80]	; 0x50
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb6e:	2300      	movs	r3, #0
 800eb70:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb72:	2300      	movs	r3, #0
 800eb74:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800eb76:	2300      	movs	r3, #0
 800eb78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800eb82:	2300      	movs	r3, #0
 800eb84:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800eb86:	2300      	movs	r3, #0
 800eb88:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d109      	bne.n	800eba8 <tcp_write+0x5c>
 800eb94:	4ba4      	ldr	r3, [pc, #656]	; (800ee28 <tcp_write+0x2dc>)
 800eb96:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800eb9a:	49a4      	ldr	r1, [pc, #656]	; (800ee2c <tcp_write+0x2e0>)
 800eb9c:	48a4      	ldr	r0, [pc, #656]	; (800ee30 <tcp_write+0x2e4>)
 800eb9e:	f004 fe73 	bl	8013888 <iprintf>
 800eba2:	f06f 030f 	mvn.w	r3, #15
 800eba6:	e32a      	b.n	800f1fe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebae:	085b      	lsrs	r3, r3, #1
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	bf28      	it	cs
 800ebba:	4613      	movcs	r3, r2
 800ebbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800ebbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d102      	bne.n	800ebca <tcp_write+0x7e>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebc8:	e000      	b.n	800ebcc <tcp_write+0x80>
 800ebca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebcc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d109      	bne.n	800ebe8 <tcp_write+0x9c>
 800ebd4:	4b94      	ldr	r3, [pc, #592]	; (800ee28 <tcp_write+0x2dc>)
 800ebd6:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ebda:	4996      	ldr	r1, [pc, #600]	; (800ee34 <tcp_write+0x2e8>)
 800ebdc:	4894      	ldr	r0, [pc, #592]	; (800ee30 <tcp_write+0x2e4>)
 800ebde:	f004 fe53 	bl	8013888 <iprintf>
 800ebe2:	f06f 030f 	mvn.w	r3, #15
 800ebe6:	e30a      	b.n	800f1fe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ebe8:	88fb      	ldrh	r3, [r7, #6]
 800ebea:	4619      	mov	r1, r3
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f7ff ff33 	bl	800ea58 <tcp_write_checks>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ebf8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d002      	beq.n	800ec06 <tcp_write+0xba>
    return err;
 800ec00:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ec04:	e2fb      	b.n	800f1fe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec0c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ec10:	2300      	movs	r3, #0
 800ec12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	f000 80f6 	beq.w	800ee0c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec24:	653b      	str	r3, [r7, #80]	; 0x50
 800ec26:	e002      	b.n	800ec2e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800ec28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1f8      	bne.n	800ec28 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ec36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec38:	7a9b      	ldrb	r3, [r3, #10]
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	f003 0304 	and.w	r3, r3, #4
 800ec42:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ec44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec48:	891b      	ldrh	r3, [r3, #8]
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	8c3b      	ldrh	r3, [r7, #32]
 800ec4e:	440b      	add	r3, r1
 800ec50:	429a      	cmp	r2, r3
 800ec52:	da06      	bge.n	800ec62 <tcp_write+0x116>
 800ec54:	4b74      	ldr	r3, [pc, #464]	; (800ee28 <tcp_write+0x2dc>)
 800ec56:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ec5a:	4977      	ldr	r1, [pc, #476]	; (800ee38 <tcp_write+0x2ec>)
 800ec5c:	4874      	ldr	r0, [pc, #464]	; (800ee30 <tcp_write+0x2e4>)
 800ec5e:	f004 fe13 	bl	8013888 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ec62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec64:	891a      	ldrh	r2, [r3, #8]
 800ec66:	8c3b      	ldrh	r3, [r7, #32]
 800ec68:	4413      	add	r3, r2
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ec78:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ec7a:	8a7b      	ldrh	r3, [r7, #18]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d026      	beq.n	800ecce <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ec80:	8a7b      	ldrh	r3, [r7, #18]
 800ec82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d206      	bcs.n	800ec96 <tcp_write+0x14a>
 800ec88:	4b67      	ldr	r3, [pc, #412]	; (800ee28 <tcp_write+0x2dc>)
 800ec8a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ec8e:	496b      	ldr	r1, [pc, #428]	; (800ee3c <tcp_write+0x2f0>)
 800ec90:	4867      	ldr	r0, [pc, #412]	; (800ee30 <tcp_write+0x2e4>)
 800ec92:	f004 fdf9 	bl	8013888 <iprintf>
      seg = last_unsent;
 800ec96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec98:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ec9a:	8a7b      	ldrh	r3, [r7, #18]
 800ec9c:	88fa      	ldrh	r2, [r7, #6]
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	bf28      	it	cs
 800eca2:	4613      	movcs	r3, r2
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	bf28      	it	cs
 800ecac:	4613      	movcs	r3, r2
 800ecae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ecb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ecb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ecb6:	4413      	add	r3, r2
 800ecb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ecbc:	8a7a      	ldrh	r2, [r7, #18]
 800ecbe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ecc6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ecc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ecce:	8a7b      	ldrh	r3, [r7, #18]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d00b      	beq.n	800ecec <tcp_write+0x1a0>
 800ecd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ecd8:	88fb      	ldrh	r3, [r7, #6]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d006      	beq.n	800ecec <tcp_write+0x1a0>
 800ecde:	4b52      	ldr	r3, [pc, #328]	; (800ee28 <tcp_write+0x2dc>)
 800ece0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ece4:	4956      	ldr	r1, [pc, #344]	; (800ee40 <tcp_write+0x2f4>)
 800ece6:	4852      	ldr	r0, [pc, #328]	; (800ee30 <tcp_write+0x2e4>)
 800ece8:	f004 fdce 	bl	8013888 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ecec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ecf0:	88fb      	ldrh	r3, [r7, #6]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	f080 8167 	bcs.w	800efc6 <tcp_write+0x47a>
 800ecf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f000 8163 	beq.w	800efc6 <tcp_write+0x47a>
 800ed00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed02:	891b      	ldrh	r3, [r3, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 815e 	beq.w	800efc6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ed0a:	88fa      	ldrh	r2, [r7, #6]
 800ed0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed10:	1ad2      	subs	r2, r2, r3
 800ed12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed14:	4293      	cmp	r3, r2
 800ed16:	bfa8      	it	ge
 800ed18:	4613      	movge	r3, r2
 800ed1a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ed1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed1e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ed20:	797b      	ldrb	r3, [r7, #5]
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d027      	beq.n	800ed7a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ed2a:	f107 0012 	add.w	r0, r7, #18
 800ed2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ed30:	8bf9      	ldrh	r1, [r7, #30]
 800ed32:	2301      	movs	r3, #1
 800ed34:	9302      	str	r3, [sp, #8]
 800ed36:	797b      	ldrb	r3, [r7, #5]
 800ed38:	9301      	str	r3, [sp, #4]
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2000      	movs	r0, #0
 800ed42:	f7ff fe0f 	bl	800e964 <tcp_pbuf_prealloc>
 800ed46:	6578      	str	r0, [r7, #84]	; 0x54
 800ed48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f000 8225 	beq.w	800f19a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ed50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed52:	6858      	ldr	r0, [r3, #4]
 800ed54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed58:	68ba      	ldr	r2, [r7, #8]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	8bfa      	ldrh	r2, [r7, #30]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	f004 fd62 	bl	8013828 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ed64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ed66:	f7fb f959 	bl	800a01c <pbuf_clen>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ed72:	4413      	add	r3, r2
 800ed74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ed78:	e041      	b.n	800edfe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ed7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ed80:	e002      	b.n	800ed88 <tcp_write+0x23c>
 800ed82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	637b      	str	r3, [r7, #52]	; 0x34
 800ed88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d1f8      	bne.n	800ed82 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ed90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed92:	7b1b      	ldrb	r3, [r3, #12]
 800ed94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d115      	bne.n	800edc8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ed9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eda2:	8952      	ldrh	r2, [r2, #10]
 800eda4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800eda6:	68ba      	ldr	r2, [r7, #8]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d10d      	bne.n	800edc8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800edac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d006      	beq.n	800edc2 <tcp_write+0x276>
 800edb4:	4b1c      	ldr	r3, [pc, #112]	; (800ee28 <tcp_write+0x2dc>)
 800edb6:	f240 2231 	movw	r2, #561	; 0x231
 800edba:	4922      	ldr	r1, [pc, #136]	; (800ee44 <tcp_write+0x2f8>)
 800edbc:	481c      	ldr	r0, [pc, #112]	; (800ee30 <tcp_write+0x2e4>)
 800edbe:	f004 fd63 	bl	8013888 <iprintf>
          extendlen = seglen;
 800edc2:	8bfb      	ldrh	r3, [r7, #30]
 800edc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800edc6:	e01a      	b.n	800edfe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800edc8:	8bfb      	ldrh	r3, [r7, #30]
 800edca:	2201      	movs	r2, #1
 800edcc:	4619      	mov	r1, r3
 800edce:	2000      	movs	r0, #0
 800edd0:	f7fa fdb8 	bl	8009944 <pbuf_alloc>
 800edd4:	6578      	str	r0, [r7, #84]	; 0x54
 800edd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 81e0 	beq.w	800f19e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800edde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ede2:	68ba      	ldr	r2, [r7, #8]
 800ede4:	441a      	add	r2, r3
 800ede6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ede8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800edea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800edec:	f7fb f916 	bl	800a01c <pbuf_clen>
 800edf0:	4603      	mov	r3, r0
 800edf2:	461a      	mov	r2, r3
 800edf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800edf8:	4413      	add	r3, r2
 800edfa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800edfe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ee02:	8bfb      	ldrh	r3, [r7, #30]
 800ee04:	4413      	add	r3, r2
 800ee06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ee0a:	e0dc      	b.n	800efc6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f000 80d7 	beq.w	800efc6 <tcp_write+0x47a>
 800ee18:	4b03      	ldr	r3, [pc, #12]	; (800ee28 <tcp_write+0x2dc>)
 800ee1a:	f240 224a 	movw	r2, #586	; 0x24a
 800ee1e:	490a      	ldr	r1, [pc, #40]	; (800ee48 <tcp_write+0x2fc>)
 800ee20:	4803      	ldr	r0, [pc, #12]	; (800ee30 <tcp_write+0x2e4>)
 800ee22:	f004 fd31 	bl	8013888 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ee26:	e0ce      	b.n	800efc6 <tcp_write+0x47a>
 800ee28:	08016564 	.word	0x08016564
 800ee2c:	08016704 	.word	0x08016704
 800ee30:	080165b8 	.word	0x080165b8
 800ee34:	0801671c 	.word	0x0801671c
 800ee38:	08016750 	.word	0x08016750
 800ee3c:	08016768 	.word	0x08016768
 800ee40:	08016788 	.word	0x08016788
 800ee44:	080167a8 	.word	0x080167a8
 800ee48:	080167d4 	.word	0x080167d4
    struct pbuf *p;
    u16_t left = len - pos;
 800ee4c:	88fa      	ldrh	r2, [r7, #6]
 800ee4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ee56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ee62:	8b7a      	ldrh	r2, [r7, #26]
 800ee64:	8bbb      	ldrh	r3, [r7, #28]
 800ee66:	4293      	cmp	r3, r2
 800ee68:	bf28      	it	cs
 800ee6a:	4613      	movcs	r3, r2
 800ee6c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ee6e:	797b      	ldrb	r3, [r7, #5]
 800ee70:	f003 0301 	and.w	r3, r3, #1
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d036      	beq.n	800eee6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ee78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	8b3b      	ldrh	r3, [r7, #24]
 800ee80:	4413      	add	r3, r2
 800ee82:	b299      	uxth	r1, r3
 800ee84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	bf0c      	ite	eq
 800ee8a:	2301      	moveq	r3, #1
 800ee8c:	2300      	movne	r3, #0
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	f107 0012 	add.w	r0, r7, #18
 800ee94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee96:	9302      	str	r3, [sp, #8]
 800ee98:	797b      	ldrb	r3, [r7, #5]
 800ee9a:	9301      	str	r3, [sp, #4]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	4603      	mov	r3, r0
 800eea2:	2036      	movs	r0, #54	; 0x36
 800eea4:	f7ff fd5e 	bl	800e964 <tcp_pbuf_prealloc>
 800eea8:	6338      	str	r0, [r7, #48]	; 0x30
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 8178 	beq.w	800f1a2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800eeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb4:	895b      	ldrh	r3, [r3, #10]
 800eeb6:	8b3a      	ldrh	r2, [r7, #24]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d906      	bls.n	800eeca <tcp_write+0x37e>
 800eebc:	4b8c      	ldr	r3, [pc, #560]	; (800f0f0 <tcp_write+0x5a4>)
 800eebe:	f240 2266 	movw	r2, #614	; 0x266
 800eec2:	498c      	ldr	r1, [pc, #560]	; (800f0f4 <tcp_write+0x5a8>)
 800eec4:	488c      	ldr	r0, [pc, #560]	; (800f0f8 <tcp_write+0x5ac>)
 800eec6:	f004 fcdf 	bl	8013888 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	685a      	ldr	r2, [r3, #4]
 800eece:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eed2:	18d0      	adds	r0, r2, r3
 800eed4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	4413      	add	r3, r2
 800eedc:	8b3a      	ldrh	r2, [r7, #24]
 800eede:	4619      	mov	r1, r3
 800eee0:	f004 fca2 	bl	8013828 <memcpy>
 800eee4:	e02f      	b.n	800ef46 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800eee6:	8a7b      	ldrh	r3, [r7, #18]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d006      	beq.n	800eefa <tcp_write+0x3ae>
 800eeec:	4b80      	ldr	r3, [pc, #512]	; (800f0f0 <tcp_write+0x5a4>)
 800eeee:	f240 2271 	movw	r2, #625	; 0x271
 800eef2:	4982      	ldr	r1, [pc, #520]	; (800f0fc <tcp_write+0x5b0>)
 800eef4:	4880      	ldr	r0, [pc, #512]	; (800f0f8 <tcp_write+0x5ac>)
 800eef6:	f004 fcc7 	bl	8013888 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800eefa:	8b3b      	ldrh	r3, [r7, #24]
 800eefc:	2201      	movs	r2, #1
 800eefe:	4619      	mov	r1, r3
 800ef00:	2036      	movs	r0, #54	; 0x36
 800ef02:	f7fa fd1f 	bl	8009944 <pbuf_alloc>
 800ef06:	6178      	str	r0, [r7, #20]
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f000 814b 	beq.w	800f1a6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ef10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	441a      	add	r2, r3
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ef1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef26:	4619      	mov	r1, r3
 800ef28:	2036      	movs	r0, #54	; 0x36
 800ef2a:	f7fa fd0b 	bl	8009944 <pbuf_alloc>
 800ef2e:	6338      	str	r0, [r7, #48]	; 0x30
 800ef30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d103      	bne.n	800ef3e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ef36:	6978      	ldr	r0, [r7, #20]
 800ef38:	f7fa ffe8 	bl	8009f0c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ef3c:	e136      	b.n	800f1ac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ef3e:	6979      	ldr	r1, [r7, #20]
 800ef40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef42:	f7fb f8a5 	bl	800a090 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ef46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef48:	f7fb f868 	bl	800a01c <pbuf_clen>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	461a      	mov	r2, r3
 800ef50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ef54:	4413      	add	r3, r2
 800ef56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800ef5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ef5e:	2b09      	cmp	r3, #9
 800ef60:	d903      	bls.n	800ef6a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ef62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef64:	f7fa ffd2 	bl	8009f0c <pbuf_free>
      goto memerr;
 800ef68:	e120      	b.n	800f1ac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ef6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef72:	441a      	add	r2, r3
 800ef74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef78:	9300      	str	r3, [sp, #0]
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f7ff fc51 	bl	800e828 <tcp_create_segment>
 800ef86:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ef88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	f000 810d 	beq.w	800f1aa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800ef90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d102      	bne.n	800ef9c <tcp_write+0x450>
      queue = seg;
 800ef96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef98:	647b      	str	r3, [r7, #68]	; 0x44
 800ef9a:	e00c      	b.n	800efb6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ef9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d106      	bne.n	800efb0 <tcp_write+0x464>
 800efa2:	4b53      	ldr	r3, [pc, #332]	; (800f0f0 <tcp_write+0x5a4>)
 800efa4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800efa8:	4955      	ldr	r1, [pc, #340]	; (800f100 <tcp_write+0x5b4>)
 800efaa:	4853      	ldr	r0, [pc, #332]	; (800f0f8 <tcp_write+0x5ac>)
 800efac:	f004 fc6c 	bl	8013888 <iprintf>
      prev_seg->next = seg;
 800efb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800efb4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800efb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efb8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800efba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800efbe:	8b3b      	ldrh	r3, [r7, #24]
 800efc0:	4413      	add	r3, r2
 800efc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800efc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800efca:	88fb      	ldrh	r3, [r7, #6]
 800efcc:	429a      	cmp	r2, r3
 800efce:	f4ff af3d 	bcc.w	800ee4c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800efd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d02c      	beq.n	800f032 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800efd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efde:	e01e      	b.n	800f01e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800efe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe2:	891a      	ldrh	r2, [r3, #8]
 800efe4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800efe6:	4413      	add	r3, r2
 800efe8:	b29a      	uxth	r2, r3
 800efea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800efee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d110      	bne.n	800f018 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800eff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800effc:	8952      	ldrh	r2, [r2, #10]
 800effe:	4413      	add	r3, r2
 800f000:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f002:	68b9      	ldr	r1, [r7, #8]
 800f004:	4618      	mov	r0, r3
 800f006:	f004 fc0f 	bl	8013828 <memcpy>
        p->len += oversize_used;
 800f00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00c:	895a      	ldrh	r2, [r3, #10]
 800f00e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f010:	4413      	add	r3, r2
 800f012:	b29a      	uxth	r2, r3
 800f014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f016:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800f018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	2b00      	cmp	r3, #0
 800f022:	d1dd      	bne.n	800efe0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800f024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f026:	891a      	ldrh	r2, [r3, #8]
 800f028:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f02a:	4413      	add	r3, r2
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f030:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800f032:	8a7a      	ldrh	r2, [r7, #18]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800f03a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d018      	beq.n	800f072 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800f040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f042:	2b00      	cmp	r3, #0
 800f044:	d106      	bne.n	800f054 <tcp_write+0x508>
 800f046:	4b2a      	ldr	r3, [pc, #168]	; (800f0f0 <tcp_write+0x5a4>)
 800f048:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800f04c:	492d      	ldr	r1, [pc, #180]	; (800f104 <tcp_write+0x5b8>)
 800f04e:	482a      	ldr	r0, [pc, #168]	; (800f0f8 <tcp_write+0x5ac>)
 800f050:	f004 fc1a 	bl	8013888 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800f054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fb f818 	bl	800a090 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800f060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f062:	891a      	ldrh	r2, [r3, #8]
 800f064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f066:	891b      	ldrh	r3, [r3, #8]
 800f068:	4413      	add	r3, r2
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f06e:	811a      	strh	r2, [r3, #8]
 800f070:	e037      	b.n	800f0e2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800f072:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f074:	2b00      	cmp	r3, #0
 800f076:	d034      	beq.n	800f0e2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800f078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d003      	beq.n	800f086 <tcp_write+0x53a>
 800f07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d106      	bne.n	800f094 <tcp_write+0x548>
 800f086:	4b1a      	ldr	r3, [pc, #104]	; (800f0f0 <tcp_write+0x5a4>)
 800f088:	f240 22e6 	movw	r2, #742	; 0x2e6
 800f08c:	491e      	ldr	r1, [pc, #120]	; (800f108 <tcp_write+0x5bc>)
 800f08e:	481a      	ldr	r0, [pc, #104]	; (800f0f8 <tcp_write+0x5ac>)
 800f090:	f004 fbfa 	bl	8013888 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	62bb      	str	r3, [r7, #40]	; 0x28
 800f09a:	e009      	b.n	800f0b0 <tcp_write+0x564>
      p->tot_len += extendlen;
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	891a      	ldrh	r2, [r3, #8]
 800f0a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0a2:	4413      	add	r3, r2
 800f0a4:	b29a      	uxth	r2, r3
 800f0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800f0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1f1      	bne.n	800f09c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800f0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ba:	891a      	ldrh	r2, [r3, #8]
 800f0bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0be:	4413      	add	r3, r2
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	895a      	ldrh	r2, [r3, #10]
 800f0ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0cc:	4413      	add	r3, r2
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800f0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d6:	891a      	ldrh	r2, [r3, #8]
 800f0d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0da:	4413      	add	r3, r2
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0e0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800f0e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d111      	bne.n	800f10c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0ec:	66da      	str	r2, [r3, #108]	; 0x6c
 800f0ee:	e010      	b.n	800f112 <tcp_write+0x5c6>
 800f0f0:	08016564 	.word	0x08016564
 800f0f4:	08016804 	.word	0x08016804
 800f0f8:	080165b8 	.word	0x080165b8
 800f0fc:	08016844 	.word	0x08016844
 800f100:	08016854 	.word	0x08016854
 800f104:	08016868 	.word	0x08016868
 800f108:	080168a0 	.word	0x080168a0
  } else {
    last_unsent->next = queue;
 800f10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f10e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f110:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f116:	88fb      	ldrh	r3, [r7, #6]
 800f118:	441a      	add	r2, r3
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f124:	88fb      	ldrh	r3, [r7, #6]
 800f126:	1ad3      	subs	r3, r2, r3
 800f128:	b29a      	uxth	r2, r3
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f136:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00e      	beq.n	800f162 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10a      	bne.n	800f162 <tcp_write+0x616>
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f150:	2b00      	cmp	r3, #0
 800f152:	d106      	bne.n	800f162 <tcp_write+0x616>
 800f154:	4b2c      	ldr	r3, [pc, #176]	; (800f208 <tcp_write+0x6bc>)
 800f156:	f240 3212 	movw	r2, #786	; 0x312
 800f15a:	492c      	ldr	r1, [pc, #176]	; (800f20c <tcp_write+0x6c0>)
 800f15c:	482c      	ldr	r0, [pc, #176]	; (800f210 <tcp_write+0x6c4>)
 800f15e:	f004 fb93 	bl	8013888 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800f162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f164:	2b00      	cmp	r3, #0
 800f166:	d016      	beq.n	800f196 <tcp_write+0x64a>
 800f168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d012      	beq.n	800f196 <tcp_write+0x64a>
 800f170:	797b      	ldrb	r3, [r7, #5]
 800f172:	f003 0302 	and.w	r3, r3, #2
 800f176:	2b00      	cmp	r3, #0
 800f178:	d10d      	bne.n	800f196 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	899b      	ldrh	r3, [r3, #12]
 800f180:	b29c      	uxth	r4, r3
 800f182:	2008      	movs	r0, #8
 800f184:	f7f9 fc0e 	bl	80089a4 <lwip_htons>
 800f188:	4603      	mov	r3, r0
 800f18a:	461a      	mov	r2, r3
 800f18c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	4322      	orrs	r2, r4
 800f192:	b292      	uxth	r2, r2
 800f194:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	e031      	b.n	800f1fe <tcp_write+0x6b2>
          goto memerr;
 800f19a:	bf00      	nop
 800f19c:	e006      	b.n	800f1ac <tcp_write+0x660>
            goto memerr;
 800f19e:	bf00      	nop
 800f1a0:	e004      	b.n	800f1ac <tcp_write+0x660>
        goto memerr;
 800f1a2:	bf00      	nop
 800f1a4:	e002      	b.n	800f1ac <tcp_write+0x660>
        goto memerr;
 800f1a6:	bf00      	nop
 800f1a8:	e000      	b.n	800f1ac <tcp_write+0x660>
      goto memerr;
 800f1aa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	8b5b      	ldrh	r3, [r3, #26]
 800f1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800f1ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800f1c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f1c2:	f7fa fea3 	bl	8009f0c <pbuf_free>
  }
  if (queue != NULL) {
 800f1c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <tcp_write+0x686>
    tcp_segs_free(queue);
 800f1cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f1ce:	f7fc fb57 	bl	800b880 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00e      	beq.n	800f1fa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d10a      	bne.n	800f1fa <tcp_write+0x6ae>
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d106      	bne.n	800f1fa <tcp_write+0x6ae>
 800f1ec:	4b06      	ldr	r3, [pc, #24]	; (800f208 <tcp_write+0x6bc>)
 800f1ee:	f240 3227 	movw	r2, #807	; 0x327
 800f1f2:	4906      	ldr	r1, [pc, #24]	; (800f20c <tcp_write+0x6c0>)
 800f1f4:	4806      	ldr	r0, [pc, #24]	; (800f210 <tcp_write+0x6c4>)
 800f1f6:	f004 fb47 	bl	8013888 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800f1fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	375c      	adds	r7, #92	; 0x5c
 800f202:	46bd      	mov	sp, r7
 800f204:	bd90      	pop	{r4, r7, pc}
 800f206:	bf00      	nop
 800f208:	08016564 	.word	0x08016564
 800f20c:	080168d8 	.word	0x080168d8
 800f210:	080165b8 	.word	0x080165b8

0800f214 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f214:	b590      	push	{r4, r7, lr}
 800f216:	b08b      	sub	sp, #44	; 0x2c
 800f218:	af02      	add	r7, sp, #8
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	460b      	mov	r3, r1
 800f21e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f220:	2300      	movs	r3, #0
 800f222:	61fb      	str	r3, [r7, #28]
 800f224:	2300      	movs	r3, #0
 800f226:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f228:	2300      	movs	r3, #0
 800f22a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d106      	bne.n	800f240 <tcp_split_unsent_seg+0x2c>
 800f232:	4b95      	ldr	r3, [pc, #596]	; (800f488 <tcp_split_unsent_seg+0x274>)
 800f234:	f240 324b 	movw	r2, #843	; 0x34b
 800f238:	4994      	ldr	r1, [pc, #592]	; (800f48c <tcp_split_unsent_seg+0x278>)
 800f23a:	4895      	ldr	r0, [pc, #596]	; (800f490 <tcp_split_unsent_seg+0x27c>)
 800f23c:	f004 fb24 	bl	8013888 <iprintf>

  useg = pcb->unsent;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f244:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d102      	bne.n	800f252 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f24c:	f04f 33ff 	mov.w	r3, #4294967295
 800f250:	e116      	b.n	800f480 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f252:	887b      	ldrh	r3, [r7, #2]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d109      	bne.n	800f26c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f258:	4b8b      	ldr	r3, [pc, #556]	; (800f488 <tcp_split_unsent_seg+0x274>)
 800f25a:	f240 3253 	movw	r2, #851	; 0x353
 800f25e:	498d      	ldr	r1, [pc, #564]	; (800f494 <tcp_split_unsent_seg+0x280>)
 800f260:	488b      	ldr	r0, [pc, #556]	; (800f490 <tcp_split_unsent_seg+0x27c>)
 800f262:	f004 fb11 	bl	8013888 <iprintf>
    return ERR_VAL;
 800f266:	f06f 0305 	mvn.w	r3, #5
 800f26a:	e109      	b.n	800f480 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	891b      	ldrh	r3, [r3, #8]
 800f270:	887a      	ldrh	r2, [r7, #2]
 800f272:	429a      	cmp	r2, r3
 800f274:	d301      	bcc.n	800f27a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f276:	2300      	movs	r3, #0
 800f278:	e102      	b.n	800f480 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f27e:	887a      	ldrh	r2, [r7, #2]
 800f280:	429a      	cmp	r2, r3
 800f282:	d906      	bls.n	800f292 <tcp_split_unsent_seg+0x7e>
 800f284:	4b80      	ldr	r3, [pc, #512]	; (800f488 <tcp_split_unsent_seg+0x274>)
 800f286:	f240 325b 	movw	r2, #859	; 0x35b
 800f28a:	4983      	ldr	r1, [pc, #524]	; (800f498 <tcp_split_unsent_seg+0x284>)
 800f28c:	4880      	ldr	r0, [pc, #512]	; (800f490 <tcp_split_unsent_seg+0x27c>)
 800f28e:	f004 fafb 	bl	8013888 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	891b      	ldrh	r3, [r3, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d106      	bne.n	800f2a8 <tcp_split_unsent_seg+0x94>
 800f29a:	4b7b      	ldr	r3, [pc, #492]	; (800f488 <tcp_split_unsent_seg+0x274>)
 800f29c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f2a0:	497e      	ldr	r1, [pc, #504]	; (800f49c <tcp_split_unsent_seg+0x288>)
 800f2a2:	487b      	ldr	r0, [pc, #492]	; (800f490 <tcp_split_unsent_seg+0x27c>)
 800f2a4:	f004 faf0 	bl	8013888 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	7a9b      	ldrb	r3, [r3, #10]
 800f2ac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f2ae:	7bfb      	ldrb	r3, [r7, #15]
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	b2db      	uxtb	r3, r3
 800f2b4:	f003 0304 	and.w	r3, r3, #4
 800f2b8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	891a      	ldrh	r2, [r3, #8]
 800f2be:	887b      	ldrh	r3, [r7, #2]
 800f2c0:	1ad3      	subs	r3, r2, r3
 800f2c2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f2c4:	7bbb      	ldrb	r3, [r7, #14]
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	89bb      	ldrh	r3, [r7, #12]
 800f2ca:	4413      	add	r3, r2
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f2d2:	4619      	mov	r1, r3
 800f2d4:	2036      	movs	r0, #54	; 0x36
 800f2d6:	f7fa fb35 	bl	8009944 <pbuf_alloc>
 800f2da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	f000 80b7 	beq.w	800f452 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	891a      	ldrh	r2, [r3, #8]
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	891b      	ldrh	r3, [r3, #8]
 800f2ee:	1ad3      	subs	r3, r2, r3
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	887b      	ldrh	r3, [r7, #2]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	6858      	ldr	r0, [r3, #4]
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	685a      	ldr	r2, [r3, #4]
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	18d1      	adds	r1, r2, r3
 800f304:	897b      	ldrh	r3, [r7, #10]
 800f306:	89ba      	ldrh	r2, [r7, #12]
 800f308:	f7fa fffa 	bl	800a300 <pbuf_copy_partial>
 800f30c:	4603      	mov	r3, r0
 800f30e:	461a      	mov	r2, r3
 800f310:	89bb      	ldrh	r3, [r7, #12]
 800f312:	4293      	cmp	r3, r2
 800f314:	f040 809f 	bne.w	800f456 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	899b      	ldrh	r3, [r3, #12]
 800f31e:	b29b      	uxth	r3, r3
 800f320:	4618      	mov	r0, r3
 800f322:	f7f9 fb3f 	bl	80089a4 <lwip_htons>
 800f326:	4603      	mov	r3, r0
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f32e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f330:	2300      	movs	r3, #0
 800f332:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f334:	7efb      	ldrb	r3, [r7, #27]
 800f336:	f003 0308 	and.w	r3, r3, #8
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d007      	beq.n	800f34e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f33e:	7efb      	ldrb	r3, [r7, #27]
 800f340:	f023 0308 	bic.w	r3, r3, #8
 800f344:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f346:	7ebb      	ldrb	r3, [r7, #26]
 800f348:	f043 0308 	orr.w	r3, r3, #8
 800f34c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f34e:	7efb      	ldrb	r3, [r7, #27]
 800f350:	f003 0301 	and.w	r3, r3, #1
 800f354:	2b00      	cmp	r3, #0
 800f356:	d007      	beq.n	800f368 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f358:	7efb      	ldrb	r3, [r7, #27]
 800f35a:	f023 0301 	bic.w	r3, r3, #1
 800f35e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f360:	7ebb      	ldrb	r3, [r7, #26]
 800f362:	f043 0301 	orr.w	r3, r3, #1
 800f366:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	4618      	mov	r0, r3
 800f370:	f7f9 fb2d 	bl	80089ce <lwip_htonl>
 800f374:	4602      	mov	r2, r0
 800f376:	887b      	ldrh	r3, [r7, #2]
 800f378:	18d1      	adds	r1, r2, r3
 800f37a:	7eba      	ldrb	r2, [r7, #26]
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	460b      	mov	r3, r1
 800f382:	6939      	ldr	r1, [r7, #16]
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7ff fa4f 	bl	800e828 <tcp_create_segment>
 800f38a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d063      	beq.n	800f45a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	4618      	mov	r0, r3
 800f398:	f7fa fe40 	bl	800a01c <pbuf_clen>
 800f39c:	4603      	mov	r3, r0
 800f39e:	461a      	mov	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f3a6:	1a9b      	subs	r3, r3, r2
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	6858      	ldr	r0, [r3, #4]
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	891a      	ldrh	r2, [r3, #8]
 800f3ba:	89bb      	ldrh	r3, [r7, #12]
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	f7fa fc1d 	bl	8009c00 <pbuf_realloc>
  useg->len -= remainder;
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	891a      	ldrh	r2, [r3, #8]
 800f3ca:	89bb      	ldrh	r3, [r7, #12]
 800f3cc:	1ad3      	subs	r3, r2, r3
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	899b      	ldrh	r3, [r3, #12]
 800f3da:	b29c      	uxth	r4, r3
 800f3dc:	7efb      	ldrb	r3, [r7, #27]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7f9 fadf 	bl	80089a4 <lwip_htons>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	4322      	orrs	r2, r4
 800f3f0:	b292      	uxth	r2, r2
 800f3f2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fa fe0f 	bl	800a01c <pbuf_clen>
 800f3fe:	4603      	mov	r3, r0
 800f400:	461a      	mov	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f408:	4413      	add	r3, r2
 800f40a:	b29a      	uxth	r2, r3
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	4618      	mov	r0, r3
 800f418:	f7fa fe00 	bl	800a01c <pbuf_clen>
 800f41c:	4603      	mov	r3, r0
 800f41e:	461a      	mov	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f426:	4413      	add	r3, r2
 800f428:	b29a      	uxth	r2, r3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	69fa      	ldr	r2, [r7, #28]
 800f43c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d103      	bne.n	800f44e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f44e:	2300      	movs	r3, #0
 800f450:	e016      	b.n	800f480 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f452:	bf00      	nop
 800f454:	e002      	b.n	800f45c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f456:	bf00      	nop
 800f458:	e000      	b.n	800f45c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f45a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d006      	beq.n	800f470 <tcp_split_unsent_seg+0x25c>
 800f462:	4b09      	ldr	r3, [pc, #36]	; (800f488 <tcp_split_unsent_seg+0x274>)
 800f464:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f468:	490d      	ldr	r1, [pc, #52]	; (800f4a0 <tcp_split_unsent_seg+0x28c>)
 800f46a:	4809      	ldr	r0, [pc, #36]	; (800f490 <tcp_split_unsent_seg+0x27c>)
 800f46c:	f004 fa0c 	bl	8013888 <iprintf>
  if (p != NULL) {
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d002      	beq.n	800f47c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f476:	6938      	ldr	r0, [r7, #16]
 800f478:	f7fa fd48 	bl	8009f0c <pbuf_free>
  }

  return ERR_MEM;
 800f47c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f480:	4618      	mov	r0, r3
 800f482:	3724      	adds	r7, #36	; 0x24
 800f484:	46bd      	mov	sp, r7
 800f486:	bd90      	pop	{r4, r7, pc}
 800f488:	08016564 	.word	0x08016564
 800f48c:	080168f8 	.word	0x080168f8
 800f490:	080165b8 	.word	0x080165b8
 800f494:	0801691c 	.word	0x0801691c
 800f498:	08016940 	.word	0x08016940
 800f49c:	08016950 	.word	0x08016950
 800f4a0:	08016960 	.word	0x08016960

0800f4a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f4a4:	b590      	push	{r4, r7, lr}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d106      	bne.n	800f4c0 <tcp_send_fin+0x1c>
 800f4b2:	4b21      	ldr	r3, [pc, #132]	; (800f538 <tcp_send_fin+0x94>)
 800f4b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f4b8:	4920      	ldr	r1, [pc, #128]	; (800f53c <tcp_send_fin+0x98>)
 800f4ba:	4821      	ldr	r0, [pc, #132]	; (800f540 <tcp_send_fin+0x9c>)
 800f4bc:	f004 f9e4 	bl	8013888 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d02e      	beq.n	800f526 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4cc:	60fb      	str	r3, [r7, #12]
 800f4ce:	e002      	b.n	800f4d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1f8      	bne.n	800f4d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	899b      	ldrh	r3, [r3, #12]
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7f9 fa5c 	bl	80089a4 <lwip_htons>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	f003 0307 	and.w	r3, r3, #7
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d116      	bne.n	800f526 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	899b      	ldrh	r3, [r3, #12]
 800f4fe:	b29c      	uxth	r4, r3
 800f500:	2001      	movs	r0, #1
 800f502:	f7f9 fa4f 	bl	80089a4 <lwip_htons>
 800f506:	4603      	mov	r3, r0
 800f508:	461a      	mov	r2, r3
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	4322      	orrs	r2, r4
 800f510:	b292      	uxth	r2, r2
 800f512:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	8b5b      	ldrh	r3, [r3, #26]
 800f518:	f043 0320 	orr.w	r3, r3, #32
 800f51c:	b29a      	uxth	r2, r3
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f522:	2300      	movs	r3, #0
 800f524:	e004      	b.n	800f530 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f526:	2101      	movs	r1, #1
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 f80b 	bl	800f544 <tcp_enqueue_flags>
 800f52e:	4603      	mov	r3, r0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3714      	adds	r7, #20
 800f534:	46bd      	mov	sp, r7
 800f536:	bd90      	pop	{r4, r7, pc}
 800f538:	08016564 	.word	0x08016564
 800f53c:	0801696c 	.word	0x0801696c
 800f540:	080165b8 	.word	0x080165b8

0800f544 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08a      	sub	sp, #40	; 0x28
 800f548:	af02      	add	r7, sp, #8
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	460b      	mov	r3, r1
 800f54e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f550:	2300      	movs	r3, #0
 800f552:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f554:	2300      	movs	r3, #0
 800f556:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f558:	78fb      	ldrb	r3, [r7, #3]
 800f55a:	f003 0303 	and.w	r3, r3, #3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d106      	bne.n	800f570 <tcp_enqueue_flags+0x2c>
 800f562:	4b67      	ldr	r3, [pc, #412]	; (800f700 <tcp_enqueue_flags+0x1bc>)
 800f564:	f240 4211 	movw	r2, #1041	; 0x411
 800f568:	4966      	ldr	r1, [pc, #408]	; (800f704 <tcp_enqueue_flags+0x1c0>)
 800f56a:	4867      	ldr	r0, [pc, #412]	; (800f708 <tcp_enqueue_flags+0x1c4>)
 800f56c:	f004 f98c 	bl	8013888 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d106      	bne.n	800f584 <tcp_enqueue_flags+0x40>
 800f576:	4b62      	ldr	r3, [pc, #392]	; (800f700 <tcp_enqueue_flags+0x1bc>)
 800f578:	f240 4213 	movw	r2, #1043	; 0x413
 800f57c:	4963      	ldr	r1, [pc, #396]	; (800f70c <tcp_enqueue_flags+0x1c8>)
 800f57e:	4862      	ldr	r0, [pc, #392]	; (800f708 <tcp_enqueue_flags+0x1c4>)
 800f580:	f004 f982 	bl	8013888 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f584:	78fb      	ldrb	r3, [r7, #3]
 800f586:	f003 0302 	and.w	r3, r3, #2
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f58e:	2301      	movs	r3, #1
 800f590:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f592:	7ffb      	ldrb	r3, [r7, #31]
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	b2db      	uxtb	r3, r3
 800f598:	f003 0304 	and.w	r3, r3, #4
 800f59c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f59e:	7dfb      	ldrb	r3, [r7, #23]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	2036      	movs	r0, #54	; 0x36
 800f5aa:	f7fa f9cb 	bl	8009944 <pbuf_alloc>
 800f5ae:	6138      	str	r0, [r7, #16]
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d109      	bne.n	800f5ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	8b5b      	ldrh	r3, [r3, #26]
 800f5ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5c8:	e095      	b.n	800f6f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	895a      	ldrh	r2, [r3, #10]
 800f5ce:	7dfb      	ldrb	r3, [r7, #23]
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d206      	bcs.n	800f5e4 <tcp_enqueue_flags+0xa0>
 800f5d6:	4b4a      	ldr	r3, [pc, #296]	; (800f700 <tcp_enqueue_flags+0x1bc>)
 800f5d8:	f240 4239 	movw	r2, #1081	; 0x439
 800f5dc:	494c      	ldr	r1, [pc, #304]	; (800f710 <tcp_enqueue_flags+0x1cc>)
 800f5de:	484a      	ldr	r0, [pc, #296]	; (800f708 <tcp_enqueue_flags+0x1c4>)
 800f5e0:	f004 f952 	bl	8013888 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f5e8:	78fa      	ldrb	r2, [r7, #3]
 800f5ea:	7ffb      	ldrb	r3, [r7, #31]
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	6939      	ldr	r1, [r7, #16]
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f7ff f918 	bl	800e828 <tcp_create_segment>
 800f5f8:	60f8      	str	r0, [r7, #12]
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d109      	bne.n	800f614 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	8b5b      	ldrh	r3, [r3, #26]
 800f604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f608:	b29a      	uxth	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f60e:	f04f 33ff 	mov.w	r3, #4294967295
 800f612:	e070      	b.n	800f6f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	f003 0303 	and.w	r3, r3, #3
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d006      	beq.n	800f62e <tcp_enqueue_flags+0xea>
 800f620:	4b37      	ldr	r3, [pc, #220]	; (800f700 <tcp_enqueue_flags+0x1bc>)
 800f622:	f240 4242 	movw	r2, #1090	; 0x442
 800f626:	493b      	ldr	r1, [pc, #236]	; (800f714 <tcp_enqueue_flags+0x1d0>)
 800f628:	4837      	ldr	r0, [pc, #220]	; (800f708 <tcp_enqueue_flags+0x1c4>)
 800f62a:	f004 f92d 	bl	8013888 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	891b      	ldrh	r3, [r3, #8]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d006      	beq.n	800f644 <tcp_enqueue_flags+0x100>
 800f636:	4b32      	ldr	r3, [pc, #200]	; (800f700 <tcp_enqueue_flags+0x1bc>)
 800f638:	f240 4243 	movw	r2, #1091	; 0x443
 800f63c:	4936      	ldr	r1, [pc, #216]	; (800f718 <tcp_enqueue_flags+0x1d4>)
 800f63e:	4832      	ldr	r0, [pc, #200]	; (800f708 <tcp_enqueue_flags+0x1c4>)
 800f640:	f004 f922 	bl	8013888 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d103      	bne.n	800f654 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	66da      	str	r2, [r3, #108]	; 0x6c
 800f652:	e00d      	b.n	800f670 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f658:	61bb      	str	r3, [r7, #24]
 800f65a:	e002      	b.n	800f662 <tcp_enqueue_flags+0x11e>
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	61bb      	str	r3, [r7, #24]
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d1f8      	bne.n	800f65c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f678:	78fb      	ldrb	r3, [r7, #3]
 800f67a:	f003 0302 	and.w	r3, r3, #2
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d104      	bne.n	800f68c <tcp_enqueue_flags+0x148>
 800f682:	78fb      	ldrb	r3, [r7, #3]
 800f684:	f003 0301 	and.w	r3, r3, #1
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d004      	beq.n	800f696 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f690:	1c5a      	adds	r2, r3, #1
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f696:	78fb      	ldrb	r3, [r7, #3]
 800f698:	f003 0301 	and.w	r3, r3, #1
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d006      	beq.n	800f6ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	8b5b      	ldrh	r3, [r3, #26]
 800f6a4:	f043 0320 	orr.w	r3, r3, #32
 800f6a8:	b29a      	uxth	r2, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fa fcb2 	bl	800a01c <pbuf_clen>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f6c2:	4413      	add	r3, r2
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00e      	beq.n	800f6f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d10a      	bne.n	800f6f4 <tcp_enqueue_flags+0x1b0>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d106      	bne.n	800f6f4 <tcp_enqueue_flags+0x1b0>
 800f6e6:	4b06      	ldr	r3, [pc, #24]	; (800f700 <tcp_enqueue_flags+0x1bc>)
 800f6e8:	f240 4265 	movw	r2, #1125	; 0x465
 800f6ec:	490b      	ldr	r1, [pc, #44]	; (800f71c <tcp_enqueue_flags+0x1d8>)
 800f6ee:	4806      	ldr	r0, [pc, #24]	; (800f708 <tcp_enqueue_flags+0x1c4>)
 800f6f0:	f004 f8ca 	bl	8013888 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f6f4:	2300      	movs	r3, #0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3720      	adds	r7, #32
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	08016564 	.word	0x08016564
 800f704:	08016988 	.word	0x08016988
 800f708:	080165b8 	.word	0x080165b8
 800f70c:	080169e0 	.word	0x080169e0
 800f710:	08016a00 	.word	0x08016a00
 800f714:	08016a3c 	.word	0x08016a3c
 800f718:	08016a54 	.word	0x08016a54
 800f71c:	08016a80 	.word	0x08016a80

0800f720 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f720:	b5b0      	push	{r4, r5, r7, lr}
 800f722:	b08a      	sub	sp, #40	; 0x28
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d106      	bne.n	800f73c <tcp_output+0x1c>
 800f72e:	4b9e      	ldr	r3, [pc, #632]	; (800f9a8 <tcp_output+0x288>)
 800f730:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f734:	499d      	ldr	r1, [pc, #628]	; (800f9ac <tcp_output+0x28c>)
 800f736:	489e      	ldr	r0, [pc, #632]	; (800f9b0 <tcp_output+0x290>)
 800f738:	f004 f8a6 	bl	8013888 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	7d1b      	ldrb	r3, [r3, #20]
 800f740:	2b01      	cmp	r3, #1
 800f742:	d106      	bne.n	800f752 <tcp_output+0x32>
 800f744:	4b98      	ldr	r3, [pc, #608]	; (800f9a8 <tcp_output+0x288>)
 800f746:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f74a:	499a      	ldr	r1, [pc, #616]	; (800f9b4 <tcp_output+0x294>)
 800f74c:	4898      	ldr	r0, [pc, #608]	; (800f9b0 <tcp_output+0x290>)
 800f74e:	f004 f89b 	bl	8013888 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f752:	4b99      	ldr	r3, [pc, #612]	; (800f9b8 <tcp_output+0x298>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	429a      	cmp	r2, r3
 800f75a:	d101      	bne.n	800f760 <tcp_output+0x40>
    return ERR_OK;
 800f75c:	2300      	movs	r3, #0
 800f75e:	e1ce      	b.n	800fafe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f76c:	4293      	cmp	r3, r2
 800f76e:	bf28      	it	cs
 800f770:	4613      	movcs	r3, r2
 800f772:	b29b      	uxth	r3, r3
 800f774:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f77a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d10b      	bne.n	800f79a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	8b5b      	ldrh	r3, [r3, #26]
 800f786:	f003 0302 	and.w	r3, r3, #2
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 81aa 	beq.w	800fae4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 fdcb 	bl	801032c <tcp_send_empty_ack>
 800f796:	4603      	mov	r3, r0
 800f798:	e1b1      	b.n	800fafe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3304      	adds	r3, #4
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f7ff f824 	bl	800e7f0 <tcp_route>
 800f7a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d102      	bne.n	800f7b6 <tcp_output+0x96>
    return ERR_RTE;
 800f7b0:	f06f 0303 	mvn.w	r3, #3
 800f7b4:	e1a3      	b.n	800fafe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d003      	beq.n	800f7c4 <tcp_output+0xa4>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d111      	bne.n	800f7e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d002      	beq.n	800f7d0 <tcp_output+0xb0>
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	3304      	adds	r3, #4
 800f7ce:	e000      	b.n	800f7d2 <tcp_output+0xb2>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d102      	bne.n	800f7e0 <tcp_output+0xc0>
      return ERR_RTE;
 800f7da:	f06f 0303 	mvn.w	r3, #3
 800f7de:	e18e      	b.n	800fafe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ea:	68db      	ldr	r3, [r3, #12]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7f9 f8ed 	bl	80089ce <lwip_htonl>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7fe:	8912      	ldrh	r2, [r2, #8]
 800f800:	4413      	add	r3, r2
 800f802:	69ba      	ldr	r2, [r7, #24]
 800f804:	429a      	cmp	r2, r3
 800f806:	d227      	bcs.n	800f858 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f80e:	461a      	mov	r2, r3
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	4293      	cmp	r3, r2
 800f814:	d114      	bne.n	800f840 <tcp_output+0x120>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d110      	bne.n	800f840 <tcp_output+0x120>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f824:	2b00      	cmp	r3, #0
 800f826:	d10b      	bne.n	800f840 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2201      	movs	r2, #1
 800f834:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2200      	movs	r2, #0
 800f83c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	8b5b      	ldrh	r3, [r3, #26]
 800f844:	f003 0302 	and.w	r3, r3, #2
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f000 814d 	beq.w	800fae8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 fd6c 	bl	801032c <tcp_send_empty_ack>
 800f854:	4603      	mov	r3, r0
 800f856:	e152      	b.n	800fafe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f864:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	f000 811c 	beq.w	800faa6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f86e:	e002      	b.n	800f876 <tcp_output+0x156>
 800f870:	6a3b      	ldr	r3, [r7, #32]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	623b      	str	r3, [r7, #32]
 800f876:	6a3b      	ldr	r3, [r7, #32]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1f8      	bne.n	800f870 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f87e:	e112      	b.n	800faa6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	899b      	ldrh	r3, [r3, #12]
 800f886:	b29b      	uxth	r3, r3
 800f888:	4618      	mov	r0, r3
 800f88a:	f7f9 f88b 	bl	80089a4 <lwip_htons>
 800f88e:	4603      	mov	r3, r0
 800f890:	b2db      	uxtb	r3, r3
 800f892:	f003 0304 	and.w	r3, r3, #4
 800f896:	2b00      	cmp	r3, #0
 800f898:	d006      	beq.n	800f8a8 <tcp_output+0x188>
 800f89a:	4b43      	ldr	r3, [pc, #268]	; (800f9a8 <tcp_output+0x288>)
 800f89c:	f240 5236 	movw	r2, #1334	; 0x536
 800f8a0:	4946      	ldr	r1, [pc, #280]	; (800f9bc <tcp_output+0x29c>)
 800f8a2:	4843      	ldr	r0, [pc, #268]	; (800f9b0 <tcp_output+0x290>)
 800f8a4:	f003 fff0 	bl	8013888 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d01f      	beq.n	800f8f0 <tcp_output+0x1d0>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	8b5b      	ldrh	r3, [r3, #26]
 800f8b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d119      	bne.n	800f8f0 <tcp_output+0x1d0>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00b      	beq.n	800f8dc <tcp_output+0x1bc>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d110      	bne.n	800f8f0 <tcp_output+0x1d0>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8d2:	891a      	ldrh	r2, [r3, #8]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d209      	bcs.n	800f8f0 <tcp_output+0x1d0>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d004      	beq.n	800f8f0 <tcp_output+0x1d0>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8ec:	2b08      	cmp	r3, #8
 800f8ee:	d901      	bls.n	800f8f4 <tcp_output+0x1d4>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	e000      	b.n	800f8f6 <tcp_output+0x1d6>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d106      	bne.n	800f908 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	8b5b      	ldrh	r3, [r3, #26]
 800f8fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f902:	2b00      	cmp	r3, #0
 800f904:	f000 80e4 	beq.w	800fad0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	7d1b      	ldrb	r3, [r3, #20]
 800f90c:	2b02      	cmp	r3, #2
 800f90e:	d00d      	beq.n	800f92c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	899b      	ldrh	r3, [r3, #12]
 800f916:	b29c      	uxth	r4, r3
 800f918:	2010      	movs	r0, #16
 800f91a:	f7f9 f843 	bl	80089a4 <lwip_htons>
 800f91e:	4603      	mov	r3, r0
 800f920:	461a      	mov	r2, r3
 800f922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	4322      	orrs	r2, r4
 800f928:	b292      	uxth	r2, r2
 800f92a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f92c:	697a      	ldr	r2, [r7, #20]
 800f92e:	6879      	ldr	r1, [r7, #4]
 800f930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f932:	f000 f909 	bl	800fb48 <tcp_output_segment>
 800f936:	4603      	mov	r3, r0
 800f938:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d009      	beq.n	800f956 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8b5b      	ldrh	r3, [r3, #26]
 800f946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	835a      	strh	r2, [r3, #26]
      return err;
 800f950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f954:	e0d3      	b.n	800fafe <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	7d1b      	ldrb	r3, [r3, #20]
 800f962:	2b02      	cmp	r3, #2
 800f964:	d006      	beq.n	800f974 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	8b5b      	ldrh	r3, [r3, #26]
 800f96a:	f023 0303 	bic.w	r3, r3, #3
 800f96e:	b29a      	uxth	r2, r3
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7f9 f827 	bl	80089ce <lwip_htonl>
 800f980:	4604      	mov	r4, r0
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	891b      	ldrh	r3, [r3, #8]
 800f986:	461d      	mov	r5, r3
 800f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	899b      	ldrh	r3, [r3, #12]
 800f98e:	b29b      	uxth	r3, r3
 800f990:	4618      	mov	r0, r3
 800f992:	f7f9 f807 	bl	80089a4 <lwip_htons>
 800f996:	4603      	mov	r3, r0
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	f003 0303 	and.w	r3, r3, #3
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d00e      	beq.n	800f9c0 <tcp_output+0x2a0>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	e00d      	b.n	800f9c2 <tcp_output+0x2a2>
 800f9a6:	bf00      	nop
 800f9a8:	08016564 	.word	0x08016564
 800f9ac:	08016aa8 	.word	0x08016aa8
 800f9b0:	080165b8 	.word	0x080165b8
 800f9b4:	08016ac0 	.word	0x08016ac0
 800f9b8:	20009f5c 	.word	0x20009f5c
 800f9bc:	08016ae8 	.word	0x08016ae8
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	442b      	add	r3, r5
 800f9c4:	4423      	add	r3, r4
 800f9c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	1ad3      	subs	r3, r2, r3
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	da02      	bge.n	800f9da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9dc:	891b      	ldrh	r3, [r3, #8]
 800f9de:	461c      	mov	r4, r3
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	899b      	ldrh	r3, [r3, #12]
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7f8 ffdb 	bl	80089a4 <lwip_htons>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	f003 0303 	and.w	r3, r3, #3
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d001      	beq.n	800f9fe <tcp_output+0x2de>
 800f9fa:	2301      	movs	r3, #1
 800f9fc:	e000      	b.n	800fa00 <tcp_output+0x2e0>
 800f9fe:	2300      	movs	r3, #0
 800fa00:	4423      	add	r3, r4
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d049      	beq.n	800fa9a <tcp_output+0x37a>
      seg->next = NULL;
 800fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa08:	2200      	movs	r2, #0
 800fa0a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d105      	bne.n	800fa20 <tcp_output+0x300>
        pcb->unacked = seg;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa18:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1c:	623b      	str	r3, [r7, #32]
 800fa1e:	e03f      	b.n	800faa0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7f8 ffd1 	bl	80089ce <lwip_htonl>
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	6a3b      	ldr	r3, [r7, #32]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7f8 ffca 	bl	80089ce <lwip_htonl>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	1ae3      	subs	r3, r4, r3
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	da24      	bge.n	800fa8c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3370      	adds	r3, #112	; 0x70
 800fa46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fa48:	e002      	b.n	800fa50 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d011      	beq.n	800fa7c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7f8 ffb4 	bl	80089ce <lwip_htonl>
 800fa66:	4604      	mov	r4, r0
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7f8 ffad 	bl	80089ce <lwip_htonl>
 800fa74:	4603      	mov	r3, r0
 800fa76:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	dbe6      	blt.n	800fa4a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fa84:	69fb      	ldr	r3, [r7, #28]
 800fa86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa88:	601a      	str	r2, [r3, #0]
 800fa8a:	e009      	b.n	800faa0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fa8c:	6a3b      	ldr	r3, [r7, #32]
 800fa8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa90:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fa92:	6a3b      	ldr	r3, [r7, #32]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	623b      	str	r3, [r7, #32]
 800fa98:	e002      	b.n	800faa0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fa9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa9c:	f7fb ff05 	bl	800b8aa <tcp_seg_free>
    }
    seg = pcb->unsent;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faa4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d012      	beq.n	800fad2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800faac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faae:	68db      	ldr	r3, [r3, #12]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7f8 ff8b 	bl	80089ce <lwip_htonl>
 800fab8:	4602      	mov	r2, r0
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fabe:	1ad3      	subs	r3, r2, r3
 800fac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fac2:	8912      	ldrh	r2, [r2, #8]
 800fac4:	4413      	add	r3, r2
  while (seg != NULL &&
 800fac6:	69ba      	ldr	r2, [r7, #24]
 800fac8:	429a      	cmp	r2, r3
 800faca:	f4bf aed9 	bcs.w	800f880 <tcp_output+0x160>
 800face:	e000      	b.n	800fad2 <tcp_output+0x3b2>
      break;
 800fad0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d108      	bne.n	800faec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800fae2:	e004      	b.n	800faee <tcp_output+0x3ce>
    goto output_done;
 800fae4:	bf00      	nop
 800fae6:	e002      	b.n	800faee <tcp_output+0x3ce>
    goto output_done;
 800fae8:	bf00      	nop
 800faea:	e000      	b.n	800faee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800faec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	8b5b      	ldrh	r3, [r3, #26]
 800faf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faf6:	b29a      	uxth	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3728      	adds	r7, #40	; 0x28
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bdb0      	pop	{r4, r5, r7, pc}
 800fb06:	bf00      	nop

0800fb08 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d106      	bne.n	800fb24 <tcp_output_segment_busy+0x1c>
 800fb16:	4b09      	ldr	r3, [pc, #36]	; (800fb3c <tcp_output_segment_busy+0x34>)
 800fb18:	f240 529a 	movw	r2, #1434	; 0x59a
 800fb1c:	4908      	ldr	r1, [pc, #32]	; (800fb40 <tcp_output_segment_busy+0x38>)
 800fb1e:	4809      	ldr	r0, [pc, #36]	; (800fb44 <tcp_output_segment_busy+0x3c>)
 800fb20:	f003 feb2 	bl	8013888 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	7b9b      	ldrb	r3, [r3, #14]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d001      	beq.n	800fb32 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e000      	b.n	800fb34 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fb32:	2300      	movs	r3, #0
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	08016564 	.word	0x08016564
 800fb40:	08016b00 	.word	0x08016b00
 800fb44:	080165b8 	.word	0x080165b8

0800fb48 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fb48:	b5b0      	push	{r4, r5, r7, lr}
 800fb4a:	b08c      	sub	sp, #48	; 0x30
 800fb4c:	af04      	add	r7, sp, #16
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d106      	bne.n	800fb68 <tcp_output_segment+0x20>
 800fb5a:	4b63      	ldr	r3, [pc, #396]	; (800fce8 <tcp_output_segment+0x1a0>)
 800fb5c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800fb60:	4962      	ldr	r1, [pc, #392]	; (800fcec <tcp_output_segment+0x1a4>)
 800fb62:	4863      	ldr	r0, [pc, #396]	; (800fcf0 <tcp_output_segment+0x1a8>)
 800fb64:	f003 fe90 	bl	8013888 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d106      	bne.n	800fb7c <tcp_output_segment+0x34>
 800fb6e:	4b5e      	ldr	r3, [pc, #376]	; (800fce8 <tcp_output_segment+0x1a0>)
 800fb70:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800fb74:	495f      	ldr	r1, [pc, #380]	; (800fcf4 <tcp_output_segment+0x1ac>)
 800fb76:	485e      	ldr	r0, [pc, #376]	; (800fcf0 <tcp_output_segment+0x1a8>)
 800fb78:	f003 fe86 	bl	8013888 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d106      	bne.n	800fb90 <tcp_output_segment+0x48>
 800fb82:	4b59      	ldr	r3, [pc, #356]	; (800fce8 <tcp_output_segment+0x1a0>)
 800fb84:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800fb88:	495b      	ldr	r1, [pc, #364]	; (800fcf8 <tcp_output_segment+0x1b0>)
 800fb8a:	4859      	ldr	r0, [pc, #356]	; (800fcf0 <tcp_output_segment+0x1a8>)
 800fb8c:	f003 fe7c 	bl	8013888 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f7ff ffb9 	bl	800fb08 <tcp_output_segment_busy>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d001      	beq.n	800fba0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	e09f      	b.n	800fce0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	68dc      	ldr	r4, [r3, #12]
 800fba8:	4610      	mov	r0, r2
 800fbaa:	f7f8 ff10 	bl	80089ce <lwip_htonl>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	68dc      	ldr	r4, [r3, #12]
 800fbba:	4610      	mov	r0, r2
 800fbbc:	f7f8 fef2 	bl	80089a4 <lwip_htons>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc8:	68ba      	ldr	r2, [r7, #8]
 800fbca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fbcc:	441a      	add	r2, r3
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	3314      	adds	r3, #20
 800fbd8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	7a9b      	ldrb	r3, [r3, #10]
 800fbde:	f003 0301 	and.w	r3, r3, #1
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d015      	beq.n	800fc12 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	3304      	adds	r3, #4
 800fbea:	461a      	mov	r2, r3
 800fbec:	6879      	ldr	r1, [r7, #4]
 800fbee:	f44f 7006 	mov.w	r0, #536	; 0x218
 800fbf2:	f7fc fa37 	bl	800c064 <tcp_eff_send_mss_netif>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fbfa:	8b7b      	ldrh	r3, [r7, #26]
 800fbfc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7f8 fee4 	bl	80089ce <lwip_htonl>
 800fc06:	4602      	mov	r2, r0
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	3304      	adds	r3, #4
 800fc10:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	da02      	bge.n	800fc22 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d10c      	bne.n	800fc44 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fc2a:	4b34      	ldr	r3, [pc, #208]	; (800fcfc <tcp_output_segment+0x1b4>)
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	68db      	ldr	r3, [r3, #12]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7f8 fec8 	bl	80089ce <lwip_htonl>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	68da      	ldr	r2, [r3, #12]
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	1ad3      	subs	r3, r2, r3
 800fc50:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	8959      	ldrh	r1, [r3, #10]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	8b3a      	ldrh	r2, [r7, #24]
 800fc5e:	1a8a      	subs	r2, r1, r2
 800fc60:	b292      	uxth	r2, r2
 800fc62:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	8919      	ldrh	r1, [r3, #8]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	8b3a      	ldrh	r2, [r7, #24]
 800fc70:	1a8a      	subs	r2, r1, r2
 800fc72:	b292      	uxth	r2, r2
 800fc74:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	685b      	ldr	r3, [r3, #4]
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	68d2      	ldr	r2, [r2, #12]
 800fc7e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	2200      	movs	r2, #0
 800fc86:	741a      	strb	r2, [r3, #16]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	f103 0214 	add.w	r2, r3, #20
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	7a9b      	ldrb	r3, [r3, #10]
 800fc98:	009b      	lsls	r3, r3, #2
 800fc9a:	f003 0304 	and.w	r3, r3, #4
 800fc9e:	4413      	add	r3, r2
 800fca0:	69fa      	ldr	r2, [r7, #28]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d006      	beq.n	800fcb4 <tcp_output_segment+0x16c>
 800fca6:	4b10      	ldr	r3, [pc, #64]	; (800fce8 <tcp_output_segment+0x1a0>)
 800fca8:	f240 621c 	movw	r2, #1564	; 0x61c
 800fcac:	4914      	ldr	r1, [pc, #80]	; (800fd00 <tcp_output_segment+0x1b8>)
 800fcae:	4810      	ldr	r0, [pc, #64]	; (800fcf0 <tcp_output_segment+0x1a8>)
 800fcb0:	f003 fdea 	bl	8013888 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6858      	ldr	r0, [r3, #4]
 800fcb8:	68b9      	ldr	r1, [r7, #8]
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	1d1c      	adds	r4, r3, #4
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	7add      	ldrb	r5, [r3, #11]
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	7a9b      	ldrb	r3, [r3, #10]
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	9202      	str	r2, [sp, #8]
 800fcca:	2206      	movs	r2, #6
 800fccc:	9201      	str	r2, [sp, #4]
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	462b      	mov	r3, r5
 800fcd2:	4622      	mov	r2, r4
 800fcd4:	f002 fd4e 	bl	8012774 <ip4_output_if>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fcdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3720      	adds	r7, #32
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bdb0      	pop	{r4, r5, r7, pc}
 800fce8:	08016564 	.word	0x08016564
 800fcec:	08016b28 	.word	0x08016b28
 800fcf0:	080165b8 	.word	0x080165b8
 800fcf4:	08016b48 	.word	0x08016b48
 800fcf8:	08016b68 	.word	0x08016b68
 800fcfc:	20009f4c 	.word	0x20009f4c
 800fd00:	08016b8c 	.word	0x08016b8c

0800fd04 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fd04:	b5b0      	push	{r4, r5, r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d106      	bne.n	800fd20 <tcp_rexmit_rto_prepare+0x1c>
 800fd12:	4b31      	ldr	r3, [pc, #196]	; (800fdd8 <tcp_rexmit_rto_prepare+0xd4>)
 800fd14:	f240 6263 	movw	r2, #1635	; 0x663
 800fd18:	4930      	ldr	r1, [pc, #192]	; (800fddc <tcp_rexmit_rto_prepare+0xd8>)
 800fd1a:	4831      	ldr	r0, [pc, #196]	; (800fde0 <tcp_rexmit_rto_prepare+0xdc>)
 800fd1c:	f003 fdb4 	bl	8013888 <iprintf>

  if (pcb->unacked == NULL) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d102      	bne.n	800fd2e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fd28:	f06f 0305 	mvn.w	r3, #5
 800fd2c:	e050      	b.n	800fdd0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd32:	60fb      	str	r3, [r7, #12]
 800fd34:	e00b      	b.n	800fd4e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f7ff fee6 	bl	800fb08 <tcp_output_segment_busy>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d002      	beq.n	800fd48 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fd42:	f06f 0305 	mvn.w	r3, #5
 800fd46:	e043      	b.n	800fdd0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	60fb      	str	r3, [r7, #12]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d1ef      	bne.n	800fd36 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f7ff fed6 	bl	800fb08 <tcp_output_segment_busy>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d002      	beq.n	800fd68 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fd62:	f06f 0305 	mvn.w	r3, #5
 800fd66:	e033      	b.n	800fdd0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	8b5b      	ldrh	r3, [r3, #26]
 800fd82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7f8 fe1b 	bl	80089ce <lwip_htonl>
 800fd98:	4604      	mov	r4, r0
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	891b      	ldrh	r3, [r3, #8]
 800fd9e:	461d      	mov	r5, r3
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	899b      	ldrh	r3, [r3, #12]
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7f8 fdfb 	bl	80089a4 <lwip_htons>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	f003 0303 	and.w	r3, r3, #3
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d001      	beq.n	800fdbe <tcp_rexmit_rto_prepare+0xba>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e000      	b.n	800fdc0 <tcp_rexmit_rto_prepare+0xbc>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	442b      	add	r3, r5
 800fdc2:	18e2      	adds	r2, r4, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2200      	movs	r2, #0
 800fdcc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bdb0      	pop	{r4, r5, r7, pc}
 800fdd8:	08016564 	.word	0x08016564
 800fddc:	08016ba0 	.word	0x08016ba0
 800fde0:	080165b8 	.word	0x080165b8

0800fde4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d106      	bne.n	800fe00 <tcp_rexmit_rto_commit+0x1c>
 800fdf2:	4b0d      	ldr	r3, [pc, #52]	; (800fe28 <tcp_rexmit_rto_commit+0x44>)
 800fdf4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fdf8:	490c      	ldr	r1, [pc, #48]	; (800fe2c <tcp_rexmit_rto_commit+0x48>)
 800fdfa:	480d      	ldr	r0, [pc, #52]	; (800fe30 <tcp_rexmit_rto_commit+0x4c>)
 800fdfc:	f003 fd44 	bl	8013888 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe06:	2bff      	cmp	r3, #255	; 0xff
 800fe08:	d007      	beq.n	800fe1a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe10:	3301      	adds	r3, #1
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7ff fc80 	bl	800f720 <tcp_output>
}
 800fe20:	bf00      	nop
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	08016564 	.word	0x08016564
 800fe2c:	08016bc4 	.word	0x08016bc4
 800fe30:	080165b8 	.word	0x080165b8

0800fe34 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d106      	bne.n	800fe50 <tcp_rexmit_rto+0x1c>
 800fe42:	4b0a      	ldr	r3, [pc, #40]	; (800fe6c <tcp_rexmit_rto+0x38>)
 800fe44:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fe48:	4909      	ldr	r1, [pc, #36]	; (800fe70 <tcp_rexmit_rto+0x3c>)
 800fe4a:	480a      	ldr	r0, [pc, #40]	; (800fe74 <tcp_rexmit_rto+0x40>)
 800fe4c:	f003 fd1c 	bl	8013888 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff ff57 	bl	800fd04 <tcp_rexmit_rto_prepare>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d102      	bne.n	800fe62 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7ff ffc1 	bl	800fde4 <tcp_rexmit_rto_commit>
  }
}
 800fe62:	bf00      	nop
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	08016564 	.word	0x08016564
 800fe70:	08016be8 	.word	0x08016be8
 800fe74:	080165b8 	.word	0x080165b8

0800fe78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fe78:	b590      	push	{r4, r7, lr}
 800fe7a:	b085      	sub	sp, #20
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d106      	bne.n	800fe94 <tcp_rexmit+0x1c>
 800fe86:	4b2f      	ldr	r3, [pc, #188]	; (800ff44 <tcp_rexmit+0xcc>)
 800fe88:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fe8c:	492e      	ldr	r1, [pc, #184]	; (800ff48 <tcp_rexmit+0xd0>)
 800fe8e:	482f      	ldr	r0, [pc, #188]	; (800ff4c <tcp_rexmit+0xd4>)
 800fe90:	f003 fcfa 	bl	8013888 <iprintf>

  if (pcb->unacked == NULL) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d102      	bne.n	800fea2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fe9c:	f06f 0305 	mvn.w	r3, #5
 800fea0:	e04c      	b.n	800ff3c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fea6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fea8:	68b8      	ldr	r0, [r7, #8]
 800feaa:	f7ff fe2d 	bl	800fb08 <tcp_output_segment_busy>
 800feae:	4603      	mov	r3, r0
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d002      	beq.n	800feba <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800feb4:	f06f 0305 	mvn.w	r3, #5
 800feb8:	e040      	b.n	800ff3c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	336c      	adds	r3, #108	; 0x6c
 800fec6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fec8:	e002      	b.n	800fed0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d011      	beq.n	800fefc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	68db      	ldr	r3, [r3, #12]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7f8 fd74 	bl	80089ce <lwip_htonl>
 800fee6:	4604      	mov	r4, r0
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	4618      	mov	r0, r3
 800fef0:	f7f8 fd6d 	bl	80089ce <lwip_htonl>
 800fef4:	4603      	mov	r3, r0
 800fef6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	dbe6      	blt.n	800feca <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	68ba      	ldr	r2, [r7, #8]
 800ff08:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d103      	bne.n	800ff1a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2200      	movs	r2, #0
 800ff16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff20:	2bff      	cmp	r3, #255	; 0xff
 800ff22:	d007      	beq.n	800ff34 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	b2da      	uxtb	r2, r3
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3714      	adds	r7, #20
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd90      	pop	{r4, r7, pc}
 800ff44:	08016564 	.word	0x08016564
 800ff48:	08016c04 	.word	0x08016c04
 800ff4c:	080165b8 	.word	0x080165b8

0800ff50 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <tcp_rexmit_fast+0x1c>
 800ff5e:	4b2a      	ldr	r3, [pc, #168]	; (8010008 <tcp_rexmit_fast+0xb8>)
 800ff60:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ff64:	4929      	ldr	r1, [pc, #164]	; (801000c <tcp_rexmit_fast+0xbc>)
 800ff66:	482a      	ldr	r0, [pc, #168]	; (8010010 <tcp_rexmit_fast+0xc0>)
 800ff68:	f003 fc8e 	bl	8013888 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d045      	beq.n	8010000 <tcp_rexmit_fast+0xb0>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	8b5b      	ldrh	r3, [r3, #26]
 800ff78:	f003 0304 	and.w	r3, r3, #4
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d13f      	bne.n	8010000 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7ff ff79 	bl	800fe78 <tcp_rexmit>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d139      	bne.n	8010000 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	bf28      	it	cs
 800ff9c:	4613      	movcs	r3, r2
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	da00      	bge.n	800ffa6 <tcp_rexmit_fast+0x56>
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	105b      	asrs	r3, r3, #1
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d206      	bcs.n	800ffd0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffc6:	005b      	lsls	r3, r3, #1
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffda:	4619      	mov	r1, r3
 800ffdc:	0049      	lsls	r1, r1, #1
 800ffde:	440b      	add	r3, r1
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	4413      	add	r3, r2
 800ffe4:	b29a      	uxth	r2, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	8b5b      	ldrh	r3, [r3, #26]
 800fff0:	f043 0304 	orr.w	r3, r3, #4
 800fff4:	b29a      	uxth	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010000:	bf00      	nop
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	08016564 	.word	0x08016564
 801000c:	08016c1c 	.word	0x08016c1c
 8010010:	080165b8 	.word	0x080165b8

08010014 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b086      	sub	sp, #24
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	607b      	str	r3, [r7, #4]
 801001e:	460b      	mov	r3, r1
 8010020:	817b      	strh	r3, [r7, #10]
 8010022:	4613      	mov	r3, r2
 8010024:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010026:	897a      	ldrh	r2, [r7, #10]
 8010028:	893b      	ldrh	r3, [r7, #8]
 801002a:	4413      	add	r3, r2
 801002c:	b29b      	uxth	r3, r3
 801002e:	3314      	adds	r3, #20
 8010030:	b29b      	uxth	r3, r3
 8010032:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010036:	4619      	mov	r1, r3
 8010038:	2022      	movs	r0, #34	; 0x22
 801003a:	f7f9 fc83 	bl	8009944 <pbuf_alloc>
 801003e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d04d      	beq.n	80100e2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010046:	897b      	ldrh	r3, [r7, #10]
 8010048:	3313      	adds	r3, #19
 801004a:	697a      	ldr	r2, [r7, #20]
 801004c:	8952      	ldrh	r2, [r2, #10]
 801004e:	4293      	cmp	r3, r2
 8010050:	db06      	blt.n	8010060 <tcp_output_alloc_header_common+0x4c>
 8010052:	4b26      	ldr	r3, [pc, #152]	; (80100ec <tcp_output_alloc_header_common+0xd8>)
 8010054:	f240 7223 	movw	r2, #1827	; 0x723
 8010058:	4925      	ldr	r1, [pc, #148]	; (80100f0 <tcp_output_alloc_header_common+0xdc>)
 801005a:	4826      	ldr	r0, [pc, #152]	; (80100f4 <tcp_output_alloc_header_common+0xe0>)
 801005c:	f003 fc14 	bl	8013888 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010066:	8c3b      	ldrh	r3, [r7, #32]
 8010068:	4618      	mov	r0, r3
 801006a:	f7f8 fc9b 	bl	80089a4 <lwip_htons>
 801006e:	4603      	mov	r3, r0
 8010070:	461a      	mov	r2, r3
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010078:	4618      	mov	r0, r3
 801007a:	f7f8 fc93 	bl	80089a4 <lwip_htons>
 801007e:	4603      	mov	r3, r0
 8010080:	461a      	mov	r2, r3
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801008c:	68f8      	ldr	r0, [r7, #12]
 801008e:	f7f8 fc9e 	bl	80089ce <lwip_htonl>
 8010092:	4602      	mov	r2, r0
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010098:	897b      	ldrh	r3, [r7, #10]
 801009a:	089b      	lsrs	r3, r3, #2
 801009c:	b29b      	uxth	r3, r3
 801009e:	3305      	adds	r3, #5
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	031b      	lsls	r3, r3, #12
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	4313      	orrs	r3, r2
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7f8 fc77 	bl	80089a4 <lwip_htons>
 80100b6:	4603      	mov	r3, r0
 80100b8:	461a      	mov	r2, r3
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80100be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7f8 fc6f 	bl	80089a4 <lwip_htons>
 80100c6:	4603      	mov	r3, r0
 80100c8:	461a      	mov	r2, r3
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	2200      	movs	r2, #0
 80100d2:	741a      	strb	r2, [r3, #16]
 80100d4:	2200      	movs	r2, #0
 80100d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	2200      	movs	r2, #0
 80100dc:	749a      	strb	r2, [r3, #18]
 80100de:	2200      	movs	r2, #0
 80100e0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80100e2:	697b      	ldr	r3, [r7, #20]
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3718      	adds	r7, #24
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	08016564 	.word	0x08016564
 80100f0:	08016c3c 	.word	0x08016c3c
 80100f4:	080165b8 	.word	0x080165b8

080100f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80100f8:	b5b0      	push	{r4, r5, r7, lr}
 80100fa:	b08a      	sub	sp, #40	; 0x28
 80100fc:	af04      	add	r7, sp, #16
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	607b      	str	r3, [r7, #4]
 8010102:	460b      	mov	r3, r1
 8010104:	817b      	strh	r3, [r7, #10]
 8010106:	4613      	mov	r3, r2
 8010108:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d106      	bne.n	801011e <tcp_output_alloc_header+0x26>
 8010110:	4b15      	ldr	r3, [pc, #84]	; (8010168 <tcp_output_alloc_header+0x70>)
 8010112:	f240 7242 	movw	r2, #1858	; 0x742
 8010116:	4915      	ldr	r1, [pc, #84]	; (801016c <tcp_output_alloc_header+0x74>)
 8010118:	4815      	ldr	r0, [pc, #84]	; (8010170 <tcp_output_alloc_header+0x78>)
 801011a:	f003 fbb5 	bl	8013888 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	8adb      	ldrh	r3, [r3, #22]
 8010126:	68fa      	ldr	r2, [r7, #12]
 8010128:	8b12      	ldrh	r2, [r2, #24]
 801012a:	68f9      	ldr	r1, [r7, #12]
 801012c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801012e:	893d      	ldrh	r5, [r7, #8]
 8010130:	897c      	ldrh	r4, [r7, #10]
 8010132:	9103      	str	r1, [sp, #12]
 8010134:	2110      	movs	r1, #16
 8010136:	9102      	str	r1, [sp, #8]
 8010138:	9201      	str	r2, [sp, #4]
 801013a:	9300      	str	r3, [sp, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	462a      	mov	r2, r5
 8010140:	4621      	mov	r1, r4
 8010142:	f7ff ff67 	bl	8010014 <tcp_output_alloc_header_common>
 8010146:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d006      	beq.n	801015c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010156:	441a      	add	r2, r3
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801015c:	697b      	ldr	r3, [r7, #20]
}
 801015e:	4618      	mov	r0, r3
 8010160:	3718      	adds	r7, #24
 8010162:	46bd      	mov	sp, r7
 8010164:	bdb0      	pop	{r4, r5, r7, pc}
 8010166:	bf00      	nop
 8010168:	08016564 	.word	0x08016564
 801016c:	08016c6c 	.word	0x08016c6c
 8010170:	080165b8 	.word	0x080165b8

08010174 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b088      	sub	sp, #32
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	4611      	mov	r1, r2
 8010180:	461a      	mov	r2, r3
 8010182:	460b      	mov	r3, r1
 8010184:	71fb      	strb	r3, [r7, #7]
 8010186:	4613      	mov	r3, r2
 8010188:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d106      	bne.n	80101a2 <tcp_output_fill_options+0x2e>
 8010194:	4b13      	ldr	r3, [pc, #76]	; (80101e4 <tcp_output_fill_options+0x70>)
 8010196:	f240 7256 	movw	r2, #1878	; 0x756
 801019a:	4913      	ldr	r1, [pc, #76]	; (80101e8 <tcp_output_fill_options+0x74>)
 801019c:	4813      	ldr	r0, [pc, #76]	; (80101ec <tcp_output_fill_options+0x78>)
 801019e:	f003 fb73 	bl	8013888 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	3314      	adds	r3, #20
 80101ac:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	f103 0214 	add.w	r2, r3, #20
 80101b4:	8bfb      	ldrh	r3, [r7, #30]
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	4619      	mov	r1, r3
 80101ba:	79fb      	ldrb	r3, [r7, #7]
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	f003 0304 	and.w	r3, r3, #4
 80101c2:	440b      	add	r3, r1
 80101c4:	4413      	add	r3, r2
 80101c6:	697a      	ldr	r2, [r7, #20]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d006      	beq.n	80101da <tcp_output_fill_options+0x66>
 80101cc:	4b05      	ldr	r3, [pc, #20]	; (80101e4 <tcp_output_fill_options+0x70>)
 80101ce:	f240 7275 	movw	r2, #1909	; 0x775
 80101d2:	4907      	ldr	r1, [pc, #28]	; (80101f0 <tcp_output_fill_options+0x7c>)
 80101d4:	4805      	ldr	r0, [pc, #20]	; (80101ec <tcp_output_fill_options+0x78>)
 80101d6:	f003 fb57 	bl	8013888 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80101da:	bf00      	nop
 80101dc:	3720      	adds	r7, #32
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	08016564 	.word	0x08016564
 80101e8:	08016c94 	.word	0x08016c94
 80101ec:	080165b8 	.word	0x080165b8
 80101f0:	08016b8c 	.word	0x08016b8c

080101f4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b08a      	sub	sp, #40	; 0x28
 80101f8:	af04      	add	r7, sp, #16
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	60b9      	str	r1, [r7, #8]
 80101fe:	607a      	str	r2, [r7, #4]
 8010200:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d106      	bne.n	8010216 <tcp_output_control_segment+0x22>
 8010208:	4b1c      	ldr	r3, [pc, #112]	; (801027c <tcp_output_control_segment+0x88>)
 801020a:	f240 7287 	movw	r2, #1927	; 0x787
 801020e:	491c      	ldr	r1, [pc, #112]	; (8010280 <tcp_output_control_segment+0x8c>)
 8010210:	481c      	ldr	r0, [pc, #112]	; (8010284 <tcp_output_control_segment+0x90>)
 8010212:	f003 fb39 	bl	8013888 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010216:	683a      	ldr	r2, [r7, #0]
 8010218:	6879      	ldr	r1, [r7, #4]
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f7fe fae8 	bl	800e7f0 <tcp_route>
 8010220:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d102      	bne.n	801022e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010228:	23fc      	movs	r3, #252	; 0xfc
 801022a:	75fb      	strb	r3, [r7, #23]
 801022c:	e01c      	b.n	8010268 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d006      	beq.n	8010242 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	7adb      	ldrb	r3, [r3, #11]
 8010238:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	7a9b      	ldrb	r3, [r3, #10]
 801023e:	757b      	strb	r3, [r7, #21]
 8010240:	e003      	b.n	801024a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010242:	23ff      	movs	r3, #255	; 0xff
 8010244:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010246:	2300      	movs	r3, #0
 8010248:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801024a:	7dba      	ldrb	r2, [r7, #22]
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	9302      	str	r3, [sp, #8]
 8010250:	2306      	movs	r3, #6
 8010252:	9301      	str	r3, [sp, #4]
 8010254:	7d7b      	ldrb	r3, [r7, #21]
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	4613      	mov	r3, r2
 801025a:	683a      	ldr	r2, [r7, #0]
 801025c:	6879      	ldr	r1, [r7, #4]
 801025e:	68b8      	ldr	r0, [r7, #8]
 8010260:	f002 fa88 	bl	8012774 <ip4_output_if>
 8010264:	4603      	mov	r3, r0
 8010266:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010268:	68b8      	ldr	r0, [r7, #8]
 801026a:	f7f9 fe4f 	bl	8009f0c <pbuf_free>
  return err;
 801026e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010272:	4618      	mov	r0, r3
 8010274:	3718      	adds	r7, #24
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	08016564 	.word	0x08016564
 8010280:	08016cbc 	.word	0x08016cbc
 8010284:	080165b8 	.word	0x080165b8

08010288 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010288:	b590      	push	{r4, r7, lr}
 801028a:	b08b      	sub	sp, #44	; 0x2c
 801028c:	af04      	add	r7, sp, #16
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	607a      	str	r2, [r7, #4]
 8010294:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d106      	bne.n	80102aa <tcp_rst+0x22>
 801029c:	4b1f      	ldr	r3, [pc, #124]	; (801031c <tcp_rst+0x94>)
 801029e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80102a2:	491f      	ldr	r1, [pc, #124]	; (8010320 <tcp_rst+0x98>)
 80102a4:	481f      	ldr	r0, [pc, #124]	; (8010324 <tcp_rst+0x9c>)
 80102a6:	f003 faef 	bl	8013888 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80102aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d106      	bne.n	80102be <tcp_rst+0x36>
 80102b0:	4b1a      	ldr	r3, [pc, #104]	; (801031c <tcp_rst+0x94>)
 80102b2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80102b6:	491c      	ldr	r1, [pc, #112]	; (8010328 <tcp_rst+0xa0>)
 80102b8:	481a      	ldr	r0, [pc, #104]	; (8010324 <tcp_rst+0x9c>)
 80102ba:	f003 fae5 	bl	8013888 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80102be:	2300      	movs	r3, #0
 80102c0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80102c2:	f246 0308 	movw	r3, #24584	; 0x6008
 80102c6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80102c8:	7dfb      	ldrb	r3, [r7, #23]
 80102ca:	b29c      	uxth	r4, r3
 80102cc:	68b8      	ldr	r0, [r7, #8]
 80102ce:	f7f8 fb7e 	bl	80089ce <lwip_htonl>
 80102d2:	4602      	mov	r2, r0
 80102d4:	8abb      	ldrh	r3, [r7, #20]
 80102d6:	9303      	str	r3, [sp, #12]
 80102d8:	2314      	movs	r3, #20
 80102da:	9302      	str	r3, [sp, #8]
 80102dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80102de:	9301      	str	r3, [sp, #4]
 80102e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	4613      	mov	r3, r2
 80102e6:	2200      	movs	r2, #0
 80102e8:	4621      	mov	r1, r4
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f7ff fe92 	bl	8010014 <tcp_output_alloc_header_common>
 80102f0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d00c      	beq.n	8010312 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80102f8:	7dfb      	ldrb	r3, [r7, #23]
 80102fa:	2200      	movs	r2, #0
 80102fc:	6939      	ldr	r1, [r7, #16]
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f7ff ff38 	bl	8010174 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	6939      	ldr	r1, [r7, #16]
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	f7ff ff72 	bl	80101f4 <tcp_output_control_segment>
 8010310:	e000      	b.n	8010314 <tcp_rst+0x8c>
    return;
 8010312:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010314:	371c      	adds	r7, #28
 8010316:	46bd      	mov	sp, r7
 8010318:	bd90      	pop	{r4, r7, pc}
 801031a:	bf00      	nop
 801031c:	08016564 	.word	0x08016564
 8010320:	08016ce8 	.word	0x08016ce8
 8010324:	080165b8 	.word	0x080165b8
 8010328:	08016d04 	.word	0x08016d04

0801032c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801032c:	b590      	push	{r4, r7, lr}
 801032e:	b087      	sub	sp, #28
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010334:	2300      	movs	r3, #0
 8010336:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d106      	bne.n	8010350 <tcp_send_empty_ack+0x24>
 8010342:	4b28      	ldr	r3, [pc, #160]	; (80103e4 <tcp_send_empty_ack+0xb8>)
 8010344:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010348:	4927      	ldr	r1, [pc, #156]	; (80103e8 <tcp_send_empty_ack+0xbc>)
 801034a:	4828      	ldr	r0, [pc, #160]	; (80103ec <tcp_send_empty_ack+0xc0>)
 801034c:	f003 fa9c 	bl	8013888 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010350:	7dfb      	ldrb	r3, [r7, #23]
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	b2db      	uxtb	r3, r3
 8010356:	f003 0304 	and.w	r3, r3, #4
 801035a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801035c:	7d7b      	ldrb	r3, [r7, #21]
 801035e:	b29c      	uxth	r4, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010364:	4618      	mov	r0, r3
 8010366:	f7f8 fb32 	bl	80089ce <lwip_htonl>
 801036a:	4603      	mov	r3, r0
 801036c:	2200      	movs	r2, #0
 801036e:	4621      	mov	r1, r4
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f7ff fec1 	bl	80100f8 <tcp_output_alloc_header>
 8010376:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d109      	bne.n	8010392 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	8b5b      	ldrh	r3, [r3, #26]
 8010382:	f043 0303 	orr.w	r3, r3, #3
 8010386:	b29a      	uxth	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801038c:	f06f 0301 	mvn.w	r3, #1
 8010390:	e023      	b.n	80103da <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010392:	7dbb      	ldrb	r3, [r7, #22]
 8010394:	7dfa      	ldrb	r2, [r7, #23]
 8010396:	6939      	ldr	r1, [r7, #16]
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7ff feeb 	bl	8010174 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	3304      	adds	r3, #4
 80103a4:	6939      	ldr	r1, [r7, #16]
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7ff ff24 	bl	80101f4 <tcp_output_control_segment>
 80103ac:	4603      	mov	r3, r0
 80103ae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80103b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d007      	beq.n	80103c8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	8b5b      	ldrh	r3, [r3, #26]
 80103bc:	f043 0303 	orr.w	r3, r3, #3
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	835a      	strh	r2, [r3, #26]
 80103c6:	e006      	b.n	80103d6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	8b5b      	ldrh	r3, [r3, #26]
 80103cc:	f023 0303 	bic.w	r3, r3, #3
 80103d0:	b29a      	uxth	r2, r3
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80103d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103da:	4618      	mov	r0, r3
 80103dc:	371c      	adds	r7, #28
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd90      	pop	{r4, r7, pc}
 80103e2:	bf00      	nop
 80103e4:	08016564 	.word	0x08016564
 80103e8:	08016d20 	.word	0x08016d20
 80103ec:	080165b8 	.word	0x080165b8

080103f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80103f0:	b590      	push	{r4, r7, lr}
 80103f2:	b087      	sub	sp, #28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80103f8:	2300      	movs	r3, #0
 80103fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d106      	bne.n	8010410 <tcp_keepalive+0x20>
 8010402:	4b18      	ldr	r3, [pc, #96]	; (8010464 <tcp_keepalive+0x74>)
 8010404:	f640 0224 	movw	r2, #2084	; 0x824
 8010408:	4917      	ldr	r1, [pc, #92]	; (8010468 <tcp_keepalive+0x78>)
 801040a:	4818      	ldr	r0, [pc, #96]	; (801046c <tcp_keepalive+0x7c>)
 801040c:	f003 fa3c 	bl	8013888 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010410:	7dfb      	ldrb	r3, [r7, #23]
 8010412:	b29c      	uxth	r4, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010418:	3b01      	subs	r3, #1
 801041a:	4618      	mov	r0, r3
 801041c:	f7f8 fad7 	bl	80089ce <lwip_htonl>
 8010420:	4603      	mov	r3, r0
 8010422:	2200      	movs	r2, #0
 8010424:	4621      	mov	r1, r4
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f7ff fe66 	bl	80100f8 <tcp_output_alloc_header>
 801042c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d102      	bne.n	801043a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010434:	f04f 33ff 	mov.w	r3, #4294967295
 8010438:	e010      	b.n	801045c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801043a:	7dfb      	ldrb	r3, [r7, #23]
 801043c:	2200      	movs	r2, #0
 801043e:	6939      	ldr	r1, [r7, #16]
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f7ff fe97 	bl	8010174 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010446:	687a      	ldr	r2, [r7, #4]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	3304      	adds	r3, #4
 801044c:	6939      	ldr	r1, [r7, #16]
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f7ff fed0 	bl	80101f4 <tcp_output_control_segment>
 8010454:	4603      	mov	r3, r0
 8010456:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010458:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801045c:	4618      	mov	r0, r3
 801045e:	371c      	adds	r7, #28
 8010460:	46bd      	mov	sp, r7
 8010462:	bd90      	pop	{r4, r7, pc}
 8010464:	08016564 	.word	0x08016564
 8010468:	08016d40 	.word	0x08016d40
 801046c:	080165b8 	.word	0x080165b8

08010470 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010470:	b590      	push	{r4, r7, lr}
 8010472:	b08b      	sub	sp, #44	; 0x2c
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010478:	2300      	movs	r3, #0
 801047a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d106      	bne.n	8010492 <tcp_zero_window_probe+0x22>
 8010484:	4b4c      	ldr	r3, [pc, #304]	; (80105b8 <tcp_zero_window_probe+0x148>)
 8010486:	f640 024f 	movw	r2, #2127	; 0x84f
 801048a:	494c      	ldr	r1, [pc, #304]	; (80105bc <tcp_zero_window_probe+0x14c>)
 801048c:	484c      	ldr	r0, [pc, #304]	; (80105c0 <tcp_zero_window_probe+0x150>)
 801048e:	f003 f9fb 	bl	8013888 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010496:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010498:	6a3b      	ldr	r3, [r7, #32]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d101      	bne.n	80104a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801049e:	2300      	movs	r3, #0
 80104a0:	e086      	b.n	80105b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80104a8:	2bff      	cmp	r3, #255	; 0xff
 80104aa:	d007      	beq.n	80104bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80104b2:	3301      	adds	r3, #1
 80104b4:	b2da      	uxtb	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80104bc:	6a3b      	ldr	r3, [r7, #32]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	899b      	ldrh	r3, [r3, #12]
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7f8 fa6d 	bl	80089a4 <lwip_htons>
 80104ca:	4603      	mov	r3, r0
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	f003 0301 	and.w	r3, r3, #1
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d005      	beq.n	80104e2 <tcp_zero_window_probe+0x72>
 80104d6:	6a3b      	ldr	r3, [r7, #32]
 80104d8:	891b      	ldrh	r3, [r3, #8]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d101      	bne.n	80104e2 <tcp_zero_window_probe+0x72>
 80104de:	2301      	movs	r3, #1
 80104e0:	e000      	b.n	80104e4 <tcp_zero_window_probe+0x74>
 80104e2:	2300      	movs	r3, #0
 80104e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80104e6:	7ffb      	ldrb	r3, [r7, #31]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	bf0c      	ite	eq
 80104ec:	2301      	moveq	r3, #1
 80104ee:	2300      	movne	r3, #0
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80104f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104f8:	b299      	uxth	r1, r3
 80104fa:	6a3b      	ldr	r3, [r7, #32]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	8bba      	ldrh	r2, [r7, #28]
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7ff fdf8 	bl	80100f8 <tcp_output_alloc_header>
 8010508:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d102      	bne.n	8010516 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010510:	f04f 33ff 	mov.w	r3, #4294967295
 8010514:	e04c      	b.n	80105b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801051c:	7ffb      	ldrb	r3, [r7, #31]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d011      	beq.n	8010546 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	899b      	ldrh	r3, [r3, #12]
 8010526:	b29b      	uxth	r3, r3
 8010528:	b21b      	sxth	r3, r3
 801052a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801052e:	b21c      	sxth	r4, r3
 8010530:	2011      	movs	r0, #17
 8010532:	f7f8 fa37 	bl	80089a4 <lwip_htons>
 8010536:	4603      	mov	r3, r0
 8010538:	b21b      	sxth	r3, r3
 801053a:	4323      	orrs	r3, r4
 801053c:	b21b      	sxth	r3, r3
 801053e:	b29a      	uxth	r2, r3
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	819a      	strh	r2, [r3, #12]
 8010544:	e010      	b.n	8010568 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	3314      	adds	r3, #20
 801054c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801054e:	6a3b      	ldr	r3, [r7, #32]
 8010550:	6858      	ldr	r0, [r3, #4]
 8010552:	6a3b      	ldr	r3, [r7, #32]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	891a      	ldrh	r2, [r3, #8]
 8010558:	6a3b      	ldr	r3, [r7, #32]
 801055a:	891b      	ldrh	r3, [r3, #8]
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	b29b      	uxth	r3, r3
 8010560:	2201      	movs	r2, #1
 8010562:	6939      	ldr	r1, [r7, #16]
 8010564:	f7f9 fecc 	bl	800a300 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010568:	6a3b      	ldr	r3, [r7, #32]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	4618      	mov	r0, r3
 8010570:	f7f8 fa2d 	bl	80089ce <lwip_htonl>
 8010574:	4603      	mov	r3, r0
 8010576:	3301      	adds	r3, #1
 8010578:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	1ad3      	subs	r3, r2, r3
 8010582:	2b00      	cmp	r3, #0
 8010584:	da02      	bge.n	801058c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801058c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010590:	2200      	movs	r2, #0
 8010592:	69b9      	ldr	r1, [r7, #24]
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7ff fded 	bl	8010174 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	3304      	adds	r3, #4
 80105a0:	69b9      	ldr	r1, [r7, #24]
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7ff fe26 	bl	80101f4 <tcp_output_control_segment>
 80105a8:	4603      	mov	r3, r0
 80105aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80105ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	372c      	adds	r7, #44	; 0x2c
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd90      	pop	{r4, r7, pc}
 80105b8:	08016564 	.word	0x08016564
 80105bc:	08016d5c 	.word	0x08016d5c
 80105c0:	080165b8 	.word	0x080165b8

080105c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80105cc:	f7fa f818 	bl	800a600 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80105d0:	4b0a      	ldr	r3, [pc, #40]	; (80105fc <tcpip_tcp_timer+0x38>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d103      	bne.n	80105e0 <tcpip_tcp_timer+0x1c>
 80105d8:	4b09      	ldr	r3, [pc, #36]	; (8010600 <tcpip_tcp_timer+0x3c>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d005      	beq.n	80105ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80105e0:	2200      	movs	r2, #0
 80105e2:	4908      	ldr	r1, [pc, #32]	; (8010604 <tcpip_tcp_timer+0x40>)
 80105e4:	20fa      	movs	r0, #250	; 0xfa
 80105e6:	f000 f8f3 	bl	80107d0 <sys_timeout>
 80105ea:	e003      	b.n	80105f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80105ec:	4b06      	ldr	r3, [pc, #24]	; (8010608 <tcpip_tcp_timer+0x44>)
 80105ee:	2200      	movs	r2, #0
 80105f0:	601a      	str	r2, [r3, #0]
  }
}
 80105f2:	bf00      	nop
 80105f4:	bf00      	nop
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	20009f48 	.word	0x20009f48
 8010600:	20009f58 	.word	0x20009f58
 8010604:	080105c5 	.word	0x080105c5
 8010608:	200001c4 	.word	0x200001c4

0801060c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010610:	4b0a      	ldr	r3, [pc, #40]	; (801063c <tcp_timer_needed+0x30>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d10f      	bne.n	8010638 <tcp_timer_needed+0x2c>
 8010618:	4b09      	ldr	r3, [pc, #36]	; (8010640 <tcp_timer_needed+0x34>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d103      	bne.n	8010628 <tcp_timer_needed+0x1c>
 8010620:	4b08      	ldr	r3, [pc, #32]	; (8010644 <tcp_timer_needed+0x38>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d007      	beq.n	8010638 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010628:	4b04      	ldr	r3, [pc, #16]	; (801063c <tcp_timer_needed+0x30>)
 801062a:	2201      	movs	r2, #1
 801062c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801062e:	2200      	movs	r2, #0
 8010630:	4905      	ldr	r1, [pc, #20]	; (8010648 <tcp_timer_needed+0x3c>)
 8010632:	20fa      	movs	r0, #250	; 0xfa
 8010634:	f000 f8cc 	bl	80107d0 <sys_timeout>
  }
}
 8010638:	bf00      	nop
 801063a:	bd80      	pop	{r7, pc}
 801063c:	200001c4 	.word	0x200001c4
 8010640:	20009f48 	.word	0x20009f48
 8010644:	20009f58 	.word	0x20009f58
 8010648:	080105c5 	.word	0x080105c5

0801064c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b086      	sub	sp, #24
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010658:	2006      	movs	r0, #6
 801065a:	f7f8 fdf9 	bl	8009250 <memp_malloc>
 801065e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d109      	bne.n	801067a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d151      	bne.n	8010710 <sys_timeout_abs+0xc4>
 801066c:	4b2a      	ldr	r3, [pc, #168]	; (8010718 <sys_timeout_abs+0xcc>)
 801066e:	22be      	movs	r2, #190	; 0xbe
 8010670:	492a      	ldr	r1, [pc, #168]	; (801071c <sys_timeout_abs+0xd0>)
 8010672:	482b      	ldr	r0, [pc, #172]	; (8010720 <sys_timeout_abs+0xd4>)
 8010674:	f003 f908 	bl	8013888 <iprintf>
    return;
 8010678:	e04a      	b.n	8010710 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	2200      	movs	r2, #0
 801067e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	68ba      	ldr	r2, [r7, #8]
 8010684:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010692:	4b24      	ldr	r3, [pc, #144]	; (8010724 <sys_timeout_abs+0xd8>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d103      	bne.n	80106a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801069a:	4a22      	ldr	r2, [pc, #136]	; (8010724 <sys_timeout_abs+0xd8>)
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	6013      	str	r3, [r2, #0]
    return;
 80106a0:	e037      	b.n	8010712 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	685a      	ldr	r2, [r3, #4]
 80106a6:	4b1f      	ldr	r3, [pc, #124]	; (8010724 <sys_timeout_abs+0xd8>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	1ad3      	subs	r3, r2, r3
 80106ae:	0fdb      	lsrs	r3, r3, #31
 80106b0:	f003 0301 	and.w	r3, r3, #1
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d007      	beq.n	80106ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80106ba:	4b1a      	ldr	r3, [pc, #104]	; (8010724 <sys_timeout_abs+0xd8>)
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80106c2:	4a18      	ldr	r2, [pc, #96]	; (8010724 <sys_timeout_abs+0xd8>)
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	6013      	str	r3, [r2, #0]
 80106c8:	e023      	b.n	8010712 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80106ca:	4b16      	ldr	r3, [pc, #88]	; (8010724 <sys_timeout_abs+0xd8>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	617b      	str	r3, [r7, #20]
 80106d0:	e01a      	b.n	8010708 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00b      	beq.n	80106f2 <sys_timeout_abs+0xa6>
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	685a      	ldr	r2, [r3, #4]
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	0fdb      	lsrs	r3, r3, #31
 80106e8:	f003 0301 	and.w	r3, r3, #1
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d007      	beq.n	8010702 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	681a      	ldr	r2, [r3, #0]
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	693a      	ldr	r2, [r7, #16]
 80106fe:	601a      	str	r2, [r3, #0]
        break;
 8010700:	e007      	b.n	8010712 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	617b      	str	r3, [r7, #20]
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d1e1      	bne.n	80106d2 <sys_timeout_abs+0x86>
 801070e:	e000      	b.n	8010712 <sys_timeout_abs+0xc6>
    return;
 8010710:	bf00      	nop
      }
    }
  }
}
 8010712:	3718      	adds	r7, #24
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}
 8010718:	08016d80 	.word	0x08016d80
 801071c:	08016db4 	.word	0x08016db4
 8010720:	08016df4 	.word	0x08016df4
 8010724:	200001bc 	.word	0x200001bc

08010728 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b086      	sub	sp, #24
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	4798      	blx	r3

  now = sys_now();
 801073a:	f7f8 f8a5 	bl	8008888 <sys_now>
 801073e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	4b0f      	ldr	r3, [pc, #60]	; (8010784 <lwip_cyclic_timer+0x5c>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	4413      	add	r3, r2
 801074a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801074c:	68fa      	ldr	r2, [r7, #12]
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	0fdb      	lsrs	r3, r3, #31
 8010754:	f003 0301 	and.w	r3, r3, #1
 8010758:	b2db      	uxtb	r3, r3
 801075a:	2b00      	cmp	r3, #0
 801075c:	d009      	beq.n	8010772 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	4413      	add	r3, r2
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	4907      	ldr	r1, [pc, #28]	; (8010788 <lwip_cyclic_timer+0x60>)
 801076a:	4618      	mov	r0, r3
 801076c:	f7ff ff6e 	bl	801064c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010770:	e004      	b.n	801077c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	4904      	ldr	r1, [pc, #16]	; (8010788 <lwip_cyclic_timer+0x60>)
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f7ff ff68 	bl	801064c <sys_timeout_abs>
}
 801077c:	bf00      	nop
 801077e:	3718      	adds	r7, #24
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}
 8010784:	200001c0 	.word	0x200001c0
 8010788:	08010729 	.word	0x08010729

0801078c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010792:	2301      	movs	r3, #1
 8010794:	607b      	str	r3, [r7, #4]
 8010796:	e00e      	b.n	80107b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010798:	4a0b      	ldr	r2, [pc, #44]	; (80107c8 <sys_timeouts_init+0x3c>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	00db      	lsls	r3, r3, #3
 80107a4:	4a08      	ldr	r2, [pc, #32]	; (80107c8 <sys_timeouts_init+0x3c>)
 80107a6:	4413      	add	r3, r2
 80107a8:	461a      	mov	r2, r3
 80107aa:	4908      	ldr	r1, [pc, #32]	; (80107cc <sys_timeouts_init+0x40>)
 80107ac:	f000 f810 	bl	80107d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	3301      	adds	r3, #1
 80107b4:	607b      	str	r3, [r7, #4]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2b02      	cmp	r3, #2
 80107ba:	d9ed      	bls.n	8010798 <sys_timeouts_init+0xc>
  }
}
 80107bc:	bf00      	nop
 80107be:	bf00      	nop
 80107c0:	3708      	adds	r7, #8
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}
 80107c6:	bf00      	nop
 80107c8:	08017a58 	.word	0x08017a58
 80107cc:	08010729 	.word	0x08010729

080107d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b086      	sub	sp, #24
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60f8      	str	r0, [r7, #12]
 80107d8:	60b9      	str	r1, [r7, #8]
 80107da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107e2:	d306      	bcc.n	80107f2 <sys_timeout+0x22>
 80107e4:	4b0a      	ldr	r3, [pc, #40]	; (8010810 <sys_timeout+0x40>)
 80107e6:	f240 1229 	movw	r2, #297	; 0x129
 80107ea:	490a      	ldr	r1, [pc, #40]	; (8010814 <sys_timeout+0x44>)
 80107ec:	480a      	ldr	r0, [pc, #40]	; (8010818 <sys_timeout+0x48>)
 80107ee:	f003 f84b 	bl	8013888 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80107f2:	f7f8 f849 	bl	8008888 <sys_now>
 80107f6:	4602      	mov	r2, r0
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	4413      	add	r3, r2
 80107fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	68b9      	ldr	r1, [r7, #8]
 8010802:	6978      	ldr	r0, [r7, #20]
 8010804:	f7ff ff22 	bl	801064c <sys_timeout_abs>
#endif
}
 8010808:	bf00      	nop
 801080a:	3718      	adds	r7, #24
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	08016d80 	.word	0x08016d80
 8010814:	08016e1c 	.word	0x08016e1c
 8010818:	08016df4 	.word	0x08016df4

0801081c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b084      	sub	sp, #16
 8010820:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010822:	f7f8 f831 	bl	8008888 <sys_now>
 8010826:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010828:	4b1a      	ldr	r3, [pc, #104]	; (8010894 <sys_check_timeouts+0x78>)
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	b2db      	uxtb	r3, r3
 801082e:	2b00      	cmp	r3, #0
 8010830:	d001      	beq.n	8010836 <sys_check_timeouts+0x1a>
 8010832:	f7f9 f831 	bl	8009898 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010836:	4b18      	ldr	r3, [pc, #96]	; (8010898 <sys_check_timeouts+0x7c>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d022      	beq.n	8010888 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	1ad3      	subs	r3, r2, r3
 801084a:	0fdb      	lsrs	r3, r3, #31
 801084c:	f003 0301 	and.w	r3, r3, #1
 8010850:	b2db      	uxtb	r3, r3
 8010852:	2b00      	cmp	r3, #0
 8010854:	d11a      	bne.n	801088c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4a0f      	ldr	r2, [pc, #60]	; (8010898 <sys_check_timeouts+0x7c>)
 801085c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	689b      	ldr	r3, [r3, #8]
 8010862:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	4a0b      	ldr	r2, [pc, #44]	; (801089c <sys_check_timeouts+0x80>)
 8010870:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010872:	68b9      	ldr	r1, [r7, #8]
 8010874:	2006      	movs	r0, #6
 8010876:	f7f8 fd37 	bl	80092e8 <memp_free>
    if (handler != NULL) {
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d0d3      	beq.n	8010828 <sys_check_timeouts+0xc>
      handler(arg);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6838      	ldr	r0, [r7, #0]
 8010884:	4798      	blx	r3
  do {
 8010886:	e7cf      	b.n	8010828 <sys_check_timeouts+0xc>
      return;
 8010888:	bf00      	nop
 801088a:	e000      	b.n	801088e <sys_check_timeouts+0x72>
      return;
 801088c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801088e:	3710      	adds	r7, #16
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}
 8010894:	20009f40 	.word	0x20009f40
 8010898:	200001bc 	.word	0x200001bc
 801089c:	200001c0 	.word	0x200001c0

080108a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80108a4:	f003 f808 	bl	80138b8 <rand>
 80108a8:	4603      	mov	r3, r0
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80108b6:	b29a      	uxth	r2, r3
 80108b8:	4b01      	ldr	r3, [pc, #4]	; (80108c0 <udp_init+0x20>)
 80108ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80108bc:	bf00      	nop
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	20000080 	.word	0x20000080

080108c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80108ca:	2300      	movs	r3, #0
 80108cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80108ce:	4b17      	ldr	r3, [pc, #92]	; (801092c <udp_new_port+0x68>)
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	1c5a      	adds	r2, r3, #1
 80108d4:	b291      	uxth	r1, r2
 80108d6:	4a15      	ldr	r2, [pc, #84]	; (801092c <udp_new_port+0x68>)
 80108d8:	8011      	strh	r1, [r2, #0]
 80108da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108de:	4293      	cmp	r3, r2
 80108e0:	d103      	bne.n	80108ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80108e2:	4b12      	ldr	r3, [pc, #72]	; (801092c <udp_new_port+0x68>)
 80108e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80108e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80108ea:	4b11      	ldr	r3, [pc, #68]	; (8010930 <udp_new_port+0x6c>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	603b      	str	r3, [r7, #0]
 80108f0:	e011      	b.n	8010916 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	8a5a      	ldrh	r2, [r3, #18]
 80108f6:	4b0d      	ldr	r3, [pc, #52]	; (801092c <udp_new_port+0x68>)
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	d108      	bne.n	8010910 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80108fe:	88fb      	ldrh	r3, [r7, #6]
 8010900:	3301      	adds	r3, #1
 8010902:	80fb      	strh	r3, [r7, #6]
 8010904:	88fb      	ldrh	r3, [r7, #6]
 8010906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801090a:	d3e0      	bcc.n	80108ce <udp_new_port+0xa>
        return 0;
 801090c:	2300      	movs	r3, #0
 801090e:	e007      	b.n	8010920 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	603b      	str	r3, [r7, #0]
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d1ea      	bne.n	80108f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801091c:	4b03      	ldr	r3, [pc, #12]	; (801092c <udp_new_port+0x68>)
 801091e:	881b      	ldrh	r3, [r3, #0]
}
 8010920:	4618      	mov	r0, r3
 8010922:	370c      	adds	r7, #12
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr
 801092c:	20000080 	.word	0x20000080
 8010930:	20009f60 	.word	0x20009f60

08010934 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	4613      	mov	r3, r2
 8010940:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d105      	bne.n	8010954 <udp_input_local_match+0x20>
 8010948:	4b27      	ldr	r3, [pc, #156]	; (80109e8 <udp_input_local_match+0xb4>)
 801094a:	2287      	movs	r2, #135	; 0x87
 801094c:	4927      	ldr	r1, [pc, #156]	; (80109ec <udp_input_local_match+0xb8>)
 801094e:	4828      	ldr	r0, [pc, #160]	; (80109f0 <udp_input_local_match+0xbc>)
 8010950:	f002 ff9a 	bl	8013888 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d105      	bne.n	8010966 <udp_input_local_match+0x32>
 801095a:	4b23      	ldr	r3, [pc, #140]	; (80109e8 <udp_input_local_match+0xb4>)
 801095c:	2288      	movs	r2, #136	; 0x88
 801095e:	4925      	ldr	r1, [pc, #148]	; (80109f4 <udp_input_local_match+0xc0>)
 8010960:	4823      	ldr	r0, [pc, #140]	; (80109f0 <udp_input_local_match+0xbc>)
 8010962:	f002 ff91 	bl	8013888 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	7a1b      	ldrb	r3, [r3, #8]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00b      	beq.n	8010986 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	7a1a      	ldrb	r2, [r3, #8]
 8010972:	4b21      	ldr	r3, [pc, #132]	; (80109f8 <udp_input_local_match+0xc4>)
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801097a:	3301      	adds	r3, #1
 801097c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801097e:	429a      	cmp	r2, r3
 8010980:	d001      	beq.n	8010986 <udp_input_local_match+0x52>
    return 0;
 8010982:	2300      	movs	r3, #0
 8010984:	e02b      	b.n	80109de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010986:	79fb      	ldrb	r3, [r7, #7]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d018      	beq.n	80109be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d013      	beq.n	80109ba <udp_input_local_match+0x86>
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d00f      	beq.n	80109ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801099a:	4b17      	ldr	r3, [pc, #92]	; (80109f8 <udp_input_local_match+0xc4>)
 801099c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801099e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a2:	d00a      	beq.n	80109ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681a      	ldr	r2, [r3, #0]
 80109a8:	4b13      	ldr	r3, [pc, #76]	; (80109f8 <udp_input_local_match+0xc4>)
 80109aa:	695b      	ldr	r3, [r3, #20]
 80109ac:	405a      	eors	r2, r3
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	3308      	adds	r3, #8
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d110      	bne.n	80109dc <udp_input_local_match+0xa8>
          return 1;
 80109ba:	2301      	movs	r3, #1
 80109bc:	e00f      	b.n	80109de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d009      	beq.n	80109d8 <udp_input_local_match+0xa4>
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d005      	beq.n	80109d8 <udp_input_local_match+0xa4>
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	4b09      	ldr	r3, [pc, #36]	; (80109f8 <udp_input_local_match+0xc4>)
 80109d2:	695b      	ldr	r3, [r3, #20]
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d101      	bne.n	80109dc <udp_input_local_match+0xa8>
        return 1;
 80109d8:	2301      	movs	r3, #1
 80109da:	e000      	b.n	80109de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	08016e68 	.word	0x08016e68
 80109ec:	08016e98 	.word	0x08016e98
 80109f0:	08016ebc 	.word	0x08016ebc
 80109f4:	08016ee4 	.word	0x08016ee4
 80109f8:	20004844 	.word	0x20004844

080109fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80109fc:	b590      	push	{r4, r7, lr}
 80109fe:	b08d      	sub	sp, #52	; 0x34
 8010a00:	af02      	add	r7, sp, #8
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010a06:	2300      	movs	r3, #0
 8010a08:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d105      	bne.n	8010a1c <udp_input+0x20>
 8010a10:	4b7c      	ldr	r3, [pc, #496]	; (8010c04 <udp_input+0x208>)
 8010a12:	22cf      	movs	r2, #207	; 0xcf
 8010a14:	497c      	ldr	r1, [pc, #496]	; (8010c08 <udp_input+0x20c>)
 8010a16:	487d      	ldr	r0, [pc, #500]	; (8010c0c <udp_input+0x210>)
 8010a18:	f002 ff36 	bl	8013888 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d105      	bne.n	8010a2e <udp_input+0x32>
 8010a22:	4b78      	ldr	r3, [pc, #480]	; (8010c04 <udp_input+0x208>)
 8010a24:	22d0      	movs	r2, #208	; 0xd0
 8010a26:	497a      	ldr	r1, [pc, #488]	; (8010c10 <udp_input+0x214>)
 8010a28:	4878      	ldr	r0, [pc, #480]	; (8010c0c <udp_input+0x210>)
 8010a2a:	f002 ff2d 	bl	8013888 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	895b      	ldrh	r3, [r3, #10]
 8010a32:	2b07      	cmp	r3, #7
 8010a34:	d803      	bhi.n	8010a3e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7f9 fa68 	bl	8009f0c <pbuf_free>
    goto end;
 8010a3c:	e0de      	b.n	8010bfc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	685b      	ldr	r3, [r3, #4]
 8010a42:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010a44:	4b73      	ldr	r3, [pc, #460]	; (8010c14 <udp_input+0x218>)
 8010a46:	695b      	ldr	r3, [r3, #20]
 8010a48:	4a72      	ldr	r2, [pc, #456]	; (8010c14 <udp_input+0x218>)
 8010a4a:	6812      	ldr	r2, [r2, #0]
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f001 ff68 	bl	8012924 <ip4_addr_isbroadcast_u32>
 8010a54:	4603      	mov	r3, r0
 8010a56:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7f7 ffa0 	bl	80089a4 <lwip_htons>
 8010a64:	4603      	mov	r3, r0
 8010a66:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	885b      	ldrh	r3, [r3, #2]
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7f7 ff98 	bl	80089a4 <lwip_htons>
 8010a74:	4603      	mov	r3, r0
 8010a76:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010a80:	2300      	movs	r3, #0
 8010a82:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a84:	4b64      	ldr	r3, [pc, #400]	; (8010c18 <udp_input+0x21c>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	627b      	str	r3, [r7, #36]	; 0x24
 8010a8a:	e054      	b.n	8010b36 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8e:	8a5b      	ldrh	r3, [r3, #18]
 8010a90:	89fa      	ldrh	r2, [r7, #14]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d14a      	bne.n	8010b2c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010a96:	7cfb      	ldrb	r3, [r7, #19]
 8010a98:	461a      	mov	r2, r3
 8010a9a:	6839      	ldr	r1, [r7, #0]
 8010a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a9e:	f7ff ff49 	bl	8010934 <udp_input_local_match>
 8010aa2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d041      	beq.n	8010b2c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aaa:	7c1b      	ldrb	r3, [r3, #16]
 8010aac:	f003 0304 	and.w	r3, r3, #4
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d11d      	bne.n	8010af0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010ab4:	69fb      	ldr	r3, [r7, #28]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d102      	bne.n	8010ac0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abc:	61fb      	str	r3, [r7, #28]
 8010abe:	e017      	b.n	8010af0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010ac0:	7cfb      	ldrb	r3, [r7, #19]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d014      	beq.n	8010af0 <udp_input+0xf4>
 8010ac6:	4b53      	ldr	r3, [pc, #332]	; (8010c14 <udp_input+0x218>)
 8010ac8:	695b      	ldr	r3, [r3, #20]
 8010aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ace:	d10f      	bne.n	8010af0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010ad0:	69fb      	ldr	r3, [r7, #28]
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	3304      	adds	r3, #4
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d008      	beq.n	8010af0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	3304      	adds	r3, #4
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d101      	bne.n	8010af0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af2:	8a9b      	ldrh	r3, [r3, #20]
 8010af4:	8a3a      	ldrh	r2, [r7, #16]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d118      	bne.n	8010b2c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d005      	beq.n	8010b0e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b04:	685a      	ldr	r2, [r3, #4]
 8010b06:	4b43      	ldr	r3, [pc, #268]	; (8010c14 <udp_input+0x218>)
 8010b08:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d10e      	bne.n	8010b2c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010b0e:	6a3b      	ldr	r3, [r7, #32]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d014      	beq.n	8010b3e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b16:	68da      	ldr	r2, [r3, #12]
 8010b18:	6a3b      	ldr	r3, [r7, #32]
 8010b1a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010b1c:	4b3e      	ldr	r3, [pc, #248]	; (8010c18 <udp_input+0x21c>)
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b22:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010b24:	4a3c      	ldr	r2, [pc, #240]	; (8010c18 <udp_input+0x21c>)
 8010b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b28:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010b2a:	e008      	b.n	8010b3e <udp_input+0x142>
      }
    }

    prev = pcb;
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	627b      	str	r3, [r7, #36]	; 0x24
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d1a7      	bne.n	8010a8c <udp_input+0x90>
 8010b3c:	e000      	b.n	8010b40 <udp_input+0x144>
        break;
 8010b3e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d101      	bne.n	8010b4a <udp_input+0x14e>
    pcb = uncon_pcb;
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d002      	beq.n	8010b56 <udp_input+0x15a>
    for_us = 1;
 8010b50:	2301      	movs	r3, #1
 8010b52:	76fb      	strb	r3, [r7, #27]
 8010b54:	e00a      	b.n	8010b6c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	3304      	adds	r3, #4
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	4b2d      	ldr	r3, [pc, #180]	; (8010c14 <udp_input+0x218>)
 8010b5e:	695b      	ldr	r3, [r3, #20]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	bf0c      	ite	eq
 8010b64:	2301      	moveq	r3, #1
 8010b66:	2300      	movne	r3, #0
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010b6c:	7efb      	ldrb	r3, [r7, #27]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d041      	beq.n	8010bf6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010b72:	2108      	movs	r1, #8
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f7f9 f943 	bl	8009e00 <pbuf_remove_header>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d00a      	beq.n	8010b96 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010b80:	4b20      	ldr	r3, [pc, #128]	; (8010c04 <udp_input+0x208>)
 8010b82:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010b86:	4925      	ldr	r1, [pc, #148]	; (8010c1c <udp_input+0x220>)
 8010b88:	4820      	ldr	r0, [pc, #128]	; (8010c0c <udp_input+0x210>)
 8010b8a:	f002 fe7d 	bl	8013888 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f7f9 f9bc 	bl	8009f0c <pbuf_free>
      goto end;
 8010b94:	e032      	b.n	8010bfc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d012      	beq.n	8010bc2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9e:	699b      	ldr	r3, [r3, #24]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d00a      	beq.n	8010bba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	699c      	ldr	r4, [r3, #24]
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010baa:	69d8      	ldr	r0, [r3, #28]
 8010bac:	8a3b      	ldrh	r3, [r7, #16]
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	4b1b      	ldr	r3, [pc, #108]	; (8010c20 <udp_input+0x224>)
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bb6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010bb8:	e021      	b.n	8010bfe <udp_input+0x202>
        pbuf_free(p);
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f7f9 f9a6 	bl	8009f0c <pbuf_free>
        goto end;
 8010bc0:	e01c      	b.n	8010bfc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010bc2:	7cfb      	ldrb	r3, [r7, #19]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d112      	bne.n	8010bee <udp_input+0x1f2>
 8010bc8:	4b12      	ldr	r3, [pc, #72]	; (8010c14 <udp_input+0x218>)
 8010bca:	695b      	ldr	r3, [r3, #20]
 8010bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bd0:	2be0      	cmp	r3, #224	; 0xe0
 8010bd2:	d00c      	beq.n	8010bee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010bd4:	4b0f      	ldr	r3, [pc, #60]	; (8010c14 <udp_input+0x218>)
 8010bd6:	899b      	ldrh	r3, [r3, #12]
 8010bd8:	3308      	adds	r3, #8
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	b21b      	sxth	r3, r3
 8010bde:	4619      	mov	r1, r3
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f7f9 f980 	bl	8009ee6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010be6:	2103      	movs	r1, #3
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f001 fb7b 	bl	80122e4 <icmp_dest_unreach>
      pbuf_free(p);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f7f9 f98c 	bl	8009f0c <pbuf_free>
  return;
 8010bf4:	e003      	b.n	8010bfe <udp_input+0x202>
    pbuf_free(p);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7f9 f988 	bl	8009f0c <pbuf_free>
  return;
 8010bfc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010bfe:	372c      	adds	r7, #44	; 0x2c
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd90      	pop	{r4, r7, pc}
 8010c04:	08016e68 	.word	0x08016e68
 8010c08:	08016f0c 	.word	0x08016f0c
 8010c0c:	08016ebc 	.word	0x08016ebc
 8010c10:	08016f24 	.word	0x08016f24
 8010c14:	20004844 	.word	0x20004844
 8010c18:	20009f60 	.word	0x20009f60
 8010c1c:	08016f40 	.word	0x08016f40
 8010c20:	20004854 	.word	0x20004854

08010c24 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b088      	sub	sp, #32
 8010c28:	af02      	add	r7, sp, #8
 8010c2a:	60f8      	str	r0, [r7, #12]
 8010c2c:	60b9      	str	r1, [r7, #8]
 8010c2e:	607a      	str	r2, [r7, #4]
 8010c30:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d109      	bne.n	8010c4c <udp_sendto+0x28>
 8010c38:	4b23      	ldr	r3, [pc, #140]	; (8010cc8 <udp_sendto+0xa4>)
 8010c3a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010c3e:	4923      	ldr	r1, [pc, #140]	; (8010ccc <udp_sendto+0xa8>)
 8010c40:	4823      	ldr	r0, [pc, #140]	; (8010cd0 <udp_sendto+0xac>)
 8010c42:	f002 fe21 	bl	8013888 <iprintf>
 8010c46:	f06f 030f 	mvn.w	r3, #15
 8010c4a:	e038      	b.n	8010cbe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d109      	bne.n	8010c66 <udp_sendto+0x42>
 8010c52:	4b1d      	ldr	r3, [pc, #116]	; (8010cc8 <udp_sendto+0xa4>)
 8010c54:	f240 2219 	movw	r2, #537	; 0x219
 8010c58:	491e      	ldr	r1, [pc, #120]	; (8010cd4 <udp_sendto+0xb0>)
 8010c5a:	481d      	ldr	r0, [pc, #116]	; (8010cd0 <udp_sendto+0xac>)
 8010c5c:	f002 fe14 	bl	8013888 <iprintf>
 8010c60:	f06f 030f 	mvn.w	r3, #15
 8010c64:	e02b      	b.n	8010cbe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d109      	bne.n	8010c80 <udp_sendto+0x5c>
 8010c6c:	4b16      	ldr	r3, [pc, #88]	; (8010cc8 <udp_sendto+0xa4>)
 8010c6e:	f240 221a 	movw	r2, #538	; 0x21a
 8010c72:	4919      	ldr	r1, [pc, #100]	; (8010cd8 <udp_sendto+0xb4>)
 8010c74:	4816      	ldr	r0, [pc, #88]	; (8010cd0 <udp_sendto+0xac>)
 8010c76:	f002 fe07 	bl	8013888 <iprintf>
 8010c7a:	f06f 030f 	mvn.w	r3, #15
 8010c7e:	e01e      	b.n	8010cbe <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	7a1b      	ldrb	r3, [r3, #8]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d006      	beq.n	8010c96 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	7a1b      	ldrb	r3, [r3, #8]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f8 fddd 	bl	800984c <netif_get_by_index>
 8010c92:	6178      	str	r0, [r7, #20]
 8010c94:	e003      	b.n	8010c9e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f001 fbae 	bl	80123f8 <ip4_route>
 8010c9c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d102      	bne.n	8010caa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010ca4:	f06f 0303 	mvn.w	r3, #3
 8010ca8:	e009      	b.n	8010cbe <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010caa:	887a      	ldrh	r2, [r7, #2]
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	9300      	str	r3, [sp, #0]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	68b9      	ldr	r1, [r7, #8]
 8010cb6:	68f8      	ldr	r0, [r7, #12]
 8010cb8:	f000 f810 	bl	8010cdc <udp_sendto_if>
 8010cbc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3718      	adds	r7, #24
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	08016e68 	.word	0x08016e68
 8010ccc:	08016f8c 	.word	0x08016f8c
 8010cd0:	08016ebc 	.word	0x08016ebc
 8010cd4:	08016fa4 	.word	0x08016fa4
 8010cd8:	08016fc0 	.word	0x08016fc0

08010cdc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b088      	sub	sp, #32
 8010ce0:	af02      	add	r7, sp, #8
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
 8010ce8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d109      	bne.n	8010d04 <udp_sendto_if+0x28>
 8010cf0:	4b2e      	ldr	r3, [pc, #184]	; (8010dac <udp_sendto_if+0xd0>)
 8010cf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010cf6:	492e      	ldr	r1, [pc, #184]	; (8010db0 <udp_sendto_if+0xd4>)
 8010cf8:	482e      	ldr	r0, [pc, #184]	; (8010db4 <udp_sendto_if+0xd8>)
 8010cfa:	f002 fdc5 	bl	8013888 <iprintf>
 8010cfe:	f06f 030f 	mvn.w	r3, #15
 8010d02:	e04f      	b.n	8010da4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d109      	bne.n	8010d1e <udp_sendto_if+0x42>
 8010d0a:	4b28      	ldr	r3, [pc, #160]	; (8010dac <udp_sendto_if+0xd0>)
 8010d0c:	f240 2281 	movw	r2, #641	; 0x281
 8010d10:	4929      	ldr	r1, [pc, #164]	; (8010db8 <udp_sendto_if+0xdc>)
 8010d12:	4828      	ldr	r0, [pc, #160]	; (8010db4 <udp_sendto_if+0xd8>)
 8010d14:	f002 fdb8 	bl	8013888 <iprintf>
 8010d18:	f06f 030f 	mvn.w	r3, #15
 8010d1c:	e042      	b.n	8010da4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d109      	bne.n	8010d38 <udp_sendto_if+0x5c>
 8010d24:	4b21      	ldr	r3, [pc, #132]	; (8010dac <udp_sendto_if+0xd0>)
 8010d26:	f240 2282 	movw	r2, #642	; 0x282
 8010d2a:	4924      	ldr	r1, [pc, #144]	; (8010dbc <udp_sendto_if+0xe0>)
 8010d2c:	4821      	ldr	r0, [pc, #132]	; (8010db4 <udp_sendto_if+0xd8>)
 8010d2e:	f002 fdab 	bl	8013888 <iprintf>
 8010d32:	f06f 030f 	mvn.w	r3, #15
 8010d36:	e035      	b.n	8010da4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010d38:	6a3b      	ldr	r3, [r7, #32]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d109      	bne.n	8010d52 <udp_sendto_if+0x76>
 8010d3e:	4b1b      	ldr	r3, [pc, #108]	; (8010dac <udp_sendto_if+0xd0>)
 8010d40:	f240 2283 	movw	r2, #643	; 0x283
 8010d44:	491e      	ldr	r1, [pc, #120]	; (8010dc0 <udp_sendto_if+0xe4>)
 8010d46:	481b      	ldr	r0, [pc, #108]	; (8010db4 <udp_sendto_if+0xd8>)
 8010d48:	f002 fd9e 	bl	8013888 <iprintf>
 8010d4c:	f06f 030f 	mvn.w	r3, #15
 8010d50:	e028      	b.n	8010da4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d009      	beq.n	8010d6c <udp_sendto_if+0x90>
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d005      	beq.n	8010d6c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010d68:	2be0      	cmp	r3, #224	; 0xe0
 8010d6a:	d103      	bne.n	8010d74 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010d6c:	6a3b      	ldr	r3, [r7, #32]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	617b      	str	r3, [r7, #20]
 8010d72:	e00b      	b.n	8010d8c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	6a3b      	ldr	r3, [r7, #32]
 8010d7a:	3304      	adds	r3, #4
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d002      	beq.n	8010d88 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010d82:	f06f 0303 	mvn.w	r3, #3
 8010d86:	e00d      	b.n	8010da4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010d8c:	887a      	ldrh	r2, [r7, #2]
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	9301      	str	r3, [sp, #4]
 8010d92:	6a3b      	ldr	r3, [r7, #32]
 8010d94:	9300      	str	r3, [sp, #0]
 8010d96:	4613      	mov	r3, r2
 8010d98:	687a      	ldr	r2, [r7, #4]
 8010d9a:	68b9      	ldr	r1, [r7, #8]
 8010d9c:	68f8      	ldr	r0, [r7, #12]
 8010d9e:	f000 f811 	bl	8010dc4 <udp_sendto_if_src>
 8010da2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3718      	adds	r7, #24
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	08016e68 	.word	0x08016e68
 8010db0:	08016fdc 	.word	0x08016fdc
 8010db4:	08016ebc 	.word	0x08016ebc
 8010db8:	08016ff8 	.word	0x08016ff8
 8010dbc:	08017014 	.word	0x08017014
 8010dc0:	08017034 	.word	0x08017034

08010dc4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b08c      	sub	sp, #48	; 0x30
 8010dc8:	af04      	add	r7, sp, #16
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	607a      	str	r2, [r7, #4]
 8010dd0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d109      	bne.n	8010dec <udp_sendto_if_src+0x28>
 8010dd8:	4b65      	ldr	r3, [pc, #404]	; (8010f70 <udp_sendto_if_src+0x1ac>)
 8010dda:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010dde:	4965      	ldr	r1, [pc, #404]	; (8010f74 <udp_sendto_if_src+0x1b0>)
 8010de0:	4865      	ldr	r0, [pc, #404]	; (8010f78 <udp_sendto_if_src+0x1b4>)
 8010de2:	f002 fd51 	bl	8013888 <iprintf>
 8010de6:	f06f 030f 	mvn.w	r3, #15
 8010dea:	e0bc      	b.n	8010f66 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d109      	bne.n	8010e06 <udp_sendto_if_src+0x42>
 8010df2:	4b5f      	ldr	r3, [pc, #380]	; (8010f70 <udp_sendto_if_src+0x1ac>)
 8010df4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010df8:	4960      	ldr	r1, [pc, #384]	; (8010f7c <udp_sendto_if_src+0x1b8>)
 8010dfa:	485f      	ldr	r0, [pc, #380]	; (8010f78 <udp_sendto_if_src+0x1b4>)
 8010dfc:	f002 fd44 	bl	8013888 <iprintf>
 8010e00:	f06f 030f 	mvn.w	r3, #15
 8010e04:	e0af      	b.n	8010f66 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d109      	bne.n	8010e20 <udp_sendto_if_src+0x5c>
 8010e0c:	4b58      	ldr	r3, [pc, #352]	; (8010f70 <udp_sendto_if_src+0x1ac>)
 8010e0e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8010e12:	495b      	ldr	r1, [pc, #364]	; (8010f80 <udp_sendto_if_src+0x1bc>)
 8010e14:	4858      	ldr	r0, [pc, #352]	; (8010f78 <udp_sendto_if_src+0x1b4>)
 8010e16:	f002 fd37 	bl	8013888 <iprintf>
 8010e1a:	f06f 030f 	mvn.w	r3, #15
 8010e1e:	e0a2      	b.n	8010f66 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d109      	bne.n	8010e3a <udp_sendto_if_src+0x76>
 8010e26:	4b52      	ldr	r3, [pc, #328]	; (8010f70 <udp_sendto_if_src+0x1ac>)
 8010e28:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010e2c:	4955      	ldr	r1, [pc, #340]	; (8010f84 <udp_sendto_if_src+0x1c0>)
 8010e2e:	4852      	ldr	r0, [pc, #328]	; (8010f78 <udp_sendto_if_src+0x1b4>)
 8010e30:	f002 fd2a 	bl	8013888 <iprintf>
 8010e34:	f06f 030f 	mvn.w	r3, #15
 8010e38:	e095      	b.n	8010f66 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d109      	bne.n	8010e54 <udp_sendto_if_src+0x90>
 8010e40:	4b4b      	ldr	r3, [pc, #300]	; (8010f70 <udp_sendto_if_src+0x1ac>)
 8010e42:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010e46:	4950      	ldr	r1, [pc, #320]	; (8010f88 <udp_sendto_if_src+0x1c4>)
 8010e48:	484b      	ldr	r0, [pc, #300]	; (8010f78 <udp_sendto_if_src+0x1b4>)
 8010e4a:	f002 fd1d 	bl	8013888 <iprintf>
 8010e4e:	f06f 030f 	mvn.w	r3, #15
 8010e52:	e088      	b.n	8010f66 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	8a5b      	ldrh	r3, [r3, #18]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d10f      	bne.n	8010e7c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010e5c:	68f9      	ldr	r1, [r7, #12]
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	8a5b      	ldrh	r3, [r3, #18]
 8010e62:	461a      	mov	r2, r3
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f000 f893 	bl	8010f90 <udp_bind>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010e6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d002      	beq.n	8010e7c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010e76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010e7a:	e074      	b.n	8010f66 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	891b      	ldrh	r3, [r3, #8]
 8010e80:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d902      	bls.n	8010e8e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010e88:	f04f 33ff 	mov.w	r3, #4294967295
 8010e8c:	e06b      	b.n	8010f66 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010e8e:	2108      	movs	r1, #8
 8010e90:	68b8      	ldr	r0, [r7, #8]
 8010e92:	f7f8 ffa5 	bl	8009de0 <pbuf_add_header>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d015      	beq.n	8010ec8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010e9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ea0:	2108      	movs	r1, #8
 8010ea2:	2022      	movs	r0, #34	; 0x22
 8010ea4:	f7f8 fd4e 	bl	8009944 <pbuf_alloc>
 8010ea8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d102      	bne.n	8010eb6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb4:	e057      	b.n	8010f66 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	891b      	ldrh	r3, [r3, #8]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d006      	beq.n	8010ecc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010ebe:	68b9      	ldr	r1, [r7, #8]
 8010ec0:	69f8      	ldr	r0, [r7, #28]
 8010ec2:	f7f9 f93b 	bl	800a13c <pbuf_chain>
 8010ec6:	e001      	b.n	8010ecc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	895b      	ldrh	r3, [r3, #10]
 8010ed0:	2b07      	cmp	r3, #7
 8010ed2:	d806      	bhi.n	8010ee2 <udp_sendto_if_src+0x11e>
 8010ed4:	4b26      	ldr	r3, [pc, #152]	; (8010f70 <udp_sendto_if_src+0x1ac>)
 8010ed6:	f240 320d 	movw	r2, #781	; 0x30d
 8010eda:	492c      	ldr	r1, [pc, #176]	; (8010f8c <udp_sendto_if_src+0x1c8>)
 8010edc:	4826      	ldr	r0, [pc, #152]	; (8010f78 <udp_sendto_if_src+0x1b4>)
 8010ede:	f002 fcd3 	bl	8013888 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	8a5b      	ldrh	r3, [r3, #18]
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7f7 fd59 	bl	80089a4 <lwip_htons>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010efa:	887b      	ldrh	r3, [r7, #2]
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7f7 fd51 	bl	80089a4 <lwip_htons>
 8010f02:	4603      	mov	r3, r0
 8010f04:	461a      	mov	r2, r3
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	719a      	strb	r2, [r3, #6]
 8010f10:	2200      	movs	r2, #0
 8010f12:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	891b      	ldrh	r3, [r3, #8]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7f7 fd43 	bl	80089a4 <lwip_htons>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	461a      	mov	r2, r3
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010f26:	2311      	movs	r3, #17
 8010f28:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	7adb      	ldrb	r3, [r3, #11]
 8010f2e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	7a9b      	ldrb	r3, [r3, #10]
 8010f34:	7cb9      	ldrb	r1, [r7, #18]
 8010f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f38:	9202      	str	r2, [sp, #8]
 8010f3a:	7cfa      	ldrb	r2, [r7, #19]
 8010f3c:	9201      	str	r2, [sp, #4]
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	460b      	mov	r3, r1
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f46:	69f8      	ldr	r0, [r7, #28]
 8010f48:	f001 fc3e 	bl	80127c8 <ip4_output_if_src>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010f50:	69fa      	ldr	r2, [r7, #28]
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d004      	beq.n	8010f62 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010f58:	69f8      	ldr	r0, [r7, #28]
 8010f5a:	f7f8 ffd7 	bl	8009f0c <pbuf_free>
    q = NULL;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010f62:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3720      	adds	r7, #32
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	08016e68 	.word	0x08016e68
 8010f74:	08017054 	.word	0x08017054
 8010f78:	08016ebc 	.word	0x08016ebc
 8010f7c:	08017074 	.word	0x08017074
 8010f80:	08017094 	.word	0x08017094
 8010f84:	080170b8 	.word	0x080170b8
 8010f88:	080170dc 	.word	0x080170dc
 8010f8c:	08017100 	.word	0x08017100

08010f90 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b086      	sub	sp, #24
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	60f8      	str	r0, [r7, #12]
 8010f98:	60b9      	str	r1, [r7, #8]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d101      	bne.n	8010fa8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010fa4:	4b39      	ldr	r3, [pc, #228]	; (801108c <udp_bind+0xfc>)
 8010fa6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d109      	bne.n	8010fc2 <udp_bind+0x32>
 8010fae:	4b38      	ldr	r3, [pc, #224]	; (8011090 <udp_bind+0x100>)
 8010fb0:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010fb4:	4937      	ldr	r1, [pc, #220]	; (8011094 <udp_bind+0x104>)
 8010fb6:	4838      	ldr	r0, [pc, #224]	; (8011098 <udp_bind+0x108>)
 8010fb8:	f002 fc66 	bl	8013888 <iprintf>
 8010fbc:	f06f 030f 	mvn.w	r3, #15
 8010fc0:	e060      	b.n	8011084 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010fc6:	4b35      	ldr	r3, [pc, #212]	; (801109c <udp_bind+0x10c>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	617b      	str	r3, [r7, #20]
 8010fcc:	e009      	b.n	8010fe2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010fce:	68fa      	ldr	r2, [r7, #12]
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d102      	bne.n	8010fdc <udp_bind+0x4c>
      rebind = 1;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8010fda:	e005      	b.n	8010fe8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	617b      	str	r3, [r7, #20]
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d1f2      	bne.n	8010fce <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010fe8:	88fb      	ldrh	r3, [r7, #6]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d109      	bne.n	8011002 <udp_bind+0x72>
    port = udp_new_port();
 8010fee:	f7ff fc69 	bl	80108c4 <udp_new_port>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010ff6:	88fb      	ldrh	r3, [r7, #6]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d12c      	bne.n	8011056 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010ffc:	f06f 0307 	mvn.w	r3, #7
 8011000:	e040      	b.n	8011084 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011002:	4b26      	ldr	r3, [pc, #152]	; (801109c <udp_bind+0x10c>)
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	617b      	str	r3, [r7, #20]
 8011008:	e022      	b.n	8011050 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801100a:	68fa      	ldr	r2, [r7, #12]
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	429a      	cmp	r2, r3
 8011010:	d01b      	beq.n	801104a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	8a5b      	ldrh	r3, [r3, #18]
 8011016:	88fa      	ldrh	r2, [r7, #6]
 8011018:	429a      	cmp	r2, r3
 801101a:	d116      	bne.n	801104a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011024:	429a      	cmp	r2, r3
 8011026:	d00d      	beq.n	8011044 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d00a      	beq.n	8011044 <udp_bind+0xb4>
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d006      	beq.n	8011044 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011036:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011038:	2b00      	cmp	r3, #0
 801103a:	d003      	beq.n	8011044 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d102      	bne.n	801104a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011044:	f06f 0307 	mvn.w	r3, #7
 8011048:	e01c      	b.n	8011084 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	617b      	str	r3, [r7, #20]
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d1d9      	bne.n	801100a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d002      	beq.n	8011062 <udp_bind+0xd2>
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	e000      	b.n	8011064 <udp_bind+0xd4>
 8011062:	2300      	movs	r3, #0
 8011064:	68fa      	ldr	r2, [r7, #12]
 8011066:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	88fa      	ldrh	r2, [r7, #6]
 801106c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801106e:	7cfb      	ldrb	r3, [r7, #19]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d106      	bne.n	8011082 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011074:	4b09      	ldr	r3, [pc, #36]	; (801109c <udp_bind+0x10c>)
 8011076:	681a      	ldr	r2, [r3, #0]
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801107c:	4a07      	ldr	r2, [pc, #28]	; (801109c <udp_bind+0x10c>)
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011082:	2300      	movs	r3, #0
}
 8011084:	4618      	mov	r0, r3
 8011086:	3718      	adds	r7, #24
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	08017a70 	.word	0x08017a70
 8011090:	08016e68 	.word	0x08016e68
 8011094:	08017130 	.word	0x08017130
 8011098:	08016ebc 	.word	0x08016ebc
 801109c:	20009f60 	.word	0x20009f60

080110a0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d107      	bne.n	80110be <udp_disconnect+0x1e>
 80110ae:	4b0d      	ldr	r3, [pc, #52]	; (80110e4 <udp_disconnect+0x44>)
 80110b0:	f240 426a 	movw	r2, #1130	; 0x46a
 80110b4:	490c      	ldr	r1, [pc, #48]	; (80110e8 <udp_disconnect+0x48>)
 80110b6:	480d      	ldr	r0, [pc, #52]	; (80110ec <udp_disconnect+0x4c>)
 80110b8:	f002 fbe6 	bl	8013888 <iprintf>
 80110bc:	e00f      	b.n	80110de <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2200      	movs	r2, #0
 80110c8:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	7c1b      	ldrb	r3, [r3, #16]
 80110d4:	f023 0304 	bic.w	r3, r3, #4
 80110d8:	b2da      	uxtb	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	741a      	strb	r2, [r3, #16]
}
 80110de:	3708      	adds	r7, #8
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	08016e68 	.word	0x08016e68
 80110e8:	08017180 	.word	0x08017180
 80110ec:	08016ebc 	.word	0x08016ebc

080110f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d107      	bne.n	8011112 <udp_recv+0x22>
 8011102:	4b08      	ldr	r3, [pc, #32]	; (8011124 <udp_recv+0x34>)
 8011104:	f240 428a 	movw	r2, #1162	; 0x48a
 8011108:	4907      	ldr	r1, [pc, #28]	; (8011128 <udp_recv+0x38>)
 801110a:	4808      	ldr	r0, [pc, #32]	; (801112c <udp_recv+0x3c>)
 801110c:	f002 fbbc 	bl	8013888 <iprintf>
 8011110:	e005      	b.n	801111e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	68ba      	ldr	r2, [r7, #8]
 8011116:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	687a      	ldr	r2, [r7, #4]
 801111c:	61da      	str	r2, [r3, #28]
}
 801111e:	3710      	adds	r7, #16
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	08016e68 	.word	0x08016e68
 8011128:	0801719c 	.word	0x0801719c
 801112c:	08016ebc 	.word	0x08016ebc

08011130 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d107      	bne.n	801114e <udp_remove+0x1e>
 801113e:	4b19      	ldr	r3, [pc, #100]	; (80111a4 <udp_remove+0x74>)
 8011140:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011144:	4918      	ldr	r1, [pc, #96]	; (80111a8 <udp_remove+0x78>)
 8011146:	4819      	ldr	r0, [pc, #100]	; (80111ac <udp_remove+0x7c>)
 8011148:	f002 fb9e 	bl	8013888 <iprintf>
 801114c:	e026      	b.n	801119c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801114e:	4b18      	ldr	r3, [pc, #96]	; (80111b0 <udp_remove+0x80>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	429a      	cmp	r2, r3
 8011156:	d105      	bne.n	8011164 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011158:	4b15      	ldr	r3, [pc, #84]	; (80111b0 <udp_remove+0x80>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	4a14      	ldr	r2, [pc, #80]	; (80111b0 <udp_remove+0x80>)
 8011160:	6013      	str	r3, [r2, #0]
 8011162:	e017      	b.n	8011194 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011164:	4b12      	ldr	r3, [pc, #72]	; (80111b0 <udp_remove+0x80>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	60fb      	str	r3, [r7, #12]
 801116a:	e010      	b.n	801118e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d009      	beq.n	8011188 <udp_remove+0x58>
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	429a      	cmp	r2, r3
 801117c:	d104      	bne.n	8011188 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	68da      	ldr	r2, [r3, #12]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	60da      	str	r2, [r3, #12]
        break;
 8011186:	e005      	b.n	8011194 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	60fb      	str	r3, [r7, #12]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d1eb      	bne.n	801116c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011194:	6879      	ldr	r1, [r7, #4]
 8011196:	2000      	movs	r0, #0
 8011198:	f7f8 f8a6 	bl	80092e8 <memp_free>
}
 801119c:	3710      	adds	r7, #16
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	08016e68 	.word	0x08016e68
 80111a8:	080171b4 	.word	0x080171b4
 80111ac:	08016ebc 	.word	0x08016ebc
 80111b0:	20009f60 	.word	0x20009f60

080111b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80111ba:	2000      	movs	r0, #0
 80111bc:	f7f8 f848 	bl	8009250 <memp_malloc>
 80111c0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d007      	beq.n	80111d8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80111c8:	2220      	movs	r2, #32
 80111ca:	2100      	movs	r1, #0
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f002 fb53 	bl	8013878 <memset>
    pcb->ttl = UDP_TTL;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	22ff      	movs	r2, #255	; 0xff
 80111d6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80111d8:	687b      	ldr	r3, [r7, #4]
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
	...

080111e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b085      	sub	sp, #20
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d01e      	beq.n	8011232 <udp_netif_ip_addr_changed+0x4e>
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d01a      	beq.n	8011232 <udp_netif_ip_addr_changed+0x4e>
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d017      	beq.n	8011232 <udp_netif_ip_addr_changed+0x4e>
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d013      	beq.n	8011232 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801120a:	4b0d      	ldr	r3, [pc, #52]	; (8011240 <udp_netif_ip_addr_changed+0x5c>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	60fb      	str	r3, [r7, #12]
 8011210:	e00c      	b.n	801122c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	429a      	cmp	r2, r3
 801121c:	d103      	bne.n	8011226 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	60fb      	str	r3, [r7, #12]
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d1ef      	bne.n	8011212 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011232:	bf00      	nop
 8011234:	3714      	adds	r7, #20
 8011236:	46bd      	mov	sp, r7
 8011238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123c:	4770      	bx	lr
 801123e:	bf00      	nop
 8011240:	20009f60 	.word	0x20009f60

08011244 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801124c:	4915      	ldr	r1, [pc, #84]	; (80112a4 <etharp_free_entry+0x60>)
 801124e:	687a      	ldr	r2, [r7, #4]
 8011250:	4613      	mov	r3, r2
 8011252:	005b      	lsls	r3, r3, #1
 8011254:	4413      	add	r3, r2
 8011256:	00db      	lsls	r3, r3, #3
 8011258:	440b      	add	r3, r1
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d013      	beq.n	8011288 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011260:	4910      	ldr	r1, [pc, #64]	; (80112a4 <etharp_free_entry+0x60>)
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	4613      	mov	r3, r2
 8011266:	005b      	lsls	r3, r3, #1
 8011268:	4413      	add	r3, r2
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	440b      	add	r3, r1
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	4618      	mov	r0, r3
 8011272:	f7f8 fe4b 	bl	8009f0c <pbuf_free>
    arp_table[i].q = NULL;
 8011276:	490b      	ldr	r1, [pc, #44]	; (80112a4 <etharp_free_entry+0x60>)
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	4613      	mov	r3, r2
 801127c:	005b      	lsls	r3, r3, #1
 801127e:	4413      	add	r3, r2
 8011280:	00db      	lsls	r3, r3, #3
 8011282:	440b      	add	r3, r1
 8011284:	2200      	movs	r2, #0
 8011286:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011288:	4906      	ldr	r1, [pc, #24]	; (80112a4 <etharp_free_entry+0x60>)
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	4613      	mov	r3, r2
 801128e:	005b      	lsls	r3, r3, #1
 8011290:	4413      	add	r3, r2
 8011292:	00db      	lsls	r3, r3, #3
 8011294:	440b      	add	r3, r1
 8011296:	3314      	adds	r3, #20
 8011298:	2200      	movs	r2, #0
 801129a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801129c:	bf00      	nop
 801129e:	3708      	adds	r7, #8
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	200001c8 	.word	0x200001c8

080112a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80112ae:	2300      	movs	r3, #0
 80112b0:	607b      	str	r3, [r7, #4]
 80112b2:	e096      	b.n	80113e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80112b4:	494f      	ldr	r1, [pc, #316]	; (80113f4 <etharp_tmr+0x14c>)
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	4613      	mov	r3, r2
 80112ba:	005b      	lsls	r3, r3, #1
 80112bc:	4413      	add	r3, r2
 80112be:	00db      	lsls	r3, r3, #3
 80112c0:	440b      	add	r3, r1
 80112c2:	3314      	adds	r3, #20
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80112c8:	78fb      	ldrb	r3, [r7, #3]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f000 8086 	beq.w	80113dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80112d0:	4948      	ldr	r1, [pc, #288]	; (80113f4 <etharp_tmr+0x14c>)
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	4613      	mov	r3, r2
 80112d6:	005b      	lsls	r3, r3, #1
 80112d8:	4413      	add	r3, r2
 80112da:	00db      	lsls	r3, r3, #3
 80112dc:	440b      	add	r3, r1
 80112de:	3312      	adds	r3, #18
 80112e0:	881b      	ldrh	r3, [r3, #0]
 80112e2:	3301      	adds	r3, #1
 80112e4:	b298      	uxth	r0, r3
 80112e6:	4943      	ldr	r1, [pc, #268]	; (80113f4 <etharp_tmr+0x14c>)
 80112e8:	687a      	ldr	r2, [r7, #4]
 80112ea:	4613      	mov	r3, r2
 80112ec:	005b      	lsls	r3, r3, #1
 80112ee:	4413      	add	r3, r2
 80112f0:	00db      	lsls	r3, r3, #3
 80112f2:	440b      	add	r3, r1
 80112f4:	3312      	adds	r3, #18
 80112f6:	4602      	mov	r2, r0
 80112f8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80112fa:	493e      	ldr	r1, [pc, #248]	; (80113f4 <etharp_tmr+0x14c>)
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	4613      	mov	r3, r2
 8011300:	005b      	lsls	r3, r3, #1
 8011302:	4413      	add	r3, r2
 8011304:	00db      	lsls	r3, r3, #3
 8011306:	440b      	add	r3, r1
 8011308:	3312      	adds	r3, #18
 801130a:	881b      	ldrh	r3, [r3, #0]
 801130c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011310:	d215      	bcs.n	801133e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011312:	4938      	ldr	r1, [pc, #224]	; (80113f4 <etharp_tmr+0x14c>)
 8011314:	687a      	ldr	r2, [r7, #4]
 8011316:	4613      	mov	r3, r2
 8011318:	005b      	lsls	r3, r3, #1
 801131a:	4413      	add	r3, r2
 801131c:	00db      	lsls	r3, r3, #3
 801131e:	440b      	add	r3, r1
 8011320:	3314      	adds	r3, #20
 8011322:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011324:	2b01      	cmp	r3, #1
 8011326:	d10e      	bne.n	8011346 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011328:	4932      	ldr	r1, [pc, #200]	; (80113f4 <etharp_tmr+0x14c>)
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	4613      	mov	r3, r2
 801132e:	005b      	lsls	r3, r3, #1
 8011330:	4413      	add	r3, r2
 8011332:	00db      	lsls	r3, r3, #3
 8011334:	440b      	add	r3, r1
 8011336:	3312      	adds	r3, #18
 8011338:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801133a:	2b04      	cmp	r3, #4
 801133c:	d903      	bls.n	8011346 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f7ff ff80 	bl	8011244 <etharp_free_entry>
 8011344:	e04a      	b.n	80113dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011346:	492b      	ldr	r1, [pc, #172]	; (80113f4 <etharp_tmr+0x14c>)
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	4613      	mov	r3, r2
 801134c:	005b      	lsls	r3, r3, #1
 801134e:	4413      	add	r3, r2
 8011350:	00db      	lsls	r3, r3, #3
 8011352:	440b      	add	r3, r1
 8011354:	3314      	adds	r3, #20
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	2b03      	cmp	r3, #3
 801135a:	d10a      	bne.n	8011372 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801135c:	4925      	ldr	r1, [pc, #148]	; (80113f4 <etharp_tmr+0x14c>)
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	4613      	mov	r3, r2
 8011362:	005b      	lsls	r3, r3, #1
 8011364:	4413      	add	r3, r2
 8011366:	00db      	lsls	r3, r3, #3
 8011368:	440b      	add	r3, r1
 801136a:	3314      	adds	r3, #20
 801136c:	2204      	movs	r2, #4
 801136e:	701a      	strb	r2, [r3, #0]
 8011370:	e034      	b.n	80113dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011372:	4920      	ldr	r1, [pc, #128]	; (80113f4 <etharp_tmr+0x14c>)
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	4613      	mov	r3, r2
 8011378:	005b      	lsls	r3, r3, #1
 801137a:	4413      	add	r3, r2
 801137c:	00db      	lsls	r3, r3, #3
 801137e:	440b      	add	r3, r1
 8011380:	3314      	adds	r3, #20
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	2b04      	cmp	r3, #4
 8011386:	d10a      	bne.n	801139e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011388:	491a      	ldr	r1, [pc, #104]	; (80113f4 <etharp_tmr+0x14c>)
 801138a:	687a      	ldr	r2, [r7, #4]
 801138c:	4613      	mov	r3, r2
 801138e:	005b      	lsls	r3, r3, #1
 8011390:	4413      	add	r3, r2
 8011392:	00db      	lsls	r3, r3, #3
 8011394:	440b      	add	r3, r1
 8011396:	3314      	adds	r3, #20
 8011398:	2202      	movs	r2, #2
 801139a:	701a      	strb	r2, [r3, #0]
 801139c:	e01e      	b.n	80113dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801139e:	4915      	ldr	r1, [pc, #84]	; (80113f4 <etharp_tmr+0x14c>)
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	4613      	mov	r3, r2
 80113a4:	005b      	lsls	r3, r3, #1
 80113a6:	4413      	add	r3, r2
 80113a8:	00db      	lsls	r3, r3, #3
 80113aa:	440b      	add	r3, r1
 80113ac:	3314      	adds	r3, #20
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d113      	bne.n	80113dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80113b4:	490f      	ldr	r1, [pc, #60]	; (80113f4 <etharp_tmr+0x14c>)
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	4613      	mov	r3, r2
 80113ba:	005b      	lsls	r3, r3, #1
 80113bc:	4413      	add	r3, r2
 80113be:	00db      	lsls	r3, r3, #3
 80113c0:	440b      	add	r3, r1
 80113c2:	3308      	adds	r3, #8
 80113c4:	6818      	ldr	r0, [r3, #0]
 80113c6:	687a      	ldr	r2, [r7, #4]
 80113c8:	4613      	mov	r3, r2
 80113ca:	005b      	lsls	r3, r3, #1
 80113cc:	4413      	add	r3, r2
 80113ce:	00db      	lsls	r3, r3, #3
 80113d0:	4a08      	ldr	r2, [pc, #32]	; (80113f4 <etharp_tmr+0x14c>)
 80113d2:	4413      	add	r3, r2
 80113d4:	3304      	adds	r3, #4
 80113d6:	4619      	mov	r1, r3
 80113d8:	f000 fe6e 	bl	80120b8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	3301      	adds	r3, #1
 80113e0:	607b      	str	r3, [r7, #4]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2b09      	cmp	r3, #9
 80113e6:	f77f af65 	ble.w	80112b4 <etharp_tmr+0xc>
      }
    }
  }
}
 80113ea:	bf00      	nop
 80113ec:	bf00      	nop
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	200001c8 	.word	0x200001c8

080113f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b08a      	sub	sp, #40	; 0x28
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	60f8      	str	r0, [r7, #12]
 8011400:	460b      	mov	r3, r1
 8011402:	607a      	str	r2, [r7, #4]
 8011404:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011406:	230a      	movs	r3, #10
 8011408:	84fb      	strh	r3, [r7, #38]	; 0x26
 801140a:	230a      	movs	r3, #10
 801140c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801140e:	230a      	movs	r3, #10
 8011410:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011412:	2300      	movs	r3, #0
 8011414:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011416:	230a      	movs	r3, #10
 8011418:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801141a:	2300      	movs	r3, #0
 801141c:	83bb      	strh	r3, [r7, #28]
 801141e:	2300      	movs	r3, #0
 8011420:	837b      	strh	r3, [r7, #26]
 8011422:	2300      	movs	r3, #0
 8011424:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011426:	2300      	movs	r3, #0
 8011428:	843b      	strh	r3, [r7, #32]
 801142a:	e0ae      	b.n	801158a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801142c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011430:	49a6      	ldr	r1, [pc, #664]	; (80116cc <etharp_find_entry+0x2d4>)
 8011432:	4613      	mov	r3, r2
 8011434:	005b      	lsls	r3, r3, #1
 8011436:	4413      	add	r3, r2
 8011438:	00db      	lsls	r3, r3, #3
 801143a:	440b      	add	r3, r1
 801143c:	3314      	adds	r3, #20
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011442:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011446:	2b0a      	cmp	r3, #10
 8011448:	d105      	bne.n	8011456 <etharp_find_entry+0x5e>
 801144a:	7dfb      	ldrb	r3, [r7, #23]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011450:	8c3b      	ldrh	r3, [r7, #32]
 8011452:	847b      	strh	r3, [r7, #34]	; 0x22
 8011454:	e095      	b.n	8011582 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011456:	7dfb      	ldrb	r3, [r7, #23]
 8011458:	2b00      	cmp	r3, #0
 801145a:	f000 8092 	beq.w	8011582 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	2b01      	cmp	r3, #1
 8011462:	d009      	beq.n	8011478 <etharp_find_entry+0x80>
 8011464:	7dfb      	ldrb	r3, [r7, #23]
 8011466:	2b01      	cmp	r3, #1
 8011468:	d806      	bhi.n	8011478 <etharp_find_entry+0x80>
 801146a:	4b99      	ldr	r3, [pc, #612]	; (80116d0 <etharp_find_entry+0x2d8>)
 801146c:	f240 1223 	movw	r2, #291	; 0x123
 8011470:	4998      	ldr	r1, [pc, #608]	; (80116d4 <etharp_find_entry+0x2dc>)
 8011472:	4899      	ldr	r0, [pc, #612]	; (80116d8 <etharp_find_entry+0x2e0>)
 8011474:	f002 fa08 	bl	8013888 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d020      	beq.n	80114c0 <etharp_find_entry+0xc8>
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	6819      	ldr	r1, [r3, #0]
 8011482:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011486:	4891      	ldr	r0, [pc, #580]	; (80116cc <etharp_find_entry+0x2d4>)
 8011488:	4613      	mov	r3, r2
 801148a:	005b      	lsls	r3, r3, #1
 801148c:	4413      	add	r3, r2
 801148e:	00db      	lsls	r3, r3, #3
 8011490:	4403      	add	r3, r0
 8011492:	3304      	adds	r3, #4
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	4299      	cmp	r1, r3
 8011498:	d112      	bne.n	80114c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00c      	beq.n	80114ba <etharp_find_entry+0xc2>
 80114a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80114a4:	4989      	ldr	r1, [pc, #548]	; (80116cc <etharp_find_entry+0x2d4>)
 80114a6:	4613      	mov	r3, r2
 80114a8:	005b      	lsls	r3, r3, #1
 80114aa:	4413      	add	r3, r2
 80114ac:	00db      	lsls	r3, r3, #3
 80114ae:	440b      	add	r3, r1
 80114b0:	3308      	adds	r3, #8
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d102      	bne.n	80114c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80114ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80114be:	e100      	b.n	80116c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80114c0:	7dfb      	ldrb	r3, [r7, #23]
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d140      	bne.n	8011548 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80114c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80114ca:	4980      	ldr	r1, [pc, #512]	; (80116cc <etharp_find_entry+0x2d4>)
 80114cc:	4613      	mov	r3, r2
 80114ce:	005b      	lsls	r3, r3, #1
 80114d0:	4413      	add	r3, r2
 80114d2:	00db      	lsls	r3, r3, #3
 80114d4:	440b      	add	r3, r1
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d01a      	beq.n	8011512 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80114dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80114e0:	497a      	ldr	r1, [pc, #488]	; (80116cc <etharp_find_entry+0x2d4>)
 80114e2:	4613      	mov	r3, r2
 80114e4:	005b      	lsls	r3, r3, #1
 80114e6:	4413      	add	r3, r2
 80114e8:	00db      	lsls	r3, r3, #3
 80114ea:	440b      	add	r3, r1
 80114ec:	3312      	adds	r3, #18
 80114ee:	881b      	ldrh	r3, [r3, #0]
 80114f0:	8bba      	ldrh	r2, [r7, #28]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d845      	bhi.n	8011582 <etharp_find_entry+0x18a>
            old_queue = i;
 80114f6:	8c3b      	ldrh	r3, [r7, #32]
 80114f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80114fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80114fe:	4973      	ldr	r1, [pc, #460]	; (80116cc <etharp_find_entry+0x2d4>)
 8011500:	4613      	mov	r3, r2
 8011502:	005b      	lsls	r3, r3, #1
 8011504:	4413      	add	r3, r2
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	440b      	add	r3, r1
 801150a:	3312      	adds	r3, #18
 801150c:	881b      	ldrh	r3, [r3, #0]
 801150e:	83bb      	strh	r3, [r7, #28]
 8011510:	e037      	b.n	8011582 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011512:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011516:	496d      	ldr	r1, [pc, #436]	; (80116cc <etharp_find_entry+0x2d4>)
 8011518:	4613      	mov	r3, r2
 801151a:	005b      	lsls	r3, r3, #1
 801151c:	4413      	add	r3, r2
 801151e:	00db      	lsls	r3, r3, #3
 8011520:	440b      	add	r3, r1
 8011522:	3312      	adds	r3, #18
 8011524:	881b      	ldrh	r3, [r3, #0]
 8011526:	8b7a      	ldrh	r2, [r7, #26]
 8011528:	429a      	cmp	r2, r3
 801152a:	d82a      	bhi.n	8011582 <etharp_find_entry+0x18a>
            old_pending = i;
 801152c:	8c3b      	ldrh	r3, [r7, #32]
 801152e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011530:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011534:	4965      	ldr	r1, [pc, #404]	; (80116cc <etharp_find_entry+0x2d4>)
 8011536:	4613      	mov	r3, r2
 8011538:	005b      	lsls	r3, r3, #1
 801153a:	4413      	add	r3, r2
 801153c:	00db      	lsls	r3, r3, #3
 801153e:	440b      	add	r3, r1
 8011540:	3312      	adds	r3, #18
 8011542:	881b      	ldrh	r3, [r3, #0]
 8011544:	837b      	strh	r3, [r7, #26]
 8011546:	e01c      	b.n	8011582 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011548:	7dfb      	ldrb	r3, [r7, #23]
 801154a:	2b01      	cmp	r3, #1
 801154c:	d919      	bls.n	8011582 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801154e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011552:	495e      	ldr	r1, [pc, #376]	; (80116cc <etharp_find_entry+0x2d4>)
 8011554:	4613      	mov	r3, r2
 8011556:	005b      	lsls	r3, r3, #1
 8011558:	4413      	add	r3, r2
 801155a:	00db      	lsls	r3, r3, #3
 801155c:	440b      	add	r3, r1
 801155e:	3312      	adds	r3, #18
 8011560:	881b      	ldrh	r3, [r3, #0]
 8011562:	8b3a      	ldrh	r2, [r7, #24]
 8011564:	429a      	cmp	r2, r3
 8011566:	d80c      	bhi.n	8011582 <etharp_find_entry+0x18a>
            old_stable = i;
 8011568:	8c3b      	ldrh	r3, [r7, #32]
 801156a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801156c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011570:	4956      	ldr	r1, [pc, #344]	; (80116cc <etharp_find_entry+0x2d4>)
 8011572:	4613      	mov	r3, r2
 8011574:	005b      	lsls	r3, r3, #1
 8011576:	4413      	add	r3, r2
 8011578:	00db      	lsls	r3, r3, #3
 801157a:	440b      	add	r3, r1
 801157c:	3312      	adds	r3, #18
 801157e:	881b      	ldrh	r3, [r3, #0]
 8011580:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011582:	8c3b      	ldrh	r3, [r7, #32]
 8011584:	3301      	adds	r3, #1
 8011586:	b29b      	uxth	r3, r3
 8011588:	843b      	strh	r3, [r7, #32]
 801158a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801158e:	2b09      	cmp	r3, #9
 8011590:	f77f af4c 	ble.w	801142c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011594:	7afb      	ldrb	r3, [r7, #11]
 8011596:	f003 0302 	and.w	r3, r3, #2
 801159a:	2b00      	cmp	r3, #0
 801159c:	d108      	bne.n	80115b0 <etharp_find_entry+0x1b8>
 801159e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80115a2:	2b0a      	cmp	r3, #10
 80115a4:	d107      	bne.n	80115b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80115a6:	7afb      	ldrb	r3, [r7, #11]
 80115a8:	f003 0301 	and.w	r3, r3, #1
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d102      	bne.n	80115b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80115b0:	f04f 33ff 	mov.w	r3, #4294967295
 80115b4:	e085      	b.n	80116c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80115b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80115ba:	2b09      	cmp	r3, #9
 80115bc:	dc02      	bgt.n	80115c4 <etharp_find_entry+0x1cc>
    i = empty;
 80115be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80115c0:	843b      	strh	r3, [r7, #32]
 80115c2:	e039      	b.n	8011638 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80115c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80115c8:	2b09      	cmp	r3, #9
 80115ca:	dc14      	bgt.n	80115f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80115cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80115ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80115d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115d4:	493d      	ldr	r1, [pc, #244]	; (80116cc <etharp_find_entry+0x2d4>)
 80115d6:	4613      	mov	r3, r2
 80115d8:	005b      	lsls	r3, r3, #1
 80115da:	4413      	add	r3, r2
 80115dc:	00db      	lsls	r3, r3, #3
 80115de:	440b      	add	r3, r1
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d018      	beq.n	8011618 <etharp_find_entry+0x220>
 80115e6:	4b3a      	ldr	r3, [pc, #232]	; (80116d0 <etharp_find_entry+0x2d8>)
 80115e8:	f240 126d 	movw	r2, #365	; 0x16d
 80115ec:	493b      	ldr	r1, [pc, #236]	; (80116dc <etharp_find_entry+0x2e4>)
 80115ee:	483a      	ldr	r0, [pc, #232]	; (80116d8 <etharp_find_entry+0x2e0>)
 80115f0:	f002 f94a 	bl	8013888 <iprintf>
 80115f4:	e010      	b.n	8011618 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80115f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80115fa:	2b09      	cmp	r3, #9
 80115fc:	dc02      	bgt.n	8011604 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80115fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011600:	843b      	strh	r3, [r7, #32]
 8011602:	e009      	b.n	8011618 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011604:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011608:	2b09      	cmp	r3, #9
 801160a:	dc02      	bgt.n	8011612 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801160c:	8bfb      	ldrh	r3, [r7, #30]
 801160e:	843b      	strh	r3, [r7, #32]
 8011610:	e002      	b.n	8011618 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011612:	f04f 33ff 	mov.w	r3, #4294967295
 8011616:	e054      	b.n	80116c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011618:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801161c:	2b09      	cmp	r3, #9
 801161e:	dd06      	ble.n	801162e <etharp_find_entry+0x236>
 8011620:	4b2b      	ldr	r3, [pc, #172]	; (80116d0 <etharp_find_entry+0x2d8>)
 8011622:	f240 127f 	movw	r2, #383	; 0x17f
 8011626:	492e      	ldr	r1, [pc, #184]	; (80116e0 <etharp_find_entry+0x2e8>)
 8011628:	482b      	ldr	r0, [pc, #172]	; (80116d8 <etharp_find_entry+0x2e0>)
 801162a:	f002 f92d 	bl	8013888 <iprintf>
    etharp_free_entry(i);
 801162e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff fe06 	bl	8011244 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011638:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801163c:	2b09      	cmp	r3, #9
 801163e:	dd06      	ble.n	801164e <etharp_find_entry+0x256>
 8011640:	4b23      	ldr	r3, [pc, #140]	; (80116d0 <etharp_find_entry+0x2d8>)
 8011642:	f240 1283 	movw	r2, #387	; 0x183
 8011646:	4926      	ldr	r1, [pc, #152]	; (80116e0 <etharp_find_entry+0x2e8>)
 8011648:	4823      	ldr	r0, [pc, #140]	; (80116d8 <etharp_find_entry+0x2e0>)
 801164a:	f002 f91d 	bl	8013888 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801164e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011652:	491e      	ldr	r1, [pc, #120]	; (80116cc <etharp_find_entry+0x2d4>)
 8011654:	4613      	mov	r3, r2
 8011656:	005b      	lsls	r3, r3, #1
 8011658:	4413      	add	r3, r2
 801165a:	00db      	lsls	r3, r3, #3
 801165c:	440b      	add	r3, r1
 801165e:	3314      	adds	r3, #20
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d006      	beq.n	8011674 <etharp_find_entry+0x27c>
 8011666:	4b1a      	ldr	r3, [pc, #104]	; (80116d0 <etharp_find_entry+0x2d8>)
 8011668:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801166c:	491d      	ldr	r1, [pc, #116]	; (80116e4 <etharp_find_entry+0x2ec>)
 801166e:	481a      	ldr	r0, [pc, #104]	; (80116d8 <etharp_find_entry+0x2e0>)
 8011670:	f002 f90a 	bl	8013888 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00b      	beq.n	8011692 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801167a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	6819      	ldr	r1, [r3, #0]
 8011682:	4812      	ldr	r0, [pc, #72]	; (80116cc <etharp_find_entry+0x2d4>)
 8011684:	4613      	mov	r3, r2
 8011686:	005b      	lsls	r3, r3, #1
 8011688:	4413      	add	r3, r2
 801168a:	00db      	lsls	r3, r3, #3
 801168c:	4403      	add	r3, r0
 801168e:	3304      	adds	r3, #4
 8011690:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011692:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011696:	490d      	ldr	r1, [pc, #52]	; (80116cc <etharp_find_entry+0x2d4>)
 8011698:	4613      	mov	r3, r2
 801169a:	005b      	lsls	r3, r3, #1
 801169c:	4413      	add	r3, r2
 801169e:	00db      	lsls	r3, r3, #3
 80116a0:	440b      	add	r3, r1
 80116a2:	3312      	adds	r3, #18
 80116a4:	2200      	movs	r2, #0
 80116a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80116a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116ac:	4907      	ldr	r1, [pc, #28]	; (80116cc <etharp_find_entry+0x2d4>)
 80116ae:	4613      	mov	r3, r2
 80116b0:	005b      	lsls	r3, r3, #1
 80116b2:	4413      	add	r3, r2
 80116b4:	00db      	lsls	r3, r3, #3
 80116b6:	440b      	add	r3, r1
 80116b8:	3308      	adds	r3, #8
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80116be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3728      	adds	r7, #40	; 0x28
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	200001c8 	.word	0x200001c8
 80116d0:	080171cc 	.word	0x080171cc
 80116d4:	08017204 	.word	0x08017204
 80116d8:	08017244 	.word	0x08017244
 80116dc:	0801726c 	.word	0x0801726c
 80116e0:	08017284 	.word	0x08017284
 80116e4:	08017298 	.word	0x08017298

080116e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b088      	sub	sp, #32
 80116ec:	af02      	add	r7, sp, #8
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	60b9      	str	r1, [r7, #8]
 80116f2:	607a      	str	r2, [r7, #4]
 80116f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80116fc:	2b06      	cmp	r3, #6
 80116fe:	d006      	beq.n	801170e <etharp_update_arp_entry+0x26>
 8011700:	4b48      	ldr	r3, [pc, #288]	; (8011824 <etharp_update_arp_entry+0x13c>)
 8011702:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011706:	4948      	ldr	r1, [pc, #288]	; (8011828 <etharp_update_arp_entry+0x140>)
 8011708:	4848      	ldr	r0, [pc, #288]	; (801182c <etharp_update_arp_entry+0x144>)
 801170a:	f002 f8bd 	bl	8013888 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d012      	beq.n	801173a <etharp_update_arp_entry+0x52>
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d00e      	beq.n	801173a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	68f9      	ldr	r1, [r7, #12]
 8011722:	4618      	mov	r0, r3
 8011724:	f001 f8fe 	bl	8012924 <ip4_addr_isbroadcast_u32>
 8011728:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801172a:	2b00      	cmp	r3, #0
 801172c:	d105      	bne.n	801173a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011736:	2be0      	cmp	r3, #224	; 0xe0
 8011738:	d102      	bne.n	8011740 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801173a:	f06f 030f 	mvn.w	r3, #15
 801173e:	e06c      	b.n	801181a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011740:	78fb      	ldrb	r3, [r7, #3]
 8011742:	68fa      	ldr	r2, [r7, #12]
 8011744:	4619      	mov	r1, r3
 8011746:	68b8      	ldr	r0, [r7, #8]
 8011748:	f7ff fe56 	bl	80113f8 <etharp_find_entry>
 801174c:	4603      	mov	r3, r0
 801174e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011750:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011754:	2b00      	cmp	r3, #0
 8011756:	da02      	bge.n	801175e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011758:	8afb      	ldrh	r3, [r7, #22]
 801175a:	b25b      	sxtb	r3, r3
 801175c:	e05d      	b.n	801181a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801175e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011762:	4933      	ldr	r1, [pc, #204]	; (8011830 <etharp_update_arp_entry+0x148>)
 8011764:	4613      	mov	r3, r2
 8011766:	005b      	lsls	r3, r3, #1
 8011768:	4413      	add	r3, r2
 801176a:	00db      	lsls	r3, r3, #3
 801176c:	440b      	add	r3, r1
 801176e:	3314      	adds	r3, #20
 8011770:	2202      	movs	r2, #2
 8011772:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011774:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011778:	492d      	ldr	r1, [pc, #180]	; (8011830 <etharp_update_arp_entry+0x148>)
 801177a:	4613      	mov	r3, r2
 801177c:	005b      	lsls	r3, r3, #1
 801177e:	4413      	add	r3, r2
 8011780:	00db      	lsls	r3, r3, #3
 8011782:	440b      	add	r3, r1
 8011784:	3308      	adds	r3, #8
 8011786:	68fa      	ldr	r2, [r7, #12]
 8011788:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801178a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801178e:	4613      	mov	r3, r2
 8011790:	005b      	lsls	r3, r3, #1
 8011792:	4413      	add	r3, r2
 8011794:	00db      	lsls	r3, r3, #3
 8011796:	3308      	adds	r3, #8
 8011798:	4a25      	ldr	r2, [pc, #148]	; (8011830 <etharp_update_arp_entry+0x148>)
 801179a:	4413      	add	r3, r2
 801179c:	3304      	adds	r3, #4
 801179e:	2206      	movs	r2, #6
 80117a0:	6879      	ldr	r1, [r7, #4]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f002 f840 	bl	8013828 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80117a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80117ac:	4920      	ldr	r1, [pc, #128]	; (8011830 <etharp_update_arp_entry+0x148>)
 80117ae:	4613      	mov	r3, r2
 80117b0:	005b      	lsls	r3, r3, #1
 80117b2:	4413      	add	r3, r2
 80117b4:	00db      	lsls	r3, r3, #3
 80117b6:	440b      	add	r3, r1
 80117b8:	3312      	adds	r3, #18
 80117ba:	2200      	movs	r2, #0
 80117bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80117be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80117c2:	491b      	ldr	r1, [pc, #108]	; (8011830 <etharp_update_arp_entry+0x148>)
 80117c4:	4613      	mov	r3, r2
 80117c6:	005b      	lsls	r3, r3, #1
 80117c8:	4413      	add	r3, r2
 80117ca:	00db      	lsls	r3, r3, #3
 80117cc:	440b      	add	r3, r1
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d021      	beq.n	8011818 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80117d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80117d8:	4915      	ldr	r1, [pc, #84]	; (8011830 <etharp_update_arp_entry+0x148>)
 80117da:	4613      	mov	r3, r2
 80117dc:	005b      	lsls	r3, r3, #1
 80117de:	4413      	add	r3, r2
 80117e0:	00db      	lsls	r3, r3, #3
 80117e2:	440b      	add	r3, r1
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80117e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80117ec:	4910      	ldr	r1, [pc, #64]	; (8011830 <etharp_update_arp_entry+0x148>)
 80117ee:	4613      	mov	r3, r2
 80117f0:	005b      	lsls	r3, r3, #1
 80117f2:	4413      	add	r3, r2
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	440b      	add	r3, r1
 80117f8:	2200      	movs	r2, #0
 80117fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6939      	ldr	r1, [r7, #16]
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	f001 ff91 	bl	8013734 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011812:	6938      	ldr	r0, [r7, #16]
 8011814:	f7f8 fb7a 	bl	8009f0c <pbuf_free>
  }
  return ERR_OK;
 8011818:	2300      	movs	r3, #0
}
 801181a:	4618      	mov	r0, r3
 801181c:	3718      	adds	r7, #24
 801181e:	46bd      	mov	sp, r7
 8011820:	bd80      	pop	{r7, pc}
 8011822:	bf00      	nop
 8011824:	080171cc 	.word	0x080171cc
 8011828:	080172c4 	.word	0x080172c4
 801182c:	08017244 	.word	0x08017244
 8011830:	200001c8 	.word	0x200001c8

08011834 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b084      	sub	sp, #16
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801183c:	2300      	movs	r3, #0
 801183e:	60fb      	str	r3, [r7, #12]
 8011840:	e01e      	b.n	8011880 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011842:	4913      	ldr	r1, [pc, #76]	; (8011890 <etharp_cleanup_netif+0x5c>)
 8011844:	68fa      	ldr	r2, [r7, #12]
 8011846:	4613      	mov	r3, r2
 8011848:	005b      	lsls	r3, r3, #1
 801184a:	4413      	add	r3, r2
 801184c:	00db      	lsls	r3, r3, #3
 801184e:	440b      	add	r3, r1
 8011850:	3314      	adds	r3, #20
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011856:	7afb      	ldrb	r3, [r7, #11]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d00e      	beq.n	801187a <etharp_cleanup_netif+0x46>
 801185c:	490c      	ldr	r1, [pc, #48]	; (8011890 <etharp_cleanup_netif+0x5c>)
 801185e:	68fa      	ldr	r2, [r7, #12]
 8011860:	4613      	mov	r3, r2
 8011862:	005b      	lsls	r3, r3, #1
 8011864:	4413      	add	r3, r2
 8011866:	00db      	lsls	r3, r3, #3
 8011868:	440b      	add	r3, r1
 801186a:	3308      	adds	r3, #8
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	429a      	cmp	r2, r3
 8011872:	d102      	bne.n	801187a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011874:	68f8      	ldr	r0, [r7, #12]
 8011876:	f7ff fce5 	bl	8011244 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	3301      	adds	r3, #1
 801187e:	60fb      	str	r3, [r7, #12]
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2b09      	cmp	r3, #9
 8011884:	dddd      	ble.n	8011842 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011886:	bf00      	nop
 8011888:	bf00      	nop
 801188a:	3710      	adds	r7, #16
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	200001c8 	.word	0x200001c8

08011894 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011894:	b5b0      	push	{r4, r5, r7, lr}
 8011896:	b08a      	sub	sp, #40	; 0x28
 8011898:	af04      	add	r7, sp, #16
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d107      	bne.n	80118b4 <etharp_input+0x20>
 80118a4:	4b3d      	ldr	r3, [pc, #244]	; (801199c <etharp_input+0x108>)
 80118a6:	f240 228a 	movw	r2, #650	; 0x28a
 80118aa:	493d      	ldr	r1, [pc, #244]	; (80119a0 <etharp_input+0x10c>)
 80118ac:	483d      	ldr	r0, [pc, #244]	; (80119a4 <etharp_input+0x110>)
 80118ae:	f001 ffeb 	bl	8013888 <iprintf>
 80118b2:	e06f      	b.n	8011994 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	881b      	ldrh	r3, [r3, #0]
 80118be:	b29b      	uxth	r3, r3
 80118c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118c4:	d10c      	bne.n	80118e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80118ca:	2b06      	cmp	r3, #6
 80118cc:	d108      	bne.n	80118e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80118d2:	2b04      	cmp	r3, #4
 80118d4:	d104      	bne.n	80118e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	885b      	ldrh	r3, [r3, #2]
 80118da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80118dc:	2b08      	cmp	r3, #8
 80118de:	d003      	beq.n	80118e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f7f8 fb13 	bl	8009f0c <pbuf_free>
    return;
 80118e6:	e055      	b.n	8011994 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	330e      	adds	r3, #14
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	3318      	adds	r3, #24
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	3304      	adds	r3, #4
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d102      	bne.n	8011908 <etharp_input+0x74>
    for_us = 0;
 8011902:	2300      	movs	r3, #0
 8011904:	75fb      	strb	r3, [r7, #23]
 8011906:	e009      	b.n	801191c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011908:	68ba      	ldr	r2, [r7, #8]
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	3304      	adds	r3, #4
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	429a      	cmp	r2, r3
 8011912:	bf0c      	ite	eq
 8011914:	2301      	moveq	r3, #1
 8011916:	2300      	movne	r3, #0
 8011918:	b2db      	uxtb	r3, r3
 801191a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	f103 0208 	add.w	r2, r3, #8
 8011922:	7dfb      	ldrb	r3, [r7, #23]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d001      	beq.n	801192c <etharp_input+0x98>
 8011928:	2301      	movs	r3, #1
 801192a:	e000      	b.n	801192e <etharp_input+0x9a>
 801192c:	2302      	movs	r3, #2
 801192e:	f107 010c 	add.w	r1, r7, #12
 8011932:	6838      	ldr	r0, [r7, #0]
 8011934:	f7ff fed8 	bl	80116e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	88db      	ldrh	r3, [r3, #6]
 801193c:	b29b      	uxth	r3, r3
 801193e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011942:	d003      	beq.n	801194c <etharp_input+0xb8>
 8011944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011948:	d01e      	beq.n	8011988 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801194a:	e020      	b.n	801198e <etharp_input+0xfa>
      if (for_us) {
 801194c:	7dfb      	ldrb	r3, [r7, #23]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d01c      	beq.n	801198c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011968:	693a      	ldr	r2, [r7, #16]
 801196a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801196c:	2102      	movs	r1, #2
 801196e:	9103      	str	r1, [sp, #12]
 8011970:	f107 010c 	add.w	r1, r7, #12
 8011974:	9102      	str	r1, [sp, #8]
 8011976:	9201      	str	r2, [sp, #4]
 8011978:	9300      	str	r3, [sp, #0]
 801197a:	462b      	mov	r3, r5
 801197c:	4622      	mov	r2, r4
 801197e:	4601      	mov	r1, r0
 8011980:	6838      	ldr	r0, [r7, #0]
 8011982:	f000 faeb 	bl	8011f5c <etharp_raw>
      break;
 8011986:	e001      	b.n	801198c <etharp_input+0xf8>
      break;
 8011988:	bf00      	nop
 801198a:	e000      	b.n	801198e <etharp_input+0xfa>
      break;
 801198c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f7f8 fabc 	bl	8009f0c <pbuf_free>
}
 8011994:	3718      	adds	r7, #24
 8011996:	46bd      	mov	sp, r7
 8011998:	bdb0      	pop	{r4, r5, r7, pc}
 801199a:	bf00      	nop
 801199c:	080171cc 	.word	0x080171cc
 80119a0:	0801731c 	.word	0x0801731c
 80119a4:	08017244 	.word	0x08017244

080119a8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b086      	sub	sp, #24
 80119ac:	af02      	add	r7, sp, #8
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	60b9      	str	r1, [r7, #8]
 80119b2:	4613      	mov	r3, r2
 80119b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80119b6:	79fa      	ldrb	r2, [r7, #7]
 80119b8:	4944      	ldr	r1, [pc, #272]	; (8011acc <etharp_output_to_arp_index+0x124>)
 80119ba:	4613      	mov	r3, r2
 80119bc:	005b      	lsls	r3, r3, #1
 80119be:	4413      	add	r3, r2
 80119c0:	00db      	lsls	r3, r3, #3
 80119c2:	440b      	add	r3, r1
 80119c4:	3314      	adds	r3, #20
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	2b01      	cmp	r3, #1
 80119ca:	d806      	bhi.n	80119da <etharp_output_to_arp_index+0x32>
 80119cc:	4b40      	ldr	r3, [pc, #256]	; (8011ad0 <etharp_output_to_arp_index+0x128>)
 80119ce:	f240 22ee 	movw	r2, #750	; 0x2ee
 80119d2:	4940      	ldr	r1, [pc, #256]	; (8011ad4 <etharp_output_to_arp_index+0x12c>)
 80119d4:	4840      	ldr	r0, [pc, #256]	; (8011ad8 <etharp_output_to_arp_index+0x130>)
 80119d6:	f001 ff57 	bl	8013888 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80119da:	79fa      	ldrb	r2, [r7, #7]
 80119dc:	493b      	ldr	r1, [pc, #236]	; (8011acc <etharp_output_to_arp_index+0x124>)
 80119de:	4613      	mov	r3, r2
 80119e0:	005b      	lsls	r3, r3, #1
 80119e2:	4413      	add	r3, r2
 80119e4:	00db      	lsls	r3, r3, #3
 80119e6:	440b      	add	r3, r1
 80119e8:	3314      	adds	r3, #20
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	2b02      	cmp	r3, #2
 80119ee:	d153      	bne.n	8011a98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80119f0:	79fa      	ldrb	r2, [r7, #7]
 80119f2:	4936      	ldr	r1, [pc, #216]	; (8011acc <etharp_output_to_arp_index+0x124>)
 80119f4:	4613      	mov	r3, r2
 80119f6:	005b      	lsls	r3, r3, #1
 80119f8:	4413      	add	r3, r2
 80119fa:	00db      	lsls	r3, r3, #3
 80119fc:	440b      	add	r3, r1
 80119fe:	3312      	adds	r3, #18
 8011a00:	881b      	ldrh	r3, [r3, #0]
 8011a02:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011a06:	d919      	bls.n	8011a3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011a08:	79fa      	ldrb	r2, [r7, #7]
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	005b      	lsls	r3, r3, #1
 8011a0e:	4413      	add	r3, r2
 8011a10:	00db      	lsls	r3, r3, #3
 8011a12:	4a2e      	ldr	r2, [pc, #184]	; (8011acc <etharp_output_to_arp_index+0x124>)
 8011a14:	4413      	add	r3, r2
 8011a16:	3304      	adds	r3, #4
 8011a18:	4619      	mov	r1, r3
 8011a1a:	68f8      	ldr	r0, [r7, #12]
 8011a1c:	f000 fb4c 	bl	80120b8 <etharp_request>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d138      	bne.n	8011a98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011a26:	79fa      	ldrb	r2, [r7, #7]
 8011a28:	4928      	ldr	r1, [pc, #160]	; (8011acc <etharp_output_to_arp_index+0x124>)
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	005b      	lsls	r3, r3, #1
 8011a2e:	4413      	add	r3, r2
 8011a30:	00db      	lsls	r3, r3, #3
 8011a32:	440b      	add	r3, r1
 8011a34:	3314      	adds	r3, #20
 8011a36:	2203      	movs	r2, #3
 8011a38:	701a      	strb	r2, [r3, #0]
 8011a3a:	e02d      	b.n	8011a98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011a3c:	79fa      	ldrb	r2, [r7, #7]
 8011a3e:	4923      	ldr	r1, [pc, #140]	; (8011acc <etharp_output_to_arp_index+0x124>)
 8011a40:	4613      	mov	r3, r2
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	4413      	add	r3, r2
 8011a46:	00db      	lsls	r3, r3, #3
 8011a48:	440b      	add	r3, r1
 8011a4a:	3312      	adds	r3, #18
 8011a4c:	881b      	ldrh	r3, [r3, #0]
 8011a4e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011a52:	d321      	bcc.n	8011a98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011a54:	79fa      	ldrb	r2, [r7, #7]
 8011a56:	4613      	mov	r3, r2
 8011a58:	005b      	lsls	r3, r3, #1
 8011a5a:	4413      	add	r3, r2
 8011a5c:	00db      	lsls	r3, r3, #3
 8011a5e:	4a1b      	ldr	r2, [pc, #108]	; (8011acc <etharp_output_to_arp_index+0x124>)
 8011a60:	4413      	add	r3, r2
 8011a62:	1d19      	adds	r1, r3, #4
 8011a64:	79fa      	ldrb	r2, [r7, #7]
 8011a66:	4613      	mov	r3, r2
 8011a68:	005b      	lsls	r3, r3, #1
 8011a6a:	4413      	add	r3, r2
 8011a6c:	00db      	lsls	r3, r3, #3
 8011a6e:	3308      	adds	r3, #8
 8011a70:	4a16      	ldr	r2, [pc, #88]	; (8011acc <etharp_output_to_arp_index+0x124>)
 8011a72:	4413      	add	r3, r2
 8011a74:	3304      	adds	r3, #4
 8011a76:	461a      	mov	r2, r3
 8011a78:	68f8      	ldr	r0, [r7, #12]
 8011a7a:	f000 fafb 	bl	8012074 <etharp_request_dst>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d109      	bne.n	8011a98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011a84:	79fa      	ldrb	r2, [r7, #7]
 8011a86:	4911      	ldr	r1, [pc, #68]	; (8011acc <etharp_output_to_arp_index+0x124>)
 8011a88:	4613      	mov	r3, r2
 8011a8a:	005b      	lsls	r3, r3, #1
 8011a8c:	4413      	add	r3, r2
 8011a8e:	00db      	lsls	r3, r3, #3
 8011a90:	440b      	add	r3, r1
 8011a92:	3314      	adds	r3, #20
 8011a94:	2203      	movs	r2, #3
 8011a96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011a9e:	79fa      	ldrb	r2, [r7, #7]
 8011aa0:	4613      	mov	r3, r2
 8011aa2:	005b      	lsls	r3, r3, #1
 8011aa4:	4413      	add	r3, r2
 8011aa6:	00db      	lsls	r3, r3, #3
 8011aa8:	3308      	adds	r3, #8
 8011aaa:	4a08      	ldr	r2, [pc, #32]	; (8011acc <etharp_output_to_arp_index+0x124>)
 8011aac:	4413      	add	r3, r2
 8011aae:	3304      	adds	r3, #4
 8011ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ab4:	9200      	str	r2, [sp, #0]
 8011ab6:	460a      	mov	r2, r1
 8011ab8:	68b9      	ldr	r1, [r7, #8]
 8011aba:	68f8      	ldr	r0, [r7, #12]
 8011abc:	f001 fe3a 	bl	8013734 <ethernet_output>
 8011ac0:	4603      	mov	r3, r0
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3710      	adds	r7, #16
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	200001c8 	.word	0x200001c8
 8011ad0:	080171cc 	.word	0x080171cc
 8011ad4:	0801733c 	.word	0x0801733c
 8011ad8:	08017244 	.word	0x08017244

08011adc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b08a      	sub	sp, #40	; 0x28
 8011ae0:	af02      	add	r7, sp, #8
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	60b9      	str	r1, [r7, #8]
 8011ae6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d106      	bne.n	8011b00 <etharp_output+0x24>
 8011af2:	4b73      	ldr	r3, [pc, #460]	; (8011cc0 <etharp_output+0x1e4>)
 8011af4:	f240 321e 	movw	r2, #798	; 0x31e
 8011af8:	4972      	ldr	r1, [pc, #456]	; (8011cc4 <etharp_output+0x1e8>)
 8011afa:	4873      	ldr	r0, [pc, #460]	; (8011cc8 <etharp_output+0x1ec>)
 8011afc:	f001 fec4 	bl	8013888 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d106      	bne.n	8011b14 <etharp_output+0x38>
 8011b06:	4b6e      	ldr	r3, [pc, #440]	; (8011cc0 <etharp_output+0x1e4>)
 8011b08:	f240 321f 	movw	r2, #799	; 0x31f
 8011b0c:	496f      	ldr	r1, [pc, #444]	; (8011ccc <etharp_output+0x1f0>)
 8011b0e:	486e      	ldr	r0, [pc, #440]	; (8011cc8 <etharp_output+0x1ec>)
 8011b10:	f001 feba 	bl	8013888 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d106      	bne.n	8011b28 <etharp_output+0x4c>
 8011b1a:	4b69      	ldr	r3, [pc, #420]	; (8011cc0 <etharp_output+0x1e4>)
 8011b1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011b20:	496b      	ldr	r1, [pc, #428]	; (8011cd0 <etharp_output+0x1f4>)
 8011b22:	4869      	ldr	r0, [pc, #420]	; (8011cc8 <etharp_output+0x1ec>)
 8011b24:	f001 feb0 	bl	8013888 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	68f9      	ldr	r1, [r7, #12]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f000 fef8 	bl	8012924 <ip4_addr_isbroadcast_u32>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d002      	beq.n	8011b40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011b3a:	4b66      	ldr	r3, [pc, #408]	; (8011cd4 <etharp_output+0x1f8>)
 8011b3c:	61fb      	str	r3, [r7, #28]
 8011b3e:	e0af      	b.n	8011ca0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b48:	2be0      	cmp	r3, #224	; 0xe0
 8011b4a:	d118      	bne.n	8011b7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011b50:	2300      	movs	r3, #0
 8011b52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011b54:	235e      	movs	r3, #94	; 0x5e
 8011b56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	3301      	adds	r3, #1
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	3302      	adds	r3, #2
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	3303      	adds	r3, #3
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011b76:	f107 0310 	add.w	r3, r7, #16
 8011b7a:	61fb      	str	r3, [r7, #28]
 8011b7c:	e090      	b.n	8011ca0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	3304      	adds	r3, #4
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	405a      	eors	r2, r3
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	3308      	adds	r3, #8
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	4013      	ands	r3, r2
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d012      	beq.n	8011bbc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011b9c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	d00b      	beq.n	8011bbc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	330c      	adds	r3, #12
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d003      	beq.n	8011bb6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	330c      	adds	r3, #12
 8011bb2:	61bb      	str	r3, [r7, #24]
 8011bb4:	e002      	b.n	8011bbc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011bb6:	f06f 0303 	mvn.w	r3, #3
 8011bba:	e07d      	b.n	8011cb8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011bbc:	4b46      	ldr	r3, [pc, #280]	; (8011cd8 <etharp_output+0x1fc>)
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	4a46      	ldr	r2, [pc, #280]	; (8011cdc <etharp_output+0x200>)
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	005b      	lsls	r3, r3, #1
 8011bc8:	440b      	add	r3, r1
 8011bca:	00db      	lsls	r3, r3, #3
 8011bcc:	4413      	add	r3, r2
 8011bce:	3314      	adds	r3, #20
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d925      	bls.n	8011c22 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011bd6:	4b40      	ldr	r3, [pc, #256]	; (8011cd8 <etharp_output+0x1fc>)
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	4619      	mov	r1, r3
 8011bdc:	4a3f      	ldr	r2, [pc, #252]	; (8011cdc <etharp_output+0x200>)
 8011bde:	460b      	mov	r3, r1
 8011be0:	005b      	lsls	r3, r3, #1
 8011be2:	440b      	add	r3, r1
 8011be4:	00db      	lsls	r3, r3, #3
 8011be6:	4413      	add	r3, r2
 8011be8:	3308      	adds	r3, #8
 8011bea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d117      	bne.n	8011c22 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011bf2:	69bb      	ldr	r3, [r7, #24]
 8011bf4:	681a      	ldr	r2, [r3, #0]
 8011bf6:	4b38      	ldr	r3, [pc, #224]	; (8011cd8 <etharp_output+0x1fc>)
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	4937      	ldr	r1, [pc, #220]	; (8011cdc <etharp_output+0x200>)
 8011bfe:	4603      	mov	r3, r0
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	4403      	add	r3, r0
 8011c04:	00db      	lsls	r3, r3, #3
 8011c06:	440b      	add	r3, r1
 8011c08:	3304      	adds	r3, #4
 8011c0a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d108      	bne.n	8011c22 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011c10:	4b31      	ldr	r3, [pc, #196]	; (8011cd8 <etharp_output+0x1fc>)
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	461a      	mov	r2, r3
 8011c16:	68b9      	ldr	r1, [r7, #8]
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	f7ff fec5 	bl	80119a8 <etharp_output_to_arp_index>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	e04a      	b.n	8011cb8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011c22:	2300      	movs	r3, #0
 8011c24:	75fb      	strb	r3, [r7, #23]
 8011c26:	e031      	b.n	8011c8c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011c28:	7dfa      	ldrb	r2, [r7, #23]
 8011c2a:	492c      	ldr	r1, [pc, #176]	; (8011cdc <etharp_output+0x200>)
 8011c2c:	4613      	mov	r3, r2
 8011c2e:	005b      	lsls	r3, r3, #1
 8011c30:	4413      	add	r3, r2
 8011c32:	00db      	lsls	r3, r3, #3
 8011c34:	440b      	add	r3, r1
 8011c36:	3314      	adds	r3, #20
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	2b01      	cmp	r3, #1
 8011c3c:	d923      	bls.n	8011c86 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011c3e:	7dfa      	ldrb	r2, [r7, #23]
 8011c40:	4926      	ldr	r1, [pc, #152]	; (8011cdc <etharp_output+0x200>)
 8011c42:	4613      	mov	r3, r2
 8011c44:	005b      	lsls	r3, r3, #1
 8011c46:	4413      	add	r3, r2
 8011c48:	00db      	lsls	r3, r3, #3
 8011c4a:	440b      	add	r3, r1
 8011c4c:	3308      	adds	r3, #8
 8011c4e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011c50:	68fa      	ldr	r2, [r7, #12]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d117      	bne.n	8011c86 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011c56:	69bb      	ldr	r3, [r7, #24]
 8011c58:	6819      	ldr	r1, [r3, #0]
 8011c5a:	7dfa      	ldrb	r2, [r7, #23]
 8011c5c:	481f      	ldr	r0, [pc, #124]	; (8011cdc <etharp_output+0x200>)
 8011c5e:	4613      	mov	r3, r2
 8011c60:	005b      	lsls	r3, r3, #1
 8011c62:	4413      	add	r3, r2
 8011c64:	00db      	lsls	r3, r3, #3
 8011c66:	4403      	add	r3, r0
 8011c68:	3304      	adds	r3, #4
 8011c6a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011c6c:	4299      	cmp	r1, r3
 8011c6e:	d10a      	bne.n	8011c86 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011c70:	4a19      	ldr	r2, [pc, #100]	; (8011cd8 <etharp_output+0x1fc>)
 8011c72:	7dfb      	ldrb	r3, [r7, #23]
 8011c74:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011c76:	7dfb      	ldrb	r3, [r7, #23]
 8011c78:	461a      	mov	r2, r3
 8011c7a:	68b9      	ldr	r1, [r7, #8]
 8011c7c:	68f8      	ldr	r0, [r7, #12]
 8011c7e:	f7ff fe93 	bl	80119a8 <etharp_output_to_arp_index>
 8011c82:	4603      	mov	r3, r0
 8011c84:	e018      	b.n	8011cb8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011c86:	7dfb      	ldrb	r3, [r7, #23]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	75fb      	strb	r3, [r7, #23]
 8011c8c:	7dfb      	ldrb	r3, [r7, #23]
 8011c8e:	2b09      	cmp	r3, #9
 8011c90:	d9ca      	bls.n	8011c28 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011c92:	68ba      	ldr	r2, [r7, #8]
 8011c94:	69b9      	ldr	r1, [r7, #24]
 8011c96:	68f8      	ldr	r0, [r7, #12]
 8011c98:	f000 f822 	bl	8011ce0 <etharp_query>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	e00b      	b.n	8011cb8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011ca6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	68b9      	ldr	r1, [r7, #8]
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f001 fd3f 	bl	8013734 <ethernet_output>
 8011cb6:	4603      	mov	r3, r0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3720      	adds	r7, #32
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	080171cc 	.word	0x080171cc
 8011cc4:	0801731c 	.word	0x0801731c
 8011cc8:	08017244 	.word	0x08017244
 8011ccc:	0801736c 	.word	0x0801736c
 8011cd0:	0801730c 	.word	0x0801730c
 8011cd4:	08017a74 	.word	0x08017a74
 8011cd8:	200002b8 	.word	0x200002b8
 8011cdc:	200001c8 	.word	0x200001c8

08011ce0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b08c      	sub	sp, #48	; 0x30
 8011ce4:	af02      	add	r7, sp, #8
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	3326      	adds	r3, #38	; 0x26
 8011cf0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011cf2:	23ff      	movs	r3, #255	; 0xff
 8011cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	68f9      	ldr	r1, [r7, #12]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f000 fe0e 	bl	8012924 <ip4_addr_isbroadcast_u32>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d10c      	bne.n	8011d28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011d16:	2be0      	cmp	r3, #224	; 0xe0
 8011d18:	d006      	beq.n	8011d28 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d003      	beq.n	8011d28 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d102      	bne.n	8011d2e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011d28:	f06f 030f 	mvn.w	r3, #15
 8011d2c:	e101      	b.n	8011f32 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011d2e:	68fa      	ldr	r2, [r7, #12]
 8011d30:	2101      	movs	r1, #1
 8011d32:	68b8      	ldr	r0, [r7, #8]
 8011d34:	f7ff fb60 	bl	80113f8 <etharp_find_entry>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011d3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	da02      	bge.n	8011d4a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011d44:	8a7b      	ldrh	r3, [r7, #18]
 8011d46:	b25b      	sxtb	r3, r3
 8011d48:	e0f3      	b.n	8011f32 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011d4a:	8a7b      	ldrh	r3, [r7, #18]
 8011d4c:	2b7e      	cmp	r3, #126	; 0x7e
 8011d4e:	d906      	bls.n	8011d5e <etharp_query+0x7e>
 8011d50:	4b7a      	ldr	r3, [pc, #488]	; (8011f3c <etharp_query+0x25c>)
 8011d52:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011d56:	497a      	ldr	r1, [pc, #488]	; (8011f40 <etharp_query+0x260>)
 8011d58:	487a      	ldr	r0, [pc, #488]	; (8011f44 <etharp_query+0x264>)
 8011d5a:	f001 fd95 	bl	8013888 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011d5e:	8a7b      	ldrh	r3, [r7, #18]
 8011d60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011d62:	7c7a      	ldrb	r2, [r7, #17]
 8011d64:	4978      	ldr	r1, [pc, #480]	; (8011f48 <etharp_query+0x268>)
 8011d66:	4613      	mov	r3, r2
 8011d68:	005b      	lsls	r3, r3, #1
 8011d6a:	4413      	add	r3, r2
 8011d6c:	00db      	lsls	r3, r3, #3
 8011d6e:	440b      	add	r3, r1
 8011d70:	3314      	adds	r3, #20
 8011d72:	781b      	ldrb	r3, [r3, #0]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d115      	bne.n	8011da4 <etharp_query+0xc4>
    is_new_entry = 1;
 8011d78:	2301      	movs	r3, #1
 8011d7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011d7c:	7c7a      	ldrb	r2, [r7, #17]
 8011d7e:	4972      	ldr	r1, [pc, #456]	; (8011f48 <etharp_query+0x268>)
 8011d80:	4613      	mov	r3, r2
 8011d82:	005b      	lsls	r3, r3, #1
 8011d84:	4413      	add	r3, r2
 8011d86:	00db      	lsls	r3, r3, #3
 8011d88:	440b      	add	r3, r1
 8011d8a:	3314      	adds	r3, #20
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011d90:	7c7a      	ldrb	r2, [r7, #17]
 8011d92:	496d      	ldr	r1, [pc, #436]	; (8011f48 <etharp_query+0x268>)
 8011d94:	4613      	mov	r3, r2
 8011d96:	005b      	lsls	r3, r3, #1
 8011d98:	4413      	add	r3, r2
 8011d9a:	00db      	lsls	r3, r3, #3
 8011d9c:	440b      	add	r3, r1
 8011d9e:	3308      	adds	r3, #8
 8011da0:	68fa      	ldr	r2, [r7, #12]
 8011da2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011da4:	7c7a      	ldrb	r2, [r7, #17]
 8011da6:	4968      	ldr	r1, [pc, #416]	; (8011f48 <etharp_query+0x268>)
 8011da8:	4613      	mov	r3, r2
 8011daa:	005b      	lsls	r3, r3, #1
 8011dac:	4413      	add	r3, r2
 8011dae:	00db      	lsls	r3, r3, #3
 8011db0:	440b      	add	r3, r1
 8011db2:	3314      	adds	r3, #20
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	d011      	beq.n	8011dde <etharp_query+0xfe>
 8011dba:	7c7a      	ldrb	r2, [r7, #17]
 8011dbc:	4962      	ldr	r1, [pc, #392]	; (8011f48 <etharp_query+0x268>)
 8011dbe:	4613      	mov	r3, r2
 8011dc0:	005b      	lsls	r3, r3, #1
 8011dc2:	4413      	add	r3, r2
 8011dc4:	00db      	lsls	r3, r3, #3
 8011dc6:	440b      	add	r3, r1
 8011dc8:	3314      	adds	r3, #20
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d806      	bhi.n	8011dde <etharp_query+0xfe>
 8011dd0:	4b5a      	ldr	r3, [pc, #360]	; (8011f3c <etharp_query+0x25c>)
 8011dd2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011dd6:	495d      	ldr	r1, [pc, #372]	; (8011f4c <etharp_query+0x26c>)
 8011dd8:	485a      	ldr	r0, [pc, #360]	; (8011f44 <etharp_query+0x264>)
 8011dda:	f001 fd55 	bl	8013888 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011dde:	6a3b      	ldr	r3, [r7, #32]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d102      	bne.n	8011dea <etharp_query+0x10a>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d10c      	bne.n	8011e04 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011dea:	68b9      	ldr	r1, [r7, #8]
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f000 f963 	bl	80120b8 <etharp_request>
 8011df2:	4603      	mov	r3, r0
 8011df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d102      	bne.n	8011e04 <etharp_query+0x124>
      return result;
 8011dfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011e02:	e096      	b.n	8011f32 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d106      	bne.n	8011e18 <etharp_query+0x138>
 8011e0a:	4b4c      	ldr	r3, [pc, #304]	; (8011f3c <etharp_query+0x25c>)
 8011e0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011e10:	494f      	ldr	r1, [pc, #316]	; (8011f50 <etharp_query+0x270>)
 8011e12:	484c      	ldr	r0, [pc, #304]	; (8011f44 <etharp_query+0x264>)
 8011e14:	f001 fd38 	bl	8013888 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011e18:	7c7a      	ldrb	r2, [r7, #17]
 8011e1a:	494b      	ldr	r1, [pc, #300]	; (8011f48 <etharp_query+0x268>)
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	005b      	lsls	r3, r3, #1
 8011e20:	4413      	add	r3, r2
 8011e22:	00db      	lsls	r3, r3, #3
 8011e24:	440b      	add	r3, r1
 8011e26:	3314      	adds	r3, #20
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d917      	bls.n	8011e5e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011e2e:	4a49      	ldr	r2, [pc, #292]	; (8011f54 <etharp_query+0x274>)
 8011e30:	7c7b      	ldrb	r3, [r7, #17]
 8011e32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011e34:	7c7a      	ldrb	r2, [r7, #17]
 8011e36:	4613      	mov	r3, r2
 8011e38:	005b      	lsls	r3, r3, #1
 8011e3a:	4413      	add	r3, r2
 8011e3c:	00db      	lsls	r3, r3, #3
 8011e3e:	3308      	adds	r3, #8
 8011e40:	4a41      	ldr	r2, [pc, #260]	; (8011f48 <etharp_query+0x268>)
 8011e42:	4413      	add	r3, r2
 8011e44:	3304      	adds	r3, #4
 8011e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e4a:	9200      	str	r2, [sp, #0]
 8011e4c:	697a      	ldr	r2, [r7, #20]
 8011e4e:	6879      	ldr	r1, [r7, #4]
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f001 fc6f 	bl	8013734 <ethernet_output>
 8011e56:	4603      	mov	r3, r0
 8011e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e5c:	e067      	b.n	8011f2e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011e5e:	7c7a      	ldrb	r2, [r7, #17]
 8011e60:	4939      	ldr	r1, [pc, #228]	; (8011f48 <etharp_query+0x268>)
 8011e62:	4613      	mov	r3, r2
 8011e64:	005b      	lsls	r3, r3, #1
 8011e66:	4413      	add	r3, r2
 8011e68:	00db      	lsls	r3, r3, #3
 8011e6a:	440b      	add	r3, r1
 8011e6c:	3314      	adds	r3, #20
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	2b01      	cmp	r3, #1
 8011e72:	d15c      	bne.n	8011f2e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011e74:	2300      	movs	r3, #0
 8011e76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011e7c:	e01c      	b.n	8011eb8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	895a      	ldrh	r2, [r3, #10]
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	891b      	ldrh	r3, [r3, #8]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d10a      	bne.n	8011ea0 <etharp_query+0x1c0>
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d006      	beq.n	8011ea0 <etharp_query+0x1c0>
 8011e92:	4b2a      	ldr	r3, [pc, #168]	; (8011f3c <etharp_query+0x25c>)
 8011e94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011e98:	492f      	ldr	r1, [pc, #188]	; (8011f58 <etharp_query+0x278>)
 8011e9a:	482a      	ldr	r0, [pc, #168]	; (8011f44 <etharp_query+0x264>)
 8011e9c:	f001 fcf4 	bl	8013888 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	7b1b      	ldrb	r3, [r3, #12]
 8011ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d002      	beq.n	8011eb2 <etharp_query+0x1d2>
        copy_needed = 1;
 8011eac:	2301      	movs	r3, #1
 8011eae:	61bb      	str	r3, [r7, #24]
        break;
 8011eb0:	e005      	b.n	8011ebe <etharp_query+0x1de>
      }
      p = p->next;
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d1df      	bne.n	8011e7e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011ebe:	69bb      	ldr	r3, [r7, #24]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d007      	beq.n	8011ed4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011ec4:	687a      	ldr	r2, [r7, #4]
 8011ec6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011eca:	200e      	movs	r0, #14
 8011ecc:	f7f8 fb1c 	bl	800a508 <pbuf_clone>
 8011ed0:	61f8      	str	r0, [r7, #28]
 8011ed2:	e004      	b.n	8011ede <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011ed8:	69f8      	ldr	r0, [r7, #28]
 8011eda:	f7f8 f8b7 	bl	800a04c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011ede:	69fb      	ldr	r3, [r7, #28]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d021      	beq.n	8011f28 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011ee4:	7c7a      	ldrb	r2, [r7, #17]
 8011ee6:	4918      	ldr	r1, [pc, #96]	; (8011f48 <etharp_query+0x268>)
 8011ee8:	4613      	mov	r3, r2
 8011eea:	005b      	lsls	r3, r3, #1
 8011eec:	4413      	add	r3, r2
 8011eee:	00db      	lsls	r3, r3, #3
 8011ef0:	440b      	add	r3, r1
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d00a      	beq.n	8011f0e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011ef8:	7c7a      	ldrb	r2, [r7, #17]
 8011efa:	4913      	ldr	r1, [pc, #76]	; (8011f48 <etharp_query+0x268>)
 8011efc:	4613      	mov	r3, r2
 8011efe:	005b      	lsls	r3, r3, #1
 8011f00:	4413      	add	r3, r2
 8011f02:	00db      	lsls	r3, r3, #3
 8011f04:	440b      	add	r3, r1
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7f7 ffff 	bl	8009f0c <pbuf_free>
      }
      arp_table[i].q = p;
 8011f0e:	7c7a      	ldrb	r2, [r7, #17]
 8011f10:	490d      	ldr	r1, [pc, #52]	; (8011f48 <etharp_query+0x268>)
 8011f12:	4613      	mov	r3, r2
 8011f14:	005b      	lsls	r3, r3, #1
 8011f16:	4413      	add	r3, r2
 8011f18:	00db      	lsls	r3, r3, #3
 8011f1a:	440b      	add	r3, r1
 8011f1c:	69fa      	ldr	r2, [r7, #28]
 8011f1e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011f20:	2300      	movs	r3, #0
 8011f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011f26:	e002      	b.n	8011f2e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011f28:	23ff      	movs	r3, #255	; 0xff
 8011f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011f2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3728      	adds	r7, #40	; 0x28
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	080171cc 	.word	0x080171cc
 8011f40:	08017378 	.word	0x08017378
 8011f44:	08017244 	.word	0x08017244
 8011f48:	200001c8 	.word	0x200001c8
 8011f4c:	08017388 	.word	0x08017388
 8011f50:	0801736c 	.word	0x0801736c
 8011f54:	200002b8 	.word	0x200002b8
 8011f58:	080173b0 	.word	0x080173b0

08011f5c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b08a      	sub	sp, #40	; 0x28
 8011f60:	af02      	add	r7, sp, #8
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
 8011f68:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d106      	bne.n	8011f82 <etharp_raw+0x26>
 8011f74:	4b3a      	ldr	r3, [pc, #232]	; (8012060 <etharp_raw+0x104>)
 8011f76:	f240 4257 	movw	r2, #1111	; 0x457
 8011f7a:	493a      	ldr	r1, [pc, #232]	; (8012064 <etharp_raw+0x108>)
 8011f7c:	483a      	ldr	r0, [pc, #232]	; (8012068 <etharp_raw+0x10c>)
 8011f7e:	f001 fc83 	bl	8013888 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011f82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f86:	211c      	movs	r1, #28
 8011f88:	200e      	movs	r0, #14
 8011f8a:	f7f7 fcdb 	bl	8009944 <pbuf_alloc>
 8011f8e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011f90:	69bb      	ldr	r3, [r7, #24]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d102      	bne.n	8011f9c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011f96:	f04f 33ff 	mov.w	r3, #4294967295
 8011f9a:	e05d      	b.n	8012058 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011f9c:	69bb      	ldr	r3, [r7, #24]
 8011f9e:	895b      	ldrh	r3, [r3, #10]
 8011fa0:	2b1b      	cmp	r3, #27
 8011fa2:	d806      	bhi.n	8011fb2 <etharp_raw+0x56>
 8011fa4:	4b2e      	ldr	r3, [pc, #184]	; (8012060 <etharp_raw+0x104>)
 8011fa6:	f240 4262 	movw	r2, #1122	; 0x462
 8011faa:	4930      	ldr	r1, [pc, #192]	; (801206c <etharp_raw+0x110>)
 8011fac:	482e      	ldr	r0, [pc, #184]	; (8012068 <etharp_raw+0x10c>)
 8011fae:	f001 fc6b 	bl	8013888 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011fb2:	69bb      	ldr	r3, [r7, #24]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011fb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7f6 fcf2 	bl	80089a4 <lwip_htons>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	461a      	mov	r2, r3
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011fce:	2b06      	cmp	r3, #6
 8011fd0:	d006      	beq.n	8011fe0 <etharp_raw+0x84>
 8011fd2:	4b23      	ldr	r3, [pc, #140]	; (8012060 <etharp_raw+0x104>)
 8011fd4:	f240 4269 	movw	r2, #1129	; 0x469
 8011fd8:	4925      	ldr	r1, [pc, #148]	; (8012070 <etharp_raw+0x114>)
 8011fda:	4823      	ldr	r0, [pc, #140]	; (8012068 <etharp_raw+0x10c>)
 8011fdc:	f001 fc54 	bl	8013888 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	3308      	adds	r3, #8
 8011fe4:	2206      	movs	r2, #6
 8011fe6:	6839      	ldr	r1, [r7, #0]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f001 fc1d 	bl	8013828 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	3312      	adds	r3, #18
 8011ff2:	2206      	movs	r2, #6
 8011ff4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f001 fc16 	bl	8013828 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	330e      	adds	r3, #14
 8012000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012002:	6812      	ldr	r2, [r2, #0]
 8012004:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012006:	697b      	ldr	r3, [r7, #20]
 8012008:	3318      	adds	r3, #24
 801200a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801200c:	6812      	ldr	r2, [r2, #0]
 801200e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	2200      	movs	r2, #0
 8012014:	701a      	strb	r2, [r3, #0]
 8012016:	2200      	movs	r2, #0
 8012018:	f042 0201 	orr.w	r2, r2, #1
 801201c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	2200      	movs	r2, #0
 8012022:	f042 0208 	orr.w	r2, r2, #8
 8012026:	709a      	strb	r2, [r3, #2]
 8012028:	2200      	movs	r2, #0
 801202a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	2206      	movs	r2, #6
 8012030:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	2204      	movs	r2, #4
 8012036:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012038:	f640 0306 	movw	r3, #2054	; 0x806
 801203c:	9300      	str	r3, [sp, #0]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	68ba      	ldr	r2, [r7, #8]
 8012042:	69b9      	ldr	r1, [r7, #24]
 8012044:	68f8      	ldr	r0, [r7, #12]
 8012046:	f001 fb75 	bl	8013734 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801204a:	69b8      	ldr	r0, [r7, #24]
 801204c:	f7f7 ff5e 	bl	8009f0c <pbuf_free>
  p = NULL;
 8012050:	2300      	movs	r3, #0
 8012052:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012054:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012058:	4618      	mov	r0, r3
 801205a:	3720      	adds	r7, #32
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}
 8012060:	080171cc 	.word	0x080171cc
 8012064:	0801731c 	.word	0x0801731c
 8012068:	08017244 	.word	0x08017244
 801206c:	080173cc 	.word	0x080173cc
 8012070:	08017400 	.word	0x08017400

08012074 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b088      	sub	sp, #32
 8012078:	af04      	add	r7, sp, #16
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	60b9      	str	r1, [r7, #8]
 801207e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012090:	2201      	movs	r2, #1
 8012092:	9203      	str	r2, [sp, #12]
 8012094:	68ba      	ldr	r2, [r7, #8]
 8012096:	9202      	str	r2, [sp, #8]
 8012098:	4a06      	ldr	r2, [pc, #24]	; (80120b4 <etharp_request_dst+0x40>)
 801209a:	9201      	str	r2, [sp, #4]
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	4603      	mov	r3, r0
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f7ff ff5a 	bl	8011f5c <etharp_raw>
 80120a8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3710      	adds	r7, #16
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
 80120b2:	bf00      	nop
 80120b4:	08017a7c 	.word	0x08017a7c

080120b8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
 80120c0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80120c2:	4a05      	ldr	r2, [pc, #20]	; (80120d8 <etharp_request+0x20>)
 80120c4:	6839      	ldr	r1, [r7, #0]
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f7ff ffd4 	bl	8012074 <etharp_request_dst>
 80120cc:	4603      	mov	r3, r0
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3708      	adds	r7, #8
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	bf00      	nop
 80120d8:	08017a74 	.word	0x08017a74

080120dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b08e      	sub	sp, #56	; 0x38
 80120e0:	af04      	add	r7, sp, #16
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80120e6:	4b79      	ldr	r3, [pc, #484]	; (80122cc <icmp_input+0x1f0>)
 80120e8:	689b      	ldr	r3, [r3, #8]
 80120ea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80120ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	f003 030f 	and.w	r3, r3, #15
 80120f4:	b2db      	uxtb	r3, r3
 80120f6:	009b      	lsls	r3, r3, #2
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80120fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80120fe:	2b13      	cmp	r3, #19
 8012100:	f240 80cd 	bls.w	801229e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	895b      	ldrh	r3, [r3, #10]
 8012108:	2b03      	cmp	r3, #3
 801210a:	f240 80ca 	bls.w	80122a2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012118:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801211c:	2b00      	cmp	r3, #0
 801211e:	f000 80b7 	beq.w	8012290 <icmp_input+0x1b4>
 8012122:	2b08      	cmp	r3, #8
 8012124:	f040 80b7 	bne.w	8012296 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012128:	4b69      	ldr	r3, [pc, #420]	; (80122d0 <icmp_input+0x1f4>)
 801212a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801212c:	4b67      	ldr	r3, [pc, #412]	; (80122cc <icmp_input+0x1f0>)
 801212e:	695b      	ldr	r3, [r3, #20]
 8012130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012134:	2be0      	cmp	r3, #224	; 0xe0
 8012136:	f000 80bb 	beq.w	80122b0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801213a:	4b64      	ldr	r3, [pc, #400]	; (80122cc <icmp_input+0x1f0>)
 801213c:	695b      	ldr	r3, [r3, #20]
 801213e:	4a63      	ldr	r2, [pc, #396]	; (80122cc <icmp_input+0x1f0>)
 8012140:	6812      	ldr	r2, [r2, #0]
 8012142:	4611      	mov	r1, r2
 8012144:	4618      	mov	r0, r3
 8012146:	f000 fbed 	bl	8012924 <ip4_addr_isbroadcast_u32>
 801214a:	4603      	mov	r3, r0
 801214c:	2b00      	cmp	r3, #0
 801214e:	f040 80b1 	bne.w	80122b4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	891b      	ldrh	r3, [r3, #8]
 8012156:	2b07      	cmp	r3, #7
 8012158:	f240 80a5 	bls.w	80122a6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801215c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801215e:	330e      	adds	r3, #14
 8012160:	4619      	mov	r1, r3
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7f7 fe3c 	bl	8009de0 <pbuf_add_header>
 8012168:	4603      	mov	r3, r0
 801216a:	2b00      	cmp	r3, #0
 801216c:	d04b      	beq.n	8012206 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	891a      	ldrh	r2, [r3, #8]
 8012172:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012174:	4413      	add	r3, r2
 8012176:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	891b      	ldrh	r3, [r3, #8]
 801217c:	8b7a      	ldrh	r2, [r7, #26]
 801217e:	429a      	cmp	r2, r3
 8012180:	f0c0 809a 	bcc.w	80122b8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012184:	8b7b      	ldrh	r3, [r7, #26]
 8012186:	f44f 7220 	mov.w	r2, #640	; 0x280
 801218a:	4619      	mov	r1, r3
 801218c:	200e      	movs	r0, #14
 801218e:	f7f7 fbd9 	bl	8009944 <pbuf_alloc>
 8012192:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	2b00      	cmp	r3, #0
 8012198:	f000 8090 	beq.w	80122bc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	895b      	ldrh	r3, [r3, #10]
 80121a0:	461a      	mov	r2, r3
 80121a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121a4:	3308      	adds	r3, #8
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d203      	bcs.n	80121b2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80121aa:	6978      	ldr	r0, [r7, #20]
 80121ac:	f7f7 feae 	bl	8009f0c <pbuf_free>
          goto icmperr;
 80121b0:	e085      	b.n	80122be <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80121b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80121ba:	4618      	mov	r0, r3
 80121bc:	f001 fb34 	bl	8013828 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80121c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121c2:	4619      	mov	r1, r3
 80121c4:	6978      	ldr	r0, [r7, #20]
 80121c6:	f7f7 fe1b 	bl	8009e00 <pbuf_remove_header>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d009      	beq.n	80121e4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80121d0:	4b40      	ldr	r3, [pc, #256]	; (80122d4 <icmp_input+0x1f8>)
 80121d2:	22b6      	movs	r2, #182	; 0xb6
 80121d4:	4940      	ldr	r1, [pc, #256]	; (80122d8 <icmp_input+0x1fc>)
 80121d6:	4841      	ldr	r0, [pc, #260]	; (80122dc <icmp_input+0x200>)
 80121d8:	f001 fb56 	bl	8013888 <iprintf>
          pbuf_free(r);
 80121dc:	6978      	ldr	r0, [r7, #20]
 80121de:	f7f7 fe95 	bl	8009f0c <pbuf_free>
          goto icmperr;
 80121e2:	e06c      	b.n	80122be <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80121e4:	6879      	ldr	r1, [r7, #4]
 80121e6:	6978      	ldr	r0, [r7, #20]
 80121e8:	f7f7 ffb8 	bl	800a15c <pbuf_copy>
 80121ec:	4603      	mov	r3, r0
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d003      	beq.n	80121fa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80121f2:	6978      	ldr	r0, [r7, #20]
 80121f4:	f7f7 fe8a 	bl	8009f0c <pbuf_free>
          goto icmperr;
 80121f8:	e061      	b.n	80122be <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f7f7 fe86 	bl	8009f0c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	607b      	str	r3, [r7, #4]
 8012204:	e00f      	b.n	8012226 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012206:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012208:	330e      	adds	r3, #14
 801220a:	4619      	mov	r1, r3
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7f7 fdf7 	bl	8009e00 <pbuf_remove_header>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d006      	beq.n	8012226 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012218:	4b2e      	ldr	r3, [pc, #184]	; (80122d4 <icmp_input+0x1f8>)
 801221a:	22c7      	movs	r2, #199	; 0xc7
 801221c:	4930      	ldr	r1, [pc, #192]	; (80122e0 <icmp_input+0x204>)
 801221e:	482f      	ldr	r0, [pc, #188]	; (80122dc <icmp_input+0x200>)
 8012220:	f001 fb32 	bl	8013888 <iprintf>
          goto icmperr;
 8012224:	e04b      	b.n	80122be <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801222c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801222e:	4619      	mov	r1, r3
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7f7 fdd5 	bl	8009de0 <pbuf_add_header>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d12b      	bne.n	8012294 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012242:	69fb      	ldr	r3, [r7, #28]
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801224a:	4b20      	ldr	r3, [pc, #128]	; (80122cc <icmp_input+0x1f0>)
 801224c:	691a      	ldr	r2, [r3, #16]
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	2200      	movs	r2, #0
 8012256:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	2200      	movs	r2, #0
 801225c:	709a      	strb	r2, [r3, #2]
 801225e:	2200      	movs	r2, #0
 8012260:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	22ff      	movs	r2, #255	; 0xff
 8012266:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2200      	movs	r2, #0
 801226c:	729a      	strb	r2, [r3, #10]
 801226e:	2200      	movs	r2, #0
 8012270:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	9302      	str	r3, [sp, #8]
 8012276:	2301      	movs	r3, #1
 8012278:	9301      	str	r3, [sp, #4]
 801227a:	2300      	movs	r3, #0
 801227c:	9300      	str	r3, [sp, #0]
 801227e:	23ff      	movs	r3, #255	; 0xff
 8012280:	2200      	movs	r2, #0
 8012282:	69f9      	ldr	r1, [r7, #28]
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 fa75 	bl	8012774 <ip4_output_if>
 801228a:	4603      	mov	r3, r0
 801228c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801228e:	e001      	b.n	8012294 <icmp_input+0x1b8>
      break;
 8012290:	bf00      	nop
 8012292:	e000      	b.n	8012296 <icmp_input+0x1ba>
      break;
 8012294:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012296:	6878      	ldr	r0, [r7, #4]
 8012298:	f7f7 fe38 	bl	8009f0c <pbuf_free>
  return;
 801229c:	e013      	b.n	80122c6 <icmp_input+0x1ea>
    goto lenerr;
 801229e:	bf00      	nop
 80122a0:	e002      	b.n	80122a8 <icmp_input+0x1cc>
    goto lenerr;
 80122a2:	bf00      	nop
 80122a4:	e000      	b.n	80122a8 <icmp_input+0x1cc>
        goto lenerr;
 80122a6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f7f7 fe2f 	bl	8009f0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80122ae:	e00a      	b.n	80122c6 <icmp_input+0x1ea>
        goto icmperr;
 80122b0:	bf00      	nop
 80122b2:	e004      	b.n	80122be <icmp_input+0x1e2>
        goto icmperr;
 80122b4:	bf00      	nop
 80122b6:	e002      	b.n	80122be <icmp_input+0x1e2>
          goto icmperr;
 80122b8:	bf00      	nop
 80122ba:	e000      	b.n	80122be <icmp_input+0x1e2>
          goto icmperr;
 80122bc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f7f7 fe24 	bl	8009f0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80122c4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80122c6:	3728      	adds	r7, #40	; 0x28
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}
 80122cc:	20004844 	.word	0x20004844
 80122d0:	20004858 	.word	0x20004858
 80122d4:	08017444 	.word	0x08017444
 80122d8:	0801747c 	.word	0x0801747c
 80122dc:	080174b4 	.word	0x080174b4
 80122e0:	080174dc 	.word	0x080174dc

080122e4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	460b      	mov	r3, r1
 80122ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80122f0:	78fb      	ldrb	r3, [r7, #3]
 80122f2:	461a      	mov	r2, r3
 80122f4:	2103      	movs	r1, #3
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 f814 	bl	8012324 <icmp_send_response>
}
 80122fc:	bf00      	nop
 80122fe:	3708      	adds	r7, #8
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}

08012304 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b082      	sub	sp, #8
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
 801230c:	460b      	mov	r3, r1
 801230e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012310:	78fb      	ldrb	r3, [r7, #3]
 8012312:	461a      	mov	r2, r3
 8012314:	210b      	movs	r1, #11
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 f804 	bl	8012324 <icmp_send_response>
}
 801231c:	bf00      	nop
 801231e:	3708      	adds	r7, #8
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b08c      	sub	sp, #48	; 0x30
 8012328:	af04      	add	r7, sp, #16
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	460b      	mov	r3, r1
 801232e:	70fb      	strb	r3, [r7, #3]
 8012330:	4613      	mov	r3, r2
 8012332:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012334:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012338:	2124      	movs	r1, #36	; 0x24
 801233a:	2022      	movs	r0, #34	; 0x22
 801233c:	f7f7 fb02 	bl	8009944 <pbuf_alloc>
 8012340:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012342:	69fb      	ldr	r3, [r7, #28]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d04c      	beq.n	80123e2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	895b      	ldrh	r3, [r3, #10]
 801234c:	2b23      	cmp	r3, #35	; 0x23
 801234e:	d806      	bhi.n	801235e <icmp_send_response+0x3a>
 8012350:	4b26      	ldr	r3, [pc, #152]	; (80123ec <icmp_send_response+0xc8>)
 8012352:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012356:	4926      	ldr	r1, [pc, #152]	; (80123f0 <icmp_send_response+0xcc>)
 8012358:	4826      	ldr	r0, [pc, #152]	; (80123f4 <icmp_send_response+0xd0>)
 801235a:	f001 fa95 	bl	8013888 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	685b      	ldr	r3, [r3, #4]
 8012362:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	78fa      	ldrb	r2, [r7, #3]
 801236e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012370:	697b      	ldr	r3, [r7, #20]
 8012372:	78ba      	ldrb	r2, [r7, #2]
 8012374:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	2200      	movs	r2, #0
 801237a:	711a      	strb	r2, [r3, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	2200      	movs	r2, #0
 8012384:	719a      	strb	r2, [r3, #6]
 8012386:	2200      	movs	r2, #0
 8012388:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	f103 0008 	add.w	r0, r3, #8
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	221c      	movs	r2, #28
 8012398:	4619      	mov	r1, r3
 801239a:	f001 fa45 	bl	8013828 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801239e:	69bb      	ldr	r3, [r7, #24]
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80123a4:	f107 030c 	add.w	r3, r7, #12
 80123a8:	4618      	mov	r0, r3
 80123aa:	f000 f825 	bl	80123f8 <ip4_route>
 80123ae:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80123b0:	693b      	ldr	r3, [r7, #16]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d011      	beq.n	80123da <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	2200      	movs	r2, #0
 80123ba:	709a      	strb	r2, [r3, #2]
 80123bc:	2200      	movs	r2, #0
 80123be:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80123c0:	f107 020c 	add.w	r2, r7, #12
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	9302      	str	r3, [sp, #8]
 80123c8:	2301      	movs	r3, #1
 80123ca:	9301      	str	r3, [sp, #4]
 80123cc:	2300      	movs	r3, #0
 80123ce:	9300      	str	r3, [sp, #0]
 80123d0:	23ff      	movs	r3, #255	; 0xff
 80123d2:	2100      	movs	r1, #0
 80123d4:	69f8      	ldr	r0, [r7, #28]
 80123d6:	f000 f9cd 	bl	8012774 <ip4_output_if>
  }
  pbuf_free(q);
 80123da:	69f8      	ldr	r0, [r7, #28]
 80123dc:	f7f7 fd96 	bl	8009f0c <pbuf_free>
 80123e0:	e000      	b.n	80123e4 <icmp_send_response+0xc0>
    return;
 80123e2:	bf00      	nop
}
 80123e4:	3720      	adds	r7, #32
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	08017444 	.word	0x08017444
 80123f0:	08017510 	.word	0x08017510
 80123f4:	080174b4 	.word	0x080174b4

080123f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012400:	4b33      	ldr	r3, [pc, #204]	; (80124d0 <ip4_route+0xd8>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	60fb      	str	r3, [r7, #12]
 8012406:	e036      	b.n	8012476 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801240e:	f003 0301 	and.w	r3, r3, #1
 8012412:	b2db      	uxtb	r3, r3
 8012414:	2b00      	cmp	r3, #0
 8012416:	d02b      	beq.n	8012470 <ip4_route+0x78>
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801241e:	089b      	lsrs	r3, r3, #2
 8012420:	f003 0301 	and.w	r3, r3, #1
 8012424:	b2db      	uxtb	r3, r3
 8012426:	2b00      	cmp	r3, #0
 8012428:	d022      	beq.n	8012470 <ip4_route+0x78>
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	3304      	adds	r3, #4
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d01d      	beq.n	8012470 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	3304      	adds	r3, #4
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	405a      	eors	r2, r3
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	3308      	adds	r3, #8
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4013      	ands	r3, r2
 8012448:	2b00      	cmp	r3, #0
 801244a:	d101      	bne.n	8012450 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	e038      	b.n	80124c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012456:	f003 0302 	and.w	r3, r3, #2
 801245a:	2b00      	cmp	r3, #0
 801245c:	d108      	bne.n	8012470 <ip4_route+0x78>
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	330c      	adds	r3, #12
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	429a      	cmp	r2, r3
 801246a:	d101      	bne.n	8012470 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	e028      	b.n	80124c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	60fb      	str	r3, [r7, #12]
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d1c5      	bne.n	8012408 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801247c:	4b15      	ldr	r3, [pc, #84]	; (80124d4 <ip4_route+0xdc>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d01a      	beq.n	80124ba <ip4_route+0xc2>
 8012484:	4b13      	ldr	r3, [pc, #76]	; (80124d4 <ip4_route+0xdc>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801248c:	f003 0301 	and.w	r3, r3, #1
 8012490:	2b00      	cmp	r3, #0
 8012492:	d012      	beq.n	80124ba <ip4_route+0xc2>
 8012494:	4b0f      	ldr	r3, [pc, #60]	; (80124d4 <ip4_route+0xdc>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801249c:	f003 0304 	and.w	r3, r3, #4
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d00a      	beq.n	80124ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80124a4:	4b0b      	ldr	r3, [pc, #44]	; (80124d4 <ip4_route+0xdc>)
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	3304      	adds	r3, #4
 80124aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d004      	beq.n	80124ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	2b7f      	cmp	r3, #127	; 0x7f
 80124b8:	d101      	bne.n	80124be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80124ba:	2300      	movs	r3, #0
 80124bc:	e001      	b.n	80124c2 <ip4_route+0xca>
  }

  return netif_default;
 80124be:	4b05      	ldr	r3, [pc, #20]	; (80124d4 <ip4_route+0xdc>)
 80124c0:	681b      	ldr	r3, [r3, #0]
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3714      	adds	r7, #20
 80124c6:	46bd      	mov	sp, r7
 80124c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124cc:	4770      	bx	lr
 80124ce:	bf00      	nop
 80124d0:	20009f38 	.word	0x20009f38
 80124d4:	20009f3c 	.word	0x20009f3c

080124d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b082      	sub	sp, #8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80124e6:	f003 0301 	and.w	r3, r3, #1
 80124ea:	b2db      	uxtb	r3, r3
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d016      	beq.n	801251e <ip4_input_accept+0x46>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	3304      	adds	r3, #4
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d011      	beq.n	801251e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80124fa:	4b0b      	ldr	r3, [pc, #44]	; (8012528 <ip4_input_accept+0x50>)
 80124fc:	695a      	ldr	r2, [r3, #20]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	3304      	adds	r3, #4
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	429a      	cmp	r2, r3
 8012506:	d008      	beq.n	801251a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012508:	4b07      	ldr	r3, [pc, #28]	; (8012528 <ip4_input_accept+0x50>)
 801250a:	695b      	ldr	r3, [r3, #20]
 801250c:	6879      	ldr	r1, [r7, #4]
 801250e:	4618      	mov	r0, r3
 8012510:	f000 fa08 	bl	8012924 <ip4_addr_isbroadcast_u32>
 8012514:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012516:	2b00      	cmp	r3, #0
 8012518:	d001      	beq.n	801251e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801251a:	2301      	movs	r3, #1
 801251c:	e000      	b.n	8012520 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801251e:	2300      	movs	r3, #0
}
 8012520:	4618      	mov	r0, r3
 8012522:	3708      	adds	r7, #8
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	20004844 	.word	0x20004844

0801252c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b086      	sub	sp, #24
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	091b      	lsrs	r3, r3, #4
 8012542:	b2db      	uxtb	r3, r3
 8012544:	2b04      	cmp	r3, #4
 8012546:	d004      	beq.n	8012552 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f7f7 fcdf 	bl	8009f0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801254e:	2300      	movs	r3, #0
 8012550:	e107      	b.n	8012762 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	f003 030f 	and.w	r3, r3, #15
 801255a:	b2db      	uxtb	r3, r3
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	b2db      	uxtb	r3, r3
 8012560:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	885b      	ldrh	r3, [r3, #2]
 8012566:	b29b      	uxth	r3, r3
 8012568:	4618      	mov	r0, r3
 801256a:	f7f6 fa1b 	bl	80089a4 <lwip_htons>
 801256e:	4603      	mov	r3, r0
 8012570:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	891b      	ldrh	r3, [r3, #8]
 8012576:	89ba      	ldrh	r2, [r7, #12]
 8012578:	429a      	cmp	r2, r3
 801257a:	d204      	bcs.n	8012586 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801257c:	89bb      	ldrh	r3, [r7, #12]
 801257e:	4619      	mov	r1, r3
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f7f7 fb3d 	bl	8009c00 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	895b      	ldrh	r3, [r3, #10]
 801258a:	89fa      	ldrh	r2, [r7, #14]
 801258c:	429a      	cmp	r2, r3
 801258e:	d807      	bhi.n	80125a0 <ip4_input+0x74>
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	891b      	ldrh	r3, [r3, #8]
 8012594:	89ba      	ldrh	r2, [r7, #12]
 8012596:	429a      	cmp	r2, r3
 8012598:	d802      	bhi.n	80125a0 <ip4_input+0x74>
 801259a:	89fb      	ldrh	r3, [r7, #14]
 801259c:	2b13      	cmp	r3, #19
 801259e:	d804      	bhi.n	80125aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7f7 fcb3 	bl	8009f0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80125a6:	2300      	movs	r3, #0
 80125a8:	e0db      	b.n	8012762 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	691b      	ldr	r3, [r3, #16]
 80125ae:	4a6f      	ldr	r2, [pc, #444]	; (801276c <ip4_input+0x240>)
 80125b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	4a6d      	ldr	r2, [pc, #436]	; (801276c <ip4_input+0x240>)
 80125b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80125ba:	4b6c      	ldr	r3, [pc, #432]	; (801276c <ip4_input+0x240>)
 80125bc:	695b      	ldr	r3, [r3, #20]
 80125be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80125c2:	2be0      	cmp	r3, #224	; 0xe0
 80125c4:	d112      	bne.n	80125ec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80125cc:	f003 0301 	and.w	r3, r3, #1
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d007      	beq.n	80125e6 <ip4_input+0xba>
 80125d6:	683b      	ldr	r3, [r7, #0]
 80125d8:	3304      	adds	r3, #4
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d002      	beq.n	80125e6 <ip4_input+0xba>
      netif = inp;
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	613b      	str	r3, [r7, #16]
 80125e4:	e02a      	b.n	801263c <ip4_input+0x110>
    } else {
      netif = NULL;
 80125e6:	2300      	movs	r3, #0
 80125e8:	613b      	str	r3, [r7, #16]
 80125ea:	e027      	b.n	801263c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80125ec:	6838      	ldr	r0, [r7, #0]
 80125ee:	f7ff ff73 	bl	80124d8 <ip4_input_accept>
 80125f2:	4603      	mov	r3, r0
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d002      	beq.n	80125fe <ip4_input+0xd2>
      netif = inp;
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	613b      	str	r3, [r7, #16]
 80125fc:	e01e      	b.n	801263c <ip4_input+0x110>
    } else {
      netif = NULL;
 80125fe:	2300      	movs	r3, #0
 8012600:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012602:	4b5a      	ldr	r3, [pc, #360]	; (801276c <ip4_input+0x240>)
 8012604:	695b      	ldr	r3, [r3, #20]
 8012606:	b2db      	uxtb	r3, r3
 8012608:	2b7f      	cmp	r3, #127	; 0x7f
 801260a:	d017      	beq.n	801263c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801260c:	4b58      	ldr	r3, [pc, #352]	; (8012770 <ip4_input+0x244>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	613b      	str	r3, [r7, #16]
 8012612:	e00e      	b.n	8012632 <ip4_input+0x106>
          if (netif == inp) {
 8012614:	693a      	ldr	r2, [r7, #16]
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	429a      	cmp	r2, r3
 801261a:	d006      	beq.n	801262a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801261c:	6938      	ldr	r0, [r7, #16]
 801261e:	f7ff ff5b 	bl	80124d8 <ip4_input_accept>
 8012622:	4603      	mov	r3, r0
 8012624:	2b00      	cmp	r3, #0
 8012626:	d108      	bne.n	801263a <ip4_input+0x10e>
 8012628:	e000      	b.n	801262c <ip4_input+0x100>
            continue;
 801262a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801262c:	693b      	ldr	r3, [r7, #16]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	613b      	str	r3, [r7, #16]
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d1ed      	bne.n	8012614 <ip4_input+0xe8>
 8012638:	e000      	b.n	801263c <ip4_input+0x110>
            break;
 801263a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801263c:	4b4b      	ldr	r3, [pc, #300]	; (801276c <ip4_input+0x240>)
 801263e:	691b      	ldr	r3, [r3, #16]
 8012640:	6839      	ldr	r1, [r7, #0]
 8012642:	4618      	mov	r0, r3
 8012644:	f000 f96e 	bl	8012924 <ip4_addr_isbroadcast_u32>
 8012648:	4603      	mov	r3, r0
 801264a:	2b00      	cmp	r3, #0
 801264c:	d105      	bne.n	801265a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801264e:	4b47      	ldr	r3, [pc, #284]	; (801276c <ip4_input+0x240>)
 8012650:	691b      	ldr	r3, [r3, #16]
 8012652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012656:	2be0      	cmp	r3, #224	; 0xe0
 8012658:	d104      	bne.n	8012664 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f7f7 fc56 	bl	8009f0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012660:	2300      	movs	r3, #0
 8012662:	e07e      	b.n	8012762 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d104      	bne.n	8012674 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7f7 fc4e 	bl	8009f0c <pbuf_free>
    return ERR_OK;
 8012670:	2300      	movs	r3, #0
 8012672:	e076      	b.n	8012762 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	88db      	ldrh	r3, [r3, #6]
 8012678:	b29b      	uxth	r3, r3
 801267a:	461a      	mov	r2, r3
 801267c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012680:	4013      	ands	r3, r2
 8012682:	2b00      	cmp	r3, #0
 8012684:	d00b      	beq.n	801269e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f000 fc92 	bl	8012fb0 <ip4_reass>
 801268c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d101      	bne.n	8012698 <ip4_input+0x16c>
      return ERR_OK;
 8012694:	2300      	movs	r3, #0
 8012696:	e064      	b.n	8012762 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801269e:	4a33      	ldr	r2, [pc, #204]	; (801276c <ip4_input+0x240>)
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80126a4:	4a31      	ldr	r2, [pc, #196]	; (801276c <ip4_input+0x240>)
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80126aa:	4a30      	ldr	r2, [pc, #192]	; (801276c <ip4_input+0x240>)
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	781b      	ldrb	r3, [r3, #0]
 80126b4:	f003 030f 	and.w	r3, r3, #15
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	009b      	lsls	r3, r3, #2
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	b29a      	uxth	r2, r3
 80126c0:	4b2a      	ldr	r3, [pc, #168]	; (801276c <ip4_input+0x240>)
 80126c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80126c4:	89fb      	ldrh	r3, [r7, #14]
 80126c6:	4619      	mov	r1, r3
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f7f7 fb99 	bl	8009e00 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	7a5b      	ldrb	r3, [r3, #9]
 80126d2:	2b11      	cmp	r3, #17
 80126d4:	d006      	beq.n	80126e4 <ip4_input+0x1b8>
 80126d6:	2b11      	cmp	r3, #17
 80126d8:	dc13      	bgt.n	8012702 <ip4_input+0x1d6>
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d00c      	beq.n	80126f8 <ip4_input+0x1cc>
 80126de:	2b06      	cmp	r3, #6
 80126e0:	d005      	beq.n	80126ee <ip4_input+0x1c2>
 80126e2:	e00e      	b.n	8012702 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80126e4:	6839      	ldr	r1, [r7, #0]
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f7fe f988 	bl	80109fc <udp_input>
        break;
 80126ec:	e026      	b.n	801273c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80126ee:	6839      	ldr	r1, [r7, #0]
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7f9 fd75 	bl	800c1e0 <tcp_input>
        break;
 80126f6:	e021      	b.n	801273c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80126f8:	6839      	ldr	r1, [r7, #0]
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f7ff fcee 	bl	80120dc <icmp_input>
        break;
 8012700:	e01c      	b.n	801273c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012702:	4b1a      	ldr	r3, [pc, #104]	; (801276c <ip4_input+0x240>)
 8012704:	695b      	ldr	r3, [r3, #20]
 8012706:	6939      	ldr	r1, [r7, #16]
 8012708:	4618      	mov	r0, r3
 801270a:	f000 f90b 	bl	8012924 <ip4_addr_isbroadcast_u32>
 801270e:	4603      	mov	r3, r0
 8012710:	2b00      	cmp	r3, #0
 8012712:	d10f      	bne.n	8012734 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012714:	4b15      	ldr	r3, [pc, #84]	; (801276c <ip4_input+0x240>)
 8012716:	695b      	ldr	r3, [r3, #20]
 8012718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801271c:	2be0      	cmp	r3, #224	; 0xe0
 801271e:	d009      	beq.n	8012734 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012720:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012724:	4619      	mov	r1, r3
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f7f7 fbdd 	bl	8009ee6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801272c:	2102      	movs	r1, #2
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f7ff fdd8 	bl	80122e4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7f7 fbe9 	bl	8009f0c <pbuf_free>
        break;
 801273a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801273c:	4b0b      	ldr	r3, [pc, #44]	; (801276c <ip4_input+0x240>)
 801273e:	2200      	movs	r2, #0
 8012740:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012742:	4b0a      	ldr	r3, [pc, #40]	; (801276c <ip4_input+0x240>)
 8012744:	2200      	movs	r2, #0
 8012746:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012748:	4b08      	ldr	r3, [pc, #32]	; (801276c <ip4_input+0x240>)
 801274a:	2200      	movs	r2, #0
 801274c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801274e:	4b07      	ldr	r3, [pc, #28]	; (801276c <ip4_input+0x240>)
 8012750:	2200      	movs	r2, #0
 8012752:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012754:	4b05      	ldr	r3, [pc, #20]	; (801276c <ip4_input+0x240>)
 8012756:	2200      	movs	r2, #0
 8012758:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801275a:	4b04      	ldr	r3, [pc, #16]	; (801276c <ip4_input+0x240>)
 801275c:	2200      	movs	r2, #0
 801275e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012760:	2300      	movs	r3, #0
}
 8012762:	4618      	mov	r0, r3
 8012764:	3718      	adds	r7, #24
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}
 801276a:	bf00      	nop
 801276c:	20004844 	.word	0x20004844
 8012770:	20009f38 	.word	0x20009f38

08012774 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b08a      	sub	sp, #40	; 0x28
 8012778:	af04      	add	r7, sp, #16
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
 8012780:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d009      	beq.n	80127a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d003      	beq.n	801279a <ip4_output_if+0x26>
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d102      	bne.n	80127a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279c:	3304      	adds	r3, #4
 801279e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80127a0:	78fa      	ldrb	r2, [r7, #3]
 80127a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a4:	9302      	str	r3, [sp, #8]
 80127a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80127aa:	9301      	str	r3, [sp, #4]
 80127ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	4613      	mov	r3, r2
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	6979      	ldr	r1, [r7, #20]
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	f000 f805 	bl	80127c8 <ip4_output_if_src>
 80127be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3718      	adds	r7, #24
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b088      	sub	sp, #32
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	607a      	str	r2, [r7, #4]
 80127d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	7b9b      	ldrb	r3, [r3, #14]
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d006      	beq.n	80127ec <ip4_output_if_src+0x24>
 80127de:	4b4b      	ldr	r3, [pc, #300]	; (801290c <ip4_output_if_src+0x144>)
 80127e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80127e4:	494a      	ldr	r1, [pc, #296]	; (8012910 <ip4_output_if_src+0x148>)
 80127e6:	484b      	ldr	r0, [pc, #300]	; (8012914 <ip4_output_if_src+0x14c>)
 80127e8:	f001 f84e 	bl	8013888 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d060      	beq.n	80128b4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80127f2:	2314      	movs	r3, #20
 80127f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80127f6:	2114      	movs	r1, #20
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f7f7 faf1 	bl	8009de0 <pbuf_add_header>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d002      	beq.n	801280a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012804:	f06f 0301 	mvn.w	r3, #1
 8012808:	e07c      	b.n	8012904 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	895b      	ldrh	r3, [r3, #10]
 8012814:	2b13      	cmp	r3, #19
 8012816:	d806      	bhi.n	8012826 <ip4_output_if_src+0x5e>
 8012818:	4b3c      	ldr	r3, [pc, #240]	; (801290c <ip4_output_if_src+0x144>)
 801281a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801281e:	493e      	ldr	r1, [pc, #248]	; (8012918 <ip4_output_if_src+0x150>)
 8012820:	483c      	ldr	r0, [pc, #240]	; (8012914 <ip4_output_if_src+0x14c>)
 8012822:	f001 f831 	bl	8013888 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	78fa      	ldrb	r2, [r7, #3]
 801282a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012832:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681a      	ldr	r2, [r3, #0]
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801283c:	8b7b      	ldrh	r3, [r7, #26]
 801283e:	089b      	lsrs	r3, r3, #2
 8012840:	b29b      	uxth	r3, r3
 8012842:	b2db      	uxtb	r3, r3
 8012844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012848:	b2da      	uxtb	r2, r3
 801284a:	69fb      	ldr	r3, [r7, #28]
 801284c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012854:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	891b      	ldrh	r3, [r3, #8]
 801285a:	4618      	mov	r0, r3
 801285c:	f7f6 f8a2 	bl	80089a4 <lwip_htons>
 8012860:	4603      	mov	r3, r0
 8012862:	461a      	mov	r2, r3
 8012864:	69fb      	ldr	r3, [r7, #28]
 8012866:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012868:	69fb      	ldr	r3, [r7, #28]
 801286a:	2200      	movs	r2, #0
 801286c:	719a      	strb	r2, [r3, #6]
 801286e:	2200      	movs	r2, #0
 8012870:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012872:	4b2a      	ldr	r3, [pc, #168]	; (801291c <ip4_output_if_src+0x154>)
 8012874:	881b      	ldrh	r3, [r3, #0]
 8012876:	4618      	mov	r0, r3
 8012878:	f7f6 f894 	bl	80089a4 <lwip_htons>
 801287c:	4603      	mov	r3, r0
 801287e:	461a      	mov	r2, r3
 8012880:	69fb      	ldr	r3, [r7, #28]
 8012882:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012884:	4b25      	ldr	r3, [pc, #148]	; (801291c <ip4_output_if_src+0x154>)
 8012886:	881b      	ldrh	r3, [r3, #0]
 8012888:	3301      	adds	r3, #1
 801288a:	b29a      	uxth	r2, r3
 801288c:	4b23      	ldr	r3, [pc, #140]	; (801291c <ip4_output_if_src+0x154>)
 801288e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d104      	bne.n	80128a0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012896:	4b22      	ldr	r3, [pc, #136]	; (8012920 <ip4_output_if_src+0x158>)
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	60da      	str	r2, [r3, #12]
 801289e:	e003      	b.n	80128a8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80128a8:	69fb      	ldr	r3, [r7, #28]
 80128aa:	2200      	movs	r2, #0
 80128ac:	729a      	strb	r2, [r3, #10]
 80128ae:	2200      	movs	r2, #0
 80128b0:	72da      	strb	r2, [r3, #11]
 80128b2:	e00f      	b.n	80128d4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	895b      	ldrh	r3, [r3, #10]
 80128b8:	2b13      	cmp	r3, #19
 80128ba:	d802      	bhi.n	80128c2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80128bc:	f06f 0301 	mvn.w	r3, #1
 80128c0:	e020      	b.n	8012904 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	691b      	ldr	r3, [r3, #16]
 80128cc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80128ce:	f107 0314 	add.w	r3, r7, #20
 80128d2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80128d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d00c      	beq.n	80128f6 <ip4_output_if_src+0x12e>
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	891a      	ldrh	r2, [r3, #8]
 80128e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d906      	bls.n	80128f6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80128ec:	68f8      	ldr	r0, [r7, #12]
 80128ee:	f000 fd4d 	bl	801338c <ip4_frag>
 80128f2:	4603      	mov	r3, r0
 80128f4:	e006      	b.n	8012904 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80128f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f8:	695b      	ldr	r3, [r3, #20]
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	68f9      	ldr	r1, [r7, #12]
 80128fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012900:	4798      	blx	r3
 8012902:	4603      	mov	r3, r0
}
 8012904:	4618      	mov	r0, r3
 8012906:	3720      	adds	r7, #32
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	0801753c 	.word	0x0801753c
 8012910:	08017570 	.word	0x08017570
 8012914:	0801757c 	.word	0x0801757c
 8012918:	080175a4 	.word	0x080175a4
 801291c:	200002ba 	.word	0x200002ba
 8012920:	08017a70 	.word	0x08017a70

08012924 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012924:	b480      	push	{r7}
 8012926:	b085      	sub	sp, #20
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012938:	d002      	beq.n	8012940 <ip4_addr_isbroadcast_u32+0x1c>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d101      	bne.n	8012944 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012940:	2301      	movs	r3, #1
 8012942:	e02a      	b.n	801299a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801294a:	f003 0302 	and.w	r3, r3, #2
 801294e:	2b00      	cmp	r3, #0
 8012950:	d101      	bne.n	8012956 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012952:	2300      	movs	r3, #0
 8012954:	e021      	b.n	801299a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	3304      	adds	r3, #4
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	429a      	cmp	r2, r3
 8012960:	d101      	bne.n	8012966 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012962:	2300      	movs	r3, #0
 8012964:	e019      	b.n	801299a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012966:	68fa      	ldr	r2, [r7, #12]
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	3304      	adds	r3, #4
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	405a      	eors	r2, r3
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	3308      	adds	r3, #8
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	4013      	ands	r3, r2
 8012978:	2b00      	cmp	r3, #0
 801297a:	d10d      	bne.n	8012998 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	3308      	adds	r3, #8
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	43da      	mvns	r2, r3
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	3308      	adds	r3, #8
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012990:	429a      	cmp	r2, r3
 8012992:	d101      	bne.n	8012998 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012994:	2301      	movs	r3, #1
 8012996:	e000      	b.n	801299a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012998:	2300      	movs	r3, #0
  }
}
 801299a:	4618      	mov	r0, r3
 801299c:	3714      	adds	r7, #20
 801299e:	46bd      	mov	sp, r7
 80129a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a4:	4770      	bx	lr
	...

080129a8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b084      	sub	sp, #16
 80129ac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80129ae:	2300      	movs	r3, #0
 80129b0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80129b2:	4b12      	ldr	r3, [pc, #72]	; (80129fc <ip_reass_tmr+0x54>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80129b8:	e018      	b.n	80129ec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	7fdb      	ldrb	r3, [r3, #31]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d00b      	beq.n	80129da <ip_reass_tmr+0x32>
      r->timer--;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	7fdb      	ldrb	r3, [r3, #31]
 80129c6:	3b01      	subs	r3, #1
 80129c8:	b2da      	uxtb	r2, r3
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	60fb      	str	r3, [r7, #12]
 80129d8:	e008      	b.n	80129ec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80129e4:	68b9      	ldr	r1, [r7, #8]
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f000 f80a 	bl	8012a00 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1e3      	bne.n	80129ba <ip_reass_tmr+0x12>
    }
  }
}
 80129f2:	bf00      	nop
 80129f4:	bf00      	nop
 80129f6:	3710      	adds	r7, #16
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	200002bc 	.word	0x200002bc

08012a00 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b088      	sub	sp, #32
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012a0e:	683a      	ldr	r2, [r7, #0]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d105      	bne.n	8012a22 <ip_reass_free_complete_datagram+0x22>
 8012a16:	4b45      	ldr	r3, [pc, #276]	; (8012b2c <ip_reass_free_complete_datagram+0x12c>)
 8012a18:	22ab      	movs	r2, #171	; 0xab
 8012a1a:	4945      	ldr	r1, [pc, #276]	; (8012b30 <ip_reass_free_complete_datagram+0x130>)
 8012a1c:	4845      	ldr	r0, [pc, #276]	; (8012b34 <ip_reass_free_complete_datagram+0x134>)
 8012a1e:	f000 ff33 	bl	8013888 <iprintf>
  if (prev != NULL) {
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d00a      	beq.n	8012a3e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d005      	beq.n	8012a3e <ip_reass_free_complete_datagram+0x3e>
 8012a32:	4b3e      	ldr	r3, [pc, #248]	; (8012b2c <ip_reass_free_complete_datagram+0x12c>)
 8012a34:	22ad      	movs	r2, #173	; 0xad
 8012a36:	4940      	ldr	r1, [pc, #256]	; (8012b38 <ip_reass_free_complete_datagram+0x138>)
 8012a38:	483e      	ldr	r0, [pc, #248]	; (8012b34 <ip_reass_free_complete_datagram+0x134>)
 8012a3a:	f000 ff25 	bl	8013888 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	889b      	ldrh	r3, [r3, #4]
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d12a      	bne.n	8012aa6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	6858      	ldr	r0, [r3, #4]
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	3308      	adds	r3, #8
 8012a66:	2214      	movs	r2, #20
 8012a68:	4619      	mov	r1, r3
 8012a6a:	f000 fedd 	bl	8013828 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012a6e:	2101      	movs	r1, #1
 8012a70:	69b8      	ldr	r0, [r7, #24]
 8012a72:	f7ff fc47 	bl	8012304 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012a76:	69b8      	ldr	r0, [r7, #24]
 8012a78:	f7f7 fad0 	bl	800a01c <pbuf_clen>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012a80:	8bfa      	ldrh	r2, [r7, #30]
 8012a82:	8a7b      	ldrh	r3, [r7, #18]
 8012a84:	4413      	add	r3, r2
 8012a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a8a:	db05      	blt.n	8012a98 <ip_reass_free_complete_datagram+0x98>
 8012a8c:	4b27      	ldr	r3, [pc, #156]	; (8012b2c <ip_reass_free_complete_datagram+0x12c>)
 8012a8e:	22bc      	movs	r2, #188	; 0xbc
 8012a90:	492a      	ldr	r1, [pc, #168]	; (8012b3c <ip_reass_free_complete_datagram+0x13c>)
 8012a92:	4828      	ldr	r0, [pc, #160]	; (8012b34 <ip_reass_free_complete_datagram+0x134>)
 8012a94:	f000 fef8 	bl	8013888 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012a98:	8bfa      	ldrh	r2, [r7, #30]
 8012a9a:	8a7b      	ldrh	r3, [r7, #18]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012aa0:	69b8      	ldr	r0, [r7, #24]
 8012aa2:	f7f7 fa33 	bl	8009f0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	685b      	ldr	r3, [r3, #4]
 8012aaa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012aac:	e01f      	b.n	8012aee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012aae:	69bb      	ldr	r3, [r7, #24]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012abe:	68f8      	ldr	r0, [r7, #12]
 8012ac0:	f7f7 faac 	bl	800a01c <pbuf_clen>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012ac8:	8bfa      	ldrh	r2, [r7, #30]
 8012aca:	8a7b      	ldrh	r3, [r7, #18]
 8012acc:	4413      	add	r3, r2
 8012ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ad2:	db05      	blt.n	8012ae0 <ip_reass_free_complete_datagram+0xe0>
 8012ad4:	4b15      	ldr	r3, [pc, #84]	; (8012b2c <ip_reass_free_complete_datagram+0x12c>)
 8012ad6:	22cc      	movs	r2, #204	; 0xcc
 8012ad8:	4918      	ldr	r1, [pc, #96]	; (8012b3c <ip_reass_free_complete_datagram+0x13c>)
 8012ada:	4816      	ldr	r0, [pc, #88]	; (8012b34 <ip_reass_free_complete_datagram+0x134>)
 8012adc:	f000 fed4 	bl	8013888 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012ae0:	8bfa      	ldrh	r2, [r7, #30]
 8012ae2:	8a7b      	ldrh	r3, [r7, #18]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012ae8:	68f8      	ldr	r0, [r7, #12]
 8012aea:	f7f7 fa0f 	bl	8009f0c <pbuf_free>
  while (p != NULL) {
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d1dc      	bne.n	8012aae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012af4:	6839      	ldr	r1, [r7, #0]
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 f8c2 	bl	8012c80 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012afc:	4b10      	ldr	r3, [pc, #64]	; (8012b40 <ip_reass_free_complete_datagram+0x140>)
 8012afe:	881b      	ldrh	r3, [r3, #0]
 8012b00:	8bfa      	ldrh	r2, [r7, #30]
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d905      	bls.n	8012b12 <ip_reass_free_complete_datagram+0x112>
 8012b06:	4b09      	ldr	r3, [pc, #36]	; (8012b2c <ip_reass_free_complete_datagram+0x12c>)
 8012b08:	22d2      	movs	r2, #210	; 0xd2
 8012b0a:	490e      	ldr	r1, [pc, #56]	; (8012b44 <ip_reass_free_complete_datagram+0x144>)
 8012b0c:	4809      	ldr	r0, [pc, #36]	; (8012b34 <ip_reass_free_complete_datagram+0x134>)
 8012b0e:	f000 febb 	bl	8013888 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012b12:	4b0b      	ldr	r3, [pc, #44]	; (8012b40 <ip_reass_free_complete_datagram+0x140>)
 8012b14:	881a      	ldrh	r2, [r3, #0]
 8012b16:	8bfb      	ldrh	r3, [r7, #30]
 8012b18:	1ad3      	subs	r3, r2, r3
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	4b08      	ldr	r3, [pc, #32]	; (8012b40 <ip_reass_free_complete_datagram+0x140>)
 8012b1e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012b20:	8bfb      	ldrh	r3, [r7, #30]
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3720      	adds	r7, #32
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	080175d4 	.word	0x080175d4
 8012b30:	08017610 	.word	0x08017610
 8012b34:	0801761c 	.word	0x0801761c
 8012b38:	08017644 	.word	0x08017644
 8012b3c:	08017658 	.word	0x08017658
 8012b40:	200002c0 	.word	0x200002c0
 8012b44:	08017678 	.word	0x08017678

08012b48 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b08a      	sub	sp, #40	; 0x28
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012b52:	2300      	movs	r3, #0
 8012b54:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012b56:	2300      	movs	r3, #0
 8012b58:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012b62:	2300      	movs	r3, #0
 8012b64:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012b66:	4b28      	ldr	r3, [pc, #160]	; (8012c08 <ip_reass_remove_oldest_datagram+0xc0>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012b6c:	e030      	b.n	8012bd0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b70:	695a      	ldr	r2, [r3, #20]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d10c      	bne.n	8012b94 <ip_reass_remove_oldest_datagram+0x4c>
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	699a      	ldr	r2, [r3, #24]
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	691b      	ldr	r3, [r3, #16]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d106      	bne.n	8012b94 <ip_reass_remove_oldest_datagram+0x4c>
 8012b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b88:	899a      	ldrh	r2, [r3, #12]
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	889b      	ldrh	r3, [r3, #4]
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d014      	beq.n	8012bbe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	3301      	adds	r3, #1
 8012b98:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012b9a:	6a3b      	ldr	r3, [r7, #32]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d104      	bne.n	8012baa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	61bb      	str	r3, [r7, #24]
 8012ba8:	e009      	b.n	8012bbe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bac:	7fda      	ldrb	r2, [r3, #31]
 8012bae:	6a3b      	ldr	r3, [r7, #32]
 8012bb0:	7fdb      	ldrb	r3, [r3, #31]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d803      	bhi.n	8012bbe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012bba:	69fb      	ldr	r3, [r7, #28]
 8012bbc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d001      	beq.n	8012bca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d1cb      	bne.n	8012b6e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012bd6:	6a3b      	ldr	r3, [r7, #32]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d008      	beq.n	8012bee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012bdc:	69b9      	ldr	r1, [r7, #24]
 8012bde:	6a38      	ldr	r0, [r7, #32]
 8012be0:	f7ff ff0e 	bl	8012a00 <ip_reass_free_complete_datagram>
 8012be4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012be6:	697a      	ldr	r2, [r7, #20]
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	4413      	add	r3, r2
 8012bec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012bee:	697a      	ldr	r2, [r7, #20]
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	da02      	bge.n	8012bfc <ip_reass_remove_oldest_datagram+0xb4>
 8012bf6:	693b      	ldr	r3, [r7, #16]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	dcac      	bgt.n	8012b56 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012bfc:	697b      	ldr	r3, [r7, #20]
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3728      	adds	r7, #40	; 0x28
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	200002bc 	.word	0x200002bc

08012c0c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b084      	sub	sp, #16
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012c16:	2004      	movs	r0, #4
 8012c18:	f7f6 fb1a 	bl	8009250 <memp_malloc>
 8012c1c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d110      	bne.n	8012c46 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012c24:	6839      	ldr	r1, [r7, #0]
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f7ff ff8e 	bl	8012b48 <ip_reass_remove_oldest_datagram>
 8012c2c:	4602      	mov	r2, r0
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	4293      	cmp	r3, r2
 8012c32:	dc03      	bgt.n	8012c3c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012c34:	2004      	movs	r0, #4
 8012c36:	f7f6 fb0b 	bl	8009250 <memp_malloc>
 8012c3a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d101      	bne.n	8012c46 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012c42:	2300      	movs	r3, #0
 8012c44:	e016      	b.n	8012c74 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012c46:	2220      	movs	r2, #32
 8012c48:	2100      	movs	r1, #0
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f000 fe14 	bl	8013878 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	220f      	movs	r2, #15
 8012c54:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012c56:	4b09      	ldr	r3, [pc, #36]	; (8012c7c <ip_reass_enqueue_new_datagram+0x70>)
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012c5e:	4a07      	ldr	r2, [pc, #28]	; (8012c7c <ip_reass_enqueue_new_datagram+0x70>)
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	3308      	adds	r3, #8
 8012c68:	2214      	movs	r2, #20
 8012c6a:	6879      	ldr	r1, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f000 fddb 	bl	8013828 <memcpy>
  return ipr;
 8012c72:	68fb      	ldr	r3, [r7, #12]
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3710      	adds	r7, #16
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	200002bc 	.word	0x200002bc

08012c80 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b082      	sub	sp, #8
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012c8a:	4b10      	ldr	r3, [pc, #64]	; (8012ccc <ip_reass_dequeue_datagram+0x4c>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d104      	bne.n	8012c9e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	4a0c      	ldr	r2, [pc, #48]	; (8012ccc <ip_reass_dequeue_datagram+0x4c>)
 8012c9a:	6013      	str	r3, [r2, #0]
 8012c9c:	e00d      	b.n	8012cba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d106      	bne.n	8012cb2 <ip_reass_dequeue_datagram+0x32>
 8012ca4:	4b0a      	ldr	r3, [pc, #40]	; (8012cd0 <ip_reass_dequeue_datagram+0x50>)
 8012ca6:	f240 1245 	movw	r2, #325	; 0x145
 8012caa:	490a      	ldr	r1, [pc, #40]	; (8012cd4 <ip_reass_dequeue_datagram+0x54>)
 8012cac:	480a      	ldr	r0, [pc, #40]	; (8012cd8 <ip_reass_dequeue_datagram+0x58>)
 8012cae:	f000 fdeb 	bl	8013888 <iprintf>
    prev->next = ipr->next;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012cba:	6879      	ldr	r1, [r7, #4]
 8012cbc:	2004      	movs	r0, #4
 8012cbe:	f7f6 fb13 	bl	80092e8 <memp_free>
}
 8012cc2:	bf00      	nop
 8012cc4:	3708      	adds	r7, #8
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	200002bc 	.word	0x200002bc
 8012cd0:	080175d4 	.word	0x080175d4
 8012cd4:	0801769c 	.word	0x0801769c
 8012cd8:	0801761c 	.word	0x0801761c

08012cdc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b08c      	sub	sp, #48	; 0x30
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	60f8      	str	r0, [r7, #12]
 8012ce4:	60b9      	str	r1, [r7, #8]
 8012ce6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012cec:	2301      	movs	r3, #1
 8012cee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	885b      	ldrh	r3, [r3, #2]
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7f5 fe51 	bl	80089a4 <lwip_htons>
 8012d02:	4603      	mov	r3, r0
 8012d04:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012d06:	69fb      	ldr	r3, [r7, #28]
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	f003 030f 	and.w	r3, r3, #15
 8012d0e:	b2db      	uxtb	r3, r3
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012d14:	7e7b      	ldrb	r3, [r7, #25]
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	8b7a      	ldrh	r2, [r7, #26]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d202      	bcs.n	8012d24 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d22:	e135      	b.n	8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012d24:	7e7b      	ldrb	r3, [r7, #25]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	8b7a      	ldrh	r2, [r7, #26]
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	88db      	ldrh	r3, [r3, #6]
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f5 fe35 	bl	80089a4 <lwip_htons>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	00db      	lsls	r3, r3, #3
 8012d44:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d4e:	2200      	movs	r2, #0
 8012d50:	701a      	strb	r2, [r3, #0]
 8012d52:	2200      	movs	r2, #0
 8012d54:	705a      	strb	r2, [r3, #1]
 8012d56:	2200      	movs	r2, #0
 8012d58:	709a      	strb	r2, [r3, #2]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d60:	8afa      	ldrh	r2, [r7, #22]
 8012d62:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012d64:	8afa      	ldrh	r2, [r7, #22]
 8012d66:	8b7b      	ldrh	r3, [r7, #26]
 8012d68:	4413      	add	r3, r2
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d72:	88db      	ldrh	r3, [r3, #6]
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	8afa      	ldrh	r2, [r7, #22]
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d902      	bls.n	8012d82 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d80:	e106      	b.n	8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	627b      	str	r3, [r7, #36]	; 0x24
 8012d88:	e068      	b.n	8012e5c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d92:	889b      	ldrh	r3, [r3, #4]
 8012d94:	b29a      	uxth	r2, r3
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	889b      	ldrh	r3, [r3, #4]
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d235      	bcs.n	8012e0c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012da4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d020      	beq.n	8012dee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dae:	889b      	ldrh	r3, [r3, #4]
 8012db0:	b29a      	uxth	r2, r3
 8012db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db4:	88db      	ldrh	r3, [r3, #6]
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d307      	bcc.n	8012dcc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dbe:	88db      	ldrh	r3, [r3, #6]
 8012dc0:	b29a      	uxth	r2, r3
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	889b      	ldrh	r3, [r3, #4]
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d902      	bls.n	8012dd2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd0:	e0de      	b.n	8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd4:	68ba      	ldr	r2, [r7, #8]
 8012dd6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dda:	88db      	ldrh	r3, [r3, #6]
 8012ddc:	b29a      	uxth	r2, r3
 8012dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de0:	889b      	ldrh	r3, [r3, #4]
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d03d      	beq.n	8012e64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012de8:	2300      	movs	r3, #0
 8012dea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012dec:	e03a      	b.n	8012e64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df0:	88db      	ldrh	r3, [r3, #6]
 8012df2:	b29a      	uxth	r2, r3
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	889b      	ldrh	r3, [r3, #4]
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d902      	bls.n	8012e04 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8012e02:	e0c5      	b.n	8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	68ba      	ldr	r2, [r7, #8]
 8012e08:	605a      	str	r2, [r3, #4]
      break;
 8012e0a:	e02b      	b.n	8012e64 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0e:	889b      	ldrh	r3, [r3, #4]
 8012e10:	b29a      	uxth	r2, r3
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	889b      	ldrh	r3, [r3, #4]
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d102      	bne.n	8012e22 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e20:	e0b6      	b.n	8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e24:	889b      	ldrh	r3, [r3, #4]
 8012e26:	b29a      	uxth	r2, r3
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	88db      	ldrh	r3, [r3, #6]
 8012e2c:	b29b      	uxth	r3, r3
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	d202      	bcs.n	8012e38 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012e32:	f04f 33ff 	mov.w	r3, #4294967295
 8012e36:	e0ab      	b.n	8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d009      	beq.n	8012e52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e40:	88db      	ldrh	r3, [r3, #6]
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	889b      	ldrh	r3, [r3, #4]
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d001      	beq.n	8012e52 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d193      	bne.n	8012d8a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012e62:	e000      	b.n	8012e66 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012e64:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d12d      	bne.n	8012ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d01c      	beq.n	8012eac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e74:	88db      	ldrh	r3, [r3, #6]
 8012e76:	b29a      	uxth	r2, r3
 8012e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7a:	889b      	ldrh	r3, [r3, #4]
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d906      	bls.n	8012e90 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012e82:	4b45      	ldr	r3, [pc, #276]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012e84:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012e88:	4944      	ldr	r1, [pc, #272]	; (8012f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012e8a:	4845      	ldr	r0, [pc, #276]	; (8012fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012e8c:	f000 fcfc 	bl	8013888 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e92:	68ba      	ldr	r2, [r7, #8]
 8012e94:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e98:	88db      	ldrh	r3, [r3, #6]
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9e:	889b      	ldrh	r3, [r3, #4]
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d010      	beq.n	8012ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	623b      	str	r3, [r7, #32]
 8012eaa:	e00d      	b.n	8012ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d006      	beq.n	8012ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012eb4:	4b38      	ldr	r3, [pc, #224]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012eb6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012eba:	493a      	ldr	r1, [pc, #232]	; (8012fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012ebc:	4838      	ldr	r0, [pc, #224]	; (8012fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ebe:	f000 fce3 	bl	8013888 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	68ba      	ldr	r2, [r7, #8]
 8012ec6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d105      	bne.n	8012eda <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	7f9b      	ldrb	r3, [r3, #30]
 8012ed2:	f003 0301 	and.w	r3, r3, #1
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d059      	beq.n	8012f8e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012eda:	6a3b      	ldr	r3, [r7, #32]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d04f      	beq.n	8012f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d006      	beq.n	8012ef6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	889b      	ldrh	r3, [r3, #4]
 8012ef0:	b29b      	uxth	r3, r3
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d002      	beq.n	8012efc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	623b      	str	r3, [r7, #32]
 8012efa:	e041      	b.n	8012f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012f06:	e012      	b.n	8012f2e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f10:	88db      	ldrh	r3, [r3, #6]
 8012f12:	b29a      	uxth	r2, r3
 8012f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f16:	889b      	ldrh	r3, [r3, #4]
 8012f18:	b29b      	uxth	r3, r3
 8012f1a:	429a      	cmp	r2, r3
 8012f1c:	d002      	beq.n	8012f24 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012f1e:	2300      	movs	r3, #0
 8012f20:	623b      	str	r3, [r7, #32]
            break;
 8012f22:	e007      	b.n	8012f34 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f26:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d1e9      	bne.n	8012f08 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012f34:	6a3b      	ldr	r3, [r7, #32]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d022      	beq.n	8012f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d106      	bne.n	8012f50 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012f42:	4b15      	ldr	r3, [pc, #84]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012f44:	f240 12df 	movw	r2, #479	; 0x1df
 8012f48:	4917      	ldr	r1, [pc, #92]	; (8012fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012f4a:	4815      	ldr	r0, [pc, #84]	; (8012fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012f4c:	f000 fc9c 	bl	8013888 <iprintf>
          LWIP_ASSERT("sanity check",
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	d106      	bne.n	8012f6a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012f5c:	4b0e      	ldr	r3, [pc, #56]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012f5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012f62:	4911      	ldr	r1, [pc, #68]	; (8012fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012f64:	480e      	ldr	r0, [pc, #56]	; (8012fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012f66:	f000 fc8f 	bl	8013888 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d006      	beq.n	8012f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012f72:	4b09      	ldr	r3, [pc, #36]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012f74:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012f78:	490c      	ldr	r1, [pc, #48]	; (8012fac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012f7a:	4809      	ldr	r0, [pc, #36]	; (8012fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012f7c:	f000 fc84 	bl	8013888 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012f80:	6a3b      	ldr	r3, [r7, #32]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	bf14      	ite	ne
 8012f86:	2301      	movne	r3, #1
 8012f88:	2300      	moveq	r3, #0
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	e000      	b.n	8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012f8e:	2300      	movs	r3, #0
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3730      	adds	r7, #48	; 0x30
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	080175d4 	.word	0x080175d4
 8012f9c:	080176b8 	.word	0x080176b8
 8012fa0:	0801761c 	.word	0x0801761c
 8012fa4:	080176d8 	.word	0x080176d8
 8012fa8:	08017710 	.word	0x08017710
 8012fac:	08017720 	.word	0x08017720

08012fb0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b08e      	sub	sp, #56	; 0x38
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	f003 030f 	and.w	r3, r3, #15
 8012fc6:	b2db      	uxtb	r3, r3
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	b2db      	uxtb	r3, r3
 8012fcc:	2b14      	cmp	r3, #20
 8012fce:	f040 8167 	bne.w	80132a0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd4:	88db      	ldrh	r3, [r3, #6]
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7f5 fce3 	bl	80089a4 <lwip_htons>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	00db      	lsls	r3, r3, #3
 8012fe8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fec:	885b      	ldrh	r3, [r3, #2]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7f5 fcd7 	bl	80089a4 <lwip_htons>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	f003 030f 	and.w	r3, r3, #15
 8013002:	b2db      	uxtb	r3, r3
 8013004:	009b      	lsls	r3, r3, #2
 8013006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801300a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801300e:	b29b      	uxth	r3, r3
 8013010:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013012:	429a      	cmp	r2, r3
 8013014:	f0c0 8146 	bcc.w	80132a4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801301c:	b29b      	uxth	r3, r3
 801301e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013020:	1ad3      	subs	r3, r2, r3
 8013022:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f7f6 fff9 	bl	800a01c <pbuf_clen>
 801302a:	4603      	mov	r3, r0
 801302c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801302e:	4b9f      	ldr	r3, [pc, #636]	; (80132ac <ip4_reass+0x2fc>)
 8013030:	881b      	ldrh	r3, [r3, #0]
 8013032:	461a      	mov	r2, r3
 8013034:	8c3b      	ldrh	r3, [r7, #32]
 8013036:	4413      	add	r3, r2
 8013038:	2b0a      	cmp	r3, #10
 801303a:	dd10      	ble.n	801305e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801303c:	8c3b      	ldrh	r3, [r7, #32]
 801303e:	4619      	mov	r1, r3
 8013040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013042:	f7ff fd81 	bl	8012b48 <ip_reass_remove_oldest_datagram>
 8013046:	4603      	mov	r3, r0
 8013048:	2b00      	cmp	r3, #0
 801304a:	f000 812d 	beq.w	80132a8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801304e:	4b97      	ldr	r3, [pc, #604]	; (80132ac <ip4_reass+0x2fc>)
 8013050:	881b      	ldrh	r3, [r3, #0]
 8013052:	461a      	mov	r2, r3
 8013054:	8c3b      	ldrh	r3, [r7, #32]
 8013056:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013058:	2b0a      	cmp	r3, #10
 801305a:	f300 8125 	bgt.w	80132a8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801305e:	4b94      	ldr	r3, [pc, #592]	; (80132b0 <ip4_reass+0x300>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	633b      	str	r3, [r7, #48]	; 0x30
 8013064:	e015      	b.n	8013092 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013068:	695a      	ldr	r2, [r3, #20]
 801306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801306c:	68db      	ldr	r3, [r3, #12]
 801306e:	429a      	cmp	r2, r3
 8013070:	d10c      	bne.n	801308c <ip4_reass+0xdc>
 8013072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013074:	699a      	ldr	r2, [r3, #24]
 8013076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	429a      	cmp	r2, r3
 801307c:	d106      	bne.n	801308c <ip4_reass+0xdc>
 801307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013080:	899a      	ldrh	r2, [r3, #12]
 8013082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013084:	889b      	ldrh	r3, [r3, #4]
 8013086:	b29b      	uxth	r3, r3
 8013088:	429a      	cmp	r2, r3
 801308a:	d006      	beq.n	801309a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	633b      	str	r3, [r7, #48]	; 0x30
 8013092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013094:	2b00      	cmp	r3, #0
 8013096:	d1e6      	bne.n	8013066 <ip4_reass+0xb6>
 8013098:	e000      	b.n	801309c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801309a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d109      	bne.n	80130b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80130a2:	8c3b      	ldrh	r3, [r7, #32]
 80130a4:	4619      	mov	r1, r3
 80130a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130a8:	f7ff fdb0 	bl	8012c0c <ip_reass_enqueue_new_datagram>
 80130ac:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80130ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d11c      	bne.n	80130ee <ip4_reass+0x13e>
      goto nullreturn;
 80130b4:	e109      	b.n	80132ca <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80130b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b8:	88db      	ldrh	r3, [r3, #6]
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	4618      	mov	r0, r3
 80130be:	f7f5 fc71 	bl	80089a4 <lwip_htons>
 80130c2:	4603      	mov	r3, r0
 80130c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d110      	bne.n	80130ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80130cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ce:	89db      	ldrh	r3, [r3, #14]
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7f5 fc67 	bl	80089a4 <lwip_htons>
 80130d6:	4603      	mov	r3, r0
 80130d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d006      	beq.n	80130ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80130e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e2:	3308      	adds	r3, #8
 80130e4:	2214      	movs	r2, #20
 80130e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80130e8:	4618      	mov	r0, r3
 80130ea:	f000 fb9d 	bl	8013828 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80130ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f0:	88db      	ldrh	r3, [r3, #6]
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	f003 0320 	and.w	r3, r3, #32
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	bf0c      	ite	eq
 80130fc:	2301      	moveq	r3, #1
 80130fe:	2300      	movne	r3, #0
 8013100:	b2db      	uxtb	r3, r3
 8013102:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d00e      	beq.n	8013128 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801310a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801310c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801310e:	4413      	add	r3, r2
 8013110:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013112:	8b7a      	ldrh	r2, [r7, #26]
 8013114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013116:	429a      	cmp	r2, r3
 8013118:	f0c0 80a0 	bcc.w	801325c <ip4_reass+0x2ac>
 801311c:	8b7b      	ldrh	r3, [r7, #26]
 801311e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013122:	4293      	cmp	r3, r2
 8013124:	f200 809a 	bhi.w	801325c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013128:	69fa      	ldr	r2, [r7, #28]
 801312a:	6879      	ldr	r1, [r7, #4]
 801312c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801312e:	f7ff fdd5 	bl	8012cdc <ip_reass_chain_frag_into_datagram_and_validate>
 8013132:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801313a:	f000 8091 	beq.w	8013260 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801313e:	4b5b      	ldr	r3, [pc, #364]	; (80132ac <ip4_reass+0x2fc>)
 8013140:	881a      	ldrh	r2, [r3, #0]
 8013142:	8c3b      	ldrh	r3, [r7, #32]
 8013144:	4413      	add	r3, r2
 8013146:	b29a      	uxth	r2, r3
 8013148:	4b58      	ldr	r3, [pc, #352]	; (80132ac <ip4_reass+0x2fc>)
 801314a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d00d      	beq.n	801316e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013152:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013154:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013156:	4413      	add	r3, r2
 8013158:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315c:	8a7a      	ldrh	r2, [r7, #18]
 801315e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013162:	7f9b      	ldrb	r3, [r3, #30]
 8013164:	f043 0301 	orr.w	r3, r3, #1
 8013168:	b2da      	uxtb	r2, r3
 801316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	2b01      	cmp	r3, #1
 8013172:	d171      	bne.n	8013258 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013176:	8b9b      	ldrh	r3, [r3, #28]
 8013178:	3314      	adds	r3, #20
 801317a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013190:	3308      	adds	r3, #8
 8013192:	2214      	movs	r2, #20
 8013194:	4619      	mov	r1, r3
 8013196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013198:	f000 fb46 	bl	8013828 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801319c:	8a3b      	ldrh	r3, [r7, #16]
 801319e:	4618      	mov	r0, r3
 80131a0:	f7f5 fc00 	bl	80089a4 <lwip_htons>
 80131a4:	4603      	mov	r3, r0
 80131a6:	461a      	mov	r2, r3
 80131a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80131ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ae:	2200      	movs	r2, #0
 80131b0:	719a      	strb	r2, [r3, #6]
 80131b2:	2200      	movs	r2, #0
 80131b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80131b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b8:	2200      	movs	r2, #0
 80131ba:	729a      	strb	r2, [r3, #10]
 80131bc:	2200      	movs	r2, #0
 80131be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80131c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80131c6:	e00d      	b.n	80131e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80131c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80131ce:	2114      	movs	r1, #20
 80131d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80131d2:	f7f6 fe15 	bl	8009e00 <pbuf_remove_header>
      pbuf_cat(p, r);
 80131d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	f7f6 ff59 	bl	800a090 <pbuf_cat>
      r = iprh->next_pbuf;
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80131e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d1ee      	bne.n	80131c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80131ea:	4b31      	ldr	r3, [pc, #196]	; (80132b0 <ip4_reass+0x300>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d102      	bne.n	80131fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80131f4:	2300      	movs	r3, #0
 80131f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131f8:	e010      	b.n	801321c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80131fa:	4b2d      	ldr	r3, [pc, #180]	; (80132b0 <ip4_reass+0x300>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013200:	e007      	b.n	8013212 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013208:	429a      	cmp	r2, r3
 801320a:	d006      	beq.n	801321a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013214:	2b00      	cmp	r3, #0
 8013216:	d1f4      	bne.n	8013202 <ip4_reass+0x252>
 8013218:	e000      	b.n	801321c <ip4_reass+0x26c>
          break;
 801321a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801321c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801321e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013220:	f7ff fd2e 	bl	8012c80 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7f6 fef9 	bl	800a01c <pbuf_clen>
 801322a:	4603      	mov	r3, r0
 801322c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801322e:	4b1f      	ldr	r3, [pc, #124]	; (80132ac <ip4_reass+0x2fc>)
 8013230:	881b      	ldrh	r3, [r3, #0]
 8013232:	8c3a      	ldrh	r2, [r7, #32]
 8013234:	429a      	cmp	r2, r3
 8013236:	d906      	bls.n	8013246 <ip4_reass+0x296>
 8013238:	4b1e      	ldr	r3, [pc, #120]	; (80132b4 <ip4_reass+0x304>)
 801323a:	f240 229b 	movw	r2, #667	; 0x29b
 801323e:	491e      	ldr	r1, [pc, #120]	; (80132b8 <ip4_reass+0x308>)
 8013240:	481e      	ldr	r0, [pc, #120]	; (80132bc <ip4_reass+0x30c>)
 8013242:	f000 fb21 	bl	8013888 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013246:	4b19      	ldr	r3, [pc, #100]	; (80132ac <ip4_reass+0x2fc>)
 8013248:	881a      	ldrh	r2, [r3, #0]
 801324a:	8c3b      	ldrh	r3, [r7, #32]
 801324c:	1ad3      	subs	r3, r2, r3
 801324e:	b29a      	uxth	r2, r3
 8013250:	4b16      	ldr	r3, [pc, #88]	; (80132ac <ip4_reass+0x2fc>)
 8013252:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	e03c      	b.n	80132d2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013258:	2300      	movs	r3, #0
 801325a:	e03a      	b.n	80132d2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801325c:	bf00      	nop
 801325e:	e000      	b.n	8013262 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013260:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013264:	2b00      	cmp	r3, #0
 8013266:	d106      	bne.n	8013276 <ip4_reass+0x2c6>
 8013268:	4b12      	ldr	r3, [pc, #72]	; (80132b4 <ip4_reass+0x304>)
 801326a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801326e:	4914      	ldr	r1, [pc, #80]	; (80132c0 <ip4_reass+0x310>)
 8013270:	4812      	ldr	r0, [pc, #72]	; (80132bc <ip4_reass+0x30c>)
 8013272:	f000 fb09 	bl	8013888 <iprintf>
  if (ipr->p == NULL) {
 8013276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d124      	bne.n	80132c8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801327e:	4b0c      	ldr	r3, [pc, #48]	; (80132b0 <ip4_reass+0x300>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013284:	429a      	cmp	r2, r3
 8013286:	d006      	beq.n	8013296 <ip4_reass+0x2e6>
 8013288:	4b0a      	ldr	r3, [pc, #40]	; (80132b4 <ip4_reass+0x304>)
 801328a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801328e:	490d      	ldr	r1, [pc, #52]	; (80132c4 <ip4_reass+0x314>)
 8013290:	480a      	ldr	r0, [pc, #40]	; (80132bc <ip4_reass+0x30c>)
 8013292:	f000 faf9 	bl	8013888 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013296:	2100      	movs	r1, #0
 8013298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801329a:	f7ff fcf1 	bl	8012c80 <ip_reass_dequeue_datagram>
 801329e:	e014      	b.n	80132ca <ip4_reass+0x31a>
    goto nullreturn;
 80132a0:	bf00      	nop
 80132a2:	e012      	b.n	80132ca <ip4_reass+0x31a>
    goto nullreturn;
 80132a4:	bf00      	nop
 80132a6:	e010      	b.n	80132ca <ip4_reass+0x31a>
      goto nullreturn;
 80132a8:	bf00      	nop
 80132aa:	e00e      	b.n	80132ca <ip4_reass+0x31a>
 80132ac:	200002c0 	.word	0x200002c0
 80132b0:	200002bc 	.word	0x200002bc
 80132b4:	080175d4 	.word	0x080175d4
 80132b8:	08017744 	.word	0x08017744
 80132bc:	0801761c 	.word	0x0801761c
 80132c0:	08017760 	.word	0x08017760
 80132c4:	0801776c 	.word	0x0801776c
  }

nullreturn:
 80132c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80132ca:	6878      	ldr	r0, [r7, #4]
 80132cc:	f7f6 fe1e 	bl	8009f0c <pbuf_free>
  return NULL;
 80132d0:	2300      	movs	r3, #0
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3738      	adds	r7, #56	; 0x38
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
 80132da:	bf00      	nop

080132dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80132e0:	2005      	movs	r0, #5
 80132e2:	f7f5 ffb5 	bl	8009250 <memp_malloc>
 80132e6:	4603      	mov	r3, r0
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	bd80      	pop	{r7, pc}

080132ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d106      	bne.n	8013308 <ip_frag_free_pbuf_custom_ref+0x1c>
 80132fa:	4b07      	ldr	r3, [pc, #28]	; (8013318 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80132fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013300:	4906      	ldr	r1, [pc, #24]	; (801331c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013302:	4807      	ldr	r0, [pc, #28]	; (8013320 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013304:	f000 fac0 	bl	8013888 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013308:	6879      	ldr	r1, [r7, #4]
 801330a:	2005      	movs	r0, #5
 801330c:	f7f5 ffec 	bl	80092e8 <memp_free>
}
 8013310:	bf00      	nop
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}
 8013318:	080175d4 	.word	0x080175d4
 801331c:	0801778c 	.word	0x0801778c
 8013320:	0801761c 	.word	0x0801761c

08013324 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d106      	bne.n	8013344 <ipfrag_free_pbuf_custom+0x20>
 8013336:	4b11      	ldr	r3, [pc, #68]	; (801337c <ipfrag_free_pbuf_custom+0x58>)
 8013338:	f240 22ce 	movw	r2, #718	; 0x2ce
 801333c:	4910      	ldr	r1, [pc, #64]	; (8013380 <ipfrag_free_pbuf_custom+0x5c>)
 801333e:	4811      	ldr	r0, [pc, #68]	; (8013384 <ipfrag_free_pbuf_custom+0x60>)
 8013340:	f000 faa2 	bl	8013888 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013344:	68fa      	ldr	r2, [r7, #12]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	429a      	cmp	r2, r3
 801334a:	d006      	beq.n	801335a <ipfrag_free_pbuf_custom+0x36>
 801334c:	4b0b      	ldr	r3, [pc, #44]	; (801337c <ipfrag_free_pbuf_custom+0x58>)
 801334e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013352:	490d      	ldr	r1, [pc, #52]	; (8013388 <ipfrag_free_pbuf_custom+0x64>)
 8013354:	480b      	ldr	r0, [pc, #44]	; (8013384 <ipfrag_free_pbuf_custom+0x60>)
 8013356:	f000 fa97 	bl	8013888 <iprintf>
  if (pcr->original != NULL) {
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	695b      	ldr	r3, [r3, #20]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d004      	beq.n	801336c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	695b      	ldr	r3, [r3, #20]
 8013366:	4618      	mov	r0, r3
 8013368:	f7f6 fdd0 	bl	8009f0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801336c:	68f8      	ldr	r0, [r7, #12]
 801336e:	f7ff ffbd 	bl	80132ec <ip_frag_free_pbuf_custom_ref>
}
 8013372:	bf00      	nop
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	080175d4 	.word	0x080175d4
 8013380:	08017798 	.word	0x08017798
 8013384:	0801761c 	.word	0x0801761c
 8013388:	080177a4 	.word	0x080177a4

0801338c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b094      	sub	sp, #80	; 0x50
 8013390:	af02      	add	r7, sp, #8
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013398:	2300      	movs	r3, #0
 801339a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80133a2:	3b14      	subs	r3, #20
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	da00      	bge.n	80133aa <ip4_frag+0x1e>
 80133a8:	3307      	adds	r3, #7
 80133aa:	10db      	asrs	r3, r3, #3
 80133ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80133ae:	2314      	movs	r3, #20
 80133b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	685b      	ldr	r3, [r3, #4]
 80133b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80133b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80133bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	f003 030f 	and.w	r3, r3, #15
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	009b      	lsls	r3, r3, #2
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	2b14      	cmp	r3, #20
 80133cc:	d002      	beq.n	80133d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80133ce:	f06f 0305 	mvn.w	r3, #5
 80133d2:	e110      	b.n	80135f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	895b      	ldrh	r3, [r3, #10]
 80133d8:	2b13      	cmp	r3, #19
 80133da:	d809      	bhi.n	80133f0 <ip4_frag+0x64>
 80133dc:	4b88      	ldr	r3, [pc, #544]	; (8013600 <ip4_frag+0x274>)
 80133de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80133e2:	4988      	ldr	r1, [pc, #544]	; (8013604 <ip4_frag+0x278>)
 80133e4:	4888      	ldr	r0, [pc, #544]	; (8013608 <ip4_frag+0x27c>)
 80133e6:	f000 fa4f 	bl	8013888 <iprintf>
 80133ea:	f06f 0305 	mvn.w	r3, #5
 80133ee:	e102      	b.n	80135f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80133f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f2:	88db      	ldrh	r3, [r3, #6]
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7f5 fad4 	bl	80089a4 <lwip_htons>
 80133fc:	4603      	mov	r3, r0
 80133fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013400:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013402:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013406:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801340a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801340c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013410:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	891b      	ldrh	r3, [r3, #8]
 8013416:	3b14      	subs	r3, #20
 8013418:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801341c:	e0e1      	b.n	80135e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801341e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013420:	00db      	lsls	r3, r3, #3
 8013422:	b29b      	uxth	r3, r3
 8013424:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013428:	4293      	cmp	r3, r2
 801342a:	bf28      	it	cs
 801342c:	4613      	movcs	r3, r2
 801342e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013430:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013434:	2114      	movs	r1, #20
 8013436:	200e      	movs	r0, #14
 8013438:	f7f6 fa84 	bl	8009944 <pbuf_alloc>
 801343c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013440:	2b00      	cmp	r3, #0
 8013442:	f000 80d5 	beq.w	80135f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013448:	895b      	ldrh	r3, [r3, #10]
 801344a:	2b13      	cmp	r3, #19
 801344c:	d806      	bhi.n	801345c <ip4_frag+0xd0>
 801344e:	4b6c      	ldr	r3, [pc, #432]	; (8013600 <ip4_frag+0x274>)
 8013450:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013454:	496d      	ldr	r1, [pc, #436]	; (801360c <ip4_frag+0x280>)
 8013456:	486c      	ldr	r0, [pc, #432]	; (8013608 <ip4_frag+0x27c>)
 8013458:	f000 fa16 	bl	8013888 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	2214      	movs	r2, #20
 8013462:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013464:	4618      	mov	r0, r3
 8013466:	f000 f9df 	bl	8013828 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346c:	685b      	ldr	r3, [r3, #4]
 801346e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013470:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013472:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013476:	e064      	b.n	8013542 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	895a      	ldrh	r2, [r3, #10]
 801347c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801347e:	1ad3      	subs	r3, r2, r3
 8013480:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	895b      	ldrh	r3, [r3, #10]
 8013486:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013488:	429a      	cmp	r2, r3
 801348a:	d906      	bls.n	801349a <ip4_frag+0x10e>
 801348c:	4b5c      	ldr	r3, [pc, #368]	; (8013600 <ip4_frag+0x274>)
 801348e:	f240 322d 	movw	r2, #813	; 0x32d
 8013492:	495f      	ldr	r1, [pc, #380]	; (8013610 <ip4_frag+0x284>)
 8013494:	485c      	ldr	r0, [pc, #368]	; (8013608 <ip4_frag+0x27c>)
 8013496:	f000 f9f7 	bl	8013888 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801349a:	8bfa      	ldrh	r2, [r7, #30]
 801349c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80134a0:	4293      	cmp	r3, r2
 80134a2:	bf28      	it	cs
 80134a4:	4613      	movcs	r3, r2
 80134a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80134aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d105      	bne.n	80134be <ip4_frag+0x132>
        poff = 0;
 80134b2:	2300      	movs	r3, #0
 80134b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	60fb      	str	r3, [r7, #12]
        continue;
 80134bc:	e041      	b.n	8013542 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80134be:	f7ff ff0d 	bl	80132dc <ip_frag_alloc_pbuf_custom_ref>
 80134c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d103      	bne.n	80134d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80134ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134cc:	f7f6 fd1e 	bl	8009f0c <pbuf_free>
        goto memerr;
 80134d0:	e08f      	b.n	80135f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80134d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80134d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80134da:	4413      	add	r3, r2
 80134dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80134e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80134e4:	9201      	str	r2, [sp, #4]
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	4603      	mov	r3, r0
 80134ea:	2241      	movs	r2, #65	; 0x41
 80134ec:	2000      	movs	r0, #0
 80134ee:	f7f6 fb53 	bl	8009b98 <pbuf_alloced_custom>
 80134f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d106      	bne.n	8013508 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80134fa:	69b8      	ldr	r0, [r7, #24]
 80134fc:	f7ff fef6 	bl	80132ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013502:	f7f6 fd03 	bl	8009f0c <pbuf_free>
        goto memerr;
 8013506:	e074      	b.n	80135f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013508:	68f8      	ldr	r0, [r7, #12]
 801350a:	f7f6 fd9f 	bl	800a04c <pbuf_ref>
      pcr->original = p;
 801350e:	69bb      	ldr	r3, [r7, #24]
 8013510:	68fa      	ldr	r2, [r7, #12]
 8013512:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	4a3f      	ldr	r2, [pc, #252]	; (8013614 <ip4_frag+0x288>)
 8013518:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801351a:	6979      	ldr	r1, [r7, #20]
 801351c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801351e:	f7f6 fdb7 	bl	800a090 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013522:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013526:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801352a:	1ad3      	subs	r3, r2, r3
 801352c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013530:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013534:	2b00      	cmp	r3, #0
 8013536:	d004      	beq.n	8013542 <ip4_frag+0x1b6>
        poff = 0;
 8013538:	2300      	movs	r3, #0
 801353a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013542:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013546:	2b00      	cmp	r3, #0
 8013548:	d196      	bne.n	8013478 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801354a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801354c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013550:	4413      	add	r3, r2
 8013552:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013558:	f1a3 0213 	sub.w	r2, r3, #19
 801355c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013560:	429a      	cmp	r2, r3
 8013562:	bfcc      	ite	gt
 8013564:	2301      	movgt	r3, #1
 8013566:	2300      	movle	r3, #0
 8013568:	b2db      	uxtb	r3, r3
 801356a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801356c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013574:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013576:	6a3b      	ldr	r3, [r7, #32]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d002      	beq.n	8013582 <ip4_frag+0x1f6>
 801357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801357e:	2b00      	cmp	r3, #0
 8013580:	d003      	beq.n	801358a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013582:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013588:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801358a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801358c:	4618      	mov	r0, r3
 801358e:	f7f5 fa09 	bl	80089a4 <lwip_htons>
 8013592:	4603      	mov	r3, r0
 8013594:	461a      	mov	r2, r3
 8013596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013598:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801359a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801359c:	3314      	adds	r3, #20
 801359e:	b29b      	uxth	r3, r3
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7f5 f9ff 	bl	80089a4 <lwip_htons>
 80135a6:	4603      	mov	r3, r0
 80135a8:	461a      	mov	r2, r3
 80135aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80135ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b0:	2200      	movs	r2, #0
 80135b2:	729a      	strb	r2, [r3, #10]
 80135b4:	2200      	movs	r2, #0
 80135b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	695b      	ldr	r3, [r3, #20]
 80135bc:	687a      	ldr	r2, [r7, #4]
 80135be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135c0:	68b8      	ldr	r0, [r7, #8]
 80135c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80135c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135c6:	f7f6 fca1 	bl	8009f0c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80135ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135d0:	1ad3      	subs	r3, r2, r3
 80135d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80135d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80135da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135dc:	4413      	add	r3, r2
 80135de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80135e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	f47f af19 	bne.w	801341e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80135ec:	2300      	movs	r3, #0
 80135ee:	e002      	b.n	80135f6 <ip4_frag+0x26a>
      goto memerr;
 80135f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80135f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3748      	adds	r7, #72	; 0x48
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	080175d4 	.word	0x080175d4
 8013604:	080177b0 	.word	0x080177b0
 8013608:	0801761c 	.word	0x0801761c
 801360c:	080177cc 	.word	0x080177cc
 8013610:	080177ec 	.word	0x080177ec
 8013614:	08013325 	.word	0x08013325

08013618 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b086      	sub	sp, #24
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013622:	230e      	movs	r3, #14
 8013624:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	895b      	ldrh	r3, [r3, #10]
 801362a:	2b0e      	cmp	r3, #14
 801362c:	d96e      	bls.n	801370c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	7bdb      	ldrb	r3, [r3, #15]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d106      	bne.n	8013644 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013636:	683b      	ldr	r3, [r7, #0]
 8013638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801363c:	3301      	adds	r3, #1
 801363e:	b2da      	uxtb	r2, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	7b1a      	ldrb	r2, [r3, #12]
 801364e:	7b5b      	ldrb	r3, [r3, #13]
 8013650:	021b      	lsls	r3, r3, #8
 8013652:	4313      	orrs	r3, r2
 8013654:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013656:	693b      	ldr	r3, [r7, #16]
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	f003 0301 	and.w	r3, r3, #1
 801365e:	2b00      	cmp	r3, #0
 8013660:	d023      	beq.n	80136aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013662:	693b      	ldr	r3, [r7, #16]
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	2b01      	cmp	r3, #1
 8013668:	d10f      	bne.n	801368a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	785b      	ldrb	r3, [r3, #1]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d11b      	bne.n	80136aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013676:	2b5e      	cmp	r3, #94	; 0x5e
 8013678:	d117      	bne.n	80136aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	7b5b      	ldrb	r3, [r3, #13]
 801367e:	f043 0310 	orr.w	r3, r3, #16
 8013682:	b2da      	uxtb	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	735a      	strb	r2, [r3, #13]
 8013688:	e00f      	b.n	80136aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	2206      	movs	r2, #6
 801368e:	4928      	ldr	r1, [pc, #160]	; (8013730 <ethernet_input+0x118>)
 8013690:	4618      	mov	r0, r3
 8013692:	f000 f8bb 	bl	801380c <memcmp>
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d106      	bne.n	80136aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	7b5b      	ldrb	r3, [r3, #13]
 80136a0:	f043 0308 	orr.w	r3, r3, #8
 80136a4:	b2da      	uxtb	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80136aa:	89fb      	ldrh	r3, [r7, #14]
 80136ac:	2b08      	cmp	r3, #8
 80136ae:	d003      	beq.n	80136b8 <ethernet_input+0xa0>
 80136b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80136b4:	d014      	beq.n	80136e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80136b6:	e032      	b.n	801371e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136be:	f003 0308 	and.w	r3, r3, #8
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d024      	beq.n	8013710 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80136c6:	8afb      	ldrh	r3, [r7, #22]
 80136c8:	4619      	mov	r1, r3
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7f6 fb98 	bl	8009e00 <pbuf_remove_header>
 80136d0:	4603      	mov	r3, r0
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d11e      	bne.n	8013714 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80136d6:	6839      	ldr	r1, [r7, #0]
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7fe ff27 	bl	801252c <ip4_input>
      break;
 80136de:	e013      	b.n	8013708 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80136e6:	f003 0308 	and.w	r3, r3, #8
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d014      	beq.n	8013718 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80136ee:	8afb      	ldrh	r3, [r7, #22]
 80136f0:	4619      	mov	r1, r3
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7f6 fb84 	bl	8009e00 <pbuf_remove_header>
 80136f8:	4603      	mov	r3, r0
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d10e      	bne.n	801371c <ethernet_input+0x104>
        etharp_input(p, netif);
 80136fe:	6839      	ldr	r1, [r7, #0]
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f7fe f8c7 	bl	8011894 <etharp_input>
      break;
 8013706:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013708:	2300      	movs	r3, #0
 801370a:	e00c      	b.n	8013726 <ethernet_input+0x10e>
    goto free_and_return;
 801370c:	bf00      	nop
 801370e:	e006      	b.n	801371e <ethernet_input+0x106>
        goto free_and_return;
 8013710:	bf00      	nop
 8013712:	e004      	b.n	801371e <ethernet_input+0x106>
        goto free_and_return;
 8013714:	bf00      	nop
 8013716:	e002      	b.n	801371e <ethernet_input+0x106>
        goto free_and_return;
 8013718:	bf00      	nop
 801371a:	e000      	b.n	801371e <ethernet_input+0x106>
        goto free_and_return;
 801371c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7f6 fbf4 	bl	8009f0c <pbuf_free>
  return ERR_OK;
 8013724:	2300      	movs	r3, #0
}
 8013726:	4618      	mov	r0, r3
 8013728:	3718      	adds	r7, #24
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}
 801372e:	bf00      	nop
 8013730:	08017a74 	.word	0x08017a74

08013734 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013734:	b580      	push	{r7, lr}
 8013736:	b086      	sub	sp, #24
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
 8013740:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013742:	8c3b      	ldrh	r3, [r7, #32]
 8013744:	4618      	mov	r0, r3
 8013746:	f7f5 f92d 	bl	80089a4 <lwip_htons>
 801374a:	4603      	mov	r3, r0
 801374c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801374e:	210e      	movs	r1, #14
 8013750:	68b8      	ldr	r0, [r7, #8]
 8013752:	f7f6 fb45 	bl	8009de0 <pbuf_add_header>
 8013756:	4603      	mov	r3, r0
 8013758:	2b00      	cmp	r3, #0
 801375a:	d125      	bne.n	80137a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	685b      	ldr	r3, [r3, #4]
 8013760:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	8afa      	ldrh	r2, [r7, #22]
 8013766:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	2206      	movs	r2, #6
 801376c:	6839      	ldr	r1, [r7, #0]
 801376e:	4618      	mov	r0, r3
 8013770:	f000 f85a 	bl	8013828 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	3306      	adds	r3, #6
 8013778:	2206      	movs	r2, #6
 801377a:	6879      	ldr	r1, [r7, #4]
 801377c:	4618      	mov	r0, r3
 801377e:	f000 f853 	bl	8013828 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013788:	2b06      	cmp	r3, #6
 801378a:	d006      	beq.n	801379a <ethernet_output+0x66>
 801378c:	4b0a      	ldr	r3, [pc, #40]	; (80137b8 <ethernet_output+0x84>)
 801378e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013792:	490a      	ldr	r1, [pc, #40]	; (80137bc <ethernet_output+0x88>)
 8013794:	480a      	ldr	r0, [pc, #40]	; (80137c0 <ethernet_output+0x8c>)
 8013796:	f000 f877 	bl	8013888 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	699b      	ldr	r3, [r3, #24]
 801379e:	68b9      	ldr	r1, [r7, #8]
 80137a0:	68f8      	ldr	r0, [r7, #12]
 80137a2:	4798      	blx	r3
 80137a4:	4603      	mov	r3, r0
 80137a6:	e002      	b.n	80137ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80137a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80137aa:	f06f 0301 	mvn.w	r3, #1
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	3718      	adds	r7, #24
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	080177fc 	.word	0x080177fc
 80137bc:	08017834 	.word	0x08017834
 80137c0:	08017868 	.word	0x08017868

080137c4 <__libc_init_array>:
 80137c4:	b570      	push	{r4, r5, r6, lr}
 80137c6:	4d0d      	ldr	r5, [pc, #52]	; (80137fc <__libc_init_array+0x38>)
 80137c8:	4c0d      	ldr	r4, [pc, #52]	; (8013800 <__libc_init_array+0x3c>)
 80137ca:	1b64      	subs	r4, r4, r5
 80137cc:	10a4      	asrs	r4, r4, #2
 80137ce:	2600      	movs	r6, #0
 80137d0:	42a6      	cmp	r6, r4
 80137d2:	d109      	bne.n	80137e8 <__libc_init_array+0x24>
 80137d4:	4d0b      	ldr	r5, [pc, #44]	; (8013804 <__libc_init_array+0x40>)
 80137d6:	4c0c      	ldr	r4, [pc, #48]	; (8013808 <__libc_init_array+0x44>)
 80137d8:	f001 fa36 	bl	8014c48 <_init>
 80137dc:	1b64      	subs	r4, r4, r5
 80137de:	10a4      	asrs	r4, r4, #2
 80137e0:	2600      	movs	r6, #0
 80137e2:	42a6      	cmp	r6, r4
 80137e4:	d105      	bne.n	80137f2 <__libc_init_array+0x2e>
 80137e6:	bd70      	pop	{r4, r5, r6, pc}
 80137e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80137ec:	4798      	blx	r3
 80137ee:	3601      	adds	r6, #1
 80137f0:	e7ee      	b.n	80137d0 <__libc_init_array+0xc>
 80137f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80137f6:	4798      	blx	r3
 80137f8:	3601      	adds	r6, #1
 80137fa:	e7f2      	b.n	80137e2 <__libc_init_array+0x1e>
 80137fc:	08017bd8 	.word	0x08017bd8
 8013800:	08017bd8 	.word	0x08017bd8
 8013804:	08017bd8 	.word	0x08017bd8
 8013808:	08017bdc 	.word	0x08017bdc

0801380c <memcmp>:
 801380c:	b530      	push	{r4, r5, lr}
 801380e:	3901      	subs	r1, #1
 8013810:	2400      	movs	r4, #0
 8013812:	42a2      	cmp	r2, r4
 8013814:	d101      	bne.n	801381a <memcmp+0xe>
 8013816:	2000      	movs	r0, #0
 8013818:	e005      	b.n	8013826 <memcmp+0x1a>
 801381a:	5d03      	ldrb	r3, [r0, r4]
 801381c:	3401      	adds	r4, #1
 801381e:	5d0d      	ldrb	r5, [r1, r4]
 8013820:	42ab      	cmp	r3, r5
 8013822:	d0f6      	beq.n	8013812 <memcmp+0x6>
 8013824:	1b58      	subs	r0, r3, r5
 8013826:	bd30      	pop	{r4, r5, pc}

08013828 <memcpy>:
 8013828:	440a      	add	r2, r1
 801382a:	4291      	cmp	r1, r2
 801382c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013830:	d100      	bne.n	8013834 <memcpy+0xc>
 8013832:	4770      	bx	lr
 8013834:	b510      	push	{r4, lr}
 8013836:	f811 4b01 	ldrb.w	r4, [r1], #1
 801383a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801383e:	4291      	cmp	r1, r2
 8013840:	d1f9      	bne.n	8013836 <memcpy+0xe>
 8013842:	bd10      	pop	{r4, pc}

08013844 <memmove>:
 8013844:	4288      	cmp	r0, r1
 8013846:	b510      	push	{r4, lr}
 8013848:	eb01 0402 	add.w	r4, r1, r2
 801384c:	d902      	bls.n	8013854 <memmove+0x10>
 801384e:	4284      	cmp	r4, r0
 8013850:	4623      	mov	r3, r4
 8013852:	d807      	bhi.n	8013864 <memmove+0x20>
 8013854:	1e43      	subs	r3, r0, #1
 8013856:	42a1      	cmp	r1, r4
 8013858:	d008      	beq.n	801386c <memmove+0x28>
 801385a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801385e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013862:	e7f8      	b.n	8013856 <memmove+0x12>
 8013864:	4402      	add	r2, r0
 8013866:	4601      	mov	r1, r0
 8013868:	428a      	cmp	r2, r1
 801386a:	d100      	bne.n	801386e <memmove+0x2a>
 801386c:	bd10      	pop	{r4, pc}
 801386e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013876:	e7f7      	b.n	8013868 <memmove+0x24>

08013878 <memset>:
 8013878:	4402      	add	r2, r0
 801387a:	4603      	mov	r3, r0
 801387c:	4293      	cmp	r3, r2
 801387e:	d100      	bne.n	8013882 <memset+0xa>
 8013880:	4770      	bx	lr
 8013882:	f803 1b01 	strb.w	r1, [r3], #1
 8013886:	e7f9      	b.n	801387c <memset+0x4>

08013888 <iprintf>:
 8013888:	b40f      	push	{r0, r1, r2, r3}
 801388a:	4b0a      	ldr	r3, [pc, #40]	; (80138b4 <iprintf+0x2c>)
 801388c:	b513      	push	{r0, r1, r4, lr}
 801388e:	681c      	ldr	r4, [r3, #0]
 8013890:	b124      	cbz	r4, 801389c <iprintf+0x14>
 8013892:	69a3      	ldr	r3, [r4, #24]
 8013894:	b913      	cbnz	r3, 801389c <iprintf+0x14>
 8013896:	4620      	mov	r0, r4
 8013898:	f000 f900 	bl	8013a9c <__sinit>
 801389c:	ab05      	add	r3, sp, #20
 801389e:	9a04      	ldr	r2, [sp, #16]
 80138a0:	68a1      	ldr	r1, [r4, #8]
 80138a2:	9301      	str	r3, [sp, #4]
 80138a4:	4620      	mov	r0, r4
 80138a6:	f000 fbe3 	bl	8014070 <_vfiprintf_r>
 80138aa:	b002      	add	sp, #8
 80138ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138b0:	b004      	add	sp, #16
 80138b2:	4770      	bx	lr
 80138b4:	20000084 	.word	0x20000084

080138b8 <rand>:
 80138b8:	4b17      	ldr	r3, [pc, #92]	; (8013918 <rand+0x60>)
 80138ba:	b510      	push	{r4, lr}
 80138bc:	681c      	ldr	r4, [r3, #0]
 80138be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80138c0:	b9b3      	cbnz	r3, 80138f0 <rand+0x38>
 80138c2:	2018      	movs	r0, #24
 80138c4:	f000 f99c 	bl	8013c00 <malloc>
 80138c8:	63a0      	str	r0, [r4, #56]	; 0x38
 80138ca:	b928      	cbnz	r0, 80138d8 <rand+0x20>
 80138cc:	4602      	mov	r2, r0
 80138ce:	4b13      	ldr	r3, [pc, #76]	; (801391c <rand+0x64>)
 80138d0:	4813      	ldr	r0, [pc, #76]	; (8013920 <rand+0x68>)
 80138d2:	214e      	movs	r1, #78	; 0x4e
 80138d4:	f000 f86c 	bl	80139b0 <__assert_func>
 80138d8:	4a12      	ldr	r2, [pc, #72]	; (8013924 <rand+0x6c>)
 80138da:	4b13      	ldr	r3, [pc, #76]	; (8013928 <rand+0x70>)
 80138dc:	e9c0 2300 	strd	r2, r3, [r0]
 80138e0:	4b12      	ldr	r3, [pc, #72]	; (801392c <rand+0x74>)
 80138e2:	6083      	str	r3, [r0, #8]
 80138e4:	230b      	movs	r3, #11
 80138e6:	8183      	strh	r3, [r0, #12]
 80138e8:	2201      	movs	r2, #1
 80138ea:	2300      	movs	r3, #0
 80138ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80138f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80138f2:	480f      	ldr	r0, [pc, #60]	; (8013930 <rand+0x78>)
 80138f4:	690a      	ldr	r2, [r1, #16]
 80138f6:	694b      	ldr	r3, [r1, #20]
 80138f8:	4c0e      	ldr	r4, [pc, #56]	; (8013934 <rand+0x7c>)
 80138fa:	4350      	muls	r0, r2
 80138fc:	fb04 0003 	mla	r0, r4, r3, r0
 8013900:	fba2 3404 	umull	r3, r4, r2, r4
 8013904:	1c5a      	adds	r2, r3, #1
 8013906:	4404      	add	r4, r0
 8013908:	f144 0000 	adc.w	r0, r4, #0
 801390c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013910:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013914:	bd10      	pop	{r4, pc}
 8013916:	bf00      	nop
 8013918:	20000084 	.word	0x20000084
 801391c:	08017a88 	.word	0x08017a88
 8013920:	08017a9f 	.word	0x08017a9f
 8013924:	abcd330e 	.word	0xabcd330e
 8013928:	e66d1234 	.word	0xe66d1234
 801392c:	0005deec 	.word	0x0005deec
 8013930:	5851f42d 	.word	0x5851f42d
 8013934:	4c957f2d 	.word	0x4c957f2d

08013938 <siprintf>:
 8013938:	b40e      	push	{r1, r2, r3}
 801393a:	b500      	push	{lr}
 801393c:	b09c      	sub	sp, #112	; 0x70
 801393e:	ab1d      	add	r3, sp, #116	; 0x74
 8013940:	9002      	str	r0, [sp, #8]
 8013942:	9006      	str	r0, [sp, #24]
 8013944:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013948:	4809      	ldr	r0, [pc, #36]	; (8013970 <siprintf+0x38>)
 801394a:	9107      	str	r1, [sp, #28]
 801394c:	9104      	str	r1, [sp, #16]
 801394e:	4909      	ldr	r1, [pc, #36]	; (8013974 <siprintf+0x3c>)
 8013950:	f853 2b04 	ldr.w	r2, [r3], #4
 8013954:	9105      	str	r1, [sp, #20]
 8013956:	6800      	ldr	r0, [r0, #0]
 8013958:	9301      	str	r3, [sp, #4]
 801395a:	a902      	add	r1, sp, #8
 801395c:	f000 fa5e 	bl	8013e1c <_svfiprintf_r>
 8013960:	9b02      	ldr	r3, [sp, #8]
 8013962:	2200      	movs	r2, #0
 8013964:	701a      	strb	r2, [r3, #0]
 8013966:	b01c      	add	sp, #112	; 0x70
 8013968:	f85d eb04 	ldr.w	lr, [sp], #4
 801396c:	b003      	add	sp, #12
 801396e:	4770      	bx	lr
 8013970:	20000084 	.word	0x20000084
 8013974:	ffff0208 	.word	0xffff0208

08013978 <strcpy>:
 8013978:	4603      	mov	r3, r0
 801397a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801397e:	f803 2b01 	strb.w	r2, [r3], #1
 8013982:	2a00      	cmp	r2, #0
 8013984:	d1f9      	bne.n	801397a <strcpy+0x2>
 8013986:	4770      	bx	lr

08013988 <strncpy>:
 8013988:	b510      	push	{r4, lr}
 801398a:	3901      	subs	r1, #1
 801398c:	4603      	mov	r3, r0
 801398e:	b132      	cbz	r2, 801399e <strncpy+0x16>
 8013990:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013994:	f803 4b01 	strb.w	r4, [r3], #1
 8013998:	3a01      	subs	r2, #1
 801399a:	2c00      	cmp	r4, #0
 801399c:	d1f7      	bne.n	801398e <strncpy+0x6>
 801399e:	441a      	add	r2, r3
 80139a0:	2100      	movs	r1, #0
 80139a2:	4293      	cmp	r3, r2
 80139a4:	d100      	bne.n	80139a8 <strncpy+0x20>
 80139a6:	bd10      	pop	{r4, pc}
 80139a8:	f803 1b01 	strb.w	r1, [r3], #1
 80139ac:	e7f9      	b.n	80139a2 <strncpy+0x1a>
	...

080139b0 <__assert_func>:
 80139b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80139b2:	4614      	mov	r4, r2
 80139b4:	461a      	mov	r2, r3
 80139b6:	4b09      	ldr	r3, [pc, #36]	; (80139dc <__assert_func+0x2c>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	4605      	mov	r5, r0
 80139bc:	68d8      	ldr	r0, [r3, #12]
 80139be:	b14c      	cbz	r4, 80139d4 <__assert_func+0x24>
 80139c0:	4b07      	ldr	r3, [pc, #28]	; (80139e0 <__assert_func+0x30>)
 80139c2:	9100      	str	r1, [sp, #0]
 80139c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80139c8:	4906      	ldr	r1, [pc, #24]	; (80139e4 <__assert_func+0x34>)
 80139ca:	462b      	mov	r3, r5
 80139cc:	f000 f8e4 	bl	8013b98 <fiprintf>
 80139d0:	f000 ff38 	bl	8014844 <abort>
 80139d4:	4b04      	ldr	r3, [pc, #16]	; (80139e8 <__assert_func+0x38>)
 80139d6:	461c      	mov	r4, r3
 80139d8:	e7f3      	b.n	80139c2 <__assert_func+0x12>
 80139da:	bf00      	nop
 80139dc:	20000084 	.word	0x20000084
 80139e0:	08017afe 	.word	0x08017afe
 80139e4:	08017b0b 	.word	0x08017b0b
 80139e8:	08017b39 	.word	0x08017b39

080139ec <std>:
 80139ec:	2300      	movs	r3, #0
 80139ee:	b510      	push	{r4, lr}
 80139f0:	4604      	mov	r4, r0
 80139f2:	e9c0 3300 	strd	r3, r3, [r0]
 80139f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80139fa:	6083      	str	r3, [r0, #8]
 80139fc:	8181      	strh	r1, [r0, #12]
 80139fe:	6643      	str	r3, [r0, #100]	; 0x64
 8013a00:	81c2      	strh	r2, [r0, #14]
 8013a02:	6183      	str	r3, [r0, #24]
 8013a04:	4619      	mov	r1, r3
 8013a06:	2208      	movs	r2, #8
 8013a08:	305c      	adds	r0, #92	; 0x5c
 8013a0a:	f7ff ff35 	bl	8013878 <memset>
 8013a0e:	4b05      	ldr	r3, [pc, #20]	; (8013a24 <std+0x38>)
 8013a10:	6263      	str	r3, [r4, #36]	; 0x24
 8013a12:	4b05      	ldr	r3, [pc, #20]	; (8013a28 <std+0x3c>)
 8013a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8013a16:	4b05      	ldr	r3, [pc, #20]	; (8013a2c <std+0x40>)
 8013a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013a1a:	4b05      	ldr	r3, [pc, #20]	; (8013a30 <std+0x44>)
 8013a1c:	6224      	str	r4, [r4, #32]
 8013a1e:	6323      	str	r3, [r4, #48]	; 0x30
 8013a20:	bd10      	pop	{r4, pc}
 8013a22:	bf00      	nop
 8013a24:	08014619 	.word	0x08014619
 8013a28:	0801463b 	.word	0x0801463b
 8013a2c:	08014673 	.word	0x08014673
 8013a30:	08014697 	.word	0x08014697

08013a34 <_cleanup_r>:
 8013a34:	4901      	ldr	r1, [pc, #4]	; (8013a3c <_cleanup_r+0x8>)
 8013a36:	f000 b8c1 	b.w	8013bbc <_fwalk_reent>
 8013a3a:	bf00      	nop
 8013a3c:	08014981 	.word	0x08014981

08013a40 <__sfmoreglue>:
 8013a40:	b570      	push	{r4, r5, r6, lr}
 8013a42:	1e4a      	subs	r2, r1, #1
 8013a44:	2568      	movs	r5, #104	; 0x68
 8013a46:	4355      	muls	r5, r2
 8013a48:	460e      	mov	r6, r1
 8013a4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013a4e:	f000 f92f 	bl	8013cb0 <_malloc_r>
 8013a52:	4604      	mov	r4, r0
 8013a54:	b140      	cbz	r0, 8013a68 <__sfmoreglue+0x28>
 8013a56:	2100      	movs	r1, #0
 8013a58:	e9c0 1600 	strd	r1, r6, [r0]
 8013a5c:	300c      	adds	r0, #12
 8013a5e:	60a0      	str	r0, [r4, #8]
 8013a60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013a64:	f7ff ff08 	bl	8013878 <memset>
 8013a68:	4620      	mov	r0, r4
 8013a6a:	bd70      	pop	{r4, r5, r6, pc}

08013a6c <__sfp_lock_acquire>:
 8013a6c:	4801      	ldr	r0, [pc, #4]	; (8013a74 <__sfp_lock_acquire+0x8>)
 8013a6e:	f000 b8c5 	b.w	8013bfc <__retarget_lock_acquire_recursive>
 8013a72:	bf00      	nop
 8013a74:	20009f70 	.word	0x20009f70

08013a78 <__sfp_lock_release>:
 8013a78:	4801      	ldr	r0, [pc, #4]	; (8013a80 <__sfp_lock_release+0x8>)
 8013a7a:	f000 b8c0 	b.w	8013bfe <__retarget_lock_release_recursive>
 8013a7e:	bf00      	nop
 8013a80:	20009f70 	.word	0x20009f70

08013a84 <__sinit_lock_acquire>:
 8013a84:	4801      	ldr	r0, [pc, #4]	; (8013a8c <__sinit_lock_acquire+0x8>)
 8013a86:	f000 b8b9 	b.w	8013bfc <__retarget_lock_acquire_recursive>
 8013a8a:	bf00      	nop
 8013a8c:	20009f6b 	.word	0x20009f6b

08013a90 <__sinit_lock_release>:
 8013a90:	4801      	ldr	r0, [pc, #4]	; (8013a98 <__sinit_lock_release+0x8>)
 8013a92:	f000 b8b4 	b.w	8013bfe <__retarget_lock_release_recursive>
 8013a96:	bf00      	nop
 8013a98:	20009f6b 	.word	0x20009f6b

08013a9c <__sinit>:
 8013a9c:	b510      	push	{r4, lr}
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	f7ff fff0 	bl	8013a84 <__sinit_lock_acquire>
 8013aa4:	69a3      	ldr	r3, [r4, #24]
 8013aa6:	b11b      	cbz	r3, 8013ab0 <__sinit+0x14>
 8013aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013aac:	f7ff bff0 	b.w	8013a90 <__sinit_lock_release>
 8013ab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013ab4:	6523      	str	r3, [r4, #80]	; 0x50
 8013ab6:	4b13      	ldr	r3, [pc, #76]	; (8013b04 <__sinit+0x68>)
 8013ab8:	4a13      	ldr	r2, [pc, #76]	; (8013b08 <__sinit+0x6c>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	62a2      	str	r2, [r4, #40]	; 0x28
 8013abe:	42a3      	cmp	r3, r4
 8013ac0:	bf04      	itt	eq
 8013ac2:	2301      	moveq	r3, #1
 8013ac4:	61a3      	streq	r3, [r4, #24]
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f000 f820 	bl	8013b0c <__sfp>
 8013acc:	6060      	str	r0, [r4, #4]
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f000 f81c 	bl	8013b0c <__sfp>
 8013ad4:	60a0      	str	r0, [r4, #8]
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f000 f818 	bl	8013b0c <__sfp>
 8013adc:	2200      	movs	r2, #0
 8013ade:	60e0      	str	r0, [r4, #12]
 8013ae0:	2104      	movs	r1, #4
 8013ae2:	6860      	ldr	r0, [r4, #4]
 8013ae4:	f7ff ff82 	bl	80139ec <std>
 8013ae8:	68a0      	ldr	r0, [r4, #8]
 8013aea:	2201      	movs	r2, #1
 8013aec:	2109      	movs	r1, #9
 8013aee:	f7ff ff7d 	bl	80139ec <std>
 8013af2:	68e0      	ldr	r0, [r4, #12]
 8013af4:	2202      	movs	r2, #2
 8013af6:	2112      	movs	r1, #18
 8013af8:	f7ff ff78 	bl	80139ec <std>
 8013afc:	2301      	movs	r3, #1
 8013afe:	61a3      	str	r3, [r4, #24]
 8013b00:	e7d2      	b.n	8013aa8 <__sinit+0xc>
 8013b02:	bf00      	nop
 8013b04:	08017a84 	.word	0x08017a84
 8013b08:	08013a35 	.word	0x08013a35

08013b0c <__sfp>:
 8013b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b0e:	4607      	mov	r7, r0
 8013b10:	f7ff ffac 	bl	8013a6c <__sfp_lock_acquire>
 8013b14:	4b1e      	ldr	r3, [pc, #120]	; (8013b90 <__sfp+0x84>)
 8013b16:	681e      	ldr	r6, [r3, #0]
 8013b18:	69b3      	ldr	r3, [r6, #24]
 8013b1a:	b913      	cbnz	r3, 8013b22 <__sfp+0x16>
 8013b1c:	4630      	mov	r0, r6
 8013b1e:	f7ff ffbd 	bl	8013a9c <__sinit>
 8013b22:	3648      	adds	r6, #72	; 0x48
 8013b24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	d503      	bpl.n	8013b34 <__sfp+0x28>
 8013b2c:	6833      	ldr	r3, [r6, #0]
 8013b2e:	b30b      	cbz	r3, 8013b74 <__sfp+0x68>
 8013b30:	6836      	ldr	r6, [r6, #0]
 8013b32:	e7f7      	b.n	8013b24 <__sfp+0x18>
 8013b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013b38:	b9d5      	cbnz	r5, 8013b70 <__sfp+0x64>
 8013b3a:	4b16      	ldr	r3, [pc, #88]	; (8013b94 <__sfp+0x88>)
 8013b3c:	60e3      	str	r3, [r4, #12]
 8013b3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013b42:	6665      	str	r5, [r4, #100]	; 0x64
 8013b44:	f000 f859 	bl	8013bfa <__retarget_lock_init_recursive>
 8013b48:	f7ff ff96 	bl	8013a78 <__sfp_lock_release>
 8013b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013b54:	6025      	str	r5, [r4, #0]
 8013b56:	61a5      	str	r5, [r4, #24]
 8013b58:	2208      	movs	r2, #8
 8013b5a:	4629      	mov	r1, r5
 8013b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013b60:	f7ff fe8a 	bl	8013878 <memset>
 8013b64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013b68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b70:	3468      	adds	r4, #104	; 0x68
 8013b72:	e7d9      	b.n	8013b28 <__sfp+0x1c>
 8013b74:	2104      	movs	r1, #4
 8013b76:	4638      	mov	r0, r7
 8013b78:	f7ff ff62 	bl	8013a40 <__sfmoreglue>
 8013b7c:	4604      	mov	r4, r0
 8013b7e:	6030      	str	r0, [r6, #0]
 8013b80:	2800      	cmp	r0, #0
 8013b82:	d1d5      	bne.n	8013b30 <__sfp+0x24>
 8013b84:	f7ff ff78 	bl	8013a78 <__sfp_lock_release>
 8013b88:	230c      	movs	r3, #12
 8013b8a:	603b      	str	r3, [r7, #0]
 8013b8c:	e7ee      	b.n	8013b6c <__sfp+0x60>
 8013b8e:	bf00      	nop
 8013b90:	08017a84 	.word	0x08017a84
 8013b94:	ffff0001 	.word	0xffff0001

08013b98 <fiprintf>:
 8013b98:	b40e      	push	{r1, r2, r3}
 8013b9a:	b503      	push	{r0, r1, lr}
 8013b9c:	4601      	mov	r1, r0
 8013b9e:	ab03      	add	r3, sp, #12
 8013ba0:	4805      	ldr	r0, [pc, #20]	; (8013bb8 <fiprintf+0x20>)
 8013ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ba6:	6800      	ldr	r0, [r0, #0]
 8013ba8:	9301      	str	r3, [sp, #4]
 8013baa:	f000 fa61 	bl	8014070 <_vfiprintf_r>
 8013bae:	b002      	add	sp, #8
 8013bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bb4:	b003      	add	sp, #12
 8013bb6:	4770      	bx	lr
 8013bb8:	20000084 	.word	0x20000084

08013bbc <_fwalk_reent>:
 8013bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bc0:	4606      	mov	r6, r0
 8013bc2:	4688      	mov	r8, r1
 8013bc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013bc8:	2700      	movs	r7, #0
 8013bca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013bce:	f1b9 0901 	subs.w	r9, r9, #1
 8013bd2:	d505      	bpl.n	8013be0 <_fwalk_reent+0x24>
 8013bd4:	6824      	ldr	r4, [r4, #0]
 8013bd6:	2c00      	cmp	r4, #0
 8013bd8:	d1f7      	bne.n	8013bca <_fwalk_reent+0xe>
 8013bda:	4638      	mov	r0, r7
 8013bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013be0:	89ab      	ldrh	r3, [r5, #12]
 8013be2:	2b01      	cmp	r3, #1
 8013be4:	d907      	bls.n	8013bf6 <_fwalk_reent+0x3a>
 8013be6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013bea:	3301      	adds	r3, #1
 8013bec:	d003      	beq.n	8013bf6 <_fwalk_reent+0x3a>
 8013bee:	4629      	mov	r1, r5
 8013bf0:	4630      	mov	r0, r6
 8013bf2:	47c0      	blx	r8
 8013bf4:	4307      	orrs	r7, r0
 8013bf6:	3568      	adds	r5, #104	; 0x68
 8013bf8:	e7e9      	b.n	8013bce <_fwalk_reent+0x12>

08013bfa <__retarget_lock_init_recursive>:
 8013bfa:	4770      	bx	lr

08013bfc <__retarget_lock_acquire_recursive>:
 8013bfc:	4770      	bx	lr

08013bfe <__retarget_lock_release_recursive>:
 8013bfe:	4770      	bx	lr

08013c00 <malloc>:
 8013c00:	4b02      	ldr	r3, [pc, #8]	; (8013c0c <malloc+0xc>)
 8013c02:	4601      	mov	r1, r0
 8013c04:	6818      	ldr	r0, [r3, #0]
 8013c06:	f000 b853 	b.w	8013cb0 <_malloc_r>
 8013c0a:	bf00      	nop
 8013c0c:	20000084 	.word	0x20000084

08013c10 <_free_r>:
 8013c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c12:	2900      	cmp	r1, #0
 8013c14:	d048      	beq.n	8013ca8 <_free_r+0x98>
 8013c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c1a:	9001      	str	r0, [sp, #4]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	f1a1 0404 	sub.w	r4, r1, #4
 8013c22:	bfb8      	it	lt
 8013c24:	18e4      	addlt	r4, r4, r3
 8013c26:	f000 ff5d 	bl	8014ae4 <__malloc_lock>
 8013c2a:	4a20      	ldr	r2, [pc, #128]	; (8013cac <_free_r+0x9c>)
 8013c2c:	9801      	ldr	r0, [sp, #4]
 8013c2e:	6813      	ldr	r3, [r2, #0]
 8013c30:	4615      	mov	r5, r2
 8013c32:	b933      	cbnz	r3, 8013c42 <_free_r+0x32>
 8013c34:	6063      	str	r3, [r4, #4]
 8013c36:	6014      	str	r4, [r2, #0]
 8013c38:	b003      	add	sp, #12
 8013c3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c3e:	f000 bf57 	b.w	8014af0 <__malloc_unlock>
 8013c42:	42a3      	cmp	r3, r4
 8013c44:	d90b      	bls.n	8013c5e <_free_r+0x4e>
 8013c46:	6821      	ldr	r1, [r4, #0]
 8013c48:	1862      	adds	r2, r4, r1
 8013c4a:	4293      	cmp	r3, r2
 8013c4c:	bf04      	itt	eq
 8013c4e:	681a      	ldreq	r2, [r3, #0]
 8013c50:	685b      	ldreq	r3, [r3, #4]
 8013c52:	6063      	str	r3, [r4, #4]
 8013c54:	bf04      	itt	eq
 8013c56:	1852      	addeq	r2, r2, r1
 8013c58:	6022      	streq	r2, [r4, #0]
 8013c5a:	602c      	str	r4, [r5, #0]
 8013c5c:	e7ec      	b.n	8013c38 <_free_r+0x28>
 8013c5e:	461a      	mov	r2, r3
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	b10b      	cbz	r3, 8013c68 <_free_r+0x58>
 8013c64:	42a3      	cmp	r3, r4
 8013c66:	d9fa      	bls.n	8013c5e <_free_r+0x4e>
 8013c68:	6811      	ldr	r1, [r2, #0]
 8013c6a:	1855      	adds	r5, r2, r1
 8013c6c:	42a5      	cmp	r5, r4
 8013c6e:	d10b      	bne.n	8013c88 <_free_r+0x78>
 8013c70:	6824      	ldr	r4, [r4, #0]
 8013c72:	4421      	add	r1, r4
 8013c74:	1854      	adds	r4, r2, r1
 8013c76:	42a3      	cmp	r3, r4
 8013c78:	6011      	str	r1, [r2, #0]
 8013c7a:	d1dd      	bne.n	8013c38 <_free_r+0x28>
 8013c7c:	681c      	ldr	r4, [r3, #0]
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	6053      	str	r3, [r2, #4]
 8013c82:	4421      	add	r1, r4
 8013c84:	6011      	str	r1, [r2, #0]
 8013c86:	e7d7      	b.n	8013c38 <_free_r+0x28>
 8013c88:	d902      	bls.n	8013c90 <_free_r+0x80>
 8013c8a:	230c      	movs	r3, #12
 8013c8c:	6003      	str	r3, [r0, #0]
 8013c8e:	e7d3      	b.n	8013c38 <_free_r+0x28>
 8013c90:	6825      	ldr	r5, [r4, #0]
 8013c92:	1961      	adds	r1, r4, r5
 8013c94:	428b      	cmp	r3, r1
 8013c96:	bf04      	itt	eq
 8013c98:	6819      	ldreq	r1, [r3, #0]
 8013c9a:	685b      	ldreq	r3, [r3, #4]
 8013c9c:	6063      	str	r3, [r4, #4]
 8013c9e:	bf04      	itt	eq
 8013ca0:	1949      	addeq	r1, r1, r5
 8013ca2:	6021      	streq	r1, [r4, #0]
 8013ca4:	6054      	str	r4, [r2, #4]
 8013ca6:	e7c7      	b.n	8013c38 <_free_r+0x28>
 8013ca8:	b003      	add	sp, #12
 8013caa:	bd30      	pop	{r4, r5, pc}
 8013cac:	200002c4 	.word	0x200002c4

08013cb0 <_malloc_r>:
 8013cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cb2:	1ccd      	adds	r5, r1, #3
 8013cb4:	f025 0503 	bic.w	r5, r5, #3
 8013cb8:	3508      	adds	r5, #8
 8013cba:	2d0c      	cmp	r5, #12
 8013cbc:	bf38      	it	cc
 8013cbe:	250c      	movcc	r5, #12
 8013cc0:	2d00      	cmp	r5, #0
 8013cc2:	4606      	mov	r6, r0
 8013cc4:	db01      	blt.n	8013cca <_malloc_r+0x1a>
 8013cc6:	42a9      	cmp	r1, r5
 8013cc8:	d903      	bls.n	8013cd2 <_malloc_r+0x22>
 8013cca:	230c      	movs	r3, #12
 8013ccc:	6033      	str	r3, [r6, #0]
 8013cce:	2000      	movs	r0, #0
 8013cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cd2:	f000 ff07 	bl	8014ae4 <__malloc_lock>
 8013cd6:	4921      	ldr	r1, [pc, #132]	; (8013d5c <_malloc_r+0xac>)
 8013cd8:	680a      	ldr	r2, [r1, #0]
 8013cda:	4614      	mov	r4, r2
 8013cdc:	b99c      	cbnz	r4, 8013d06 <_malloc_r+0x56>
 8013cde:	4f20      	ldr	r7, [pc, #128]	; (8013d60 <_malloc_r+0xb0>)
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	b923      	cbnz	r3, 8013cee <_malloc_r+0x3e>
 8013ce4:	4621      	mov	r1, r4
 8013ce6:	4630      	mov	r0, r6
 8013ce8:	f000 fc86 	bl	80145f8 <_sbrk_r>
 8013cec:	6038      	str	r0, [r7, #0]
 8013cee:	4629      	mov	r1, r5
 8013cf0:	4630      	mov	r0, r6
 8013cf2:	f000 fc81 	bl	80145f8 <_sbrk_r>
 8013cf6:	1c43      	adds	r3, r0, #1
 8013cf8:	d123      	bne.n	8013d42 <_malloc_r+0x92>
 8013cfa:	230c      	movs	r3, #12
 8013cfc:	6033      	str	r3, [r6, #0]
 8013cfe:	4630      	mov	r0, r6
 8013d00:	f000 fef6 	bl	8014af0 <__malloc_unlock>
 8013d04:	e7e3      	b.n	8013cce <_malloc_r+0x1e>
 8013d06:	6823      	ldr	r3, [r4, #0]
 8013d08:	1b5b      	subs	r3, r3, r5
 8013d0a:	d417      	bmi.n	8013d3c <_malloc_r+0x8c>
 8013d0c:	2b0b      	cmp	r3, #11
 8013d0e:	d903      	bls.n	8013d18 <_malloc_r+0x68>
 8013d10:	6023      	str	r3, [r4, #0]
 8013d12:	441c      	add	r4, r3
 8013d14:	6025      	str	r5, [r4, #0]
 8013d16:	e004      	b.n	8013d22 <_malloc_r+0x72>
 8013d18:	6863      	ldr	r3, [r4, #4]
 8013d1a:	42a2      	cmp	r2, r4
 8013d1c:	bf0c      	ite	eq
 8013d1e:	600b      	streq	r3, [r1, #0]
 8013d20:	6053      	strne	r3, [r2, #4]
 8013d22:	4630      	mov	r0, r6
 8013d24:	f000 fee4 	bl	8014af0 <__malloc_unlock>
 8013d28:	f104 000b 	add.w	r0, r4, #11
 8013d2c:	1d23      	adds	r3, r4, #4
 8013d2e:	f020 0007 	bic.w	r0, r0, #7
 8013d32:	1ac2      	subs	r2, r0, r3
 8013d34:	d0cc      	beq.n	8013cd0 <_malloc_r+0x20>
 8013d36:	1a1b      	subs	r3, r3, r0
 8013d38:	50a3      	str	r3, [r4, r2]
 8013d3a:	e7c9      	b.n	8013cd0 <_malloc_r+0x20>
 8013d3c:	4622      	mov	r2, r4
 8013d3e:	6864      	ldr	r4, [r4, #4]
 8013d40:	e7cc      	b.n	8013cdc <_malloc_r+0x2c>
 8013d42:	1cc4      	adds	r4, r0, #3
 8013d44:	f024 0403 	bic.w	r4, r4, #3
 8013d48:	42a0      	cmp	r0, r4
 8013d4a:	d0e3      	beq.n	8013d14 <_malloc_r+0x64>
 8013d4c:	1a21      	subs	r1, r4, r0
 8013d4e:	4630      	mov	r0, r6
 8013d50:	f000 fc52 	bl	80145f8 <_sbrk_r>
 8013d54:	3001      	adds	r0, #1
 8013d56:	d1dd      	bne.n	8013d14 <_malloc_r+0x64>
 8013d58:	e7cf      	b.n	8013cfa <_malloc_r+0x4a>
 8013d5a:	bf00      	nop
 8013d5c:	200002c4 	.word	0x200002c4
 8013d60:	200002c8 	.word	0x200002c8

08013d64 <__ssputs_r>:
 8013d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d68:	688e      	ldr	r6, [r1, #8]
 8013d6a:	429e      	cmp	r6, r3
 8013d6c:	4682      	mov	sl, r0
 8013d6e:	460c      	mov	r4, r1
 8013d70:	4690      	mov	r8, r2
 8013d72:	461f      	mov	r7, r3
 8013d74:	d838      	bhi.n	8013de8 <__ssputs_r+0x84>
 8013d76:	898a      	ldrh	r2, [r1, #12]
 8013d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013d7c:	d032      	beq.n	8013de4 <__ssputs_r+0x80>
 8013d7e:	6825      	ldr	r5, [r4, #0]
 8013d80:	6909      	ldr	r1, [r1, #16]
 8013d82:	eba5 0901 	sub.w	r9, r5, r1
 8013d86:	6965      	ldr	r5, [r4, #20]
 8013d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d90:	3301      	adds	r3, #1
 8013d92:	444b      	add	r3, r9
 8013d94:	106d      	asrs	r5, r5, #1
 8013d96:	429d      	cmp	r5, r3
 8013d98:	bf38      	it	cc
 8013d9a:	461d      	movcc	r5, r3
 8013d9c:	0553      	lsls	r3, r2, #21
 8013d9e:	d531      	bpl.n	8013e04 <__ssputs_r+0xa0>
 8013da0:	4629      	mov	r1, r5
 8013da2:	f7ff ff85 	bl	8013cb0 <_malloc_r>
 8013da6:	4606      	mov	r6, r0
 8013da8:	b950      	cbnz	r0, 8013dc0 <__ssputs_r+0x5c>
 8013daa:	230c      	movs	r3, #12
 8013dac:	f8ca 3000 	str.w	r3, [sl]
 8013db0:	89a3      	ldrh	r3, [r4, #12]
 8013db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013db6:	81a3      	strh	r3, [r4, #12]
 8013db8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dc0:	6921      	ldr	r1, [r4, #16]
 8013dc2:	464a      	mov	r2, r9
 8013dc4:	f7ff fd30 	bl	8013828 <memcpy>
 8013dc8:	89a3      	ldrh	r3, [r4, #12]
 8013dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013dd2:	81a3      	strh	r3, [r4, #12]
 8013dd4:	6126      	str	r6, [r4, #16]
 8013dd6:	6165      	str	r5, [r4, #20]
 8013dd8:	444e      	add	r6, r9
 8013dda:	eba5 0509 	sub.w	r5, r5, r9
 8013dde:	6026      	str	r6, [r4, #0]
 8013de0:	60a5      	str	r5, [r4, #8]
 8013de2:	463e      	mov	r6, r7
 8013de4:	42be      	cmp	r6, r7
 8013de6:	d900      	bls.n	8013dea <__ssputs_r+0x86>
 8013de8:	463e      	mov	r6, r7
 8013dea:	4632      	mov	r2, r6
 8013dec:	6820      	ldr	r0, [r4, #0]
 8013dee:	4641      	mov	r1, r8
 8013df0:	f7ff fd28 	bl	8013844 <memmove>
 8013df4:	68a3      	ldr	r3, [r4, #8]
 8013df6:	6822      	ldr	r2, [r4, #0]
 8013df8:	1b9b      	subs	r3, r3, r6
 8013dfa:	4432      	add	r2, r6
 8013dfc:	60a3      	str	r3, [r4, #8]
 8013dfe:	6022      	str	r2, [r4, #0]
 8013e00:	2000      	movs	r0, #0
 8013e02:	e7db      	b.n	8013dbc <__ssputs_r+0x58>
 8013e04:	462a      	mov	r2, r5
 8013e06:	f000 fe79 	bl	8014afc <_realloc_r>
 8013e0a:	4606      	mov	r6, r0
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	d1e1      	bne.n	8013dd4 <__ssputs_r+0x70>
 8013e10:	6921      	ldr	r1, [r4, #16]
 8013e12:	4650      	mov	r0, sl
 8013e14:	f7ff fefc 	bl	8013c10 <_free_r>
 8013e18:	e7c7      	b.n	8013daa <__ssputs_r+0x46>
	...

08013e1c <_svfiprintf_r>:
 8013e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e20:	4698      	mov	r8, r3
 8013e22:	898b      	ldrh	r3, [r1, #12]
 8013e24:	061b      	lsls	r3, r3, #24
 8013e26:	b09d      	sub	sp, #116	; 0x74
 8013e28:	4607      	mov	r7, r0
 8013e2a:	460d      	mov	r5, r1
 8013e2c:	4614      	mov	r4, r2
 8013e2e:	d50e      	bpl.n	8013e4e <_svfiprintf_r+0x32>
 8013e30:	690b      	ldr	r3, [r1, #16]
 8013e32:	b963      	cbnz	r3, 8013e4e <_svfiprintf_r+0x32>
 8013e34:	2140      	movs	r1, #64	; 0x40
 8013e36:	f7ff ff3b 	bl	8013cb0 <_malloc_r>
 8013e3a:	6028      	str	r0, [r5, #0]
 8013e3c:	6128      	str	r0, [r5, #16]
 8013e3e:	b920      	cbnz	r0, 8013e4a <_svfiprintf_r+0x2e>
 8013e40:	230c      	movs	r3, #12
 8013e42:	603b      	str	r3, [r7, #0]
 8013e44:	f04f 30ff 	mov.w	r0, #4294967295
 8013e48:	e0d1      	b.n	8013fee <_svfiprintf_r+0x1d2>
 8013e4a:	2340      	movs	r3, #64	; 0x40
 8013e4c:	616b      	str	r3, [r5, #20]
 8013e4e:	2300      	movs	r3, #0
 8013e50:	9309      	str	r3, [sp, #36]	; 0x24
 8013e52:	2320      	movs	r3, #32
 8013e54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e5c:	2330      	movs	r3, #48	; 0x30
 8013e5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014008 <_svfiprintf_r+0x1ec>
 8013e62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e66:	f04f 0901 	mov.w	r9, #1
 8013e6a:	4623      	mov	r3, r4
 8013e6c:	469a      	mov	sl, r3
 8013e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e72:	b10a      	cbz	r2, 8013e78 <_svfiprintf_r+0x5c>
 8013e74:	2a25      	cmp	r2, #37	; 0x25
 8013e76:	d1f9      	bne.n	8013e6c <_svfiprintf_r+0x50>
 8013e78:	ebba 0b04 	subs.w	fp, sl, r4
 8013e7c:	d00b      	beq.n	8013e96 <_svfiprintf_r+0x7a>
 8013e7e:	465b      	mov	r3, fp
 8013e80:	4622      	mov	r2, r4
 8013e82:	4629      	mov	r1, r5
 8013e84:	4638      	mov	r0, r7
 8013e86:	f7ff ff6d 	bl	8013d64 <__ssputs_r>
 8013e8a:	3001      	adds	r0, #1
 8013e8c:	f000 80aa 	beq.w	8013fe4 <_svfiprintf_r+0x1c8>
 8013e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e92:	445a      	add	r2, fp
 8013e94:	9209      	str	r2, [sp, #36]	; 0x24
 8013e96:	f89a 3000 	ldrb.w	r3, [sl]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	f000 80a2 	beq.w	8013fe4 <_svfiprintf_r+0x1c8>
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013eaa:	f10a 0a01 	add.w	sl, sl, #1
 8013eae:	9304      	str	r3, [sp, #16]
 8013eb0:	9307      	str	r3, [sp, #28]
 8013eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8013eb8:	4654      	mov	r4, sl
 8013eba:	2205      	movs	r2, #5
 8013ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ec0:	4851      	ldr	r0, [pc, #324]	; (8014008 <_svfiprintf_r+0x1ec>)
 8013ec2:	f7ec f9bd 	bl	8000240 <memchr>
 8013ec6:	9a04      	ldr	r2, [sp, #16]
 8013ec8:	b9d8      	cbnz	r0, 8013f02 <_svfiprintf_r+0xe6>
 8013eca:	06d0      	lsls	r0, r2, #27
 8013ecc:	bf44      	itt	mi
 8013ece:	2320      	movmi	r3, #32
 8013ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ed4:	0711      	lsls	r1, r2, #28
 8013ed6:	bf44      	itt	mi
 8013ed8:	232b      	movmi	r3, #43	; 0x2b
 8013eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ede:	f89a 3000 	ldrb.w	r3, [sl]
 8013ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ee4:	d015      	beq.n	8013f12 <_svfiprintf_r+0xf6>
 8013ee6:	9a07      	ldr	r2, [sp, #28]
 8013ee8:	4654      	mov	r4, sl
 8013eea:	2000      	movs	r0, #0
 8013eec:	f04f 0c0a 	mov.w	ip, #10
 8013ef0:	4621      	mov	r1, r4
 8013ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ef6:	3b30      	subs	r3, #48	; 0x30
 8013ef8:	2b09      	cmp	r3, #9
 8013efa:	d94e      	bls.n	8013f9a <_svfiprintf_r+0x17e>
 8013efc:	b1b0      	cbz	r0, 8013f2c <_svfiprintf_r+0x110>
 8013efe:	9207      	str	r2, [sp, #28]
 8013f00:	e014      	b.n	8013f2c <_svfiprintf_r+0x110>
 8013f02:	eba0 0308 	sub.w	r3, r0, r8
 8013f06:	fa09 f303 	lsl.w	r3, r9, r3
 8013f0a:	4313      	orrs	r3, r2
 8013f0c:	9304      	str	r3, [sp, #16]
 8013f0e:	46a2      	mov	sl, r4
 8013f10:	e7d2      	b.n	8013eb8 <_svfiprintf_r+0x9c>
 8013f12:	9b03      	ldr	r3, [sp, #12]
 8013f14:	1d19      	adds	r1, r3, #4
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	9103      	str	r1, [sp, #12]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	bfbb      	ittet	lt
 8013f1e:	425b      	neglt	r3, r3
 8013f20:	f042 0202 	orrlt.w	r2, r2, #2
 8013f24:	9307      	strge	r3, [sp, #28]
 8013f26:	9307      	strlt	r3, [sp, #28]
 8013f28:	bfb8      	it	lt
 8013f2a:	9204      	strlt	r2, [sp, #16]
 8013f2c:	7823      	ldrb	r3, [r4, #0]
 8013f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8013f30:	d10c      	bne.n	8013f4c <_svfiprintf_r+0x130>
 8013f32:	7863      	ldrb	r3, [r4, #1]
 8013f34:	2b2a      	cmp	r3, #42	; 0x2a
 8013f36:	d135      	bne.n	8013fa4 <_svfiprintf_r+0x188>
 8013f38:	9b03      	ldr	r3, [sp, #12]
 8013f3a:	1d1a      	adds	r2, r3, #4
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	9203      	str	r2, [sp, #12]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	bfb8      	it	lt
 8013f44:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f48:	3402      	adds	r4, #2
 8013f4a:	9305      	str	r3, [sp, #20]
 8013f4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014018 <_svfiprintf_r+0x1fc>
 8013f50:	7821      	ldrb	r1, [r4, #0]
 8013f52:	2203      	movs	r2, #3
 8013f54:	4650      	mov	r0, sl
 8013f56:	f7ec f973 	bl	8000240 <memchr>
 8013f5a:	b140      	cbz	r0, 8013f6e <_svfiprintf_r+0x152>
 8013f5c:	2340      	movs	r3, #64	; 0x40
 8013f5e:	eba0 000a 	sub.w	r0, r0, sl
 8013f62:	fa03 f000 	lsl.w	r0, r3, r0
 8013f66:	9b04      	ldr	r3, [sp, #16]
 8013f68:	4303      	orrs	r3, r0
 8013f6a:	3401      	adds	r4, #1
 8013f6c:	9304      	str	r3, [sp, #16]
 8013f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f72:	4826      	ldr	r0, [pc, #152]	; (801400c <_svfiprintf_r+0x1f0>)
 8013f74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f78:	2206      	movs	r2, #6
 8013f7a:	f7ec f961 	bl	8000240 <memchr>
 8013f7e:	2800      	cmp	r0, #0
 8013f80:	d038      	beq.n	8013ff4 <_svfiprintf_r+0x1d8>
 8013f82:	4b23      	ldr	r3, [pc, #140]	; (8014010 <_svfiprintf_r+0x1f4>)
 8013f84:	bb1b      	cbnz	r3, 8013fce <_svfiprintf_r+0x1b2>
 8013f86:	9b03      	ldr	r3, [sp, #12]
 8013f88:	3307      	adds	r3, #7
 8013f8a:	f023 0307 	bic.w	r3, r3, #7
 8013f8e:	3308      	adds	r3, #8
 8013f90:	9303      	str	r3, [sp, #12]
 8013f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f94:	4433      	add	r3, r6
 8013f96:	9309      	str	r3, [sp, #36]	; 0x24
 8013f98:	e767      	b.n	8013e6a <_svfiprintf_r+0x4e>
 8013f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f9e:	460c      	mov	r4, r1
 8013fa0:	2001      	movs	r0, #1
 8013fa2:	e7a5      	b.n	8013ef0 <_svfiprintf_r+0xd4>
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	3401      	adds	r4, #1
 8013fa8:	9305      	str	r3, [sp, #20]
 8013faa:	4619      	mov	r1, r3
 8013fac:	f04f 0c0a 	mov.w	ip, #10
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fb6:	3a30      	subs	r2, #48	; 0x30
 8013fb8:	2a09      	cmp	r2, #9
 8013fba:	d903      	bls.n	8013fc4 <_svfiprintf_r+0x1a8>
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d0c5      	beq.n	8013f4c <_svfiprintf_r+0x130>
 8013fc0:	9105      	str	r1, [sp, #20]
 8013fc2:	e7c3      	b.n	8013f4c <_svfiprintf_r+0x130>
 8013fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fc8:	4604      	mov	r4, r0
 8013fca:	2301      	movs	r3, #1
 8013fcc:	e7f0      	b.n	8013fb0 <_svfiprintf_r+0x194>
 8013fce:	ab03      	add	r3, sp, #12
 8013fd0:	9300      	str	r3, [sp, #0]
 8013fd2:	462a      	mov	r2, r5
 8013fd4:	4b0f      	ldr	r3, [pc, #60]	; (8014014 <_svfiprintf_r+0x1f8>)
 8013fd6:	a904      	add	r1, sp, #16
 8013fd8:	4638      	mov	r0, r7
 8013fda:	f3af 8000 	nop.w
 8013fde:	1c42      	adds	r2, r0, #1
 8013fe0:	4606      	mov	r6, r0
 8013fe2:	d1d6      	bne.n	8013f92 <_svfiprintf_r+0x176>
 8013fe4:	89ab      	ldrh	r3, [r5, #12]
 8013fe6:	065b      	lsls	r3, r3, #25
 8013fe8:	f53f af2c 	bmi.w	8013e44 <_svfiprintf_r+0x28>
 8013fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fee:	b01d      	add	sp, #116	; 0x74
 8013ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ff4:	ab03      	add	r3, sp, #12
 8013ff6:	9300      	str	r3, [sp, #0]
 8013ff8:	462a      	mov	r2, r5
 8013ffa:	4b06      	ldr	r3, [pc, #24]	; (8014014 <_svfiprintf_r+0x1f8>)
 8013ffc:	a904      	add	r1, sp, #16
 8013ffe:	4638      	mov	r0, r7
 8014000:	f000 f9d4 	bl	80143ac <_printf_i>
 8014004:	e7eb      	b.n	8013fde <_svfiprintf_r+0x1c2>
 8014006:	bf00      	nop
 8014008:	08017b9c 	.word	0x08017b9c
 801400c:	08017ba6 	.word	0x08017ba6
 8014010:	00000000 	.word	0x00000000
 8014014:	08013d65 	.word	0x08013d65
 8014018:	08017ba2 	.word	0x08017ba2

0801401c <__sfputc_r>:
 801401c:	6893      	ldr	r3, [r2, #8]
 801401e:	3b01      	subs	r3, #1
 8014020:	2b00      	cmp	r3, #0
 8014022:	b410      	push	{r4}
 8014024:	6093      	str	r3, [r2, #8]
 8014026:	da08      	bge.n	801403a <__sfputc_r+0x1e>
 8014028:	6994      	ldr	r4, [r2, #24]
 801402a:	42a3      	cmp	r3, r4
 801402c:	db01      	blt.n	8014032 <__sfputc_r+0x16>
 801402e:	290a      	cmp	r1, #10
 8014030:	d103      	bne.n	801403a <__sfputc_r+0x1e>
 8014032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014036:	f000 bb33 	b.w	80146a0 <__swbuf_r>
 801403a:	6813      	ldr	r3, [r2, #0]
 801403c:	1c58      	adds	r0, r3, #1
 801403e:	6010      	str	r0, [r2, #0]
 8014040:	7019      	strb	r1, [r3, #0]
 8014042:	4608      	mov	r0, r1
 8014044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014048:	4770      	bx	lr

0801404a <__sfputs_r>:
 801404a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801404c:	4606      	mov	r6, r0
 801404e:	460f      	mov	r7, r1
 8014050:	4614      	mov	r4, r2
 8014052:	18d5      	adds	r5, r2, r3
 8014054:	42ac      	cmp	r4, r5
 8014056:	d101      	bne.n	801405c <__sfputs_r+0x12>
 8014058:	2000      	movs	r0, #0
 801405a:	e007      	b.n	801406c <__sfputs_r+0x22>
 801405c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014060:	463a      	mov	r2, r7
 8014062:	4630      	mov	r0, r6
 8014064:	f7ff ffda 	bl	801401c <__sfputc_r>
 8014068:	1c43      	adds	r3, r0, #1
 801406a:	d1f3      	bne.n	8014054 <__sfputs_r+0xa>
 801406c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014070 <_vfiprintf_r>:
 8014070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014074:	460d      	mov	r5, r1
 8014076:	b09d      	sub	sp, #116	; 0x74
 8014078:	4614      	mov	r4, r2
 801407a:	4698      	mov	r8, r3
 801407c:	4606      	mov	r6, r0
 801407e:	b118      	cbz	r0, 8014088 <_vfiprintf_r+0x18>
 8014080:	6983      	ldr	r3, [r0, #24]
 8014082:	b90b      	cbnz	r3, 8014088 <_vfiprintf_r+0x18>
 8014084:	f7ff fd0a 	bl	8013a9c <__sinit>
 8014088:	4b89      	ldr	r3, [pc, #548]	; (80142b0 <_vfiprintf_r+0x240>)
 801408a:	429d      	cmp	r5, r3
 801408c:	d11b      	bne.n	80140c6 <_vfiprintf_r+0x56>
 801408e:	6875      	ldr	r5, [r6, #4]
 8014090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014092:	07d9      	lsls	r1, r3, #31
 8014094:	d405      	bmi.n	80140a2 <_vfiprintf_r+0x32>
 8014096:	89ab      	ldrh	r3, [r5, #12]
 8014098:	059a      	lsls	r2, r3, #22
 801409a:	d402      	bmi.n	80140a2 <_vfiprintf_r+0x32>
 801409c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801409e:	f7ff fdad 	bl	8013bfc <__retarget_lock_acquire_recursive>
 80140a2:	89ab      	ldrh	r3, [r5, #12]
 80140a4:	071b      	lsls	r3, r3, #28
 80140a6:	d501      	bpl.n	80140ac <_vfiprintf_r+0x3c>
 80140a8:	692b      	ldr	r3, [r5, #16]
 80140aa:	b9eb      	cbnz	r3, 80140e8 <_vfiprintf_r+0x78>
 80140ac:	4629      	mov	r1, r5
 80140ae:	4630      	mov	r0, r6
 80140b0:	f000 fb5a 	bl	8014768 <__swsetup_r>
 80140b4:	b1c0      	cbz	r0, 80140e8 <_vfiprintf_r+0x78>
 80140b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80140b8:	07dc      	lsls	r4, r3, #31
 80140ba:	d50e      	bpl.n	80140da <_vfiprintf_r+0x6a>
 80140bc:	f04f 30ff 	mov.w	r0, #4294967295
 80140c0:	b01d      	add	sp, #116	; 0x74
 80140c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140c6:	4b7b      	ldr	r3, [pc, #492]	; (80142b4 <_vfiprintf_r+0x244>)
 80140c8:	429d      	cmp	r5, r3
 80140ca:	d101      	bne.n	80140d0 <_vfiprintf_r+0x60>
 80140cc:	68b5      	ldr	r5, [r6, #8]
 80140ce:	e7df      	b.n	8014090 <_vfiprintf_r+0x20>
 80140d0:	4b79      	ldr	r3, [pc, #484]	; (80142b8 <_vfiprintf_r+0x248>)
 80140d2:	429d      	cmp	r5, r3
 80140d4:	bf08      	it	eq
 80140d6:	68f5      	ldreq	r5, [r6, #12]
 80140d8:	e7da      	b.n	8014090 <_vfiprintf_r+0x20>
 80140da:	89ab      	ldrh	r3, [r5, #12]
 80140dc:	0598      	lsls	r0, r3, #22
 80140de:	d4ed      	bmi.n	80140bc <_vfiprintf_r+0x4c>
 80140e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80140e2:	f7ff fd8c 	bl	8013bfe <__retarget_lock_release_recursive>
 80140e6:	e7e9      	b.n	80140bc <_vfiprintf_r+0x4c>
 80140e8:	2300      	movs	r3, #0
 80140ea:	9309      	str	r3, [sp, #36]	; 0x24
 80140ec:	2320      	movs	r3, #32
 80140ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80140f6:	2330      	movs	r3, #48	; 0x30
 80140f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80142bc <_vfiprintf_r+0x24c>
 80140fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014100:	f04f 0901 	mov.w	r9, #1
 8014104:	4623      	mov	r3, r4
 8014106:	469a      	mov	sl, r3
 8014108:	f813 2b01 	ldrb.w	r2, [r3], #1
 801410c:	b10a      	cbz	r2, 8014112 <_vfiprintf_r+0xa2>
 801410e:	2a25      	cmp	r2, #37	; 0x25
 8014110:	d1f9      	bne.n	8014106 <_vfiprintf_r+0x96>
 8014112:	ebba 0b04 	subs.w	fp, sl, r4
 8014116:	d00b      	beq.n	8014130 <_vfiprintf_r+0xc0>
 8014118:	465b      	mov	r3, fp
 801411a:	4622      	mov	r2, r4
 801411c:	4629      	mov	r1, r5
 801411e:	4630      	mov	r0, r6
 8014120:	f7ff ff93 	bl	801404a <__sfputs_r>
 8014124:	3001      	adds	r0, #1
 8014126:	f000 80aa 	beq.w	801427e <_vfiprintf_r+0x20e>
 801412a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801412c:	445a      	add	r2, fp
 801412e:	9209      	str	r2, [sp, #36]	; 0x24
 8014130:	f89a 3000 	ldrb.w	r3, [sl]
 8014134:	2b00      	cmp	r3, #0
 8014136:	f000 80a2 	beq.w	801427e <_vfiprintf_r+0x20e>
 801413a:	2300      	movs	r3, #0
 801413c:	f04f 32ff 	mov.w	r2, #4294967295
 8014140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014144:	f10a 0a01 	add.w	sl, sl, #1
 8014148:	9304      	str	r3, [sp, #16]
 801414a:	9307      	str	r3, [sp, #28]
 801414c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014150:	931a      	str	r3, [sp, #104]	; 0x68
 8014152:	4654      	mov	r4, sl
 8014154:	2205      	movs	r2, #5
 8014156:	f814 1b01 	ldrb.w	r1, [r4], #1
 801415a:	4858      	ldr	r0, [pc, #352]	; (80142bc <_vfiprintf_r+0x24c>)
 801415c:	f7ec f870 	bl	8000240 <memchr>
 8014160:	9a04      	ldr	r2, [sp, #16]
 8014162:	b9d8      	cbnz	r0, 801419c <_vfiprintf_r+0x12c>
 8014164:	06d1      	lsls	r1, r2, #27
 8014166:	bf44      	itt	mi
 8014168:	2320      	movmi	r3, #32
 801416a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801416e:	0713      	lsls	r3, r2, #28
 8014170:	bf44      	itt	mi
 8014172:	232b      	movmi	r3, #43	; 0x2b
 8014174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014178:	f89a 3000 	ldrb.w	r3, [sl]
 801417c:	2b2a      	cmp	r3, #42	; 0x2a
 801417e:	d015      	beq.n	80141ac <_vfiprintf_r+0x13c>
 8014180:	9a07      	ldr	r2, [sp, #28]
 8014182:	4654      	mov	r4, sl
 8014184:	2000      	movs	r0, #0
 8014186:	f04f 0c0a 	mov.w	ip, #10
 801418a:	4621      	mov	r1, r4
 801418c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014190:	3b30      	subs	r3, #48	; 0x30
 8014192:	2b09      	cmp	r3, #9
 8014194:	d94e      	bls.n	8014234 <_vfiprintf_r+0x1c4>
 8014196:	b1b0      	cbz	r0, 80141c6 <_vfiprintf_r+0x156>
 8014198:	9207      	str	r2, [sp, #28]
 801419a:	e014      	b.n	80141c6 <_vfiprintf_r+0x156>
 801419c:	eba0 0308 	sub.w	r3, r0, r8
 80141a0:	fa09 f303 	lsl.w	r3, r9, r3
 80141a4:	4313      	orrs	r3, r2
 80141a6:	9304      	str	r3, [sp, #16]
 80141a8:	46a2      	mov	sl, r4
 80141aa:	e7d2      	b.n	8014152 <_vfiprintf_r+0xe2>
 80141ac:	9b03      	ldr	r3, [sp, #12]
 80141ae:	1d19      	adds	r1, r3, #4
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	9103      	str	r1, [sp, #12]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	bfbb      	ittet	lt
 80141b8:	425b      	neglt	r3, r3
 80141ba:	f042 0202 	orrlt.w	r2, r2, #2
 80141be:	9307      	strge	r3, [sp, #28]
 80141c0:	9307      	strlt	r3, [sp, #28]
 80141c2:	bfb8      	it	lt
 80141c4:	9204      	strlt	r2, [sp, #16]
 80141c6:	7823      	ldrb	r3, [r4, #0]
 80141c8:	2b2e      	cmp	r3, #46	; 0x2e
 80141ca:	d10c      	bne.n	80141e6 <_vfiprintf_r+0x176>
 80141cc:	7863      	ldrb	r3, [r4, #1]
 80141ce:	2b2a      	cmp	r3, #42	; 0x2a
 80141d0:	d135      	bne.n	801423e <_vfiprintf_r+0x1ce>
 80141d2:	9b03      	ldr	r3, [sp, #12]
 80141d4:	1d1a      	adds	r2, r3, #4
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	9203      	str	r2, [sp, #12]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	bfb8      	it	lt
 80141de:	f04f 33ff 	movlt.w	r3, #4294967295
 80141e2:	3402      	adds	r4, #2
 80141e4:	9305      	str	r3, [sp, #20]
 80141e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80142cc <_vfiprintf_r+0x25c>
 80141ea:	7821      	ldrb	r1, [r4, #0]
 80141ec:	2203      	movs	r2, #3
 80141ee:	4650      	mov	r0, sl
 80141f0:	f7ec f826 	bl	8000240 <memchr>
 80141f4:	b140      	cbz	r0, 8014208 <_vfiprintf_r+0x198>
 80141f6:	2340      	movs	r3, #64	; 0x40
 80141f8:	eba0 000a 	sub.w	r0, r0, sl
 80141fc:	fa03 f000 	lsl.w	r0, r3, r0
 8014200:	9b04      	ldr	r3, [sp, #16]
 8014202:	4303      	orrs	r3, r0
 8014204:	3401      	adds	r4, #1
 8014206:	9304      	str	r3, [sp, #16]
 8014208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801420c:	482c      	ldr	r0, [pc, #176]	; (80142c0 <_vfiprintf_r+0x250>)
 801420e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014212:	2206      	movs	r2, #6
 8014214:	f7ec f814 	bl	8000240 <memchr>
 8014218:	2800      	cmp	r0, #0
 801421a:	d03f      	beq.n	801429c <_vfiprintf_r+0x22c>
 801421c:	4b29      	ldr	r3, [pc, #164]	; (80142c4 <_vfiprintf_r+0x254>)
 801421e:	bb1b      	cbnz	r3, 8014268 <_vfiprintf_r+0x1f8>
 8014220:	9b03      	ldr	r3, [sp, #12]
 8014222:	3307      	adds	r3, #7
 8014224:	f023 0307 	bic.w	r3, r3, #7
 8014228:	3308      	adds	r3, #8
 801422a:	9303      	str	r3, [sp, #12]
 801422c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801422e:	443b      	add	r3, r7
 8014230:	9309      	str	r3, [sp, #36]	; 0x24
 8014232:	e767      	b.n	8014104 <_vfiprintf_r+0x94>
 8014234:	fb0c 3202 	mla	r2, ip, r2, r3
 8014238:	460c      	mov	r4, r1
 801423a:	2001      	movs	r0, #1
 801423c:	e7a5      	b.n	801418a <_vfiprintf_r+0x11a>
 801423e:	2300      	movs	r3, #0
 8014240:	3401      	adds	r4, #1
 8014242:	9305      	str	r3, [sp, #20]
 8014244:	4619      	mov	r1, r3
 8014246:	f04f 0c0a 	mov.w	ip, #10
 801424a:	4620      	mov	r0, r4
 801424c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014250:	3a30      	subs	r2, #48	; 0x30
 8014252:	2a09      	cmp	r2, #9
 8014254:	d903      	bls.n	801425e <_vfiprintf_r+0x1ee>
 8014256:	2b00      	cmp	r3, #0
 8014258:	d0c5      	beq.n	80141e6 <_vfiprintf_r+0x176>
 801425a:	9105      	str	r1, [sp, #20]
 801425c:	e7c3      	b.n	80141e6 <_vfiprintf_r+0x176>
 801425e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014262:	4604      	mov	r4, r0
 8014264:	2301      	movs	r3, #1
 8014266:	e7f0      	b.n	801424a <_vfiprintf_r+0x1da>
 8014268:	ab03      	add	r3, sp, #12
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	462a      	mov	r2, r5
 801426e:	4b16      	ldr	r3, [pc, #88]	; (80142c8 <_vfiprintf_r+0x258>)
 8014270:	a904      	add	r1, sp, #16
 8014272:	4630      	mov	r0, r6
 8014274:	f3af 8000 	nop.w
 8014278:	4607      	mov	r7, r0
 801427a:	1c78      	adds	r0, r7, #1
 801427c:	d1d6      	bne.n	801422c <_vfiprintf_r+0x1bc>
 801427e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014280:	07d9      	lsls	r1, r3, #31
 8014282:	d405      	bmi.n	8014290 <_vfiprintf_r+0x220>
 8014284:	89ab      	ldrh	r3, [r5, #12]
 8014286:	059a      	lsls	r2, r3, #22
 8014288:	d402      	bmi.n	8014290 <_vfiprintf_r+0x220>
 801428a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801428c:	f7ff fcb7 	bl	8013bfe <__retarget_lock_release_recursive>
 8014290:	89ab      	ldrh	r3, [r5, #12]
 8014292:	065b      	lsls	r3, r3, #25
 8014294:	f53f af12 	bmi.w	80140bc <_vfiprintf_r+0x4c>
 8014298:	9809      	ldr	r0, [sp, #36]	; 0x24
 801429a:	e711      	b.n	80140c0 <_vfiprintf_r+0x50>
 801429c:	ab03      	add	r3, sp, #12
 801429e:	9300      	str	r3, [sp, #0]
 80142a0:	462a      	mov	r2, r5
 80142a2:	4b09      	ldr	r3, [pc, #36]	; (80142c8 <_vfiprintf_r+0x258>)
 80142a4:	a904      	add	r1, sp, #16
 80142a6:	4630      	mov	r0, r6
 80142a8:	f000 f880 	bl	80143ac <_printf_i>
 80142ac:	e7e4      	b.n	8014278 <_vfiprintf_r+0x208>
 80142ae:	bf00      	nop
 80142b0:	08017b5c 	.word	0x08017b5c
 80142b4:	08017b7c 	.word	0x08017b7c
 80142b8:	08017b3c 	.word	0x08017b3c
 80142bc:	08017b9c 	.word	0x08017b9c
 80142c0:	08017ba6 	.word	0x08017ba6
 80142c4:	00000000 	.word	0x00000000
 80142c8:	0801404b 	.word	0x0801404b
 80142cc:	08017ba2 	.word	0x08017ba2

080142d0 <_printf_common>:
 80142d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142d4:	4616      	mov	r6, r2
 80142d6:	4699      	mov	r9, r3
 80142d8:	688a      	ldr	r2, [r1, #8]
 80142da:	690b      	ldr	r3, [r1, #16]
 80142dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142e0:	4293      	cmp	r3, r2
 80142e2:	bfb8      	it	lt
 80142e4:	4613      	movlt	r3, r2
 80142e6:	6033      	str	r3, [r6, #0]
 80142e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142ec:	4607      	mov	r7, r0
 80142ee:	460c      	mov	r4, r1
 80142f0:	b10a      	cbz	r2, 80142f6 <_printf_common+0x26>
 80142f2:	3301      	adds	r3, #1
 80142f4:	6033      	str	r3, [r6, #0]
 80142f6:	6823      	ldr	r3, [r4, #0]
 80142f8:	0699      	lsls	r1, r3, #26
 80142fa:	bf42      	ittt	mi
 80142fc:	6833      	ldrmi	r3, [r6, #0]
 80142fe:	3302      	addmi	r3, #2
 8014300:	6033      	strmi	r3, [r6, #0]
 8014302:	6825      	ldr	r5, [r4, #0]
 8014304:	f015 0506 	ands.w	r5, r5, #6
 8014308:	d106      	bne.n	8014318 <_printf_common+0x48>
 801430a:	f104 0a19 	add.w	sl, r4, #25
 801430e:	68e3      	ldr	r3, [r4, #12]
 8014310:	6832      	ldr	r2, [r6, #0]
 8014312:	1a9b      	subs	r3, r3, r2
 8014314:	42ab      	cmp	r3, r5
 8014316:	dc26      	bgt.n	8014366 <_printf_common+0x96>
 8014318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801431c:	1e13      	subs	r3, r2, #0
 801431e:	6822      	ldr	r2, [r4, #0]
 8014320:	bf18      	it	ne
 8014322:	2301      	movne	r3, #1
 8014324:	0692      	lsls	r2, r2, #26
 8014326:	d42b      	bmi.n	8014380 <_printf_common+0xb0>
 8014328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801432c:	4649      	mov	r1, r9
 801432e:	4638      	mov	r0, r7
 8014330:	47c0      	blx	r8
 8014332:	3001      	adds	r0, #1
 8014334:	d01e      	beq.n	8014374 <_printf_common+0xa4>
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	68e5      	ldr	r5, [r4, #12]
 801433a:	6832      	ldr	r2, [r6, #0]
 801433c:	f003 0306 	and.w	r3, r3, #6
 8014340:	2b04      	cmp	r3, #4
 8014342:	bf08      	it	eq
 8014344:	1aad      	subeq	r5, r5, r2
 8014346:	68a3      	ldr	r3, [r4, #8]
 8014348:	6922      	ldr	r2, [r4, #16]
 801434a:	bf0c      	ite	eq
 801434c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014350:	2500      	movne	r5, #0
 8014352:	4293      	cmp	r3, r2
 8014354:	bfc4      	itt	gt
 8014356:	1a9b      	subgt	r3, r3, r2
 8014358:	18ed      	addgt	r5, r5, r3
 801435a:	2600      	movs	r6, #0
 801435c:	341a      	adds	r4, #26
 801435e:	42b5      	cmp	r5, r6
 8014360:	d11a      	bne.n	8014398 <_printf_common+0xc8>
 8014362:	2000      	movs	r0, #0
 8014364:	e008      	b.n	8014378 <_printf_common+0xa8>
 8014366:	2301      	movs	r3, #1
 8014368:	4652      	mov	r2, sl
 801436a:	4649      	mov	r1, r9
 801436c:	4638      	mov	r0, r7
 801436e:	47c0      	blx	r8
 8014370:	3001      	adds	r0, #1
 8014372:	d103      	bne.n	801437c <_printf_common+0xac>
 8014374:	f04f 30ff 	mov.w	r0, #4294967295
 8014378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801437c:	3501      	adds	r5, #1
 801437e:	e7c6      	b.n	801430e <_printf_common+0x3e>
 8014380:	18e1      	adds	r1, r4, r3
 8014382:	1c5a      	adds	r2, r3, #1
 8014384:	2030      	movs	r0, #48	; 0x30
 8014386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801438a:	4422      	add	r2, r4
 801438c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014394:	3302      	adds	r3, #2
 8014396:	e7c7      	b.n	8014328 <_printf_common+0x58>
 8014398:	2301      	movs	r3, #1
 801439a:	4622      	mov	r2, r4
 801439c:	4649      	mov	r1, r9
 801439e:	4638      	mov	r0, r7
 80143a0:	47c0      	blx	r8
 80143a2:	3001      	adds	r0, #1
 80143a4:	d0e6      	beq.n	8014374 <_printf_common+0xa4>
 80143a6:	3601      	adds	r6, #1
 80143a8:	e7d9      	b.n	801435e <_printf_common+0x8e>
	...

080143ac <_printf_i>:
 80143ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80143b0:	460c      	mov	r4, r1
 80143b2:	4691      	mov	r9, r2
 80143b4:	7e27      	ldrb	r7, [r4, #24]
 80143b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80143b8:	2f78      	cmp	r7, #120	; 0x78
 80143ba:	4680      	mov	r8, r0
 80143bc:	469a      	mov	sl, r3
 80143be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80143c2:	d807      	bhi.n	80143d4 <_printf_i+0x28>
 80143c4:	2f62      	cmp	r7, #98	; 0x62
 80143c6:	d80a      	bhi.n	80143de <_printf_i+0x32>
 80143c8:	2f00      	cmp	r7, #0
 80143ca:	f000 80d8 	beq.w	801457e <_printf_i+0x1d2>
 80143ce:	2f58      	cmp	r7, #88	; 0x58
 80143d0:	f000 80a3 	beq.w	801451a <_printf_i+0x16e>
 80143d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80143d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80143dc:	e03a      	b.n	8014454 <_printf_i+0xa8>
 80143de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80143e2:	2b15      	cmp	r3, #21
 80143e4:	d8f6      	bhi.n	80143d4 <_printf_i+0x28>
 80143e6:	a001      	add	r0, pc, #4	; (adr r0, 80143ec <_printf_i+0x40>)
 80143e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80143ec:	08014445 	.word	0x08014445
 80143f0:	08014459 	.word	0x08014459
 80143f4:	080143d5 	.word	0x080143d5
 80143f8:	080143d5 	.word	0x080143d5
 80143fc:	080143d5 	.word	0x080143d5
 8014400:	080143d5 	.word	0x080143d5
 8014404:	08014459 	.word	0x08014459
 8014408:	080143d5 	.word	0x080143d5
 801440c:	080143d5 	.word	0x080143d5
 8014410:	080143d5 	.word	0x080143d5
 8014414:	080143d5 	.word	0x080143d5
 8014418:	08014565 	.word	0x08014565
 801441c:	08014489 	.word	0x08014489
 8014420:	08014547 	.word	0x08014547
 8014424:	080143d5 	.word	0x080143d5
 8014428:	080143d5 	.word	0x080143d5
 801442c:	08014587 	.word	0x08014587
 8014430:	080143d5 	.word	0x080143d5
 8014434:	08014489 	.word	0x08014489
 8014438:	080143d5 	.word	0x080143d5
 801443c:	080143d5 	.word	0x080143d5
 8014440:	0801454f 	.word	0x0801454f
 8014444:	680b      	ldr	r3, [r1, #0]
 8014446:	1d1a      	adds	r2, r3, #4
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	600a      	str	r2, [r1, #0]
 801444c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014454:	2301      	movs	r3, #1
 8014456:	e0a3      	b.n	80145a0 <_printf_i+0x1f4>
 8014458:	6825      	ldr	r5, [r4, #0]
 801445a:	6808      	ldr	r0, [r1, #0]
 801445c:	062e      	lsls	r6, r5, #24
 801445e:	f100 0304 	add.w	r3, r0, #4
 8014462:	d50a      	bpl.n	801447a <_printf_i+0xce>
 8014464:	6805      	ldr	r5, [r0, #0]
 8014466:	600b      	str	r3, [r1, #0]
 8014468:	2d00      	cmp	r5, #0
 801446a:	da03      	bge.n	8014474 <_printf_i+0xc8>
 801446c:	232d      	movs	r3, #45	; 0x2d
 801446e:	426d      	negs	r5, r5
 8014470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014474:	485e      	ldr	r0, [pc, #376]	; (80145f0 <_printf_i+0x244>)
 8014476:	230a      	movs	r3, #10
 8014478:	e019      	b.n	80144ae <_printf_i+0x102>
 801447a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801447e:	6805      	ldr	r5, [r0, #0]
 8014480:	600b      	str	r3, [r1, #0]
 8014482:	bf18      	it	ne
 8014484:	b22d      	sxthne	r5, r5
 8014486:	e7ef      	b.n	8014468 <_printf_i+0xbc>
 8014488:	680b      	ldr	r3, [r1, #0]
 801448a:	6825      	ldr	r5, [r4, #0]
 801448c:	1d18      	adds	r0, r3, #4
 801448e:	6008      	str	r0, [r1, #0]
 8014490:	0628      	lsls	r0, r5, #24
 8014492:	d501      	bpl.n	8014498 <_printf_i+0xec>
 8014494:	681d      	ldr	r5, [r3, #0]
 8014496:	e002      	b.n	801449e <_printf_i+0xf2>
 8014498:	0669      	lsls	r1, r5, #25
 801449a:	d5fb      	bpl.n	8014494 <_printf_i+0xe8>
 801449c:	881d      	ldrh	r5, [r3, #0]
 801449e:	4854      	ldr	r0, [pc, #336]	; (80145f0 <_printf_i+0x244>)
 80144a0:	2f6f      	cmp	r7, #111	; 0x6f
 80144a2:	bf0c      	ite	eq
 80144a4:	2308      	moveq	r3, #8
 80144a6:	230a      	movne	r3, #10
 80144a8:	2100      	movs	r1, #0
 80144aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80144ae:	6866      	ldr	r6, [r4, #4]
 80144b0:	60a6      	str	r6, [r4, #8]
 80144b2:	2e00      	cmp	r6, #0
 80144b4:	bfa2      	ittt	ge
 80144b6:	6821      	ldrge	r1, [r4, #0]
 80144b8:	f021 0104 	bicge.w	r1, r1, #4
 80144bc:	6021      	strge	r1, [r4, #0]
 80144be:	b90d      	cbnz	r5, 80144c4 <_printf_i+0x118>
 80144c0:	2e00      	cmp	r6, #0
 80144c2:	d04d      	beq.n	8014560 <_printf_i+0x1b4>
 80144c4:	4616      	mov	r6, r2
 80144c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80144ca:	fb03 5711 	mls	r7, r3, r1, r5
 80144ce:	5dc7      	ldrb	r7, [r0, r7]
 80144d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80144d4:	462f      	mov	r7, r5
 80144d6:	42bb      	cmp	r3, r7
 80144d8:	460d      	mov	r5, r1
 80144da:	d9f4      	bls.n	80144c6 <_printf_i+0x11a>
 80144dc:	2b08      	cmp	r3, #8
 80144de:	d10b      	bne.n	80144f8 <_printf_i+0x14c>
 80144e0:	6823      	ldr	r3, [r4, #0]
 80144e2:	07df      	lsls	r7, r3, #31
 80144e4:	d508      	bpl.n	80144f8 <_printf_i+0x14c>
 80144e6:	6923      	ldr	r3, [r4, #16]
 80144e8:	6861      	ldr	r1, [r4, #4]
 80144ea:	4299      	cmp	r1, r3
 80144ec:	bfde      	ittt	le
 80144ee:	2330      	movle	r3, #48	; 0x30
 80144f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80144f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80144f8:	1b92      	subs	r2, r2, r6
 80144fa:	6122      	str	r2, [r4, #16]
 80144fc:	f8cd a000 	str.w	sl, [sp]
 8014500:	464b      	mov	r3, r9
 8014502:	aa03      	add	r2, sp, #12
 8014504:	4621      	mov	r1, r4
 8014506:	4640      	mov	r0, r8
 8014508:	f7ff fee2 	bl	80142d0 <_printf_common>
 801450c:	3001      	adds	r0, #1
 801450e:	d14c      	bne.n	80145aa <_printf_i+0x1fe>
 8014510:	f04f 30ff 	mov.w	r0, #4294967295
 8014514:	b004      	add	sp, #16
 8014516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801451a:	4835      	ldr	r0, [pc, #212]	; (80145f0 <_printf_i+0x244>)
 801451c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014520:	6823      	ldr	r3, [r4, #0]
 8014522:	680e      	ldr	r6, [r1, #0]
 8014524:	061f      	lsls	r7, r3, #24
 8014526:	f856 5b04 	ldr.w	r5, [r6], #4
 801452a:	600e      	str	r6, [r1, #0]
 801452c:	d514      	bpl.n	8014558 <_printf_i+0x1ac>
 801452e:	07d9      	lsls	r1, r3, #31
 8014530:	bf44      	itt	mi
 8014532:	f043 0320 	orrmi.w	r3, r3, #32
 8014536:	6023      	strmi	r3, [r4, #0]
 8014538:	b91d      	cbnz	r5, 8014542 <_printf_i+0x196>
 801453a:	6823      	ldr	r3, [r4, #0]
 801453c:	f023 0320 	bic.w	r3, r3, #32
 8014540:	6023      	str	r3, [r4, #0]
 8014542:	2310      	movs	r3, #16
 8014544:	e7b0      	b.n	80144a8 <_printf_i+0xfc>
 8014546:	6823      	ldr	r3, [r4, #0]
 8014548:	f043 0320 	orr.w	r3, r3, #32
 801454c:	6023      	str	r3, [r4, #0]
 801454e:	2378      	movs	r3, #120	; 0x78
 8014550:	4828      	ldr	r0, [pc, #160]	; (80145f4 <_printf_i+0x248>)
 8014552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014556:	e7e3      	b.n	8014520 <_printf_i+0x174>
 8014558:	065e      	lsls	r6, r3, #25
 801455a:	bf48      	it	mi
 801455c:	b2ad      	uxthmi	r5, r5
 801455e:	e7e6      	b.n	801452e <_printf_i+0x182>
 8014560:	4616      	mov	r6, r2
 8014562:	e7bb      	b.n	80144dc <_printf_i+0x130>
 8014564:	680b      	ldr	r3, [r1, #0]
 8014566:	6826      	ldr	r6, [r4, #0]
 8014568:	6960      	ldr	r0, [r4, #20]
 801456a:	1d1d      	adds	r5, r3, #4
 801456c:	600d      	str	r5, [r1, #0]
 801456e:	0635      	lsls	r5, r6, #24
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	d501      	bpl.n	8014578 <_printf_i+0x1cc>
 8014574:	6018      	str	r0, [r3, #0]
 8014576:	e002      	b.n	801457e <_printf_i+0x1d2>
 8014578:	0671      	lsls	r1, r6, #25
 801457a:	d5fb      	bpl.n	8014574 <_printf_i+0x1c8>
 801457c:	8018      	strh	r0, [r3, #0]
 801457e:	2300      	movs	r3, #0
 8014580:	6123      	str	r3, [r4, #16]
 8014582:	4616      	mov	r6, r2
 8014584:	e7ba      	b.n	80144fc <_printf_i+0x150>
 8014586:	680b      	ldr	r3, [r1, #0]
 8014588:	1d1a      	adds	r2, r3, #4
 801458a:	600a      	str	r2, [r1, #0]
 801458c:	681e      	ldr	r6, [r3, #0]
 801458e:	6862      	ldr	r2, [r4, #4]
 8014590:	2100      	movs	r1, #0
 8014592:	4630      	mov	r0, r6
 8014594:	f7eb fe54 	bl	8000240 <memchr>
 8014598:	b108      	cbz	r0, 801459e <_printf_i+0x1f2>
 801459a:	1b80      	subs	r0, r0, r6
 801459c:	6060      	str	r0, [r4, #4]
 801459e:	6863      	ldr	r3, [r4, #4]
 80145a0:	6123      	str	r3, [r4, #16]
 80145a2:	2300      	movs	r3, #0
 80145a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145a8:	e7a8      	b.n	80144fc <_printf_i+0x150>
 80145aa:	6923      	ldr	r3, [r4, #16]
 80145ac:	4632      	mov	r2, r6
 80145ae:	4649      	mov	r1, r9
 80145b0:	4640      	mov	r0, r8
 80145b2:	47d0      	blx	sl
 80145b4:	3001      	adds	r0, #1
 80145b6:	d0ab      	beq.n	8014510 <_printf_i+0x164>
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	079b      	lsls	r3, r3, #30
 80145bc:	d413      	bmi.n	80145e6 <_printf_i+0x23a>
 80145be:	68e0      	ldr	r0, [r4, #12]
 80145c0:	9b03      	ldr	r3, [sp, #12]
 80145c2:	4298      	cmp	r0, r3
 80145c4:	bfb8      	it	lt
 80145c6:	4618      	movlt	r0, r3
 80145c8:	e7a4      	b.n	8014514 <_printf_i+0x168>
 80145ca:	2301      	movs	r3, #1
 80145cc:	4632      	mov	r2, r6
 80145ce:	4649      	mov	r1, r9
 80145d0:	4640      	mov	r0, r8
 80145d2:	47d0      	blx	sl
 80145d4:	3001      	adds	r0, #1
 80145d6:	d09b      	beq.n	8014510 <_printf_i+0x164>
 80145d8:	3501      	adds	r5, #1
 80145da:	68e3      	ldr	r3, [r4, #12]
 80145dc:	9903      	ldr	r1, [sp, #12]
 80145de:	1a5b      	subs	r3, r3, r1
 80145e0:	42ab      	cmp	r3, r5
 80145e2:	dcf2      	bgt.n	80145ca <_printf_i+0x21e>
 80145e4:	e7eb      	b.n	80145be <_printf_i+0x212>
 80145e6:	2500      	movs	r5, #0
 80145e8:	f104 0619 	add.w	r6, r4, #25
 80145ec:	e7f5      	b.n	80145da <_printf_i+0x22e>
 80145ee:	bf00      	nop
 80145f0:	08017bad 	.word	0x08017bad
 80145f4:	08017bbe 	.word	0x08017bbe

080145f8 <_sbrk_r>:
 80145f8:	b538      	push	{r3, r4, r5, lr}
 80145fa:	4d06      	ldr	r5, [pc, #24]	; (8014614 <_sbrk_r+0x1c>)
 80145fc:	2300      	movs	r3, #0
 80145fe:	4604      	mov	r4, r0
 8014600:	4608      	mov	r0, r1
 8014602:	602b      	str	r3, [r5, #0]
 8014604:	f7ee fbca 	bl	8002d9c <_sbrk>
 8014608:	1c43      	adds	r3, r0, #1
 801460a:	d102      	bne.n	8014612 <_sbrk_r+0x1a>
 801460c:	682b      	ldr	r3, [r5, #0]
 801460e:	b103      	cbz	r3, 8014612 <_sbrk_r+0x1a>
 8014610:	6023      	str	r3, [r4, #0]
 8014612:	bd38      	pop	{r3, r4, r5, pc}
 8014614:	20009f64 	.word	0x20009f64

08014618 <__sread>:
 8014618:	b510      	push	{r4, lr}
 801461a:	460c      	mov	r4, r1
 801461c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014620:	f000 fa92 	bl	8014b48 <_read_r>
 8014624:	2800      	cmp	r0, #0
 8014626:	bfab      	itete	ge
 8014628:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801462a:	89a3      	ldrhlt	r3, [r4, #12]
 801462c:	181b      	addge	r3, r3, r0
 801462e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014632:	bfac      	ite	ge
 8014634:	6563      	strge	r3, [r4, #84]	; 0x54
 8014636:	81a3      	strhlt	r3, [r4, #12]
 8014638:	bd10      	pop	{r4, pc}

0801463a <__swrite>:
 801463a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801463e:	461f      	mov	r7, r3
 8014640:	898b      	ldrh	r3, [r1, #12]
 8014642:	05db      	lsls	r3, r3, #23
 8014644:	4605      	mov	r5, r0
 8014646:	460c      	mov	r4, r1
 8014648:	4616      	mov	r6, r2
 801464a:	d505      	bpl.n	8014658 <__swrite+0x1e>
 801464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014650:	2302      	movs	r3, #2
 8014652:	2200      	movs	r2, #0
 8014654:	f000 f9d0 	bl	80149f8 <_lseek_r>
 8014658:	89a3      	ldrh	r3, [r4, #12]
 801465a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801465e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014662:	81a3      	strh	r3, [r4, #12]
 8014664:	4632      	mov	r2, r6
 8014666:	463b      	mov	r3, r7
 8014668:	4628      	mov	r0, r5
 801466a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801466e:	f000 b869 	b.w	8014744 <_write_r>

08014672 <__sseek>:
 8014672:	b510      	push	{r4, lr}
 8014674:	460c      	mov	r4, r1
 8014676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801467a:	f000 f9bd 	bl	80149f8 <_lseek_r>
 801467e:	1c43      	adds	r3, r0, #1
 8014680:	89a3      	ldrh	r3, [r4, #12]
 8014682:	bf15      	itete	ne
 8014684:	6560      	strne	r0, [r4, #84]	; 0x54
 8014686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801468a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801468e:	81a3      	strheq	r3, [r4, #12]
 8014690:	bf18      	it	ne
 8014692:	81a3      	strhne	r3, [r4, #12]
 8014694:	bd10      	pop	{r4, pc}

08014696 <__sclose>:
 8014696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801469a:	f000 b8db 	b.w	8014854 <_close_r>
	...

080146a0 <__swbuf_r>:
 80146a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146a2:	460e      	mov	r6, r1
 80146a4:	4614      	mov	r4, r2
 80146a6:	4605      	mov	r5, r0
 80146a8:	b118      	cbz	r0, 80146b2 <__swbuf_r+0x12>
 80146aa:	6983      	ldr	r3, [r0, #24]
 80146ac:	b90b      	cbnz	r3, 80146b2 <__swbuf_r+0x12>
 80146ae:	f7ff f9f5 	bl	8013a9c <__sinit>
 80146b2:	4b21      	ldr	r3, [pc, #132]	; (8014738 <__swbuf_r+0x98>)
 80146b4:	429c      	cmp	r4, r3
 80146b6:	d12b      	bne.n	8014710 <__swbuf_r+0x70>
 80146b8:	686c      	ldr	r4, [r5, #4]
 80146ba:	69a3      	ldr	r3, [r4, #24]
 80146bc:	60a3      	str	r3, [r4, #8]
 80146be:	89a3      	ldrh	r3, [r4, #12]
 80146c0:	071a      	lsls	r2, r3, #28
 80146c2:	d52f      	bpl.n	8014724 <__swbuf_r+0x84>
 80146c4:	6923      	ldr	r3, [r4, #16]
 80146c6:	b36b      	cbz	r3, 8014724 <__swbuf_r+0x84>
 80146c8:	6923      	ldr	r3, [r4, #16]
 80146ca:	6820      	ldr	r0, [r4, #0]
 80146cc:	1ac0      	subs	r0, r0, r3
 80146ce:	6963      	ldr	r3, [r4, #20]
 80146d0:	b2f6      	uxtb	r6, r6
 80146d2:	4283      	cmp	r3, r0
 80146d4:	4637      	mov	r7, r6
 80146d6:	dc04      	bgt.n	80146e2 <__swbuf_r+0x42>
 80146d8:	4621      	mov	r1, r4
 80146da:	4628      	mov	r0, r5
 80146dc:	f000 f950 	bl	8014980 <_fflush_r>
 80146e0:	bb30      	cbnz	r0, 8014730 <__swbuf_r+0x90>
 80146e2:	68a3      	ldr	r3, [r4, #8]
 80146e4:	3b01      	subs	r3, #1
 80146e6:	60a3      	str	r3, [r4, #8]
 80146e8:	6823      	ldr	r3, [r4, #0]
 80146ea:	1c5a      	adds	r2, r3, #1
 80146ec:	6022      	str	r2, [r4, #0]
 80146ee:	701e      	strb	r6, [r3, #0]
 80146f0:	6963      	ldr	r3, [r4, #20]
 80146f2:	3001      	adds	r0, #1
 80146f4:	4283      	cmp	r3, r0
 80146f6:	d004      	beq.n	8014702 <__swbuf_r+0x62>
 80146f8:	89a3      	ldrh	r3, [r4, #12]
 80146fa:	07db      	lsls	r3, r3, #31
 80146fc:	d506      	bpl.n	801470c <__swbuf_r+0x6c>
 80146fe:	2e0a      	cmp	r6, #10
 8014700:	d104      	bne.n	801470c <__swbuf_r+0x6c>
 8014702:	4621      	mov	r1, r4
 8014704:	4628      	mov	r0, r5
 8014706:	f000 f93b 	bl	8014980 <_fflush_r>
 801470a:	b988      	cbnz	r0, 8014730 <__swbuf_r+0x90>
 801470c:	4638      	mov	r0, r7
 801470e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014710:	4b0a      	ldr	r3, [pc, #40]	; (801473c <__swbuf_r+0x9c>)
 8014712:	429c      	cmp	r4, r3
 8014714:	d101      	bne.n	801471a <__swbuf_r+0x7a>
 8014716:	68ac      	ldr	r4, [r5, #8]
 8014718:	e7cf      	b.n	80146ba <__swbuf_r+0x1a>
 801471a:	4b09      	ldr	r3, [pc, #36]	; (8014740 <__swbuf_r+0xa0>)
 801471c:	429c      	cmp	r4, r3
 801471e:	bf08      	it	eq
 8014720:	68ec      	ldreq	r4, [r5, #12]
 8014722:	e7ca      	b.n	80146ba <__swbuf_r+0x1a>
 8014724:	4621      	mov	r1, r4
 8014726:	4628      	mov	r0, r5
 8014728:	f000 f81e 	bl	8014768 <__swsetup_r>
 801472c:	2800      	cmp	r0, #0
 801472e:	d0cb      	beq.n	80146c8 <__swbuf_r+0x28>
 8014730:	f04f 37ff 	mov.w	r7, #4294967295
 8014734:	e7ea      	b.n	801470c <__swbuf_r+0x6c>
 8014736:	bf00      	nop
 8014738:	08017b5c 	.word	0x08017b5c
 801473c:	08017b7c 	.word	0x08017b7c
 8014740:	08017b3c 	.word	0x08017b3c

08014744 <_write_r>:
 8014744:	b538      	push	{r3, r4, r5, lr}
 8014746:	4d07      	ldr	r5, [pc, #28]	; (8014764 <_write_r+0x20>)
 8014748:	4604      	mov	r4, r0
 801474a:	4608      	mov	r0, r1
 801474c:	4611      	mov	r1, r2
 801474e:	2200      	movs	r2, #0
 8014750:	602a      	str	r2, [r5, #0]
 8014752:	461a      	mov	r2, r3
 8014754:	f7ee fad1 	bl	8002cfa <_write>
 8014758:	1c43      	adds	r3, r0, #1
 801475a:	d102      	bne.n	8014762 <_write_r+0x1e>
 801475c:	682b      	ldr	r3, [r5, #0]
 801475e:	b103      	cbz	r3, 8014762 <_write_r+0x1e>
 8014760:	6023      	str	r3, [r4, #0]
 8014762:	bd38      	pop	{r3, r4, r5, pc}
 8014764:	20009f64 	.word	0x20009f64

08014768 <__swsetup_r>:
 8014768:	4b32      	ldr	r3, [pc, #200]	; (8014834 <__swsetup_r+0xcc>)
 801476a:	b570      	push	{r4, r5, r6, lr}
 801476c:	681d      	ldr	r5, [r3, #0]
 801476e:	4606      	mov	r6, r0
 8014770:	460c      	mov	r4, r1
 8014772:	b125      	cbz	r5, 801477e <__swsetup_r+0x16>
 8014774:	69ab      	ldr	r3, [r5, #24]
 8014776:	b913      	cbnz	r3, 801477e <__swsetup_r+0x16>
 8014778:	4628      	mov	r0, r5
 801477a:	f7ff f98f 	bl	8013a9c <__sinit>
 801477e:	4b2e      	ldr	r3, [pc, #184]	; (8014838 <__swsetup_r+0xd0>)
 8014780:	429c      	cmp	r4, r3
 8014782:	d10f      	bne.n	80147a4 <__swsetup_r+0x3c>
 8014784:	686c      	ldr	r4, [r5, #4]
 8014786:	89a3      	ldrh	r3, [r4, #12]
 8014788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801478c:	0719      	lsls	r1, r3, #28
 801478e:	d42c      	bmi.n	80147ea <__swsetup_r+0x82>
 8014790:	06dd      	lsls	r5, r3, #27
 8014792:	d411      	bmi.n	80147b8 <__swsetup_r+0x50>
 8014794:	2309      	movs	r3, #9
 8014796:	6033      	str	r3, [r6, #0]
 8014798:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801479c:	81a3      	strh	r3, [r4, #12]
 801479e:	f04f 30ff 	mov.w	r0, #4294967295
 80147a2:	e03e      	b.n	8014822 <__swsetup_r+0xba>
 80147a4:	4b25      	ldr	r3, [pc, #148]	; (801483c <__swsetup_r+0xd4>)
 80147a6:	429c      	cmp	r4, r3
 80147a8:	d101      	bne.n	80147ae <__swsetup_r+0x46>
 80147aa:	68ac      	ldr	r4, [r5, #8]
 80147ac:	e7eb      	b.n	8014786 <__swsetup_r+0x1e>
 80147ae:	4b24      	ldr	r3, [pc, #144]	; (8014840 <__swsetup_r+0xd8>)
 80147b0:	429c      	cmp	r4, r3
 80147b2:	bf08      	it	eq
 80147b4:	68ec      	ldreq	r4, [r5, #12]
 80147b6:	e7e6      	b.n	8014786 <__swsetup_r+0x1e>
 80147b8:	0758      	lsls	r0, r3, #29
 80147ba:	d512      	bpl.n	80147e2 <__swsetup_r+0x7a>
 80147bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147be:	b141      	cbz	r1, 80147d2 <__swsetup_r+0x6a>
 80147c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147c4:	4299      	cmp	r1, r3
 80147c6:	d002      	beq.n	80147ce <__swsetup_r+0x66>
 80147c8:	4630      	mov	r0, r6
 80147ca:	f7ff fa21 	bl	8013c10 <_free_r>
 80147ce:	2300      	movs	r3, #0
 80147d0:	6363      	str	r3, [r4, #52]	; 0x34
 80147d2:	89a3      	ldrh	r3, [r4, #12]
 80147d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80147d8:	81a3      	strh	r3, [r4, #12]
 80147da:	2300      	movs	r3, #0
 80147dc:	6063      	str	r3, [r4, #4]
 80147de:	6923      	ldr	r3, [r4, #16]
 80147e0:	6023      	str	r3, [r4, #0]
 80147e2:	89a3      	ldrh	r3, [r4, #12]
 80147e4:	f043 0308 	orr.w	r3, r3, #8
 80147e8:	81a3      	strh	r3, [r4, #12]
 80147ea:	6923      	ldr	r3, [r4, #16]
 80147ec:	b94b      	cbnz	r3, 8014802 <__swsetup_r+0x9a>
 80147ee:	89a3      	ldrh	r3, [r4, #12]
 80147f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80147f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147f8:	d003      	beq.n	8014802 <__swsetup_r+0x9a>
 80147fa:	4621      	mov	r1, r4
 80147fc:	4630      	mov	r0, r6
 80147fe:	f000 f931 	bl	8014a64 <__smakebuf_r>
 8014802:	89a0      	ldrh	r0, [r4, #12]
 8014804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014808:	f010 0301 	ands.w	r3, r0, #1
 801480c:	d00a      	beq.n	8014824 <__swsetup_r+0xbc>
 801480e:	2300      	movs	r3, #0
 8014810:	60a3      	str	r3, [r4, #8]
 8014812:	6963      	ldr	r3, [r4, #20]
 8014814:	425b      	negs	r3, r3
 8014816:	61a3      	str	r3, [r4, #24]
 8014818:	6923      	ldr	r3, [r4, #16]
 801481a:	b943      	cbnz	r3, 801482e <__swsetup_r+0xc6>
 801481c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014820:	d1ba      	bne.n	8014798 <__swsetup_r+0x30>
 8014822:	bd70      	pop	{r4, r5, r6, pc}
 8014824:	0781      	lsls	r1, r0, #30
 8014826:	bf58      	it	pl
 8014828:	6963      	ldrpl	r3, [r4, #20]
 801482a:	60a3      	str	r3, [r4, #8]
 801482c:	e7f4      	b.n	8014818 <__swsetup_r+0xb0>
 801482e:	2000      	movs	r0, #0
 8014830:	e7f7      	b.n	8014822 <__swsetup_r+0xba>
 8014832:	bf00      	nop
 8014834:	20000084 	.word	0x20000084
 8014838:	08017b5c 	.word	0x08017b5c
 801483c:	08017b7c 	.word	0x08017b7c
 8014840:	08017b3c 	.word	0x08017b3c

08014844 <abort>:
 8014844:	b508      	push	{r3, lr}
 8014846:	2006      	movs	r0, #6
 8014848:	f000 f9b8 	bl	8014bbc <raise>
 801484c:	2001      	movs	r0, #1
 801484e:	f7ee fa2d 	bl	8002cac <_exit>
	...

08014854 <_close_r>:
 8014854:	b538      	push	{r3, r4, r5, lr}
 8014856:	4d06      	ldr	r5, [pc, #24]	; (8014870 <_close_r+0x1c>)
 8014858:	2300      	movs	r3, #0
 801485a:	4604      	mov	r4, r0
 801485c:	4608      	mov	r0, r1
 801485e:	602b      	str	r3, [r5, #0]
 8014860:	f7ee fa67 	bl	8002d32 <_close>
 8014864:	1c43      	adds	r3, r0, #1
 8014866:	d102      	bne.n	801486e <_close_r+0x1a>
 8014868:	682b      	ldr	r3, [r5, #0]
 801486a:	b103      	cbz	r3, 801486e <_close_r+0x1a>
 801486c:	6023      	str	r3, [r4, #0]
 801486e:	bd38      	pop	{r3, r4, r5, pc}
 8014870:	20009f64 	.word	0x20009f64

08014874 <__sflush_r>:
 8014874:	898a      	ldrh	r2, [r1, #12]
 8014876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801487a:	4605      	mov	r5, r0
 801487c:	0710      	lsls	r0, r2, #28
 801487e:	460c      	mov	r4, r1
 8014880:	d458      	bmi.n	8014934 <__sflush_r+0xc0>
 8014882:	684b      	ldr	r3, [r1, #4]
 8014884:	2b00      	cmp	r3, #0
 8014886:	dc05      	bgt.n	8014894 <__sflush_r+0x20>
 8014888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801488a:	2b00      	cmp	r3, #0
 801488c:	dc02      	bgt.n	8014894 <__sflush_r+0x20>
 801488e:	2000      	movs	r0, #0
 8014890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014896:	2e00      	cmp	r6, #0
 8014898:	d0f9      	beq.n	801488e <__sflush_r+0x1a>
 801489a:	2300      	movs	r3, #0
 801489c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80148a0:	682f      	ldr	r7, [r5, #0]
 80148a2:	602b      	str	r3, [r5, #0]
 80148a4:	d032      	beq.n	801490c <__sflush_r+0x98>
 80148a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80148a8:	89a3      	ldrh	r3, [r4, #12]
 80148aa:	075a      	lsls	r2, r3, #29
 80148ac:	d505      	bpl.n	80148ba <__sflush_r+0x46>
 80148ae:	6863      	ldr	r3, [r4, #4]
 80148b0:	1ac0      	subs	r0, r0, r3
 80148b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80148b4:	b10b      	cbz	r3, 80148ba <__sflush_r+0x46>
 80148b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80148b8:	1ac0      	subs	r0, r0, r3
 80148ba:	2300      	movs	r3, #0
 80148bc:	4602      	mov	r2, r0
 80148be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80148c0:	6a21      	ldr	r1, [r4, #32]
 80148c2:	4628      	mov	r0, r5
 80148c4:	47b0      	blx	r6
 80148c6:	1c43      	adds	r3, r0, #1
 80148c8:	89a3      	ldrh	r3, [r4, #12]
 80148ca:	d106      	bne.n	80148da <__sflush_r+0x66>
 80148cc:	6829      	ldr	r1, [r5, #0]
 80148ce:	291d      	cmp	r1, #29
 80148d0:	d82c      	bhi.n	801492c <__sflush_r+0xb8>
 80148d2:	4a2a      	ldr	r2, [pc, #168]	; (801497c <__sflush_r+0x108>)
 80148d4:	40ca      	lsrs	r2, r1
 80148d6:	07d6      	lsls	r6, r2, #31
 80148d8:	d528      	bpl.n	801492c <__sflush_r+0xb8>
 80148da:	2200      	movs	r2, #0
 80148dc:	6062      	str	r2, [r4, #4]
 80148de:	04d9      	lsls	r1, r3, #19
 80148e0:	6922      	ldr	r2, [r4, #16]
 80148e2:	6022      	str	r2, [r4, #0]
 80148e4:	d504      	bpl.n	80148f0 <__sflush_r+0x7c>
 80148e6:	1c42      	adds	r2, r0, #1
 80148e8:	d101      	bne.n	80148ee <__sflush_r+0x7a>
 80148ea:	682b      	ldr	r3, [r5, #0]
 80148ec:	b903      	cbnz	r3, 80148f0 <__sflush_r+0x7c>
 80148ee:	6560      	str	r0, [r4, #84]	; 0x54
 80148f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148f2:	602f      	str	r7, [r5, #0]
 80148f4:	2900      	cmp	r1, #0
 80148f6:	d0ca      	beq.n	801488e <__sflush_r+0x1a>
 80148f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148fc:	4299      	cmp	r1, r3
 80148fe:	d002      	beq.n	8014906 <__sflush_r+0x92>
 8014900:	4628      	mov	r0, r5
 8014902:	f7ff f985 	bl	8013c10 <_free_r>
 8014906:	2000      	movs	r0, #0
 8014908:	6360      	str	r0, [r4, #52]	; 0x34
 801490a:	e7c1      	b.n	8014890 <__sflush_r+0x1c>
 801490c:	6a21      	ldr	r1, [r4, #32]
 801490e:	2301      	movs	r3, #1
 8014910:	4628      	mov	r0, r5
 8014912:	47b0      	blx	r6
 8014914:	1c41      	adds	r1, r0, #1
 8014916:	d1c7      	bne.n	80148a8 <__sflush_r+0x34>
 8014918:	682b      	ldr	r3, [r5, #0]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d0c4      	beq.n	80148a8 <__sflush_r+0x34>
 801491e:	2b1d      	cmp	r3, #29
 8014920:	d001      	beq.n	8014926 <__sflush_r+0xb2>
 8014922:	2b16      	cmp	r3, #22
 8014924:	d101      	bne.n	801492a <__sflush_r+0xb6>
 8014926:	602f      	str	r7, [r5, #0]
 8014928:	e7b1      	b.n	801488e <__sflush_r+0x1a>
 801492a:	89a3      	ldrh	r3, [r4, #12]
 801492c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014930:	81a3      	strh	r3, [r4, #12]
 8014932:	e7ad      	b.n	8014890 <__sflush_r+0x1c>
 8014934:	690f      	ldr	r7, [r1, #16]
 8014936:	2f00      	cmp	r7, #0
 8014938:	d0a9      	beq.n	801488e <__sflush_r+0x1a>
 801493a:	0793      	lsls	r3, r2, #30
 801493c:	680e      	ldr	r6, [r1, #0]
 801493e:	bf08      	it	eq
 8014940:	694b      	ldreq	r3, [r1, #20]
 8014942:	600f      	str	r7, [r1, #0]
 8014944:	bf18      	it	ne
 8014946:	2300      	movne	r3, #0
 8014948:	eba6 0807 	sub.w	r8, r6, r7
 801494c:	608b      	str	r3, [r1, #8]
 801494e:	f1b8 0f00 	cmp.w	r8, #0
 8014952:	dd9c      	ble.n	801488e <__sflush_r+0x1a>
 8014954:	6a21      	ldr	r1, [r4, #32]
 8014956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014958:	4643      	mov	r3, r8
 801495a:	463a      	mov	r2, r7
 801495c:	4628      	mov	r0, r5
 801495e:	47b0      	blx	r6
 8014960:	2800      	cmp	r0, #0
 8014962:	dc06      	bgt.n	8014972 <__sflush_r+0xfe>
 8014964:	89a3      	ldrh	r3, [r4, #12]
 8014966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801496a:	81a3      	strh	r3, [r4, #12]
 801496c:	f04f 30ff 	mov.w	r0, #4294967295
 8014970:	e78e      	b.n	8014890 <__sflush_r+0x1c>
 8014972:	4407      	add	r7, r0
 8014974:	eba8 0800 	sub.w	r8, r8, r0
 8014978:	e7e9      	b.n	801494e <__sflush_r+0xda>
 801497a:	bf00      	nop
 801497c:	20400001 	.word	0x20400001

08014980 <_fflush_r>:
 8014980:	b538      	push	{r3, r4, r5, lr}
 8014982:	690b      	ldr	r3, [r1, #16]
 8014984:	4605      	mov	r5, r0
 8014986:	460c      	mov	r4, r1
 8014988:	b913      	cbnz	r3, 8014990 <_fflush_r+0x10>
 801498a:	2500      	movs	r5, #0
 801498c:	4628      	mov	r0, r5
 801498e:	bd38      	pop	{r3, r4, r5, pc}
 8014990:	b118      	cbz	r0, 801499a <_fflush_r+0x1a>
 8014992:	6983      	ldr	r3, [r0, #24]
 8014994:	b90b      	cbnz	r3, 801499a <_fflush_r+0x1a>
 8014996:	f7ff f881 	bl	8013a9c <__sinit>
 801499a:	4b14      	ldr	r3, [pc, #80]	; (80149ec <_fflush_r+0x6c>)
 801499c:	429c      	cmp	r4, r3
 801499e:	d11b      	bne.n	80149d8 <_fflush_r+0x58>
 80149a0:	686c      	ldr	r4, [r5, #4]
 80149a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d0ef      	beq.n	801498a <_fflush_r+0xa>
 80149aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80149ac:	07d0      	lsls	r0, r2, #31
 80149ae:	d404      	bmi.n	80149ba <_fflush_r+0x3a>
 80149b0:	0599      	lsls	r1, r3, #22
 80149b2:	d402      	bmi.n	80149ba <_fflush_r+0x3a>
 80149b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149b6:	f7ff f921 	bl	8013bfc <__retarget_lock_acquire_recursive>
 80149ba:	4628      	mov	r0, r5
 80149bc:	4621      	mov	r1, r4
 80149be:	f7ff ff59 	bl	8014874 <__sflush_r>
 80149c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80149c4:	07da      	lsls	r2, r3, #31
 80149c6:	4605      	mov	r5, r0
 80149c8:	d4e0      	bmi.n	801498c <_fflush_r+0xc>
 80149ca:	89a3      	ldrh	r3, [r4, #12]
 80149cc:	059b      	lsls	r3, r3, #22
 80149ce:	d4dd      	bmi.n	801498c <_fflush_r+0xc>
 80149d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80149d2:	f7ff f914 	bl	8013bfe <__retarget_lock_release_recursive>
 80149d6:	e7d9      	b.n	801498c <_fflush_r+0xc>
 80149d8:	4b05      	ldr	r3, [pc, #20]	; (80149f0 <_fflush_r+0x70>)
 80149da:	429c      	cmp	r4, r3
 80149dc:	d101      	bne.n	80149e2 <_fflush_r+0x62>
 80149de:	68ac      	ldr	r4, [r5, #8]
 80149e0:	e7df      	b.n	80149a2 <_fflush_r+0x22>
 80149e2:	4b04      	ldr	r3, [pc, #16]	; (80149f4 <_fflush_r+0x74>)
 80149e4:	429c      	cmp	r4, r3
 80149e6:	bf08      	it	eq
 80149e8:	68ec      	ldreq	r4, [r5, #12]
 80149ea:	e7da      	b.n	80149a2 <_fflush_r+0x22>
 80149ec:	08017b5c 	.word	0x08017b5c
 80149f0:	08017b7c 	.word	0x08017b7c
 80149f4:	08017b3c 	.word	0x08017b3c

080149f8 <_lseek_r>:
 80149f8:	b538      	push	{r3, r4, r5, lr}
 80149fa:	4d07      	ldr	r5, [pc, #28]	; (8014a18 <_lseek_r+0x20>)
 80149fc:	4604      	mov	r4, r0
 80149fe:	4608      	mov	r0, r1
 8014a00:	4611      	mov	r1, r2
 8014a02:	2200      	movs	r2, #0
 8014a04:	602a      	str	r2, [r5, #0]
 8014a06:	461a      	mov	r2, r3
 8014a08:	f7ee f9ba 	bl	8002d80 <_lseek>
 8014a0c:	1c43      	adds	r3, r0, #1
 8014a0e:	d102      	bne.n	8014a16 <_lseek_r+0x1e>
 8014a10:	682b      	ldr	r3, [r5, #0]
 8014a12:	b103      	cbz	r3, 8014a16 <_lseek_r+0x1e>
 8014a14:	6023      	str	r3, [r4, #0]
 8014a16:	bd38      	pop	{r3, r4, r5, pc}
 8014a18:	20009f64 	.word	0x20009f64

08014a1c <__swhatbuf_r>:
 8014a1c:	b570      	push	{r4, r5, r6, lr}
 8014a1e:	460e      	mov	r6, r1
 8014a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a24:	2900      	cmp	r1, #0
 8014a26:	b096      	sub	sp, #88	; 0x58
 8014a28:	4614      	mov	r4, r2
 8014a2a:	461d      	mov	r5, r3
 8014a2c:	da07      	bge.n	8014a3e <__swhatbuf_r+0x22>
 8014a2e:	2300      	movs	r3, #0
 8014a30:	602b      	str	r3, [r5, #0]
 8014a32:	89b3      	ldrh	r3, [r6, #12]
 8014a34:	061a      	lsls	r2, r3, #24
 8014a36:	d410      	bmi.n	8014a5a <__swhatbuf_r+0x3e>
 8014a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a3c:	e00e      	b.n	8014a5c <__swhatbuf_r+0x40>
 8014a3e:	466a      	mov	r2, sp
 8014a40:	f000 f8d8 	bl	8014bf4 <_fstat_r>
 8014a44:	2800      	cmp	r0, #0
 8014a46:	dbf2      	blt.n	8014a2e <__swhatbuf_r+0x12>
 8014a48:	9a01      	ldr	r2, [sp, #4]
 8014a4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a52:	425a      	negs	r2, r3
 8014a54:	415a      	adcs	r2, r3
 8014a56:	602a      	str	r2, [r5, #0]
 8014a58:	e7ee      	b.n	8014a38 <__swhatbuf_r+0x1c>
 8014a5a:	2340      	movs	r3, #64	; 0x40
 8014a5c:	2000      	movs	r0, #0
 8014a5e:	6023      	str	r3, [r4, #0]
 8014a60:	b016      	add	sp, #88	; 0x58
 8014a62:	bd70      	pop	{r4, r5, r6, pc}

08014a64 <__smakebuf_r>:
 8014a64:	898b      	ldrh	r3, [r1, #12]
 8014a66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a68:	079d      	lsls	r5, r3, #30
 8014a6a:	4606      	mov	r6, r0
 8014a6c:	460c      	mov	r4, r1
 8014a6e:	d507      	bpl.n	8014a80 <__smakebuf_r+0x1c>
 8014a70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a74:	6023      	str	r3, [r4, #0]
 8014a76:	6123      	str	r3, [r4, #16]
 8014a78:	2301      	movs	r3, #1
 8014a7a:	6163      	str	r3, [r4, #20]
 8014a7c:	b002      	add	sp, #8
 8014a7e:	bd70      	pop	{r4, r5, r6, pc}
 8014a80:	ab01      	add	r3, sp, #4
 8014a82:	466a      	mov	r2, sp
 8014a84:	f7ff ffca 	bl	8014a1c <__swhatbuf_r>
 8014a88:	9900      	ldr	r1, [sp, #0]
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	4630      	mov	r0, r6
 8014a8e:	f7ff f90f 	bl	8013cb0 <_malloc_r>
 8014a92:	b948      	cbnz	r0, 8014aa8 <__smakebuf_r+0x44>
 8014a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a98:	059a      	lsls	r2, r3, #22
 8014a9a:	d4ef      	bmi.n	8014a7c <__smakebuf_r+0x18>
 8014a9c:	f023 0303 	bic.w	r3, r3, #3
 8014aa0:	f043 0302 	orr.w	r3, r3, #2
 8014aa4:	81a3      	strh	r3, [r4, #12]
 8014aa6:	e7e3      	b.n	8014a70 <__smakebuf_r+0xc>
 8014aa8:	4b0d      	ldr	r3, [pc, #52]	; (8014ae0 <__smakebuf_r+0x7c>)
 8014aaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8014aac:	89a3      	ldrh	r3, [r4, #12]
 8014aae:	6020      	str	r0, [r4, #0]
 8014ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ab4:	81a3      	strh	r3, [r4, #12]
 8014ab6:	9b00      	ldr	r3, [sp, #0]
 8014ab8:	6163      	str	r3, [r4, #20]
 8014aba:	9b01      	ldr	r3, [sp, #4]
 8014abc:	6120      	str	r0, [r4, #16]
 8014abe:	b15b      	cbz	r3, 8014ad8 <__smakebuf_r+0x74>
 8014ac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	f000 f8a7 	bl	8014c18 <_isatty_r>
 8014aca:	b128      	cbz	r0, 8014ad8 <__smakebuf_r+0x74>
 8014acc:	89a3      	ldrh	r3, [r4, #12]
 8014ace:	f023 0303 	bic.w	r3, r3, #3
 8014ad2:	f043 0301 	orr.w	r3, r3, #1
 8014ad6:	81a3      	strh	r3, [r4, #12]
 8014ad8:	89a0      	ldrh	r0, [r4, #12]
 8014ada:	4305      	orrs	r5, r0
 8014adc:	81a5      	strh	r5, [r4, #12]
 8014ade:	e7cd      	b.n	8014a7c <__smakebuf_r+0x18>
 8014ae0:	08013a35 	.word	0x08013a35

08014ae4 <__malloc_lock>:
 8014ae4:	4801      	ldr	r0, [pc, #4]	; (8014aec <__malloc_lock+0x8>)
 8014ae6:	f7ff b889 	b.w	8013bfc <__retarget_lock_acquire_recursive>
 8014aea:	bf00      	nop
 8014aec:	20009f6c 	.word	0x20009f6c

08014af0 <__malloc_unlock>:
 8014af0:	4801      	ldr	r0, [pc, #4]	; (8014af8 <__malloc_unlock+0x8>)
 8014af2:	f7ff b884 	b.w	8013bfe <__retarget_lock_release_recursive>
 8014af6:	bf00      	nop
 8014af8:	20009f6c 	.word	0x20009f6c

08014afc <_realloc_r>:
 8014afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014afe:	4607      	mov	r7, r0
 8014b00:	4614      	mov	r4, r2
 8014b02:	460e      	mov	r6, r1
 8014b04:	b921      	cbnz	r1, 8014b10 <_realloc_r+0x14>
 8014b06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014b0a:	4611      	mov	r1, r2
 8014b0c:	f7ff b8d0 	b.w	8013cb0 <_malloc_r>
 8014b10:	b922      	cbnz	r2, 8014b1c <_realloc_r+0x20>
 8014b12:	f7ff f87d 	bl	8013c10 <_free_r>
 8014b16:	4625      	mov	r5, r4
 8014b18:	4628      	mov	r0, r5
 8014b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b1c:	f000 f88c 	bl	8014c38 <_malloc_usable_size_r>
 8014b20:	42a0      	cmp	r0, r4
 8014b22:	d20f      	bcs.n	8014b44 <_realloc_r+0x48>
 8014b24:	4621      	mov	r1, r4
 8014b26:	4638      	mov	r0, r7
 8014b28:	f7ff f8c2 	bl	8013cb0 <_malloc_r>
 8014b2c:	4605      	mov	r5, r0
 8014b2e:	2800      	cmp	r0, #0
 8014b30:	d0f2      	beq.n	8014b18 <_realloc_r+0x1c>
 8014b32:	4631      	mov	r1, r6
 8014b34:	4622      	mov	r2, r4
 8014b36:	f7fe fe77 	bl	8013828 <memcpy>
 8014b3a:	4631      	mov	r1, r6
 8014b3c:	4638      	mov	r0, r7
 8014b3e:	f7ff f867 	bl	8013c10 <_free_r>
 8014b42:	e7e9      	b.n	8014b18 <_realloc_r+0x1c>
 8014b44:	4635      	mov	r5, r6
 8014b46:	e7e7      	b.n	8014b18 <_realloc_r+0x1c>

08014b48 <_read_r>:
 8014b48:	b538      	push	{r3, r4, r5, lr}
 8014b4a:	4d07      	ldr	r5, [pc, #28]	; (8014b68 <_read_r+0x20>)
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	4608      	mov	r0, r1
 8014b50:	4611      	mov	r1, r2
 8014b52:	2200      	movs	r2, #0
 8014b54:	602a      	str	r2, [r5, #0]
 8014b56:	461a      	mov	r2, r3
 8014b58:	f7ee f8b2 	bl	8002cc0 <_read>
 8014b5c:	1c43      	adds	r3, r0, #1
 8014b5e:	d102      	bne.n	8014b66 <_read_r+0x1e>
 8014b60:	682b      	ldr	r3, [r5, #0]
 8014b62:	b103      	cbz	r3, 8014b66 <_read_r+0x1e>
 8014b64:	6023      	str	r3, [r4, #0]
 8014b66:	bd38      	pop	{r3, r4, r5, pc}
 8014b68:	20009f64 	.word	0x20009f64

08014b6c <_raise_r>:
 8014b6c:	291f      	cmp	r1, #31
 8014b6e:	b538      	push	{r3, r4, r5, lr}
 8014b70:	4604      	mov	r4, r0
 8014b72:	460d      	mov	r5, r1
 8014b74:	d904      	bls.n	8014b80 <_raise_r+0x14>
 8014b76:	2316      	movs	r3, #22
 8014b78:	6003      	str	r3, [r0, #0]
 8014b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b7e:	bd38      	pop	{r3, r4, r5, pc}
 8014b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014b82:	b112      	cbz	r2, 8014b8a <_raise_r+0x1e>
 8014b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b88:	b94b      	cbnz	r3, 8014b9e <_raise_r+0x32>
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f000 f830 	bl	8014bf0 <_getpid_r>
 8014b90:	462a      	mov	r2, r5
 8014b92:	4601      	mov	r1, r0
 8014b94:	4620      	mov	r0, r4
 8014b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b9a:	f000 b817 	b.w	8014bcc <_kill_r>
 8014b9e:	2b01      	cmp	r3, #1
 8014ba0:	d00a      	beq.n	8014bb8 <_raise_r+0x4c>
 8014ba2:	1c59      	adds	r1, r3, #1
 8014ba4:	d103      	bne.n	8014bae <_raise_r+0x42>
 8014ba6:	2316      	movs	r3, #22
 8014ba8:	6003      	str	r3, [r0, #0]
 8014baa:	2001      	movs	r0, #1
 8014bac:	e7e7      	b.n	8014b7e <_raise_r+0x12>
 8014bae:	2400      	movs	r4, #0
 8014bb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	4798      	blx	r3
 8014bb8:	2000      	movs	r0, #0
 8014bba:	e7e0      	b.n	8014b7e <_raise_r+0x12>

08014bbc <raise>:
 8014bbc:	4b02      	ldr	r3, [pc, #8]	; (8014bc8 <raise+0xc>)
 8014bbe:	4601      	mov	r1, r0
 8014bc0:	6818      	ldr	r0, [r3, #0]
 8014bc2:	f7ff bfd3 	b.w	8014b6c <_raise_r>
 8014bc6:	bf00      	nop
 8014bc8:	20000084 	.word	0x20000084

08014bcc <_kill_r>:
 8014bcc:	b538      	push	{r3, r4, r5, lr}
 8014bce:	4d07      	ldr	r5, [pc, #28]	; (8014bec <_kill_r+0x20>)
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	4608      	mov	r0, r1
 8014bd6:	4611      	mov	r1, r2
 8014bd8:	602b      	str	r3, [r5, #0]
 8014bda:	f7ee f855 	bl	8002c88 <_kill>
 8014bde:	1c43      	adds	r3, r0, #1
 8014be0:	d102      	bne.n	8014be8 <_kill_r+0x1c>
 8014be2:	682b      	ldr	r3, [r5, #0]
 8014be4:	b103      	cbz	r3, 8014be8 <_kill_r+0x1c>
 8014be6:	6023      	str	r3, [r4, #0]
 8014be8:	bd38      	pop	{r3, r4, r5, pc}
 8014bea:	bf00      	nop
 8014bec:	20009f64 	.word	0x20009f64

08014bf0 <_getpid_r>:
 8014bf0:	f7ee b842 	b.w	8002c78 <_getpid>

08014bf4 <_fstat_r>:
 8014bf4:	b538      	push	{r3, r4, r5, lr}
 8014bf6:	4d07      	ldr	r5, [pc, #28]	; (8014c14 <_fstat_r+0x20>)
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	4608      	mov	r0, r1
 8014bfe:	4611      	mov	r1, r2
 8014c00:	602b      	str	r3, [r5, #0]
 8014c02:	f7ee f8a2 	bl	8002d4a <_fstat>
 8014c06:	1c43      	adds	r3, r0, #1
 8014c08:	d102      	bne.n	8014c10 <_fstat_r+0x1c>
 8014c0a:	682b      	ldr	r3, [r5, #0]
 8014c0c:	b103      	cbz	r3, 8014c10 <_fstat_r+0x1c>
 8014c0e:	6023      	str	r3, [r4, #0]
 8014c10:	bd38      	pop	{r3, r4, r5, pc}
 8014c12:	bf00      	nop
 8014c14:	20009f64 	.word	0x20009f64

08014c18 <_isatty_r>:
 8014c18:	b538      	push	{r3, r4, r5, lr}
 8014c1a:	4d06      	ldr	r5, [pc, #24]	; (8014c34 <_isatty_r+0x1c>)
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	4604      	mov	r4, r0
 8014c20:	4608      	mov	r0, r1
 8014c22:	602b      	str	r3, [r5, #0]
 8014c24:	f7ee f8a1 	bl	8002d6a <_isatty>
 8014c28:	1c43      	adds	r3, r0, #1
 8014c2a:	d102      	bne.n	8014c32 <_isatty_r+0x1a>
 8014c2c:	682b      	ldr	r3, [r5, #0]
 8014c2e:	b103      	cbz	r3, 8014c32 <_isatty_r+0x1a>
 8014c30:	6023      	str	r3, [r4, #0]
 8014c32:	bd38      	pop	{r3, r4, r5, pc}
 8014c34:	20009f64 	.word	0x20009f64

08014c38 <_malloc_usable_size_r>:
 8014c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c3c:	1f18      	subs	r0, r3, #4
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	bfbc      	itt	lt
 8014c42:	580b      	ldrlt	r3, [r1, r0]
 8014c44:	18c0      	addlt	r0, r0, r3
 8014c46:	4770      	bx	lr

08014c48 <_init>:
 8014c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c4a:	bf00      	nop
 8014c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c4e:	bc08      	pop	{r3}
 8014c50:	469e      	mov	lr, r3
 8014c52:	4770      	bx	lr

08014c54 <_fini>:
 8014c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c56:	bf00      	nop
 8014c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c5a:	bc08      	pop	{r3}
 8014c5c:	469e      	mov	lr, r3
 8014c5e:	4770      	bx	lr
