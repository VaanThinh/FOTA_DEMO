
000_STM32F746G-DISCO_FlashingAdapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001270c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d68  080128dc  080128dc  000228dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015644  08015644  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08015644  08015644  00025644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801564c  0801564c  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801564c  0801564c  0002564c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015650  08015650  00025650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08015654  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008acc  20000098  080156ec  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008b64  080156ec  00038b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039c23  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e05  00000000  00000000  00069ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00070af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  00072528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f4c5  00000000  00000000  00073e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c966  00000000  00000000  000832e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108347  00000000  00000000  000afc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b7f92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074f4  00000000  00000000  001b7fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080128c4 	.word	0x080128c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	080128c4 	.word	0x080128c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08e      	sub	sp, #56	; 0x38
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ce:	4b3b      	ldr	r3, [pc, #236]	; (80006bc <MX_GPIO_Init+0x104>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a3a      	ldr	r2, [pc, #232]	; (80006bc <MX_GPIO_Init+0x104>)
 80005d4:	f043 0310 	orr.w	r3, r3, #16
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b38      	ldr	r3, [pc, #224]	; (80006bc <MX_GPIO_Init+0x104>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0310 	and.w	r3, r3, #16
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <MX_GPIO_Init+0x104>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a34      	ldr	r2, [pc, #208]	; (80006bc <MX_GPIO_Init+0x104>)
 80005ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <MX_GPIO_Init+0x104>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_GPIO_Init+0x104>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a2e      	ldr	r2, [pc, #184]	; (80006bc <MX_GPIO_Init+0x104>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_GPIO_Init+0x104>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_GPIO_Init+0x104>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a28      	ldr	r2, [pc, #160]	; (80006bc <MX_GPIO_Init+0x104>)
 800061c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <MX_GPIO_Init+0x104>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_GPIO_Init+0x104>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a22      	ldr	r2, [pc, #136]	; (80006bc <MX_GPIO_Init+0x104>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_GPIO_Init+0x104>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_GPIO_Init+0x104>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <MX_GPIO_Init+0x104>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_GPIO_Init+0x104>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_GPIO_Init+0x104>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <MX_GPIO_Init+0x104>)
 8000664:	f043 0308 	orr.w	r3, r3, #8
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_GPIO_Init+0x104>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0308 	and.w	r3, r3, #8
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_GPIO_Init+0x104>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a10      	ldr	r2, [pc, #64]	; (80006bc <MX_GPIO_Init+0x104>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_GPIO_Init+0x104>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2102      	movs	r1, #2
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <MX_GPIO_Init+0x108>)
 8000694:	f003 fb7a 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000698:	2302      	movs	r3, #2
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	4619      	mov	r1, r3
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_GPIO_Init+0x108>)
 80006b0:	f003 f8b4 	bl	800381c <HAL_GPIO_Init>

}
 80006b4:	bf00      	nop
 80006b6:	3738      	adds	r7, #56	; 0x38
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40022000 	.word	0x40022000

080006c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c8:	f3bf 8f4f 	dsb	sy
}
 80006cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ce:	f3bf 8f6f 	isb	sy
}
 80006d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <SCB_EnableICache+0x48>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006dc:	f3bf 8f4f 	dsb	sy
}
 80006e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e2:	f3bf 8f6f 	isb	sy
}
 80006e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <SCB_EnableICache+0x48>)
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	4a07      	ldr	r2, [pc, #28]	; (800070c <SCB_EnableICache+0x48>)
 80006ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006f4:	f3bf 8f4f 	dsb	sy
}
 80006f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006fa:	f3bf 8f6f 	isb	sy
}
 80006fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SCB_EnableDCache+0x84>)
 8000718:	2200      	movs	r2, #0
 800071a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800071e:	f3bf 8f4f 	dsb	sy
}
 8000722:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <SCB_EnableDCache+0x84>)
 8000726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800072a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	0b5b      	lsrs	r3, r3, #13
 8000730:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000734:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800073e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	015a      	lsls	r2, r3, #5
 8000744:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000748:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800074e:	4911      	ldr	r1, [pc, #68]	; (8000794 <SCB_EnableDCache+0x84>)
 8000750:	4313      	orrs	r3, r2
 8000752:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1e5a      	subs	r2, r3, #1
 800075a:	60ba      	str	r2, [r7, #8]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1ef      	bne.n	8000740 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	60fa      	str	r2, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1e5      	bne.n	8000736 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <SCB_EnableDCache+0x84>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <SCB_EnableDCache+0x84>)
 8000776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800077a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800077c:	f3bf 8f4f 	dsb	sy
}
 8000780:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000782:	f3bf 8f6f 	isb	sy
}
 8000786:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800079c:	f7ff ff92 	bl	80006c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80007a0:	f7ff ffb6 	bl	8000710 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f001 fca4 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f81e 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f7ff ff04 	bl	80005b8 <MX_GPIO_Init>
  MX_LWIP_Init();
 80007b0:	f005 f8dc 	bl	800596c <MX_LWIP_Init>
  MX_TIM2_Init();
 80007b4:	f001 fc00 	bl	8001fb8 <MX_TIM2_Init>
  MX_QUADSPI_Init();
 80007b8:	f000 f8aa 	bl	8000910 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);

  /* Initialize the QSPI */
  if (CSP_QUADSPI_Init() != HAL_OK)
 80007bc:	f000 f98e 	bl	8000adc <CSP_QUADSPI_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <main+0x32>
  {
    Error_Handler();
 80007c6:	f000 f89d 	bl	8000904 <Error_Handler>
//  char *temp;
//  temp = (char *)&(myCanInfo->can_st.data);
  // Initialize the UDP server
  // udpServer_init();
  // Initialize the TCP
  tcp_client_init();
 80007ca:	f000 fd63 	bl	8001294 <tcp_client_init>
  tcp_server_init();
 80007ce:	f000 ff19 	bl	8001604 <tcp_server_init>
  // Initialize the TFTP server
  tftpd_init();
 80007d2:	f001 fb4f 	bl	8001e74 <tftpd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	ethernetif_input(&gnetif);
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <main+0x4c>)
 80007d8:	f005 fc9c 	bl	8006114 <ethernetif_input>
  	sys_check_timeouts();
 80007dc:	f00d fdca 	bl	800e374 <sys_check_timeouts>
  	ethernetif_input(&gnetif);
 80007e0:	e7f9      	b.n	80007d6 <main+0x3e>
 80007e2:	bf00      	nop
 80007e4:	20000254 	.word	0x20000254

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f010 fe7c 	bl	80114f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <SystemClock_Config+0xd4>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a2a      	ldr	r2, [pc, #168]	; (80008bc <SystemClock_Config+0xd4>)
 8000812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <SystemClock_Config+0xd4>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <SystemClock_Config+0xd8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <SystemClock_Config+0xd8>)
 800082a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <SystemClock_Config+0xd8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000850:	2319      	movs	r3, #25
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000854:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000858:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	4618      	mov	r0, r3
 8000868:	f003 ffe0 	bl	800482c <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000872:	f000 f847 	bl	8000904 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000876:	f003 faa3 	bl	8003dc0 <HAL_PWREx_EnableOverDrive>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000880:	f000 f840 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000888:	2302      	movs	r3, #2
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000890:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2107      	movs	r1, #7
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fa66 	bl	8004d74 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ae:	f000 f829 	bl	8000904 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09c      	sub	sp, #112	; 0x70
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  char buf[100];
  sprintf (buf, "Sending TCPclient Message %d\n", counter2);
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	490a      	ldr	r1, [pc, #40]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f010 fe6b 	bl	80115b4 <siprintf>
  rbTCPclientSend(buf);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fca2 	bl	800122c <rbTCPclientSend>

  counter2++;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80008f2:	801a      	strh	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	3770      	adds	r7, #112	; 0x70
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000b4 	.word	0x200000b4
 8000900:	080128dc 	.word	0x080128dc

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_QUADSPI_Init+0x50>)
 8000916:	4a13      	ldr	r2, [pc, #76]	; (8000964 <MX_QUADSPI_Init+0x54>)
 8000918:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_QUADSPI_Init+0x50>)
 800091c:	2201      	movs	r2, #1
 800091e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_QUADSPI_Init+0x50>)
 8000922:	2204      	movs	r2, #4
 8000924:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_QUADSPI_Init+0x50>)
 8000928:	2210      	movs	r2, #16
 800092a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_QUADSPI_Init+0x50>)
 800092e:	2217      	movs	r2, #23
 8000930:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_QUADSPI_Init+0x50>)
 8000934:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000938:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_QUADSPI_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MX_QUADSPI_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_QUADSPI_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_QUADSPI_Init+0x50>)
 800094e:	f003 fa87 	bl	8003e60 <HAL_QSPI_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000958:	f7ff ffd4 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000294 	.word	0x20000294
 8000964:	a0001000 	.word	0xa0001000

08000968 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a3b      	ldr	r2, [pc, #236]	; (8000a74 <HAL_QSPI_MspInit+0x10c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d170      	bne.n	8000a6c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800098a:	4b3b      	ldr	r3, [pc, #236]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 800098c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800098e:	4a3a      	ldr	r2, [pc, #232]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6393      	str	r3, [r2, #56]	; 0x38
 8000996:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 8000998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a34      	ldr	r2, [pc, #208]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b32      	ldr	r3, [pc, #200]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a2e      	ldr	r2, [pc, #184]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <HAL_QSPI_MspInit+0x110>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ea:	2304      	movs	r3, #4
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80009fa:	2309      	movs	r3, #9
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	481d      	ldr	r0, [pc, #116]	; (8000a7c <HAL_QSPI_MspInit+0x114>)
 8000a06:	f002 ff09 	bl	800381c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a0a:	2340      	movs	r3, #64	; 0x40
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4816      	ldr	r0, [pc, #88]	; (8000a80 <HAL_QSPI_MspInit+0x118>)
 8000a26:	f002 fef9 	bl	800381c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a3a:	2309      	movs	r3, #9
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	480e      	ldr	r0, [pc, #56]	; (8000a80 <HAL_QSPI_MspInit+0x118>)
 8000a46:	f002 fee9 	bl	800381c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8000a4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <HAL_QSPI_MspInit+0x11c>)
 8000a68:	f002 fed8 	bl	800381c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	; 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	a0001000 	.word	0xa0001000
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <HAL_QSPI_MspDeInit+0x40>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d112      	bne.n	8000ac0 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_QSPI_MspDeInit+0x44>)
 8000a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <HAL_QSPI_MspDeInit+0x44>)
 8000aa0:	f023 0302 	bic.w	r3, r3, #2
 8000aa4:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <HAL_QSPI_MspDeInit+0x48>)
 8000aaa:	f003 f863 	bl	8003b74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8000aae:	2144      	movs	r1, #68	; 0x44
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <HAL_QSPI_MspDeInit+0x4c>)
 8000ab2:	f003 f85f 	bl	8003b74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8000ab6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <HAL_QSPI_MspDeInit+0x50>)
 8000abc:	f003 f85a 	bl	8003b74 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	a0001000 	.word	0xa0001000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <CSP_QUADSPI_Init>:
/* USER CODE BEGIN 1 */

/* QUADSPI init function */

uint8_t CSP_QUADSPI_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    //prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <CSP_QUADSPI_Init+0x64>)
 8000ae2:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <CSP_QUADSPI_Init+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000ae6:	4816      	ldr	r0, [pc, #88]	; (8000b40 <CSP_QUADSPI_Init+0x64>)
 8000ae8:	f003 fa36 	bl	8003f58 <HAL_QSPI_DeInit>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <CSP_QUADSPI_Init+0x1a>
        return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e021      	b.n	8000b3a <CSP_QUADSPI_Init+0x5e>
    }

    MX_QUADSPI_Init();
 8000af6:	f7ff ff0b 	bl	8000910 <MX_QUADSPI_Init>

    if (QSPI_ResetChip() != HAL_OK) {
 8000afa:	f000 f981 	bl	8000e00 <QSPI_ResetChip>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <CSP_QUADSPI_Init+0x2c>
        return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e018      	b.n	8000b3a <CSP_QUADSPI_Init+0x5e>
    }

    HAL_Delay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f001 fb57 	bl	80021bc <HAL_Delay>

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000b0e:	f000 f81b 	bl	8000b48 <QSPI_AutoPollingMemReady>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <CSP_QUADSPI_Init+0x40>
        return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e00e      	b.n	8000b3a <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_WriteEnable() != HAL_OK) {
 8000b1c:	f000 f84c 	bl	8000bb8 <QSPI_WriteEnable>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <CSP_QUADSPI_Init+0x4e>

        return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e007      	b.n	8000b3a <CSP_QUADSPI_Init+0x5e>
    }

    if (QSPI_Configuration() != HAL_OK) {
 8000b2a:	f000 f88f 	bl	8000c4c <QSPI_Configuration>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <CSP_QUADSPI_Init+0x5c>
        return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <CSP_QUADSPI_Init+0x5e>
    }

    return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000294 	.word	0x20000294
 8000b44:	a0001000 	.word	0xa0001000

08000b48 <QSPI_AutoPollingMemReady>:

    return HAL_OK;
}

uint8_t QSPI_AutoPollingMemReady(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b094      	sub	sp, #80	; 0x50
 8000b4c:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000b54:	2305      	movs	r3, #5
 8000b56:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b72:	2300      	movs	r3, #0
 8000b74:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match = 0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000b86:	2310      	movs	r3, #16
 8000b88:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8e:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b90:	463a      	mov	r2, r7
 8000b92:	f107 0118 	add.w	r1, r7, #24
 8000b96:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <QSPI_AutoPollingMemReady+0x6c>)
 8000b9c:	f003 fb97 	bl	80042ce <HAL_QSPI_AutoPolling>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3750      	adds	r7, #80	; 0x50
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000294 	.word	0x20000294

08000bb8 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	; 0x50
 8000bbc:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8000bc4:	2306      	movs	r3, #6
 8000bc6:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000be0:	2300      	movs	r3, #0
 8000be2:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bec:	4619      	mov	r1, r3
 8000bee:	4816      	ldr	r0, [pc, #88]	; (8000c48 <QSPI_WriteEnable+0x90>)
 8000bf0:	f003 f9d6 	bl	8003fa0 <HAL_QSPI_Command>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e01f      	b.n	8000c3e <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8000c02:	2302      	movs	r3, #2
 8000c04:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c16:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8000c18:	2305      	movs	r3, #5
 8000c1a:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000c22:	463a      	mov	r2, r7
 8000c24:	f107 0118 	add.w	r1, r7, #24
 8000c28:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <QSPI_WriteEnable+0x90>)
 8000c2e:	f003 fb4e 	bl	80042ce <HAL_QSPI_AutoPolling>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3750      	adds	r7, #80	; 0x50
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000294 	.word	0x20000294

08000c4c <QSPI_Configuration>:


/*Enable quad mode and set dummy cycles count*/
uint8_t QSPI_Configuration(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b092      	sub	sp, #72	; 0x48
 8000c50:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    /*read configuration register*/
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c56:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_VOL_CFG_REG_CMD;
 8000c58:	2385      	movs	r3, #133	; 0x85
 8000c5a:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c72:	2300      	movs	r3, #0
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.NbData = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c86:	4619      	mov	r1, r3
 8000c88:	4833      	ldr	r0, [pc, #204]	; (8000d58 <QSPI_Configuration+0x10c>)
 8000c8a:	f003 f989 	bl	8003fa0 <HAL_QSPI_Command>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <QSPI_Configuration+0x4c>
        != HAL_OK) {
        return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e05b      	b.n	8000d50 <QSPI_Configuration+0x104>
    }


    if (HAL_QSPI_Receive(&hqspi, &reg,
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	482d      	ldr	r0, [pc, #180]	; (8000d58 <QSPI_Configuration+0x10c>)
 8000ca2:	f003 fa72 	bl	800418a <HAL_QSPI_Receive>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <QSPI_Configuration+0x64>
                         HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e04f      	b.n	8000d50 <QSPI_Configuration+0x104>
    }



    if (QSPI_WriteEnable() != HAL_OK) {
 8000cb0:	f7ff ff82 	bl	8000bb8 <QSPI_WriteEnable>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <QSPI_Configuration+0x72>

        return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e048      	b.n	8000d50 <QSPI_Configuration+0x104>
    }


    /*set dummy cycles*/
    MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	b25b      	sxtb	r3, r3
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	b25a      	sxtb	r2, r3
 8000cc8:	23f0      	movs	r3, #240	; 0xf0
 8000cca:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cce:	fa93 f3a3 	rbit	r3, r3
 8000cd2:	643b      	str	r3, [r7, #64]	; 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cd6:	fab3 f383 	clz	r3, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	230a      	movs	r3, #10
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	71fb      	strb	r3, [r7, #7]

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf0:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8000d02:	2381      	movs	r3, #129	; 0x81
 8000d04:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    sCommand.NbData = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d20:	4619      	mov	r1, r3
 8000d22:	480d      	ldr	r0, [pc, #52]	; (8000d58 <QSPI_Configuration+0x10c>)
 8000d24:	f003 f93c 	bl	8003fa0 <HAL_QSPI_Command>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <QSPI_Configuration+0xe6>
        != HAL_OK) {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <QSPI_Configuration+0x104>
    }

    if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4807      	ldr	r0, [pc, #28]	; (8000d58 <QSPI_Configuration+0x10c>)
 8000d3c:	f003 f98e 	bl	800405c <HAL_QSPI_Transmit>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <QSPI_Configuration+0x102>
                          HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        Error_Handler();
 8000d46:	f7ff fddd 	bl	8000904 <Error_Handler>
        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <QSPI_Configuration+0x104>
    }
    return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3748      	adds	r7, #72	; 0x48
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000294 	.word	0x20000294

08000d5c <CSP_QSPI_EraseSector>:

uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b090      	sub	sp, #64	; 0x40
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]

    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <CSP_QSPI_EraseSector+0x9c>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	607b      	str	r3, [r7, #4]
                        - EraseStartAddress % N25Q128A_SECTOR_SIZE;

    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d72:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d86:	2300      	movs	r3, #0
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.Instruction = SECTOR_ERASE_CMD;
 8000d8a:	23d8      	movs	r3, #216	; 0xd8
 8000d8c:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24

    sCommand.DataMode = QSPI_DATA_NONE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]

    while (EraseEndAddress >= EraseStartAddress)
 8000d9c:	e022      	b.n	8000de4 <CSP_QSPI_EraseSector+0x88>
    {
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000da4:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != HAL_OK) {
 8000da6:	f7ff ff07 	bl	8000bb8 <QSPI_WriteEnable>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <CSP_QSPI_EraseSector+0x58>
            return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e01c      	b.n	8000dee <CSP_QSPI_EraseSector+0x92>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <CSP_QSPI_EraseSector+0xa0>)
 8000dc0:	f003 f8ee 	bl	8003fa0 <HAL_QSPI_Command>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <CSP_QSPI_EraseSector+0x72>
            != HAL_OK) {
            return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <CSP_QSPI_EraseSector+0x92>
        }
        EraseStartAddress += N25Q128A_SECTOR_SIZE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000dd4:	607b      	str	r3, [r7, #4]

        if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000dd6:	f7ff feb7 	bl	8000b48 <QSPI_AutoPollingMemReady>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <CSP_QSPI_EraseSector+0x88>
            return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e004      	b.n	8000dee <CSP_QSPI_EraseSector+0x92>
    while (EraseEndAddress >= EraseStartAddress)
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d2d8      	bcs.n	8000d9e <CSP_QSPI_EraseSector+0x42>
        }
    }

    return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3740      	adds	r7, #64	; 0x40
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	ffff0000 	.word	0xffff0000
 8000dfc:	20000294 	.word	0x20000294

08000e00 <QSPI_ResetChip>:
    }
    return HAL_OK;
}

uint8_t QSPI_ResetChip()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b090      	sub	sp, #64	; 0x40
 8000e04:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t temp = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Erasing Sequence -------------------------------------------------- */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0e:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e14:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_ENABLE_CMD;
 8000e26:	2366      	movs	r3, #102	; 0x66
 8000e28:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e40:	4619      	mov	r1, r3
 8000e42:	481d      	ldr	r0, [pc, #116]	; (8000eb8 <QSPI_ResetChip+0xb8>)
 8000e44:	f003 f8ac 	bl	8003fa0 <HAL_QSPI_Command>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <QSPI_ResetChip+0x52>
        != HAL_OK) {
        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e02e      	b.n	8000eb0 <QSPI_ResetChip+0xb0>
    }
    for (temp = 0; temp < 0x2f; temp++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e56:	e003      	b.n	8000e60 <QSPI_ResetChip+0x60>
        __NOP();
 8000e58:	bf00      	nop
    for (temp = 0; temp < 0x2f; temp++) {
 8000e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e62:	2b2e      	cmp	r3, #46	; 0x2e
 8000e64:	d9f8      	bls.n	8000e58 <QSPI_ResetChip+0x58>
    }

    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6a:	61fb      	str	r3, [r7, #28]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e70:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.Instruction = RESET_MEMORY_CMD;
 8000e82:	2399      	movs	r3, #153	; 0x99
 8000e84:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
    sCommand.Address = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
    sCommand.DataMode = QSPI_DATA_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <QSPI_ResetChip+0xb8>)
 8000ea0:	f003 f87e 	bl	8003fa0 <HAL_QSPI_Command>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <QSPI_ResetChip+0xae>
        != HAL_OK) {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <QSPI_ResetChip+0xb0>
    }
    return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3740      	adds	r7, #64	; 0x40
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000294 	.word	0x20000294

08000ebc <CSP_QSPI_Write>:
  return HAL_OK;
}


uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b096      	sub	sp, #88	; 0x58
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000ed0:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8000ed2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d901      	bls.n	8000ede <CSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	657b      	str	r3, [r7, #84]	; 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8000ef4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8000efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efe:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000f04:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles       = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f12:	2300      	movs	r3, #0
 8000f14:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f16:	2300      	movs	r3, #0
 8000f18:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8000f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f1c:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8000f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 8000f22:	f7ff fe49 	bl	8000bb8 <QSPI_WriteEnable>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <CSP_QSPI_Write+0x74>
    {
      return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e038      	b.n	8000fa2 <CSP_QSPI_Write+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f38:	4619      	mov	r1, r3
 8000f3a:	481c      	ldr	r0, [pc, #112]	; (8000fac <CSP_QSPI_Write+0xf0>)
 8000f3c:	f003 f830 	bl	8003fa0 <HAL_QSPI_Command>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <CSP_QSPI_Write+0x8e>
    {
      return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e02b      	b.n	8000fa2 <CSP_QSPI_Write+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4e:	68f9      	ldr	r1, [r7, #12]
 8000f50:	4816      	ldr	r0, [pc, #88]	; (8000fac <CSP_QSPI_Write+0xf0>)
 8000f52:	f003 f883 	bl	800405c <HAL_QSPI_Transmit>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <CSP_QSPI_Write+0xa4>
    {
      return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e020      	b.n	8000fa2 <CSP_QSPI_Write+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
 8000f60:	f7ff fdf2 	bl	8000b48 <QSPI_AutoPollingMemReady>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <CSP_QSPI_Write+0xb2>
    {
      return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e019      	b.n	8000fa2 <CSP_QSPI_Write+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000f6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f72:	4413      	add	r3, r2
 8000f74:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8000f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d203      	bcs.n	8000f92 <CSP_QSPI_Write+0xd6>
 8000f8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	e001      	b.n	8000f96 <CSP_QSPI_Write+0xda>
 8000f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f96:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000f98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3bc      	bcc.n	8000f1a <CSP_QSPI_Write+0x5e>

  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3758      	adds	r7, #88	; 0x58
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000294 	.word	0x20000294

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x44>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f001 f89a 	bl	800217c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM2_IRQHandler+0x10>)
 8001052:	f004 f894 	bl	800517e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200002e4 	.word	0x200002e4

08001060 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <ETH_IRQHandler+0x10>)
 8001066:	f001 fe2d 	bl	8002cc4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20001c1c 	.word	0x20001c1c

08001074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	return 1;
 8001078:	2301      	movs	r3, #1
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_kill>:

int _kill(int pid, int sig)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <_kill+0x20>)
 8001090:	2216      	movs	r2, #22
 8001092:	601a      	str	r2, [r3, #0]
	return -1;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20008b54 	.word	0x20008b54

080010a8 <_exit>:

void _exit (int status)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffe5 	bl	8001084 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010ba:	e7fe      	b.n	80010ba <_exit+0x12>

080010bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e00a      	b.n	80010e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ce:	f3af 8000 	nop.w
 80010d2:	4601      	mov	r1, r0
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	b2ca      	uxtb	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf0      	blt.n	80010ce <_read+0x12>
	}

return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e009      	b.n	800111c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf1      	blt.n	8001108 <_write+0x12>
	}
	return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_close>:

int _close(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001156:	605a      	str	r2, [r3, #4]
	return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_isatty>:

int _isatty(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	return 1;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
	return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d205      	bcs.n	80011d4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <_sbrk+0x6c>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a06      	ldr	r2, [pc, #24]	; (80011fc <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	20050000 	.word	0x20050000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	200000b8 	.word	0x200000b8
 8001200:	20008b68 	.word	0x20008b68
 8001204:	20008b54 	.word	0x20008b54

08001208 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <rbTCPclientSend>:
struct tcp_client_struct *esTx = 0;

struct tcp_pcb *pcbTx = 0;

void rbTCPclientSend(char* msg)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t len;
  len = strlen(msg);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7fe ffeb 	bl	8000210 <strlen>
 800123a:	60f8      	str	r0, [r7, #12]
  /* allocate pbuf */
  esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	b29b      	uxth	r3, r3
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <rbTCPclientSend+0x60>)
 8001242:	6814      	ldr	r4, [r2, #0]
 8001244:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001248:	4619      	mov	r1, r3
 800124a:	2036      	movs	r0, #54	; 0x36
 800124c:	f006 f80e 	bl	800726c <pbuf_alloc>
 8001250:	4603      	mov	r3, r0
 8001252:	60a3      	str	r3, [r4, #8]


  /* copy data to pbuf */
  pbuf_take(esTx->p, (char*)msg, len);
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <rbTCPclientSend+0x60>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	b292      	uxth	r2, r2
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	f006 fd53 	bl	8007d0c <pbuf_take>

  tcp_client_send(pcbTx, esTx);
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <rbTCPclientSend+0x64>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <rbTCPclientSend+0x60>)
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f000 f92c 	bl	80014ce <tcp_client_send>

  pbuf_free(esTx->p);
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <rbTCPclientSend+0x60>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f006 fad9 	bl	8007834 <pbuf_free>
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	200000c0 	.word	0x200000c0
 8001290:	200000c4 	.word	0x200000c4

08001294 <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 800129a:	f008 fabd 	bl	8009818 <tcp_new>
 800129e:	6078      	str	r0, [r7, #4]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	// IP_ADDR4(&destIPADDR, 192, 168, 0, 2);
  if (tpcb != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <tcp_client_init+0x26>
  {
    IP_ADDR4(&destIPADDR, 192, 168, 0, 33);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <tcp_client_init+0x38>)
 80012a8:	603b      	str	r3, [r7, #0]

    /* connect to destination address/port */
    tcp_connect(tpcb, &destIPADDR, 1234, tcp_client_connected);
 80012aa:	4639      	mov	r1, r7
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <tcp_client_init+0x3c>)
 80012ae:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f007 fb58 	bl	8008968 <tcp_connect>
  else
  {
    /* deallocate the pcb */
    memp_free(MEMP_TCP_PCB, tpcb);
  }
}
 80012b8:	e003      	b.n	80012c2 <tcp_client_init+0x2e>
    memp_free(MEMP_TCP_PCB, tpcb);
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	2001      	movs	r0, #1
 80012be:	f005 fca7 	bl	8006c10 <memp_free>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2100a8c0 	.word	0x2100a8c0
 80012d0:	080012d5 	.word	0x080012d5

080012d4 <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	4613      	mov	r3, r2
 80012e0:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 80012e2:	200c      	movs	r0, #12
 80012e4:	f005 fada 	bl	800689c <mem_malloc>
 80012e8:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d023      	beq.n	8001338 <tcp_client_connected+0x64>
  {
    es->state = ES_CONNECTED;
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	2200      	movs	r2, #0
 8001300:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f008 fa8c 	bl	8009828 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 8001310:	490f      	ldr	r1, [pc, #60]	; (8001350 <tcp_client_connected+0x7c>)
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f008 fa9a 	bl	800984c <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <tcp_client_connected+0x80>)
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f008 fb13 	bl	8009948 <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 8001322:	490d      	ldr	r1, [pc, #52]	; (8001358 <tcp_client_connected+0x84>)
 8001324:	68b8      	ldr	r0, [r7, #8]
 8001326:	f008 fab3 	bl	8009890 <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 800132a:	6939      	ldr	r1, [r7, #16]
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f000 f943 	bl	80015b8 <tcp_client_handle>

    ret_err = ERR_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
 8001336:	e005      	b.n	8001344 <tcp_client_connected+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 8001338:	6939      	ldr	r1, [r7, #16]
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f000 f915 	bl	800156a <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001340:	23ff      	movs	r3, #255	; 0xff
 8001342:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001344:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	0800135d 	.word	0x0800135d
 8001354:	0800144d 	.word	0x0800144d
 8001358:	08001495 	.word	0x08001495

0800135c <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <tcp_client_recv+0x20>
 8001370:	4b33      	ldr	r3, [pc, #204]	; (8001440 <tcp_client_recv+0xe4>)
 8001372:	22e1      	movs	r2, #225	; 0xe1
 8001374:	4933      	ldr	r1, [pc, #204]	; (8001444 <tcp_client_recv+0xe8>)
 8001376:	4834      	ldr	r0, [pc, #208]	; (8001448 <tcp_client_recv+0xec>)
 8001378:	f010 f8c4 	bl	8011504 <iprintf>

  es = (struct tcp_client_struct *)arg;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10d      	bne.n	80013a2 <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2203      	movs	r2, #3
 800138a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	68b8      	ldr	r0, [r7, #8]
 8001398:	f000 f8e7 	bl	800156a <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	75fb      	strb	r3, [r7, #23]
 80013a0:	e047      	b.n	8001432 <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 80013a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <tcp_client_recv+0x60>
    {
      es->p = NULL;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f006 fa3c 	bl	8007834 <pbuf_free>
    }
    ret_err = err;
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	75fb      	strb	r3, [r7, #23]
 80013c0:	e037      	b.n	8001432 <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d112      	bne.n	80013f0 <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	891b      	ldrh	r3, [r3, #8]
 80013d4:	4619      	mov	r1, r3
 80013d6:	68b8      	ldr	r0, [r7, #8]
 80013d8:	f007 fa30 	bl	800883c <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 80013dc:	6939      	ldr	r1, [r7, #16]
 80013de:	68b8      	ldr	r0, [r7, #8]
 80013e0:	f000 f8ea 	bl	80015b8 <tcp_client_handle>

    pbuf_free(p);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f006 fa25 	bl	8007834 <pbuf_free>

    ret_err = ERR_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
 80013ee:	e020      	b.n	8001432 <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d10e      	bne.n	8001416 <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	891b      	ldrh	r3, [r3, #8]
 80013fc:	4619      	mov	r1, r3
 80013fe:	68b8      	ldr	r0, [r7, #8]
 8001400:	f007 fa1c 	bl	800883c <tcp_recved>
    es->p = NULL;
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f006 fa12 	bl	8007834 <pbuf_free>
    ret_err = ERR_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	75fb      	strb	r3, [r7, #23]
 8001414:	e00d      	b.n	8001432 <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	891b      	ldrh	r3, [r3, #8]
 800141a:	4619      	mov	r1, r3
 800141c:	68b8      	ldr	r0, [r7, #8]
 800141e:	f007 fa0d 	bl	800883c <tcp_recved>
    es->p = NULL;
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f006 fa03 	bl	8007834 <pbuf_free>
    ret_err = ERR_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	080128fc 	.word	0x080128fc
 8001444:	08012918 	.word	0x08012918
 8001448:	08012924 	.word	0x08012924

0800144c <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00e      	beq.n	800147e <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d107      	bne.n	8001478 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d103      	bne.n	8001478 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f000 f879 	bl	800156a <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e004      	b.n	8001488 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f007 f802 	bl	8008488 <tcp_abort>
    ret_err = ERR_ABRT;
 8001484:	23f3      	movs	r3, #243	; 0xf3
 8001486:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	4613      	mov	r3, r2
 80014a0:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2200      	movs	r2, #0
 80014aa:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d107      	bne.n	80014c4 <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d103      	bne.n	80014c4 <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	68b8      	ldr	r0, [r7, #8]
 80014c0:	f000 f853 	bl	800156a <tcp_client_connection_close>
  }
  return ERR_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <tcp_client_send>:


/** A function to send the data to the server
  */
static void tcp_client_send(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 80014dc:	e031      	b.n	8001542 <tcp_client_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	895a      	ldrh	r2, [r3, #10]
 80014ec:	2301      	movs	r3, #1
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f00b f8d8 	bl	800c6a4 <tcp_write>
 80014f4:	4603      	mov	r3, r0
 80014f6:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 80014f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d118      	bne.n	8001532 <tcp_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	895b      	ldrh	r3, [r3, #10]
 8001504:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <tcp_client_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4618      	mov	r0, r3
 800151c:	f006 fa2a 	bl	8007974 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8001520:	6938      	ldr	r0, [r7, #16]
 8001522:	f006 f987 	bl	8007834 <pbuf_free>
 8001526:	4603      	mov	r3, r0
 8001528:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 800152a:	7b7b      	ldrb	r3, [r7, #13]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f7      	beq.n	8001520 <tcp_client_send+0x52>
 8001530:	e007      	b.n	8001542 <tcp_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
 8001532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153a:	d102      	bne.n	8001542 <tcp_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001542:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10b      	bne.n	8001562 <tcp_client_send+0x94>
         (es->p != NULL) &&
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <tcp_client_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	895a      	ldrh	r2, [r3, #10]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 800155e:	429a      	cmp	r2, r3
 8001560:	d9bd      	bls.n	80014de <tcp_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f008 f956 	bl	8009828 <tcp_arg>
  tcp_sent(tpcb, NULL);
 800157c:	2100      	movs	r1, #0
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f008 f986 	bl	8009890 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f008 f960 	bl	800984c <tcp_recv>
  tcp_err(tpcb, NULL);
 800158c:	2100      	movs	r1, #0
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f008 f9a0 	bl	80098d4 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f008 f9d5 	bl	8009948 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f005 f813 	bl	80065d0 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f006 fe82 	bl	80082b4 <tcp_close>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	8b1b      	ldrh	r3, [r3, #24]
 80015cc:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4618      	mov	r0, r3
 80015d4:	f00e ff94 	bl	8010500 <ip4addr_ntoa>
 80015d8:	6138      	str	r0, [r7, #16]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <tcp_client_handle+0x40>)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <tcp_client_handle+0x44>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]

	counter++;
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <tcp_client_handle+0x48>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <tcp_client_handle+0x48>)
 80015ee:	6013      	str	r3, [r2, #0]

}
 80015f0:	bf00      	nop
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200000c0 	.word	0x200000c0
 80015fc:	200000c4 	.word	0x200000c4
 8001600:	200000bc 	.word	0x200000bc

08001604 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 800160a:	f008 f905 	bl	8009818 <tcp_new>
 800160e:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 0, 123);
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <tcp_server_init+0x4c>)
 8001612:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 7);
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2207      	movs	r2, #7
 8001618:	4619      	mov	r1, r3
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f006 ff40 	bl	80084a0 <tcp_bind>
 8001620:	4603      	mov	r3, r0
 8001622:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001624:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d109      	bne.n	8001640 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 800162c:	21ff      	movs	r1, #255	; 0xff
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f006 ffee 	bl	8008610 <tcp_listen_with_backlog>
 8001634:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001636:	4907      	ldr	r1, [pc, #28]	; (8001654 <tcp_server_init+0x50>)
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f008 f96d 	bl	8009918 <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 800163e:	e003      	b.n	8001648 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001640:	68f9      	ldr	r1, [r7, #12]
 8001642:	2001      	movs	r0, #1
 8001644:	f005 fae4 	bl	8006c10 <memp_free>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	7b00a8c0 	.word	0x7b00a8c0
 8001654:	08001659 	.word	0x08001659

08001658 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	4613      	mov	r3, r2
 8001664:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001666:	2101      	movs	r1, #1
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f007 fee3 	bl	8009434 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 800166e:	200c      	movs	r0, #12
 8001670:	f005 f914 	bl	800689c <mem_malloc>
 8001674:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01f      	beq.n	80016bc <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2200      	movs	r2, #0
 800168c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001694:	6939      	ldr	r1, [r7, #16]
 8001696:	68b8      	ldr	r0, [r7, #8]
 8001698:	f008 f8c6 	bl	8009828 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 800169c:	490d      	ldr	r1, [pc, #52]	; (80016d4 <tcp_server_accept+0x7c>)
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f008 f8d4 	bl	800984c <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <tcp_server_accept+0x80>)
 80016a6:	68b8      	ldr	r0, [r7, #8]
 80016a8:	f008 f914 	bl	80098d4 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	490b      	ldr	r1, [pc, #44]	; (80016dc <tcp_server_accept+0x84>)
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f008 f949 	bl	8009948 <tcp_poll>

    ret_err = ERR_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
 80016ba:	e005      	b.n	80016c8 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 80016bc:	6939      	ldr	r1, [r7, #16]
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f000 f965 	bl	800198e <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80016c4:	23ff      	movs	r3, #255	; 0xff
 80016c6:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80016c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	080016e1 	.word	0x080016e1
 80016d8:	08001815 	.word	0x08001815
 80016dc:	08001839 	.word	0x08001839

080016e0 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <tcp_server_recv+0x20>
 80016f4:	4b43      	ldr	r3, [pc, #268]	; (8001804 <tcp_server_recv+0x124>)
 80016f6:	22c2      	movs	r2, #194	; 0xc2
 80016f8:	4943      	ldr	r1, [pc, #268]	; (8001808 <tcp_server_recv+0x128>)
 80016fa:	4844      	ldr	r0, [pc, #272]	; (800180c <tcp_server_recv+0x12c>)
 80016fc:	f00f ff02 	bl	8011504 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d116      	bne.n	8001738 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2203      	movs	r2, #3
 800170e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d104      	bne.n	8001722 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001718:	69b9      	ldr	r1, [r7, #24]
 800171a:	68b8      	ldr	r0, [r7, #8]
 800171c:	f000 f937 	bl	800198e <tcp_server_connection_close>
 8001720:	e007      	b.n	8001732 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001722:	493b      	ldr	r1, [pc, #236]	; (8001810 <tcp_server_recv+0x130>)
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f008 f8b3 	bl	8009890 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	68b8      	ldr	r0, [r7, #8]
 800172e:	f000 f8db 	bl	80018e8 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	77fb      	strb	r3, [r7, #31]
 8001736:	e05f      	b.n	80017f8 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00b      	beq.n	8001758 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f006 f871 	bl	8007834 <pbuf_free>
    }
    ret_err = err;
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	77fb      	strb	r3, [r7, #31]
 8001756:	e04f      	b.n	80017f8 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d110      	bne.n	8001782 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2202      	movs	r2, #2
 8001764:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 800176c:	4928      	ldr	r1, [pc, #160]	; (8001810 <tcp_server_recv+0x130>)
 800176e:	68b8      	ldr	r0, [r7, #8]
 8001770:	f008 f88e 	bl	8009890 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001774:	69b9      	ldr	r1, [r7, #24]
 8001776:	68b8      	ldr	r0, [r7, #8]
 8001778:	f000 f930 	bl	80019dc <tcp_server_handle>

    ret_err = ERR_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	77fb      	strb	r3, [r7, #31]
 8001780:	e03a      	b.n	80017f8 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d115      	bne.n	80017b6 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d107      	bne.n	80017a2 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8001798:	69b9      	ldr	r1, [r7, #24]
 800179a:	68b8      	ldr	r0, [r7, #8]
 800179c:	f000 f91e 	bl	80019dc <tcp_server_handle>
 80017a0:	e006      	b.n	80017b0 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f006 f95a 	bl	8007a64 <pbuf_chain>
    }
    ret_err = ERR_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	77fb      	strb	r3, [r7, #31]
 80017b4:	e020      	b.n	80017f8 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d10e      	bne.n	80017dc <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	4619      	mov	r1, r3
 80017c4:	68b8      	ldr	r0, [r7, #8]
 80017c6:	f007 f839 	bl	800883c <tcp_recved>
    es->p = NULL;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f006 f82f 	bl	8007834 <pbuf_free>
    ret_err = ERR_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	77fb      	strb	r3, [r7, #31]
 80017da:	e00d      	b.n	80017f8 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	891b      	ldrh	r3, [r3, #8]
 80017e0:	4619      	mov	r1, r3
 80017e2:	68b8      	ldr	r0, [r7, #8]
 80017e4:	f007 f82a 	bl	800883c <tcp_recved>
    es->p = NULL;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f006 f820 	bl	8007834 <pbuf_free>
    ret_err = ERR_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80017f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	0801294c 	.word	0x0801294c
 8001808:	08012968 	.word	0x08012968
 800180c:	08012974 	.word	0x08012974
 8001810:	08001899 	.word	0x08001899

08001814 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f004 fed0 	bl	80065d0 <mem_free>
  }
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d017      	beq.n	800187c <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8001854:	490f      	ldr	r1, [pc, #60]	; (8001894 <tcp_server_poll+0x5c>)
 8001856:	6838      	ldr	r0, [r7, #0]
 8001858:	f008 f81a 	bl	8009890 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6838      	ldr	r0, [r7, #0]
 8001860:	f000 f842 	bl	80018e8 <tcp_server_send>
 8001864:	e007      	b.n	8001876 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b03      	cmp	r3, #3
 800186c:	d103      	bne.n	8001876 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	6838      	ldr	r0, [r7, #0]
 8001872:	f000 f88c 	bl	800198e <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e004      	b.n	8001886 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 800187c:	6838      	ldr	r0, [r7, #0]
 800187e:	f006 fe03 	bl	8008488 <tcp_abort>
    ret_err = ERR_ABRT;
 8001882:	23f3      	movs	r3, #243	; 0xf3
 8001884:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	08001899 	.word	0x08001899

08001898 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2200      	movs	r2, #0
 80018ae:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 80018b8:	490a      	ldr	r1, [pc, #40]	; (80018e4 <tcp_server_sent+0x4c>)
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f007 ffe8 	bl	8009890 <tcp_sent>
    tcp_server_send(tpcb, es);
 80018c0:	6979      	ldr	r1, [r7, #20]
 80018c2:	68b8      	ldr	r0, [r7, #8]
 80018c4:	f000 f810 	bl	80018e8 <tcp_server_send>
 80018c8:	e007      	b.n	80018da <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d103      	bne.n	80018da <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 80018d2:	6979      	ldr	r1, [r7, #20]
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f000 f85a 	bl	800198e <tcp_server_connection_close>
  }
  return ERR_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	08001899 	.word	0x08001899

080018e8 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 80018f6:	e036      	b.n	8001966 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	895a      	ldrh	r2, [r3, #10]
 8001906:	2301      	movs	r3, #1
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f00a fecb 	bl	800c6a4 <tcp_write>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001912:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d11d      	bne.n	8001956 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	895b      	ldrh	r3, [r3, #10]
 800191e:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4618      	mov	r0, r3
 8001936:	f006 f81d 	bl	8007974 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 800193a:	6938      	ldr	r0, [r7, #16]
 800193c:	f005 ff7a 	bl	8007834 <pbuf_free>
 8001940:	4603      	mov	r3, r0
 8001942:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001944:	7b7b      	ldrb	r3, [r7, #13]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f7      	beq.n	800193a <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	4619      	mov	r1, r3
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f006 ff74 	bl	800883c <tcp_recved>
 8001954:	e007      	b.n	8001966 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8001956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195e:	d102      	bne.n	8001966 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001966:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10b      	bne.n	8001986 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	895a      	ldrh	r2, [r3, #10]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8001982:	429a      	cmp	r2, r3
 8001984:	d9b8      	bls.n	80018f8 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001998:	2100      	movs	r1, #0
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f007 ff44 	bl	8009828 <tcp_arg>
  tcp_sent(tpcb, NULL);
 80019a0:	2100      	movs	r1, #0
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f007 ff74 	bl	8009890 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80019a8:	2100      	movs	r1, #0
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f007 ff4e 	bl	800984c <tcp_recv>
  tcp_err(tpcb, NULL);
 80019b0:	2100      	movs	r1, #0
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f007 ff8e 	bl	80098d4 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f007 ffc3 	bl	8009948 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f004 fe01 	bl	80065d0 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f006 fc70 	bl	80082b4 <tcp_close>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b09e      	sub	sp, #120	; 0x78
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  union can_u *myCanInfo;
	struct tcp_server_struct *esTx;
	char buf[100];
	memset (buf, '\0', 100);
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2264      	movs	r2, #100	; 0x64
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00f fd80 	bl	80114f4 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len); // keep this if you want do processing on received data
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	6859      	ldr	r1, [r3, #4]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	891b      	ldrh	r3, [r3, #8]
 8001a00:	461a      	mov	r2, r3
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00f fdfc 	bl	8011604 <strncpy>
	myCanInfo = (union can_u *)(es->p->payload);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	677b      	str	r3, [r7, #116]	; 0x74

	esTx = es; // This copies everything to your local variable
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	673b      	str	r3, [r7, #112]	; 0x70
	// strcpy(buf, "Hello from TCP SERVER\n");

	esTx->p->payload = (void *)buf; // This just changes the pointer to payload
 8001a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f107 020c 	add.w	r2, r7, #12
 8001a20:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = strlen (buf); // This sets payload length
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fbf2 	bl	8000210 <strlen>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	b292      	uxth	r2, r2
 8001a34:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf); // This sets payload length
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fbe8 	bl	8000210 <strlen>
 8001a40:	4602      	mov	r2, r0
 8001a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	b292      	uxth	r2, r2
 8001a48:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8001a4a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff4b 	bl	80018e8 <tcp_server_send>
	pbuf_free(es->p);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f005 feec 	bl	8007834 <pbuf_free>
}
 8001a5c:	bf00      	nop
 8001a5e:	3778      	adds	r7, #120	; 0x78
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <tftp_send_message>:
  * @param buf: pointer on buffer where to create the message  
  * @param err: error code of type tftp_errorcode
  * @retval error code
  */
err_t tftp_send_message(struct udp_pcb *upcb, const ip_addr_t *to_ip, unsigned short to_port, char *buf, unsigned short buflen)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4613      	mov	r3, r2
 8001a72:	80fb      	strh	r3, [r7, #6]
  err_t err;
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, buflen, PBUF_POOL);
 8001a74:	8c3b      	ldrh	r3, [r7, #32]
 8001a76:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	2036      	movs	r0, #54	; 0x36
 8001a7e:	f005 fbf5 	bl	800726c <pbuf_alloc>
 8001a82:	6178      	str	r0, [r7, #20]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and end transmission */
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <tftp_send_message+0x2c>
    return ERR_MEM;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	e013      	b.n	8001ab8 <tftp_send_message+0x54>

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, buf, buflen);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	8c3a      	ldrh	r2, [r7, #32]
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00f fd03 	bl	80114a4 <memcpy>

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to_ip, to_port);
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	6979      	ldr	r1, [r7, #20]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f00c fe69 	bl	800e77c <udp_sendto>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	74fb      	strb	r3, [r7, #19]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f005 fec0 	bl	8007834 <pbuf_free>

  return err;
 8001ab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <tftp_construct_error_message>:
  * @param buf: pointer on buffer where to create the message  
  * @param err: error code of type tftp_errorcode
  * @retval 
  */
int tftp_construct_error_message(char *buf, tftp_errorcode err)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
  int errorlen;
  /* Set the opcode in the 2 first bytes */
  tftp_set_opcode(buf, TFTP_ERROR);
 8001acc:	2105      	movs	r1, #5
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fa27 	bl	8001f22 <tftp_set_opcode>
  /* Set the errorcode in the 2 second bytes  */
  tftp_set_errorcode(buf, err);
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fa35 	bl	8001f48 <tftp_set_errorcode>
  /* Set the error message in the last bytes */
  tftp_set_errormsg(buf, tftp_errorcode_string[err]);
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <tftp_construct_error_message+0x4c>)
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fa41 	bl	8001f70 <tftp_set_errormsg>
  /* Set the length of the error message  */
  errorlen = strlen(tftp_errorcode_string[err]);
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <tftp_construct_error_message+0x4c>)
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fb8a 	bl	8000210 <strlen>
 8001afc:	4603      	mov	r3, r0
 8001afe:	60fb      	str	r3, [r7, #12]

  /* return message size */
  return 4 + errorlen + 1;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3305      	adds	r3, #5
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000004 	.word	0x20000004

08001b10 <tftp_send_error_message>:
  * @param  to_port: pointer on remote port  
  * @param  err: tftp error code
  * @retval error value
  */
int tftp_send_error_message(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, tftp_errorcode err)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001b16:	af02      	add	r7, sp, #8
 8001b18:	f107 040c 	add.w	r4, r7, #12
 8001b1c:	6020      	str	r0, [r4, #0]
 8001b1e:	f107 0008 	add.w	r0, r7, #8
 8001b22:	6001      	str	r1, [r0, #0]
 8001b24:	1d39      	adds	r1, r7, #4
 8001b26:	600a      	str	r2, [r1, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	1cfb      	adds	r3, r7, #3
 8001b2c:	701a      	strb	r2, [r3, #0]
  char buf[512];
  int error_len;

  /* construct error */
  error_len = tftp_construct_error_message(buf, err);
 8001b2e:	1cfb      	adds	r3, r7, #3
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ffc1 	bl	8001ac0 <tftp_construct_error_message>
 8001b3e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
  /* send error message */
  return tftp_send_message(upcb, to, to_port, buf, error_len);
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	f107 0414 	add.w	r4, r7, #20
 8001b52:	f107 0108 	add.w	r1, r7, #8
 8001b56:	f107 000c 	add.w	r0, r7, #12
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	4623      	mov	r3, r4
 8001b5e:	6809      	ldr	r1, [r1, #0]
 8001b60:	6800      	ldr	r0, [r0, #0]
 8001b62:	f7ff ff7f 	bl	8001a64 <tftp_send_message>
 8001b66:	4603      	mov	r3, r0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd90      	pop	{r4, r7, pc}

08001b72 <tftp_send_ack_packet>:
  * @param  to_port: pointer on remote udp port
  * @param  block: block number
  * @retval error value
  */
int tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, unsigned short block)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b088      	sub	sp, #32
 8001b76:	af02      	add	r7, sp, #8
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	807b      	strh	r3, [r7, #2]

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

  /* define the first two bytes of the packet */
  tftp_set_opcode(packet, TFTP_ACK);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2104      	movs	r1, #4
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 f9cb 	bl	8001f22 <tftp_set_opcode>
  /* Specify the block number being ACK'd.
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement" */
  tftp_set_block(packet, block);
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f9fa 	bl	8001f8e <tftp_set_block>

  return tftp_send_message(upcb, to, to_port, packet, TFTP_ACK_PKT_LEN);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	9100      	str	r1, [sp, #0]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff ff5b 	bl	8001a64 <tftp_send_message>
 8001bae:	4603      	mov	r3, r0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <tftp_cleanup_wr>:
  * @param upcb: pointer on udp pcb
  * @param  args: pointer on a structure of type tftp_connection_args
  * @retval None
  */
void tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  /* close the filesystem */
  // f_close(&file_CR);
  // f_mount(NULL, (TCHAR const*)"",0);
  /* Free the tftp_connection_args structure reserverd for */
  mem_free(args);
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f004 fd04 	bl	80065d0 <mem_free>

  /* Disconnect the udp_pcb*/
  udp_disconnect(upcb);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f00d f815 	bl	800ebf8 <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f00d f85a 	bl	800ec88 <udp_remove>

  /* reset the callback function */
  udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <tftp_cleanup_wr+0x34>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4905      	ldr	r1, [pc, #20]	; (8001bf0 <tftp_cleanup_wr+0x38>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f00d f833 	bl	800ec48 <udp_recv>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200002e0 	.word	0x200002e0
 8001bf0:	08001e4d 	.word	0x08001e4d

08001bf4 <wrq_recv_callback>:
  * @param  addr: pointer on remote IP address
  * @param  port: pointer on remote port
  * @retval None
  */
void wrq_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	603b      	str	r3, [r7, #0]
  tftp_connection_args *args = (tftp_connection_args *)arg;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	617b      	str	r3, [r7, #20]
  // int n = 0;

  /* we expect to receive only one pbuf (pbuf size should be 
     configured > max TFTP frame size */
  if (pkt_buf->len != pkt_buf->tot_len)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	895a      	ldrh	r2, [r3, #10]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	891b      	ldrh	r3, [r3, #8]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d176      	bne.n	8001d00 <wrq_recv_callback+0x10c>
  {
    return;
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	895b      	ldrh	r3, [r3, #10]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d93a      	bls.n	8001c90 <wrq_recv_callback+0x9c>
      (tftp_extract_block(pkt_buf->payload) == (args->block + 1)))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f95f 	bl	8001ee2 <tftp_extract_block>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c2e:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d12d      	bne.n	8001c90 <wrq_recv_callback+0x9c>
  {
    /* write the received data to the flash memory */
    // f_write(&file_CR, (char*)pkt_buf->payload + TFTP_DATA_PKT_HDR_LEN, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN, (UINT*)&n);
    // f_write (file, buf , sizeofbuf, &BytesWritefile); 

    uint16_t NbOfBytes = pkt_buf->len - TFTP_DATA_PKT_HDR_LEN;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	895b      	ldrh	r3, [r3, #10]
 8001c38:	3b04      	subs	r3, #4
 8001c3a:	827b      	strh	r3, [r7, #18]

    fileSize += NbOfBytes;
 8001c3c:	8a7a      	ldrh	r2, [r7, #18]
 8001c3e:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <wrq_recv_callback+0x114>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a30      	ldr	r2, [pc, #192]	; (8001d08 <wrq_recv_callback+0x114>)
 8001c46:	6013      	str	r3, [r2, #0]

    // Store a TFTP data block into flash memory in turn
    if(CSP_QSPI_Write((uint8_t *)pkt_buf->payload + TFTP_DATA_PKT_HDR_LEN, BIN_START_ADDR + TFTP_DATA_LEN_MAX * (args->block), NbOfBytes) != HAL_OK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	1d18      	adds	r0, r3, #4
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c54:	025b      	lsls	r3, r3, #9
 8001c56:	3304      	adds	r3, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	8a7b      	ldrh	r3, [r7, #18]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f7ff f92d 	bl	8000ebc <CSP_QSPI_Write>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <wrq_recv_callback+0x78>
    {
      Error_Handler();
 8001c68:	f7fe fe4c 	bl	8000904 <Error_Handler>
    //   /* close the connection */
    //   tftp_cleanup_wr(upcb, args); /* close the connection */
    // }
    
    /* update our block number to match the block number just received */
    args->block++;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	895b      	ldrh	r3, [r3, #10]
 8001c84:	3b04      	subs	r3, #4
 8001c86:	441a      	add	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  {
 8001c8e:	e013      	b.n	8001cb8 <wrq_recv_callback+0xc4>
  }
  else if (tftp_extract_block(pkt_buf->payload) == (args->block + 1))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 f924 	bl	8001ee2 <tftp_extract_block>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d106      	bne.n	8001cb8 <wrq_recv_callback+0xc4>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
   * number, then the args->block (our block number) is never updated and
   * we simply send "duplicate ACK" which has the same block number as the
   * last ACK pkt we sent.  This lets the host know that we are still waiting
   * on block number args->block+1. 
   */
  tftp_send_ack_packet(upcb, addr, port, args->block);
 8001cb8:	8c3a      	ldrh	r2, [r7, #32]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	68b8      	ldr	r0, [r7, #8]
 8001cc6:	f7ff ff54 	bl	8001b72 <tftp_send_ack_packet>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the end of a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	895b      	ldrh	r3, [r3, #10]
 8001cce:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001cd2:	d211      	bcs.n	8001cf8 <wrq_recv_callback+0x104>
  {
    // Store file size into flash memory
    if(CSP_QSPI_Write((uint8_t *)&fileSize, BIN_SIZE_START_ADDR, BIN_SIZE_LEN) != HAL_OK)
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	480b      	ldr	r0, [pc, #44]	; (8001d08 <wrq_recv_callback+0x114>)
 8001cda:	f7ff f8ef 	bl	8000ebc <CSP_QSPI_Write>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <wrq_recv_callback+0xf4>
    {
      Error_Handler();
 8001ce4:	f7fe fe0e 	bl	8000904 <Error_Handler>
    }

    tftp_cleanup_wr(upcb, args);
 8001ce8:	6979      	ldr	r1, [r7, #20]
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	f7ff ff64 	bl	8001bb8 <tftp_cleanup_wr>
    pbuf_free(pkt_buf);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f005 fd9f 	bl	8007834 <pbuf_free>
 8001cf6:	e004      	b.n	8001d02 <wrq_recv_callback+0x10e>
  }
  else
  {
    pbuf_free(pkt_buf);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f005 fd9b 	bl	8007834 <pbuf_free>
    return;
 8001cfe:	e000      	b.n	8001d02 <wrq_recv_callback+0x10e>
    return;
 8001d00:	bf00      	nop
  }
}
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200000c8 	.word	0x200000c8

08001d0c <tftp_process_write>:
  * @param  to_port: pointer on remote udp port
  * @param  FileName: pointer on filename to be written 
  * @retval error code
  */
int tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, unsigned short to_port, char *FileName)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	80fb      	strh	r3, [r7, #6]
  tftp_connection_args *args = NULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  //   tftp_cleanup_wr(upcb, args);

  //   return 0;
  // }

  args = mem_malloc(sizeof *args);
 8001d20:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001d24:	f004 fdba 	bl	800689c <mem_malloc>
 8001d28:	6178      	str	r0, [r7, #20]
  if (!args)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <tftp_process_write+0x3c>
  {
    tftp_send_error_message(upcb, to, to_port, TFTP_ERR_NOTDEFINED);
 8001d30:	88fa      	ldrh	r2, [r7, #6]
 8001d32:	2300      	movs	r3, #0
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff feea 	bl	8001b10 <tftp_send_error_message>

    tftp_cleanup_wr(upcb, args);
 8001d3c:	6979      	ldr	r1, [r7, #20]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7ff ff3a 	bl	8001bb8 <tftp_cleanup_wr>

    return 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e031      	b.n	8001dac <tftp_process_write+0xa0>
  }

  args->op = TFTP_WRQ;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 8001d58:	88fa      	ldrh	r2, [r7, #6]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  // Erase flash memory to store
  if (CSP_QSPI_EraseSector(BIN_START_ADDR, BIN_START_ADDR + fileSize) != HAL_OK)
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <tftp_process_write+0xa8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3304      	adds	r3, #4
 8001d76:	4619      	mov	r1, r3
 8001d78:	2004      	movs	r0, #4
 8001d7a:	f7fe ffef 	bl	8000d5c <CSP_QSPI_EraseSector>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <tftp_process_write+0x7c>
  {
   Error_Handler();
 8001d84:	f7fe fdbe 	bl	8000904 <Error_Handler>
  }
  fileSize = 0;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <tftp_process_write+0xa8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

  /* set callback for receives on this UDP PCB  */
  udp_recv(upcb, wrq_recv_callback, args);
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4909      	ldr	r1, [pc, #36]	; (8001db8 <tftp_process_write+0xac>)
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f00c ff58 	bl	800ec48 <udp_recv>

  /* initiate the write transaction by sending the first ack */
  tftp_send_ack_packet(upcb, to, to_port, args->block);
 8001d98:	88fa      	ldrh	r2, [r7, #6]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f7ff fee4 	bl	8001b72 <tftp_send_ack_packet>

  return 0;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200000c8 	.word	0x200000c8
 8001db8:	08001bf5 	.word	0x08001bf5

08001dbc <process_tftp_request>:
  * @param  ip_addr: pointer on source IP address
  * @param  port: pointer on source udp port
  * @retval None
  */
void process_tftp_request(struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08e      	sub	sp, #56	; 0x38
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	80fb      	strh	r3, [r7, #6]
  tftp_opcode op = tftp_decode_op(pkt_buf->payload);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f87a 	bl	8001ec8 <tftp_decode_op>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char FileName[30];
  struct udp_pcb *upcb;
  err_t err;

  /* create new UDP PCB structure */
  upcb = udp_new();
 8001dda:	f00c ff97 	bl	800ed0c <udp_new>
 8001dde:	6338      	str	r0, [r7, #48]	; 0x30
  if (!upcb)
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d029      	beq.n	8001e3a <process_tftp_request+0x7e>

  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
   * 69 which al transactions begin communication on, however all subsequent
   * transactions for a given "stream" occur on another port!  */
  err = udp_bind(upcb, IP_ADDR_ANY, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	4917      	ldr	r1, [pc, #92]	; (8001e48 <process_tftp_request+0x8c>)
 8001dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dec:	f00c fe7c 	bl	800eae8 <udp_bind>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (err != ERR_OK)
 8001df6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d11f      	bne.n	8001e3e <process_tftp_request+0x82>
  {    
    /* Unable to bind to port   */
    return;
  }
  switch (op)
 8001dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d10f      	bne.n	8001e26 <process_tftp_request+0x6a>
    // } 

    case TFTP_WRQ: /* TFTP WRQ (write request) */
    {
      /* Read the name of the file asked by the client to be received and writen in the SD card */
      tftp_extract_filename(FileName, pkt_buf->payload);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	f107 0310 	add.w	r3, r7, #16
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f877 	bl	8001f04 <tftp_extract_filename>
      // {
      //   return;
      // }
        
      /* Start the TFTP write mode*/
      tftp_process_write(upcb, addr, port, FileName);
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	88fa      	ldrh	r2, [r7, #6]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e20:	f7ff ff74 	bl	8001d0c <tftp_process_write>
      break;
 8001e24:	e00c      	b.n	8001e40 <process_tftp_request+0x84>
    }
    default: /* TFTP unknown request op */
      /* send generic access violation message */
      tftp_send_error_message(upcb, addr, port, TFTP_ERR_ACCESS_VIOLATION);
 8001e26:	88fa      	ldrh	r2, [r7, #6]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e2e:	f7ff fe6f 	bl	8001b10 <tftp_send_error_message>
      udp_remove(upcb);
 8001e32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e34:	f00c ff28 	bl	800ec88 <udp_remove>

      break;
 8001e38:	e002      	b.n	8001e40 <process_tftp_request+0x84>
    return;
 8001e3a:	bf00      	nop
 8001e3c:	e000      	b.n	8001e40 <process_tftp_request+0x84>
    return;
 8001e3e:	bf00      	nop
  }
}
 8001e40:	3738      	adds	r7, #56	; 0x38
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	080154e4 	.word	0x080154e4

08001e4c <recv_callback_tftp>:
  * @param  port: pointer on source udp port
  * @retval None
  */
void recv_callback_tftp(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                               const ip_addr_t *addr, u16_t port)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
  /* process new connection request */
  process_tftp_request(pkt_buf, addr, port);
 8001e5a:	8b3b      	ldrh	r3, [r7, #24]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffab 	bl	8001dbc <process_tftp_request>

  /* free pbuf */
  pbuf_free(pkt_buf);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f005 fce4 	bl	8007834 <pbuf_free>
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <tftpd_init>:
  * @brief  Initializes the udp pcb for TFTP 
  * @param  None
  * @retval None
  */
void tftpd_init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  err_t err;

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 8001e7a:	f00c ff47 	bl	800ed0c <udp_new>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <tftpd_init+0x48>)
 8001e82:	6013      	str	r3, [r2, #0]
  if (UDPpcb)
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <tftpd_init+0x48>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <tftpd_init+0x40>
  {  
    /* Bind this PCB to port 69  */
    err = udp_bind(UDPpcb, IP_ADDR_ANY, TFTP_PORT);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <tftpd_init+0x48>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2245      	movs	r2, #69	; 0x45
 8001e92:	490b      	ldr	r1, [pc, #44]	; (8001ec0 <tftpd_init+0x4c>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00c fe27 	bl	800eae8 <udp_bind>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <tftpd_init+0x40>
    {    
      /* TFTP server start  */
      udp_recv(UDPpcb, recv_callback_tftp, NULL);
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <tftpd_init+0x48>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4905      	ldr	r1, [pc, #20]	; (8001ec4 <tftpd_init+0x50>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f00c feca 	bl	800ec48 <udp_recv>
    }
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	200002e0 	.word	0x200002e0
 8001ec0:	080154e4 	.word	0x080154e4
 8001ec4:	08001e4d 	.word	0x08001e4d

08001ec8 <tftp_decode_op>:

/**
  * @brief  Extracts the opcode from a TFTP message
**/ 
tftp_opcode tftp_decode_op(char *buf)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	781b      	ldrb	r3, [r3, #0]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <tftp_extract_block>:

/**
  * @brief Extracts the block number from TFTP message
**/
u16_t tftp_extract_block(char *buf)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 f9e9 	bl	80062cc <lwip_htons>
 8001efa:	4603      	mov	r3, r0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <tftp_extract_filename>:

/**
  * @brief Extracts the filename from TFTP message
**/ 
void tftp_extract_filename(char *fname, char *buf)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  strcpy(fname, buf + 2);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	3302      	adds	r3, #2
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f00f fb6d 	bl	80115f4 <strcpy>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <tftp_set_opcode>:

/**
  * @brief set the opcode in TFTP message: RRQ / WRQ / DATA / ACK / ERROR 
**/ 
void tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	70fb      	strb	r3, [r7, #3]

  buffer[0] = 0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3301      	adds	r3, #1
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	701a      	strb	r2, [r3, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <tftp_set_errorcode>:

/**
  * @brief Set the errorcode in TFTP message
**/
void tftp_set_errorcode(char *buffer, tftp_errorcode errCode)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]

  buffer[2] = 0;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3302      	adds	r3, #2
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
  buffer[3] = (u8_t)errCode;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3303      	adds	r3, #3
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	701a      	strb	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <tftp_set_errormsg>:

/**
  * @brief Sets the error message
**/
void tftp_set_errormsg(char * buffer, char* errormsg)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  strcpy(buffer + 4, errormsg);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f00f fb37 	bl	80115f4 <strcpy>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <tftp_set_block>:

/**
  * @brief Sets the block number
**/
void tftp_set_block(char* packet, u16_t block)
{
 8001f8e:	b590      	push	{r4, r7, lr}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	807b      	strh	r3, [r7, #2]

  u16_t *p = (u16_t *)packet;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1c9c      	adds	r4, r3, #2
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 f991 	bl	80062cc <lwip_htons>
 8001faa:	4603      	mov	r3, r0
 8001fac:	8023      	strh	r3, [r4, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
	...

08001fb8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <MX_TIM2_Init+0x98>)
 8001fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <MX_TIM2_Init+0x98>)
 8001fe0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001fe4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_TIM2_Init+0x98>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 21600;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_TIM2_Init+0x98>)
 8001fee:	f245 4260 	movw	r2, #21600	; 0x5460
 8001ff2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <MX_TIM2_Init+0x98>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_TIM2_Init+0x98>)
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002000:	4813      	ldr	r0, [pc, #76]	; (8002050 <MX_TIM2_Init+0x98>)
 8002002:	f003 f865 	bl	80050d0 <HAL_TIM_Base_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800200c:	f7fe fc7a 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002014:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	4619      	mov	r1, r3
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <MX_TIM2_Init+0x98>)
 800201e:	f003 f9cd 	bl	80053bc <HAL_TIM_ConfigClockSource>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002028:	f7fe fc6c 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_TIM2_Init+0x98>)
 800203a:	f003 fbeb 	bl	8005814 <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002044:	f7fe fc5e 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200002e4 	.word	0x200002e4

08002054 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d113      	bne.n	800208e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_TIM_Base_MspInit+0x44>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_TIM_Base_MspInit+0x44>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_TIM_Base_MspInit+0x44>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	201c      	movs	r0, #28
 8002084:	f000 f999 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002088:	201c      	movs	r0, #28
 800208a:	f000 f9b2 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a0:	480d      	ldr	r0, [pc, #52]	; (80020d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020a2:	490e      	ldr	r1, [pc, #56]	; (80020dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020a4:	4a0e      	ldr	r2, [pc, #56]	; (80020e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b8:	4c0b      	ldr	r4, [pc, #44]	; (80020e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020c6:	f7ff f89f 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ca:	f00f f9b9 	bl	8011440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7fe fb63 	bl	8000798 <main>
  bx  lr    
 80020d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80020e0:	08015654 	.word	0x08015654
  ldr r2, =_sbss
 80020e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80020e8:	20008b64 	.word	0x20008b64

080020ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC_IRQHandler>
	...

080020f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_Init+0x28>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_Init+0x28>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002100:	2003      	movs	r0, #3
 8002102:	f000 f94f 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002106:	2000      	movs	r0, #0
 8002108:	f000 f808 	bl	800211c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800210c:	f7fe ff50 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023c00 	.word	0x40023c00

0800211c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_InitTick+0x54>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_InitTick+0x58>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	fbb3 f3f1 	udiv	r3, r3, r1
 8002136:	fbb2 f3f3 	udiv	r3, r2, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f967 	bl	800240e <HAL_SYSTICK_Config>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e00e      	b.n	8002168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b0f      	cmp	r3, #15
 800214e:	d80a      	bhi.n	8002166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002150:	2200      	movs	r2, #0
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	f04f 30ff 	mov.w	r0, #4294967295
 8002158:	f000 f92f 	bl	80023ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800215c:	4a06      	ldr	r2, [pc, #24]	; (8002178 <HAL_InitTick+0x5c>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e000      	b.n	8002168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000000 	.word	0x20000000
 8002174:	20000028 	.word	0x20000028
 8002178:	20000024 	.word	0x20000024

0800217c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x20>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x24>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4413      	add	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_IncTick+0x24>)
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000028 	.word	0x20000028
 80021a0:	20000330 	.word	0x20000330

080021a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return uwTick;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_GetTick+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000330 	.word	0x20000330

080021bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff ffee 	bl	80021a4 <HAL_GetTick>
 80021c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d005      	beq.n	80021e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_Delay+0x44>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021e2:	bf00      	nop
 80021e4:	f7ff ffde 	bl	80021a4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d8f7      	bhi.n	80021e4 <HAL_Delay+0x28>
  {
  }
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000028 	.word	0x20000028

08002204 <__NVIC_SetPriorityGrouping>:
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <__NVIC_SetPriorityGrouping+0x40>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	4313      	orrs	r3, r2
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SetPriorityGrouping+0x40>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00
 8002248:	05fa0000 	.word	0x05fa0000

0800224c <__NVIC_GetPriorityGrouping>:
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_EnableIRQ>:
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0b      	blt.n	8002292 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4907      	ldr	r1, [pc, #28]	; (80022a0 <__NVIC_EnableIRQ+0x38>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	; (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002370:	d301      	bcc.n	8002376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <SysTick_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237e:	210f      	movs	r1, #15
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f7ff ff8e 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SysTick_Config+0x40>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SysTick_Config+0x40>)
 8002390:	2207      	movs	r2, #7
 8002392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff29 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023cc:	f7ff ff3e 	bl	800224c <__NVIC_GetPriorityGrouping>
 80023d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f7ff ff8e 	bl	80022f8 <NVIC_EncodePriority>
 80023dc:	4602      	mov	r2, r0
 80023de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff5d 	bl	80022a4 <__NVIC_SetPriority>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff31 	bl	8002268 <__NVIC_EnableIRQ>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffa2 	bl	8002360 <SysTick_Config>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff feb6 	bl	80021a4 <HAL_GetTick>
 8002438:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d008      	beq.n	8002458 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2280      	movs	r2, #128	; 0x80
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e052      	b.n	80024fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0216 	bic.w	r2, r2, #22
 8002466:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002476:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d103      	bne.n	8002488 <HAL_DMA_Abort+0x62>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0208 	bic.w	r2, r2, #8
 8002496:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a8:	e013      	b.n	80024d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024aa:	f7ff fe7b 	bl	80021a4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d90c      	bls.n	80024d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2203      	movs	r2, #3
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e015      	b.n	80024fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e4      	bne.n	80024aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	223f      	movs	r2, #63	; 0x3f
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002518:	4ba9      	ldr	r3, [pc, #676]	; (80027c0 <HAL_ETH_Init+0x2b8>)
 800251a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e181      	b.n	8002832 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f003 fb44 	bl	8005bd0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002548:	4b9e      	ldr	r3, [pc, #632]	; (80027c4 <HAL_ETH_Init+0x2bc>)
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	4a9d      	ldr	r2, [pc, #628]	; (80027c4 <HAL_ETH_Init+0x2bc>)
 800254e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002552:	6453      	str	r3, [r2, #68]	; 0x44
 8002554:	4b9b      	ldr	r3, [pc, #620]	; (80027c4 <HAL_ETH_Init+0x2bc>)
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002560:	4b99      	ldr	r3, [pc, #612]	; (80027c8 <HAL_ETH_Init+0x2c0>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a98      	ldr	r2, [pc, #608]	; (80027c8 <HAL_ETH_Init+0x2c0>)
 8002566:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800256a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800256c:	4b96      	ldr	r3, [pc, #600]	; (80027c8 <HAL_ETH_Init+0x2c0>)
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	4994      	ldr	r1, [pc, #592]	; (80027c8 <HAL_ETH_Init+0x2c0>)
 8002576:	4313      	orrs	r3, r2
 8002578:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002590:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002592:	f7ff fe07 	bl	80021a4 <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002598:	e011      	b.n	80025be <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800259a:	f7ff fe03 	bl	80021a4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025a8:	d909      	bls.n	80025be <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2203      	movs	r2, #3
 80025ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e139      	b.n	8002832 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e4      	bne.n	800259a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f023 031c 	bic.w	r3, r3, #28
 80025de:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025e0:	f002 fd6a 	bl	80050b8 <HAL_RCC_GetHCLKFreq>
 80025e4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	4a78      	ldr	r2, [pc, #480]	; (80027cc <HAL_ETH_Init+0x2c4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d908      	bls.n	8002600 <HAL_ETH_Init+0xf8>
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4a77      	ldr	r2, [pc, #476]	; (80027d0 <HAL_ETH_Init+0x2c8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d804      	bhi.n	8002600 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e027      	b.n	8002650 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	4a73      	ldr	r2, [pc, #460]	; (80027d0 <HAL_ETH_Init+0x2c8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d908      	bls.n	800261a <HAL_ETH_Init+0x112>
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4a6d      	ldr	r2, [pc, #436]	; (80027c0 <HAL_ETH_Init+0x2b8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d204      	bcs.n	800261a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f043 030c 	orr.w	r3, r3, #12
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	e01a      	b.n	8002650 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	4a68      	ldr	r2, [pc, #416]	; (80027c0 <HAL_ETH_Init+0x2b8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d303      	bcc.n	800262a <HAL_ETH_Init+0x122>
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4a6b      	ldr	r2, [pc, #428]	; (80027d4 <HAL_ETH_Init+0x2cc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d911      	bls.n	800264e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4a69      	ldr	r2, [pc, #420]	; (80027d4 <HAL_ETH_Init+0x2cc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d908      	bls.n	8002644 <HAL_ETH_Init+0x13c>
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4a68      	ldr	r2, [pc, #416]	; (80027d8 <HAL_ETH_Init+0x2d0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d804      	bhi.n	8002644 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f043 0304 	orr.w	r3, r3, #4
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	e005      	b.n	8002650 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	e000      	b.n	8002650 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800264e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002658:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800265c:	2100      	movs	r1, #0
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fc1d 	bl	8002e9e <HAL_ETH_WritePHYRegister>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800266e:	6939      	ldr	r1, [r7, #16]
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fdd3 	bl	800321c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e0d7      	b.n	8002832 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002682:	20ff      	movs	r0, #255	; 0xff
 8002684:	f7ff fd9a 	bl	80021bc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a5 	beq.w	80027dc <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002692:	f7ff fd87 	bl	80021a4 <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	461a      	mov	r2, r3
 800269e:	2101      	movs	r1, #1
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fb94 	bl	8002dce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80026a6:	f7ff fd7d 	bl	80021a4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d90f      	bls.n	80026d8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80026bc:	6939      	ldr	r1, [r7, #16]
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fdac 	bl	800321c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e0ac      	b.n	8002832 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0da      	beq.n	8002698 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80026e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026e6:	2100      	movs	r1, #0
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fbd8 	bl	8002e9e <HAL_ETH_WritePHYRegister>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00b      	beq.n	800270c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80026f8:	6939      	ldr	r1, [r7, #16]
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fd8e 	bl	800321c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002708:	2301      	movs	r3, #1
 800270a:	e092      	b.n	8002832 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800270c:	f7ff fd4a 	bl	80021a4 <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002712:	f107 030c 	add.w	r3, r7, #12
 8002716:	461a      	mov	r2, r3
 8002718:	2101      	movs	r1, #1
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fb57 	bl	8002dce <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002720:	f7ff fd40 	bl	80021a4 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d90f      	bls.n	8002752 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002736:	6939      	ldr	r1, [r7, #16]
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fd6f 	bl	800321c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e06f      	b.n	8002832 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0da      	beq.n	8002712 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	461a      	mov	r2, r3
 8002762:	2110      	movs	r1, #16
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fb32 	bl	8002dce <HAL_ETH_ReadPHYRegister>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00b      	beq.n	8002788 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002774:	6939      	ldr	r1, [r7, #16]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fd50 	bl	800321c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002784:	2301      	movs	r3, #1
 8002786:	e054      	b.n	8002832 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	e002      	b.n	80027a2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	e035      	b.n	8002820 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	e030      	b.n	8002820 <HAL_ETH_Init+0x318>
 80027be:	bf00      	nop
 80027c0:	03938700 	.word	0x03938700
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	01312cff 	.word	0x01312cff
 80027d0:	02160ebf 	.word	0x02160ebf
 80027d4:	05f5e0ff 	.word	0x05f5e0ff
 80027d8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	2100      	movs	r1, #0
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fb52 	bl	8002e9e <HAL_ETH_WritePHYRegister>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00b      	beq.n	8002818 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002804:	6939      	ldr	r1, [r7, #16]
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fd08 	bl	800321c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e00c      	b.n	8002832 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002818:	f640 70ff 	movw	r0, #4095	; 0xfff
 800281c:	f7ff fcce 	bl	80021bc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002820:	6939      	ldr	r1, [r7, #16]
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fcfa 	bl	800321c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop

0800283c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_ETH_DMATxDescListInit+0x20>
 8002858:	2302      	movs	r3, #2
 800285a:	e052      	b.n	8002902 <HAL_ETH_DMATxDescListInit+0xc6>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e030      	b.n	80028da <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015b      	lsls	r3, r3, #5
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	4413      	add	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002888:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	461a      	mov	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d208      	bcs.n	80028ce <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3301      	adds	r3, #1
 80028c0:	015b      	lsls	r3, r3, #5
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4413      	add	r3, r2
 80028c6:	461a      	mov	r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	e002      	b.n	80028d4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d3ca      	bcc.n	8002878 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	f241 0310 	movw	r3, #4112	; 0x1010
 80028ec:	440b      	add	r3, r1
 80028ee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800290e:	b480      	push	{r7}
 8002910:	b087      	sub	sp, #28
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_ETH_DMARxDescListInit+0x20>
 800292a:	2302      	movs	r3, #2
 800292c:	e056      	b.n	80029dc <HAL_ETH_DMARxDescListInit+0xce>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	e034      	b.n	80029b4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	015b      	lsls	r3, r3, #5
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	4413      	add	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800295a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002962:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	461a      	mov	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	3b01      	subs	r3, #1
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	429a      	cmp	r2, r3
 8002994:	d208      	bcs.n	80029a8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	3301      	adds	r3, #1
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	4413      	add	r3, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	e002      	b.n	80029ae <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d3c6      	bcc.n	800294a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	f241 030c 	movw	r3, #4108	; 0x100c
 80029c6:	440b      	add	r3, r1
 80029c8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_ETH_TransmitFrame+0x24>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e0cd      	b.n	8002ba8 <HAL_ETH_TransmitFrame+0x1c0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0b8      	b.n	8002ba8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da09      	bge.n	8002a54 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2212      	movs	r2, #18
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0a9      	b.n	8002ba8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d915      	bls.n	8002a8a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <HAL_ETH_TransmitFrame+0x1cc>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <HAL_ETH_TransmitFrame+0x1cc>)
 8002a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3301      	adds	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	e001      	b.n	8002a8e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d11c      	bne.n	8002ace <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002aa2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002aae:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002abe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8002acc:	e04b      	b.n	8002b66 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	e044      	b.n	8002b5e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ae2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002af8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b02:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d116      	bne.n	8002b3c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002b1c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4a25      	ldr	r2, [pc, #148]	; (8002bb8 <HAL_ETH_TransmitFrame+0x1d0>)
 8002b22:	fb02 f203 	mul.w	r2, r2, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002b2e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b3a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b4a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d3b6      	bcc.n	8002ad4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	f241 0314 	movw	r3, #4116	; 0x1014
 8002b6e:	4413      	add	r3, r2
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002b82:	4413      	add	r3, r2
 8002b84:	2204      	movs	r2, #4
 8002b86:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b90:	4413      	add	r3, r2
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	ac02b00b 	.word	0xac02b00b
 8002bb8:	fffffa0c 	.word	0xfffffa0c

08002bbc <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ETH_GetReceivedFrame+0x1a>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e070      	b.n	8002cb8 <HAL_ETH_GetReceivedFrame+0xfc>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	db5a      	blt.n	8002ca6 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d030      	beq.n	8002c60 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d103      	bne.n	8002c18 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002c2c:	3b04      	subs	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	461a      	mov	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e02b      	b.n	8002cb8 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002c8e:	e00a      	b.n	8002ca6 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	f241 0314 	movw	r3, #4116	; 0x1014
 8002cd4:	4413      	add	r3, r2
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d112      	bne.n	8002d06 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f860 	bl	8002da6 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	f241 0314 	movw	r3, #4116	; 0x1014
 8002cee:	4413      	add	r3, r2
 8002cf0:	2240      	movs	r2, #64	; 0x40
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d04:	e01b      	b.n	8002d3e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	f241 0314 	movw	r3, #4116	; 0x1014
 8002d0e:	4413      	add	r3, r2
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d111      	bne.n	8002d3e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f839 	bl	8002d92 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	f241 0314 	movw	r3, #4116	; 0x1014
 8002d28:	4413      	add	r3, r2
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f241 0314 	movw	r3, #4116	; 0x1014
 8002d46:	4413      	add	r3, r2
 8002d48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d4c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	f241 0314 	movw	r3, #4116	; 0x1014
 8002d56:	4413      	add	r3, r2
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d62:	d112      	bne.n	8002d8a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f828 	bl	8002dba <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002d72:	4413      	add	r3, r2
 8002d74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d78:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b82      	cmp	r3, #130	; 0x82
 8002dee:	d101      	bne.n	8002df4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	e050      	b.n	8002e96 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2282      	movs	r2, #130	; 0x82
 8002df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f003 031c 	and.w	r3, r3, #28
 8002e0a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8a1b      	ldrh	r3, [r3, #16]
 8002e10:	02db      	lsls	r3, r3, #11
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002e1a:	897b      	ldrh	r3, [r7, #10]
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f023 0302 	bic.w	r3, r3, #2
 8002e2e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e40:	f7ff f9b0 	bl	80021a4 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e46:	e015      	b.n	8002e74 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002e48:	f7ff f9ac 	bl	80021a4 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e56:	d309      	bcc.n	8002e6c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e014      	b.n	8002e96 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e4      	bne.n	8002e48 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b42      	cmp	r3, #66	; 0x42
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e04e      	b.n	8002f62 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2242      	movs	r2, #66	; 0x42
 8002ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 031c 	and.w	r3, r3, #28
 8002eda:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8a1b      	ldrh	r3, [r3, #16]
 8002ee0:	02db      	lsls	r3, r3, #11
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002eea:	897b      	ldrh	r3, [r7, #10]
 8002eec:	019b      	lsls	r3, r3, #6
 8002eee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f043 0302 	orr.w	r3, r3, #2
 8002efe:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f1a:	f7ff f943 	bl	80021a4 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f20:	e015      	b.n	8002f4e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002f22:	f7ff f93f 	bl	80021a4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d309      	bcc.n	8002f46 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e00d      	b.n	8002f62 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e4      	bne.n	8002f22 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_ETH_Start+0x16>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e01f      	b.n	8002fc0 <HAL_ETH_Start+0x56>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb45 	bl	8003620 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fb7c 	bl	8003694 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fc13 	bl	80037c8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fbb0 	bl	8003708 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fbdd 	bl	8003768 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_ETH_Stop+0x16>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e01f      	b.n	800301e <HAL_ETH_Stop+0x56>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fba2 	bl	8003738 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fbcf 	bl	8003798 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fb67 	bl	80036ce <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fbe1 	bl	80037c8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fb27 	bl	800365a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_ETH_ConfigMAC+0x1c>
 8003040:	2302      	movs	r3, #2
 8003042:	e0e4      	b.n	800320e <HAL_ETH_ConfigMAC+0x1e6>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80b1 	beq.w	80031be <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4b6c      	ldr	r3, [pc, #432]	; (8003218 <HAL_ETH_ConfigMAC+0x1f0>)
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003074:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800307a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003080:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003086:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800308c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003092:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003098:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800309e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80030a4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80030aa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80030b0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80030b6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ce:	2001      	movs	r0, #1
 80030d0:	f7ff f874 	bl	80021bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80030e4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80030ea:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80030f0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80030f6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80030fc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003102:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800310e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003110:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800311a:	2001      	movs	r0, #1
 800311c:	f7ff f84e 	bl	80021bc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003130:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800313a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	f64f 7341 	movw	r3, #65345	; 0xff41
 800314a:	4013      	ands	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003158:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800315e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003164:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800316a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003170:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff f817 	bl	80021bc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f7ff f804 	bl	80021bc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	61da      	str	r2, [r3, #28]
 80031bc:	e01e      	b.n	80031fc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80031cc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80031ee:	2001      	movs	r0, #1
 80031f0:	f7fe ffe4 	bl	80021bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	ff20810f 	.word	0xff20810f

0800321c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b0b0      	sub	sp, #192	; 0xc0
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003238:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003240:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003246:	2300      	movs	r3, #0
 8003248:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800324a:	2300      	movs	r3, #0
 800324c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800324e:	2300      	movs	r3, #0
 8003250:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003256:	2300      	movs	r3, #0
 8003258:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003266:	663b      	str	r3, [r7, #96]	; 0x60
 8003268:	e001      	b.n	800326e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800326e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003272:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003278:	2300      	movs	r3, #0
 800327a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800327c:	2300      	movs	r3, #0
 800327e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003288:	2340      	movs	r3, #64	; 0x40
 800328a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003292:	2300      	movs	r3, #0
 8003294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003298:	2300      	movs	r3, #0
 800329a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80032f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032f4:	4bab      	ldr	r3, [pc, #684]	; (80035a4 <ETH_MACDMAConfig+0x388>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80032fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80032fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003300:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003304:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003308:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800330e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003312:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003316:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800331c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800331e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003320:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003324:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003328:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800332a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800332c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800332e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003330:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003332:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003344:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003350:	2001      	movs	r0, #1
 8003352:	f7fe ff33 	bl	80021bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800335e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003360:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003364:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003368:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800336a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800336e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003374:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003376:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800337a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800337c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003380:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003384:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800338c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800338e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800339a:	2001      	movs	r0, #1
 800339c:	f7fe ff0e 	bl	80021bc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033a8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033b2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80033bc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80033c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033cc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80033d0:	4013      	ands	r3, r2
 80033d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80033d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033da:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80033dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80033e0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80033e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80033e6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80033e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80033ec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80033ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80033f2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80033f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80033f8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80033fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800340c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003418:	2001      	movs	r0, #1
 800341a:	f7fe fecf 	bl	80021bc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003426:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003428:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800342c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003442:	2001      	movs	r0, #1
 8003444:	f7fe feba 	bl	80021bc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003450:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003460:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003464:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003476:	2304      	movs	r3, #4
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800347a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003484:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800348c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003496:	2300      	movs	r3, #0
 8003498:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800349a:	2300      	movs	r3, #0
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	f241 0318 	movw	r3, #4120	; 0x1018
 80034a6:	4413      	add	r3, r2
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80034ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034b2:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <ETH_MACDMAConfig+0x38c>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034ba:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80034bc:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034be:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80034c0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80034c2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80034c4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80034c6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80034c8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80034ca:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80034cc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80034ce:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80034d0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80034d2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80034d6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80034da:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80034dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	f241 0318 	movw	r3, #4120	; 0x1018
 80034ee:	4413      	add	r3, r2
 80034f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034f4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80034fe:	4413      	add	r3, r2
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003506:	2001      	movs	r0, #1
 8003508:	f7fe fe58 	bl	80021bc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	f241 0318 	movw	r3, #4120	; 0x1018
 8003514:	4413      	add	r3, r2
 8003516:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800351a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800351c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003520:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003524:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003528:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800352c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800352e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003530:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003532:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003536:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003544:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003554:	2001      	movs	r0, #1
 8003556:	f7fe fe31 	bl	80021bc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003562:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003566:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10d      	bne.n	800358c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	f241 031c 	movw	r3, #4124	; 0x101c
 8003578:	4413      	add	r3, r2
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6811      	ldr	r1, [r2, #0]
 8003580:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <ETH_MACDMAConfig+0x390>)
 8003582:	431a      	orrs	r2, r3
 8003584:	f241 031c 	movw	r3, #4124	; 0x101c
 8003588:	440b      	add	r3, r1
 800358a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	461a      	mov	r2, r3
 8003592:	2100      	movs	r1, #0
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f80b 	bl	80035b0 <ETH_MACAddressConfig>
}
 800359a:	bf00      	nop
 800359c:	37c0      	adds	r7, #192	; 0xc0
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	ff20810f 	.word	0xff20810f
 80035a8:	f8de3f23 	.word	0xf8de3f23
 80035ac:	00010040 	.word	0x00010040

080035b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3305      	adds	r3, #5
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	3204      	adds	r2, #4
 80035c8:	7812      	ldrb	r2, [r2, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <ETH_MACAddressConfig+0x68>)
 80035d2:	4413      	add	r3, r2
 80035d4:	461a      	mov	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3303      	adds	r3, #3
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	061a      	lsls	r2, r3, #24
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3302      	adds	r3, #2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3301      	adds	r3, #1
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	4313      	orrs	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	7812      	ldrb	r2, [r2, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <ETH_MACAddressConfig+0x6c>)
 8003602:	4413      	add	r3, r2
 8003604:	461a      	mov	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	6013      	str	r3, [r2, #0]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40028040 	.word	0x40028040
 800361c:	40028044 	.word	0x40028044

08003620 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0208 	orr.w	r2, r2, #8
 800363a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003644:	2001      	movs	r0, #1
 8003646:	f7fe fdb9 	bl	80021bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0208 	bic.w	r2, r2, #8
 8003674:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800367e:	2001      	movs	r0, #1
 8003680:	f7fe fd9c 	bl	80021bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0204 	orr.w	r2, r2, #4
 80036ae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036b8:	2001      	movs	r0, #1
 80036ba:	f7fe fd7f 	bl	80021bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	601a      	str	r2, [r3, #0]
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0204 	bic.w	r2, r2, #4
 80036e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036f2:	2001      	movs	r0, #1
 80036f4:	f7fe fd62 	bl	80021bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	601a      	str	r2, [r3, #0]
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	f241 0318 	movw	r3, #4120	; 0x1018
 8003718:	4413      	add	r3, r2
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6811      	ldr	r1, [r2, #0]
 8003720:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003724:	f241 0318 	movw	r3, #4120	; 0x1018
 8003728:	440b      	add	r3, r1
 800372a:	601a      	str	r2, [r3, #0]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	f241 0318 	movw	r3, #4120	; 0x1018
 8003748:	4413      	add	r3, r2
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6811      	ldr	r1, [r2, #0]
 8003750:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003754:	f241 0318 	movw	r3, #4120	; 0x1018
 8003758:	440b      	add	r3, r1
 800375a:	601a      	str	r2, [r3, #0]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	f241 0318 	movw	r3, #4120	; 0x1018
 8003778:	4413      	add	r3, r2
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6811      	ldr	r1, [r2, #0]
 8003780:	f043 0202 	orr.w	r2, r3, #2
 8003784:	f241 0318 	movw	r3, #4120	; 0x1018
 8003788:	440b      	add	r3, r1
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80037a8:	4413      	add	r3, r2
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6811      	ldr	r1, [r2, #0]
 80037b0:	f023 0202 	bic.w	r2, r3, #2
 80037b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80037b8:	440b      	add	r3, r1
 80037ba:	601a      	str	r2, [r3, #0]
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80037dc:	4413      	add	r3, r2
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6811      	ldr	r1, [r2, #0]
 80037e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80037ec:	440b      	add	r3, r1
 80037ee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80037f8:	4413      	add	r3, r2
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037fe:	2001      	movs	r0, #1
 8003800:	f7fe fcdc 	bl	80021bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	f241 0318 	movw	r3, #4120	; 0x1018
 800380e:	440b      	add	r3, r1
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	e175      	b.n	8003b28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800383c:	2201      	movs	r2, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	429a      	cmp	r2, r3
 8003856:	f040 8164 	bne.w	8003b22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d005      	beq.n	8003872 <HAL_GPIO_Init+0x56>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d130      	bne.n	80038d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	2203      	movs	r2, #3
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038a8:	2201      	movs	r2, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 0201 	and.w	r2, r3, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d017      	beq.n	8003910 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d123      	bne.n	8003964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	08da      	lsrs	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3208      	adds	r2, #8
 8003924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	220f      	movs	r2, #15
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	08da      	lsrs	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3208      	adds	r2, #8
 800395e:	69b9      	ldr	r1, [r7, #24]
 8003960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80be 	beq.w	8003b22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a6:	4b66      	ldr	r3, [pc, #408]	; (8003b40 <HAL_GPIO_Init+0x324>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	4a65      	ldr	r2, [pc, #404]	; (8003b40 <HAL_GPIO_Init+0x324>)
 80039ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b0:	6453      	str	r3, [r2, #68]	; 0x44
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_GPIO_Init+0x324>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039be:	4a61      	ldr	r2, [pc, #388]	; (8003b44 <HAL_GPIO_Init+0x328>)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	089b      	lsrs	r3, r3, #2
 80039c4:	3302      	adds	r3, #2
 80039c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	220f      	movs	r2, #15
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a58      	ldr	r2, [pc, #352]	; (8003b48 <HAL_GPIO_Init+0x32c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d037      	beq.n	8003a5a <HAL_GPIO_Init+0x23e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a57      	ldr	r2, [pc, #348]	; (8003b4c <HAL_GPIO_Init+0x330>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d031      	beq.n	8003a56 <HAL_GPIO_Init+0x23a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <HAL_GPIO_Init+0x334>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d02b      	beq.n	8003a52 <HAL_GPIO_Init+0x236>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a55      	ldr	r2, [pc, #340]	; (8003b54 <HAL_GPIO_Init+0x338>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d025      	beq.n	8003a4e <HAL_GPIO_Init+0x232>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a54      	ldr	r2, [pc, #336]	; (8003b58 <HAL_GPIO_Init+0x33c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01f      	beq.n	8003a4a <HAL_GPIO_Init+0x22e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a53      	ldr	r2, [pc, #332]	; (8003b5c <HAL_GPIO_Init+0x340>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d019      	beq.n	8003a46 <HAL_GPIO_Init+0x22a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a52      	ldr	r2, [pc, #328]	; (8003b60 <HAL_GPIO_Init+0x344>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_GPIO_Init+0x226>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a51      	ldr	r2, [pc, #324]	; (8003b64 <HAL_GPIO_Init+0x348>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00d      	beq.n	8003a3e <HAL_GPIO_Init+0x222>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_GPIO_Init+0x34c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <HAL_GPIO_Init+0x21e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4f      	ldr	r2, [pc, #316]	; (8003b6c <HAL_GPIO_Init+0x350>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_GPIO_Init+0x21a>
 8003a32:	2309      	movs	r3, #9
 8003a34:	e012      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a36:	230a      	movs	r3, #10
 8003a38:	e010      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	e00e      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a3e:	2307      	movs	r3, #7
 8003a40:	e00c      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a42:	2306      	movs	r3, #6
 8003a44:	e00a      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a46:	2305      	movs	r3, #5
 8003a48:	e008      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e004      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e002      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_GPIO_Init+0x240>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	f002 0203 	and.w	r2, r2, #3
 8003a62:	0092      	lsls	r2, r2, #2
 8003a64:	4093      	lsls	r3, r2
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a6c:	4935      	ldr	r1, [pc, #212]	; (8003b44 <HAL_GPIO_Init+0x328>)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	3302      	adds	r3, #2
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <HAL_GPIO_Init+0x354>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a9e:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <HAL_GPIO_Init+0x354>)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_GPIO_Init+0x354>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac8:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <HAL_GPIO_Init+0x354>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ace:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_GPIO_Init+0x354>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <HAL_GPIO_Init+0x354>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_GPIO_Init+0x354>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <HAL_GPIO_Init+0x354>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3301      	adds	r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	f67f ae86 	bls.w	800383c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	3724      	adds	r7, #36	; 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40013800 	.word	0x40013800
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	40020800 	.word	0x40020800
 8003b54:	40020c00 	.word	0x40020c00
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40021400 	.word	0x40021400
 8003b60:	40021800 	.word	0x40021800
 8003b64:	40021c00 	.word	0x40021c00
 8003b68:	40022000 	.word	0x40022000
 8003b6c:	40022400 	.word	0x40022400
 8003b70:	40013c00 	.word	0x40013c00

08003b74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e0d9      	b.n	8003d44 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b90:	2201      	movs	r2, #1
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	f040 80c9 	bne.w	8003d3e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003bac:	4a6b      	ldr	r2, [pc, #428]	; (8003d5c <HAL_GPIO_DeInit+0x1e8>)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	220f      	movs	r2, #15
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a63      	ldr	r2, [pc, #396]	; (8003d60 <HAL_GPIO_DeInit+0x1ec>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d037      	beq.n	8003c46 <HAL_GPIO_DeInit+0xd2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a62      	ldr	r2, [pc, #392]	; (8003d64 <HAL_GPIO_DeInit+0x1f0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d031      	beq.n	8003c42 <HAL_GPIO_DeInit+0xce>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a61      	ldr	r2, [pc, #388]	; (8003d68 <HAL_GPIO_DeInit+0x1f4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02b      	beq.n	8003c3e <HAL_GPIO_DeInit+0xca>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a60      	ldr	r2, [pc, #384]	; (8003d6c <HAL_GPIO_DeInit+0x1f8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d025      	beq.n	8003c3a <HAL_GPIO_DeInit+0xc6>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a5f      	ldr	r2, [pc, #380]	; (8003d70 <HAL_GPIO_DeInit+0x1fc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01f      	beq.n	8003c36 <HAL_GPIO_DeInit+0xc2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a5e      	ldr	r2, [pc, #376]	; (8003d74 <HAL_GPIO_DeInit+0x200>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d019      	beq.n	8003c32 <HAL_GPIO_DeInit+0xbe>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a5d      	ldr	r2, [pc, #372]	; (8003d78 <HAL_GPIO_DeInit+0x204>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_GPIO_DeInit+0xba>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a5c      	ldr	r2, [pc, #368]	; (8003d7c <HAL_GPIO_DeInit+0x208>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00d      	beq.n	8003c2a <HAL_GPIO_DeInit+0xb6>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a5b      	ldr	r2, [pc, #364]	; (8003d80 <HAL_GPIO_DeInit+0x20c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <HAL_GPIO_DeInit+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a5a      	ldr	r2, [pc, #360]	; (8003d84 <HAL_GPIO_DeInit+0x210>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_GPIO_DeInit+0xae>
 8003c1e:	2309      	movs	r3, #9
 8003c20:	e012      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c22:	230a      	movs	r3, #10
 8003c24:	e010      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c26:	2308      	movs	r3, #8
 8003c28:	e00e      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c2a:	2307      	movs	r3, #7
 8003c2c:	e00c      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c2e:	2306      	movs	r3, #6
 8003c30:	e00a      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c32:	2305      	movs	r3, #5
 8003c34:	e008      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e006      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e004      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e002      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_GPIO_DeInit+0xd4>
 8003c46:	2300      	movs	r3, #0
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	f002 0203 	and.w	r2, r2, #3
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4093      	lsls	r3, r2
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d132      	bne.n	8003cbe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c58:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <HAL_GPIO_DeInit+0x214>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	4949      	ldr	r1, [pc, #292]	; (8003d88 <HAL_GPIO_DeInit+0x214>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c66:	4b48      	ldr	r3, [pc, #288]	; (8003d88 <HAL_GPIO_DeInit+0x214>)
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	4946      	ldr	r1, [pc, #280]	; (8003d88 <HAL_GPIO_DeInit+0x214>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003c74:	4b44      	ldr	r3, [pc, #272]	; (8003d88 <HAL_GPIO_DeInit+0x214>)
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	4942      	ldr	r1, [pc, #264]	; (8003d88 <HAL_GPIO_DeInit+0x214>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003c82:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <HAL_GPIO_DeInit+0x214>)
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	493f      	ldr	r1, [pc, #252]	; (8003d88 <HAL_GPIO_DeInit+0x214>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	220f      	movs	r2, #15
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003ca0:	4a2e      	ldr	r2, [pc, #184]	; (8003d5c <HAL_GPIO_DeInit+0x1e8>)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	3302      	adds	r3, #2
 8003ca8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	482a      	ldr	r0, [pc, #168]	; (8003d5c <HAL_GPIO_DeInit+0x1e8>)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	3302      	adds	r3, #2
 8003cba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2103      	movs	r1, #3
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	401a      	ands	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	08d2      	lsrs	r2, r2, #3
 8003cf4:	4019      	ands	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3208      	adds	r2, #8
 8003cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2103      	movs	r1, #3
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	401a      	ands	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2103      	movs	r1, #3
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	401a      	ands	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	3301      	adds	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	f67f af22 	bls.w	8003b90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40013800 	.word	0x40013800
 8003d60:	40020000 	.word	0x40020000
 8003d64:	40020400 	.word	0x40020400
 8003d68:	40020800 	.word	0x40020800
 8003d6c:	40020c00 	.word	0x40020c00
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40021400 	.word	0x40021400
 8003d78:	40021800 	.word	0x40021800
 8003d7c:	40021c00 	.word	0x40021c00
 8003d80:	40022000 	.word	0x40022000
 8003d84:	40022400 	.word	0x40022400
 8003d88:	40013c00 	.word	0x40013c00

08003d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d9c:	787b      	ldrb	r3, [r7, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003da8:	e003      	b.n	8003db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	041a      	lsls	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	619a      	str	r2, [r3, #24]
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003de2:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dee:	f7fe f9d9 	bl	80021a4 <HAL_GetTick>
 8003df2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003df4:	e009      	b.n	8003e0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003df6:	f7fe f9d5 	bl	80021a4 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e04:	d901      	bls.n	8003e0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e022      	b.n	8003e50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e0a:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e16:	d1ee      	bne.n	8003df6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e18:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e24:	f7fe f9be 	bl	80021a4 <HAL_GetTick>
 8003e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e2a:	e009      	b.n	8003e40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e2c:	f7fe f9ba 	bl	80021a4 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e3a:	d901      	bls.n	8003e40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e007      	b.n	8003e50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e4c:	d1ee      	bne.n	8003e2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40007000 	.word	0x40007000

08003e60 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7fe f99c 	bl	80021a4 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e067      	b.n	8003f48 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fc fd6b 	bl	8000968 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003e92:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fafd 	bl	8004496 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	021a      	lsls	r2, r3, #8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2120      	movs	r1, #32
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 faf5 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d135      	bne.n	8003f3e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_QSPI_Init+0xf0>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6852      	ldr	r2, [r2, #4]
 8003ee0:	0611      	lsls	r1, r2, #24
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68d2      	ldr	r2, [r2, #12]
 8003ee6:	4311      	orrs	r1, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	69d2      	ldr	r2, [r2, #28]
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6a12      	ldr	r2, [r2, #32]
 8003ef2:	4311      	orrs	r1, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <HAL_QSPI_Init+0xf4>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6912      	ldr	r2, [r2, #16]
 8003f0a:	0411      	lsls	r1, r2, #16
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6952      	ldr	r2, [r2, #20]
 8003f10:	4311      	orrs	r1, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6992      	ldr	r2, [r2, #24]
 8003f16:	4311      	orrs	r1, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003f46:	7afb      	ldrb	r3, [r7, #11]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	00ffff2f 	.word	0x00ffff2f
 8003f54:	ffe0f8fe 	.word	0xffe0f8fe

08003f58 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e016      	b.n	8003f98 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc fd84 	bl	8000a88 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7fe f8fa 	bl	80021a4 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_QSPI_Command+0x22>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e048      	b.n	8004054 <HAL_QSPI_Command+0xb4>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d137      	bne.n	8004046 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2200      	movs	r2, #0
 8003fec:	2120      	movs	r1, #32
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fa5f 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d125      	bne.n	800404a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003ffe:	2200      	movs	r2, #0
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fa8c 	bl	8004520 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2b00      	cmp	r3, #0
 800400e:	d115      	bne.n	800403c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2201      	movs	r2, #1
 8004018:	2102      	movs	r1, #2
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 fa49 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2202      	movs	r2, #2
 8004030:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800403a:	e006      	b.n	800404a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004044:	e001      	b.n	800404a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8004046:	2302      	movs	r3, #2
 8004048:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004052:	7dfb      	ldrb	r3, [r7, #23]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7fe f89a 	bl	80021a4 <HAL_GetTick>
 8004070:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3320      	adds	r3, #32
 8004078:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_QSPI_Transmit+0x2e>
 8004086:	2302      	movs	r3, #2
 8004088:	e07b      	b.n	8004182 <HAL_QSPI_Transmit+0x126>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d16a      	bne.n	8004174 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d05b      	beq.n	8004162 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2212      	movs	r2, #18
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80040de:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80040e0:	e01b      	b.n	800411a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2201      	movs	r2, #1
 80040ea:	2104      	movs	r1, #4
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f9e0 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d113      	bne.n	8004124 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	1e5a      	subs	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1df      	bne.n	80040e2 <HAL_QSPI_Transmit+0x86>
 8004122:	e000      	b.n	8004126 <HAL_QSPI_Transmit+0xca>
          break;
 8004124:	bf00      	nop
      }

      if (status == HAL_OK)
 8004126:	7ffb      	ldrb	r3, [r7, #31]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d115      	bne.n	8004158 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2201      	movs	r2, #1
 8004134:	2102      	movs	r1, #2
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f9bb 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d108      	bne.n	8004158 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2202      	movs	r2, #2
 800414c:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f934 	bl	80043bc <HAL_QSPI_Abort>
 8004154:	4603      	mov	r3, r0
 8004156:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004160:	e00a      	b.n	8004178 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	f043 0208 	orr.w	r2, r3, #8
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e001      	b.n	8004178 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8004174:	2302      	movs	r3, #2
 8004176:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8004180:	7ffb      	ldrb	r3, [r7, #31]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b08a      	sub	sp, #40	; 0x28
 800418e:	af02      	add	r7, sp, #8
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800419a:	f7fe f803 	bl	80021a4 <HAL_GetTick>
 800419e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3320      	adds	r3, #32
 80041ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_QSPI_Receive+0x36>
 80041bc:	2302      	movs	r3, #2
 80041be:	e082      	b.n	80042c6 <HAL_QSPI_Receive+0x13c>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d171      	bne.n	80042b8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d062      	beq.n	80042a6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2222      	movs	r2, #34	; 0x22
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004218:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8004222:	e01c      	b.n	800425e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2201      	movs	r2, #1
 800422c:	2106      	movs	r1, #6
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f93f 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d114      	bne.n	8004268 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004258:	1e5a      	subs	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1de      	bne.n	8004224 <HAL_QSPI_Receive+0x9a>
 8004266:	e000      	b.n	800426a <HAL_QSPI_Receive+0xe0>
          break;
 8004268:	bf00      	nop
      }

      if (status == HAL_OK)
 800426a:	7ffb      	ldrb	r3, [r7, #31]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d115      	bne.n	800429c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2201      	movs	r2, #1
 8004278:	2102      	movs	r1, #2
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f919 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8004284:	7ffb      	ldrb	r3, [r7, #31]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d108      	bne.n	800429c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2202      	movs	r2, #2
 8004290:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f892 	bl	80043bc <HAL_QSPI_Abort>
 8004298:	4603      	mov	r3, r0
 800429a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042a4:	e00a      	b.n	80042bc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f043 0208 	orr.w	r2, r3, #8
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e001      	b.n	80042bc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
 80042ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80042c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b088      	sub	sp, #32
 80042d2:	af02      	add	r7, sp, #8
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80042dc:	f7fd ff62 	bl	80021a4 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_QSPI_AutoPolling+0x24>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e060      	b.n	80043b4 <HAL_QSPI_AutoPolling+0xe6>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d14f      	bne.n	80043a6 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2242      	movs	r2, #66	; 0x42
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2200      	movs	r2, #0
 800431c:	2120      	movs	r1, #32
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f8c7 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d13d      	bne.n	80043aa <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6852      	ldr	r2, [r2, #4]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6892      	ldr	r2, [r2, #8]
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	431a      	orrs	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004364:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800436e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 f8d3 	bl	8004520 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2201      	movs	r2, #1
 8004382:	2108      	movs	r1, #8
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f894 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800438e:	7dfb      	ldrb	r3, [r7, #23]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2208      	movs	r2, #8
 800439a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a4:	e001      	b.n	80043aa <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
 80043a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80043c8:	f7fd feec 	bl	80021a4 <HAL_GetTick>
 80043cc:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d056      	beq.n	800448c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d017      	beq.n	8004424 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0204 	bic.w	r2, r2, #4
 8004402:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe f80c 	bl	8002426 <HAL_DMA_Abort>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	f043 0204 	orr.w	r2, r3, #4
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0202 	orr.w	r2, r2, #2
 8004432:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2201      	movs	r2, #1
 800443e:	2102      	movs	r1, #2
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f836 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10e      	bne.n	800446e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2202      	movs	r2, #2
 8004456:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2200      	movs	r2, #0
 8004462:	2120      	movs	r1, #32
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f824 	bl	80044b2 <QSPI_WaitFlagStateUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004482:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 800448c:	7bfb      	ldrb	r3, [r7, #15]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	649a      	str	r2, [r3, #72]	; 0x48
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80044c2:	e01a      	b.n	80044fa <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d016      	beq.n	80044fa <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fd fe6a 	bl	80021a4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2204      	movs	r2, #4
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	f043 0201 	orr.w	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00e      	b.n	8004518 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	461a      	mov	r2, r3
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	429a      	cmp	r2, r3
 8004514:	d1d6      	bne.n	80044c4 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	2b00      	cmp	r3, #0
 8004532:	d009      	beq.n	8004548 <QSPI_Config+0x28>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800453a:	d005      	beq.n	8004548 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3a01      	subs	r2, #1
 8004546:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80b9 	beq.w	80046c4 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d05f      	beq.n	800461a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	6892      	ldr	r2, [r2, #8]
 8004562:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d031      	beq.n	80045d0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	431a      	orrs	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	431a      	orrs	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	431a      	orrs	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	049b      	lsls	r3, r3, #18
 8004588:	431a      	orrs	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	431a      	orrs	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	431a      	orrs	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	431a      	orrs	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80045c0:	f000 812e 	beq.w	8004820 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	6852      	ldr	r2, [r2, #4]
 80045cc:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80045ce:	e127      	b.n	8004820 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	431a      	orrs	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	431a      	orrs	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	049b      	lsls	r3, r3, #18
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	431a      	orrs	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	431a      	orrs	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	ea42 0103 	orr.w	r1, r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	430a      	orrs	r2, r1
 8004616:	615a      	str	r2, [r3, #20]
}
 8004618:	e102      	b.n	8004820 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d02e      	beq.n	8004680 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	431a      	orrs	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	431a      	orrs	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	431a      	orrs	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	049b      	lsls	r3, r3, #18
 800463e:	431a      	orrs	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	431a      	orrs	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	431a      	orrs	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	431a      	orrs	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	431a      	orrs	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	ea42 0103 	orr.w	r1, r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	430a      	orrs	r2, r1
 8004668:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004670:	f000 80d6 	beq.w	8004820 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	6852      	ldr	r2, [r2, #4]
 800467c:	619a      	str	r2, [r3, #24]
}
 800467e:	e0cf      	b.n	8004820 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	431a      	orrs	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468e:	431a      	orrs	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	431a      	orrs	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	049b      	lsls	r3, r3, #18
 800469c:	431a      	orrs	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	ea42 0103 	orr.w	r1, r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	430a      	orrs	r2, r1
 80046c0:	615a      	str	r2, [r3, #20]
}
 80046c2:	e0ad      	b.n	8004820 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d058      	beq.n	800477e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	6892      	ldr	r2, [r2, #8]
 80046d4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d02d      	beq.n	800473a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	431a      	orrs	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	049b      	lsls	r3, r3, #18
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	431a      	orrs	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	431a      	orrs	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	431a      	orrs	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	431a      	orrs	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	ea42 0103 	orr.w	r1, r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	430a      	orrs	r2, r1
 8004724:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800472c:	d078      	beq.n	8004820 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	6852      	ldr	r2, [r2, #4]
 8004736:	619a      	str	r2, [r3, #24]
}
 8004738:	e072      	b.n	8004820 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	431a      	orrs	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004748:	431a      	orrs	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	431a      	orrs	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	049b      	lsls	r3, r3, #18
 8004756:	431a      	orrs	r2, r3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	431a      	orrs	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	431a      	orrs	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	431a      	orrs	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	ea42 0103 	orr.w	r1, r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	430a      	orrs	r2, r1
 800477a:	615a      	str	r2, [r3, #20]
}
 800477c:	e050      	b.n	8004820 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d02a      	beq.n	80047dc <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	431a      	orrs	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	431a      	orrs	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	431a      	orrs	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	049b      	lsls	r3, r3, #18
 80047a2:	431a      	orrs	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	ea42 0103 	orr.w	r1, r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047ce:	d027      	beq.n	8004820 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	6852      	ldr	r2, [r2, #4]
 80047d8:	619a      	str	r2, [r3, #24]
}
 80047da:	e021      	b.n	8004820 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01d      	beq.n	8004820 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f2:	431a      	orrs	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	431a      	orrs	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	049b      	lsls	r3, r3, #18
 8004800:	431a      	orrs	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	431a      	orrs	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	431a      	orrs	r2, r3
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	ea42 0103 	orr.w	r1, r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	430a      	orrs	r2, r1
 800481e:	615a      	str	r2, [r3, #20]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004834:	2300      	movs	r3, #0
 8004836:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e291      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8087 	beq.w	800495e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004850:	4b96      	ldr	r3, [pc, #600]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b04      	cmp	r3, #4
 800485a:	d00c      	beq.n	8004876 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485c:	4b93      	ldr	r3, [pc, #588]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 030c 	and.w	r3, r3, #12
 8004864:	2b08      	cmp	r3, #8
 8004866:	d112      	bne.n	800488e <HAL_RCC_OscConfig+0x62>
 8004868:	4b90      	ldr	r3, [pc, #576]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004874:	d10b      	bne.n	800488e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004876:	4b8d      	ldr	r3, [pc, #564]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d06c      	beq.n	800495c <HAL_RCC_OscConfig+0x130>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d168      	bne.n	800495c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e26b      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004896:	d106      	bne.n	80048a6 <HAL_RCC_OscConfig+0x7a>
 8004898:	4b84      	ldr	r3, [pc, #528]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a83      	ldr	r2, [pc, #524]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800489e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	e02e      	b.n	8004904 <HAL_RCC_OscConfig+0xd8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x9c>
 80048ae:	4b7f      	ldr	r3, [pc, #508]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a7e      	ldr	r2, [pc, #504]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	4b7c      	ldr	r3, [pc, #496]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7b      	ldr	r2, [pc, #492]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e01d      	b.n	8004904 <HAL_RCC_OscConfig+0xd8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0xc0>
 80048d2:	4b76      	ldr	r3, [pc, #472]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a75      	ldr	r2, [pc, #468]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b73      	ldr	r3, [pc, #460]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a72      	ldr	r2, [pc, #456]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e00b      	b.n	8004904 <HAL_RCC_OscConfig+0xd8>
 80048ec:	4b6f      	ldr	r3, [pc, #444]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a6e      	ldr	r2, [pc, #440]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	4b6c      	ldr	r3, [pc, #432]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a6b      	ldr	r2, [pc, #428]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80048fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d013      	beq.n	8004934 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fd fc4a 	bl	80021a4 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004914:	f7fd fc46 	bl	80021a4 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e21f      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0xe8>
 8004932:	e014      	b.n	800495e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fd fc36 	bl	80021a4 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fd fc32 	bl	80021a4 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e20b      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	4b57      	ldr	r3, [pc, #348]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x110>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d069      	beq.n	8004a3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800496a:	4b50      	ldr	r3, [pc, #320]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004976:	4b4d      	ldr	r3, [pc, #308]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b08      	cmp	r3, #8
 8004980:	d11c      	bne.n	80049bc <HAL_RCC_OscConfig+0x190>
 8004982:	4b4a      	ldr	r3, [pc, #296]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d116      	bne.n	80049bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_RCC_OscConfig+0x17a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e1df      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a6:	4b41      	ldr	r3, [pc, #260]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	493d      	ldr	r1, [pc, #244]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	e040      	b.n	8004a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d023      	beq.n	8004a0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c4:	4b39      	ldr	r3, [pc, #228]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a38      	ldr	r2, [pc, #224]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d0:	f7fd fbe8 	bl	80021a4 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d8:	f7fd fbe4 	bl	80021a4 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e1bd      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ea:	4b30      	ldr	r3, [pc, #192]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f6:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4929      	ldr	r1, [pc, #164]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	600b      	str	r3, [r1, #0]
 8004a0a:	e018      	b.n	8004a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a0c:	4b27      	ldr	r3, [pc, #156]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a26      	ldr	r2, [pc, #152]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fd fbc4 	bl	80021a4 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a20:	f7fd fbc0 	bl	80021a4 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e199      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a32:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d038      	beq.n	8004abc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d019      	beq.n	8004a86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a52:	4b16      	ldr	r3, [pc, #88]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a56:	4a15      	ldr	r2, [pc, #84]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5e:	f7fd fba1 	bl	80021a4 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a66:	f7fd fb9d 	bl	80021a4 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e176      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x23a>
 8004a84:	e01a      	b.n	8004abc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8a:	4a08      	ldr	r2, [pc, #32]	; (8004aac <HAL_RCC_OscConfig+0x280>)
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a92:	f7fd fb87 	bl	80021a4 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9a:	f7fd fb83 	bl	80021a4 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d903      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e15c      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
 8004aac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	4b91      	ldr	r3, [pc, #580]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ee      	bne.n	8004a9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a4 	beq.w	8004c12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aca:	4b8b      	ldr	r3, [pc, #556]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10d      	bne.n	8004af2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	4b88      	ldr	r3, [pc, #544]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	4a87      	ldr	r2, [pc, #540]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae2:	4b85      	ldr	r3, [pc, #532]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af2:	4b82      	ldr	r3, [pc, #520]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d118      	bne.n	8004b30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004afe:	4b7f      	ldr	r3, [pc, #508]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7e      	ldr	r2, [pc, #504]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0a:	f7fd fb4b 	bl	80021a4 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fd fb47 	bl	80021a4 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b64      	cmp	r3, #100	; 0x64
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e120      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b24:	4b75      	ldr	r3, [pc, #468]	; (8004cfc <HAL_RCC_OscConfig+0x4d0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x31a>
 8004b38:	4b6f      	ldr	r3, [pc, #444]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	4a6e      	ldr	r2, [pc, #440]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6713      	str	r3, [r2, #112]	; 0x70
 8004b44:	e02d      	b.n	8004ba2 <HAL_RCC_OscConfig+0x376>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x33c>
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a69      	ldr	r2, [pc, #420]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5a:	4b67      	ldr	r3, [pc, #412]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a66      	ldr	r2, [pc, #408]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
 8004b66:	e01c      	b.n	8004ba2 <HAL_RCC_OscConfig+0x376>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b05      	cmp	r3, #5
 8004b6e:	d10c      	bne.n	8004b8a <HAL_RCC_OscConfig+0x35e>
 8004b70:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a60      	ldr	r2, [pc, #384]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b76:	f043 0304 	orr.w	r3, r3, #4
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7c:	4b5e      	ldr	r3, [pc, #376]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4a5d      	ldr	r2, [pc, #372]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70
 8004b88:	e00b      	b.n	8004ba2 <HAL_RCC_OscConfig+0x376>
 8004b8a:	4b5b      	ldr	r3, [pc, #364]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	4a5a      	ldr	r2, [pc, #360]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	6713      	str	r3, [r2, #112]	; 0x70
 8004b96:	4b58      	ldr	r3, [pc, #352]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	4a57      	ldr	r2, [pc, #348]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004b9c:	f023 0304 	bic.w	r3, r3, #4
 8004ba0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d015      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fd fafb 	bl	80021a4 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fd faf7 	bl	80021a4 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e0ce      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ee      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x386>
 8004bd4:	e014      	b.n	8004c00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd6:	f7fd fae5 	bl	80021a4 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bde:	f7fd fae1 	bl	80021a4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e0b8      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf4:	4b40      	ldr	r3, [pc, #256]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ee      	bne.n	8004bde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c06:	4b3c      	ldr	r3, [pc, #240]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	4a3b      	ldr	r2, [pc, #236]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80a4 	beq.w	8004d64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c1c:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d06b      	beq.n	8004d00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d149      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c30:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a30      	ldr	r2, [pc, #192]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fd fab2 	bl	80021a4 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c44:	f7fd faae 	bl	80021a4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e087      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c56:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69da      	ldr	r2, [r3, #28]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	4313      	orrs	r3, r2
 8004c88:	4a1b      	ldr	r2, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fd fa82 	bl	80021a4 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fd fa7e 	bl	80021a4 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e057      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x478>
 8004cc2:	e04f      	b.n	8004d64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fd fa68 	bl	80021a4 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fd fa64 	bl	80021a4 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e03d      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <HAL_RCC_OscConfig+0x4cc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x4ac>
 8004cf6:	e035      	b.n	8004d64 <HAL_RCC_OscConfig+0x538>
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d00:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <HAL_RCC_OscConfig+0x544>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d028      	beq.n	8004d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d121      	bne.n	8004d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d11a      	bne.n	8004d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d30:	4013      	ands	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d111      	bne.n	8004d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	085b      	lsrs	r3, r3, #1
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800

08004d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0d0      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d8c:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d910      	bls.n	8004dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9a:	4b67      	ldr	r3, [pc, #412]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f023 020f 	bic.w	r2, r3, #15
 8004da2:	4965      	ldr	r1, [pc, #404]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	4b63      	ldr	r3, [pc, #396]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0b8      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d020      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dd4:	4b59      	ldr	r3, [pc, #356]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4a58      	ldr	r2, [pc, #352]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dec:	4b53      	ldr	r3, [pc, #332]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a52      	ldr	r2, [pc, #328]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004df6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df8:	4b50      	ldr	r3, [pc, #320]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	494d      	ldr	r1, [pc, #308]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d040      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d107      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	4b47      	ldr	r3, [pc, #284]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d115      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e07f      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e36:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e073      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e46:	4b3d      	ldr	r3, [pc, #244]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e06b      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e56:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f023 0203 	bic.w	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4936      	ldr	r1, [pc, #216]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e68:	f7fd f99c 	bl	80021a4 <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e70:	f7fd f998 	bl	80021a4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e053      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 020c 	and.w	r2, r3, #12
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d1eb      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e98:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d210      	bcs.n	8004ec8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b24      	ldr	r3, [pc, #144]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 020f 	bic.w	r2, r3, #15
 8004eae:	4922      	ldr	r1, [pc, #136]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e032      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4916      	ldr	r1, [pc, #88]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	490e      	ldr	r1, [pc, #56]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f06:	f000 f821 	bl	8004f4c <HAL_RCC_GetSysClockFreq>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	490a      	ldr	r1, [pc, #40]	; (8004f40 <HAL_RCC_ClockConfig+0x1cc>)
 8004f18:	5ccb      	ldrb	r3, [r1, r3]
 8004f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <HAL_RCC_ClockConfig+0x1d0>)
 8004f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <HAL_RCC_ClockConfig+0x1d4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd f8f8 	bl	800211c <HAL_InitTick>

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40023c00 	.word	0x40023c00
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	08015404 	.word	0x08015404
 8004f44:	20000000 	.word	0x20000000
 8004f48:	20000024 	.word	0x20000024

08004f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f4c:	b5b0      	push	{r4, r5, r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f52:	2100      	movs	r1, #0
 8004f54:	6079      	str	r1, [r7, #4]
 8004f56:	2100      	movs	r1, #0
 8004f58:	60f9      	str	r1, [r7, #12]
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004f5e:	2100      	movs	r1, #0
 8004f60:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f62:	4952      	ldr	r1, [pc, #328]	; (80050ac <HAL_RCC_GetSysClockFreq+0x160>)
 8004f64:	6889      	ldr	r1, [r1, #8]
 8004f66:	f001 010c 	and.w	r1, r1, #12
 8004f6a:	2908      	cmp	r1, #8
 8004f6c:	d00d      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0x3e>
 8004f6e:	2908      	cmp	r1, #8
 8004f70:	f200 8094 	bhi.w	800509c <HAL_RCC_GetSysClockFreq+0x150>
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_RCC_GetSysClockFreq+0x32>
 8004f78:	2904      	cmp	r1, #4
 8004f7a:	d003      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0x38>
 8004f7c:	e08e      	b.n	800509c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f7e:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f80:	60bb      	str	r3, [r7, #8]
      break;
 8004f82:	e08e      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f84:	4b4b      	ldr	r3, [pc, #300]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004f86:	60bb      	str	r3, [r7, #8]
      break;
 8004f88:	e08b      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f8a:	4948      	ldr	r1, [pc, #288]	; (80050ac <HAL_RCC_GetSysClockFreq+0x160>)
 8004f8c:	6849      	ldr	r1, [r1, #4]
 8004f8e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004f92:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f94:	4945      	ldr	r1, [pc, #276]	; (80050ac <HAL_RCC_GetSysClockFreq+0x160>)
 8004f96:	6849      	ldr	r1, [r1, #4]
 8004f98:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004f9c:	2900      	cmp	r1, #0
 8004f9e:	d024      	beq.n	8004fea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa0:	4942      	ldr	r1, [pc, #264]	; (80050ac <HAL_RCC_GetSysClockFreq+0x160>)
 8004fa2:	6849      	ldr	r1, [r1, #4]
 8004fa4:	0989      	lsrs	r1, r1, #6
 8004fa6:	4608      	mov	r0, r1
 8004fa8:	f04f 0100 	mov.w	r1, #0
 8004fac:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004fb0:	f04f 0500 	mov.w	r5, #0
 8004fb4:	ea00 0204 	and.w	r2, r0, r4
 8004fb8:	ea01 0305 	and.w	r3, r1, r5
 8004fbc:	493d      	ldr	r1, [pc, #244]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004fbe:	fb01 f003 	mul.w	r0, r1, r3
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	fb01 f102 	mul.w	r1, r1, r2
 8004fc8:	1844      	adds	r4, r0, r1
 8004fca:	493a      	ldr	r1, [pc, #232]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004fcc:	fba2 0101 	umull	r0, r1, r2, r1
 8004fd0:	1863      	adds	r3, r4, r1
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	f7fb f970 	bl	80002c0 <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e04a      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fea:	4b30      	ldr	r3, [pc, #192]	; (80050ac <HAL_RCC_GetSysClockFreq+0x160>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	099b      	lsrs	r3, r3, #6
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ffa:	f04f 0100 	mov.w	r1, #0
 8004ffe:	ea02 0400 	and.w	r4, r2, r0
 8005002:	ea03 0501 	and.w	r5, r3, r1
 8005006:	4620      	mov	r0, r4
 8005008:	4629      	mov	r1, r5
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	014b      	lsls	r3, r1, #5
 8005014:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005018:	0142      	lsls	r2, r0, #5
 800501a:	4610      	mov	r0, r2
 800501c:	4619      	mov	r1, r3
 800501e:	1b00      	subs	r0, r0, r4
 8005020:	eb61 0105 	sbc.w	r1, r1, r5
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	018b      	lsls	r3, r1, #6
 800502e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005032:	0182      	lsls	r2, r0, #6
 8005034:	1a12      	subs	r2, r2, r0
 8005036:	eb63 0301 	sbc.w	r3, r3, r1
 800503a:	f04f 0000 	mov.w	r0, #0
 800503e:	f04f 0100 	mov.w	r1, #0
 8005042:	00d9      	lsls	r1, r3, #3
 8005044:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005048:	00d0      	lsls	r0, r2, #3
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	1912      	adds	r2, r2, r4
 8005050:	eb45 0303 	adc.w	r3, r5, r3
 8005054:	f04f 0000 	mov.w	r0, #0
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	0299      	lsls	r1, r3, #10
 800505e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005062:	0290      	lsls	r0, r2, #10
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4610      	mov	r0, r2
 800506a:	4619      	mov	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	461a      	mov	r2, r3
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	f7fb f924 	bl	80002c0 <__aeabi_uldivmod>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4613      	mov	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <HAL_RCC_GetSysClockFreq+0x160>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	3301      	adds	r3, #1
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	60bb      	str	r3, [r7, #8]
      break;
 800509a:	e002      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800509c:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x164>)
 800509e:	60bb      	str	r3, [r7, #8]
      break;
 80050a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050a2:	68bb      	ldr	r3, [r7, #8]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bdb0      	pop	{r4, r5, r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	017d7840 	.word	0x017d7840

080050b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_GetHCLKFreq+0x14>)
 80050be:	681b      	ldr	r3, [r3, #0]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	20000000 	.word	0x20000000

080050d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e049      	b.n	8005176 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc ffac 	bl	8002054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f000 fa46 	bl	80055a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d122      	bne.n	80051da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d11b      	bne.n	80051da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f06f 0202 	mvn.w	r2, #2
 80051aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f9cf 	bl	8005564 <HAL_TIM_IC_CaptureCallback>
 80051c6:	e005      	b.n	80051d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f9c1 	bl	8005550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f9d2 	bl	8005578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d122      	bne.n	800522e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d11b      	bne.n	800522e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f06f 0204 	mvn.w	r2, #4
 80051fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f9a5 	bl	8005564 <HAL_TIM_IC_CaptureCallback>
 800521a:	e005      	b.n	8005228 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f997 	bl	8005550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f9a8 	bl	8005578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b08      	cmp	r3, #8
 800523a:	d122      	bne.n	8005282 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b08      	cmp	r3, #8
 8005248:	d11b      	bne.n	8005282 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f06f 0208 	mvn.w	r2, #8
 8005252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2204      	movs	r2, #4
 8005258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f97b 	bl	8005564 <HAL_TIM_IC_CaptureCallback>
 800526e:	e005      	b.n	800527c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f96d 	bl	8005550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f97e 	bl	8005578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b10      	cmp	r3, #16
 800528e:	d122      	bne.n	80052d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b10      	cmp	r3, #16
 800529c:	d11b      	bne.n	80052d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f06f 0210 	mvn.w	r2, #16
 80052a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2208      	movs	r2, #8
 80052ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f951 	bl	8005564 <HAL_TIM_IC_CaptureCallback>
 80052c2:	e005      	b.n	80052d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f943 	bl	8005550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f954 	bl	8005578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d10e      	bne.n	8005302 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d107      	bne.n	8005302 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f06f 0201 	mvn.w	r2, #1
 80052fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7fb fae1 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	d10e      	bne.n	800532e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d107      	bne.n	800532e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fb0b 	bl	8005944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	2b80      	cmp	r3, #128	; 0x80
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fafe 	bl	8005958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b40      	cmp	r3, #64	; 0x40
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f902 	bl	800558c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b20      	cmp	r3, #32
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0220 	mvn.w	r2, #32
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fabe 	bl	8005930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIM_ConfigClockSource+0x1c>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e0b4      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x186>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	4b56      	ldr	r3, [pc, #344]	; (800554c <HAL_TIM_ConfigClockSource+0x190>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005410:	d03e      	beq.n	8005490 <HAL_TIM_ConfigClockSource+0xd4>
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005416:	f200 8087 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	f000 8086 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x172>
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	d87f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b70      	cmp	r3, #112	; 0x70
 800542a:	d01a      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0xa6>
 800542c:	2b70      	cmp	r3, #112	; 0x70
 800542e:	d87b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b60      	cmp	r3, #96	; 0x60
 8005432:	d050      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x11a>
 8005434:	2b60      	cmp	r3, #96	; 0x60
 8005436:	d877      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005438:	2b50      	cmp	r3, #80	; 0x50
 800543a:	d03c      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0xfa>
 800543c:	2b50      	cmp	r3, #80	; 0x50
 800543e:	d873      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d058      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x13a>
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d86f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005448:	2b30      	cmp	r3, #48	; 0x30
 800544a:	d064      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	d86b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d060      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d867      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d05c      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 800545c:	2b10      	cmp	r3, #16
 800545e:	d05a      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x15a>
 8005460:	e062      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6899      	ldr	r1, [r3, #8]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f000 f9af 	bl	80057d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
      break;
 800548e:	e04f      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6899      	ldr	r1, [r3, #8]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f000 f998 	bl	80057d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b2:	609a      	str	r2, [r3, #8]
      break;
 80054b4:	e03c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 f90c 	bl	80056e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2150      	movs	r1, #80	; 0x50
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f965 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 80054d4:	e02c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6859      	ldr	r1, [r3, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f000 f92b 	bl	800573e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2160      	movs	r1, #96	; 0x60
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f955 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 80054f4:	e01c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6859      	ldr	r1, [r3, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	461a      	mov	r2, r3
 8005504:	f000 f8ec 	bl	80056e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2140      	movs	r1, #64	; 0x40
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f945 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005514:	e00c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f000 f93c 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005526:	e003      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
      break;
 800552c:	e000      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800552e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	fffeff88 	.word	0xfffeff88

08005550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a40      	ldr	r2, [pc, #256]	; (80056b4 <TIM_Base_SetConfig+0x114>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d013      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055be:	d00f      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3d      	ldr	r2, [pc, #244]	; (80056b8 <TIM_Base_SetConfig+0x118>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a3c      	ldr	r2, [pc, #240]	; (80056bc <TIM_Base_SetConfig+0x11c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a3b      	ldr	r2, [pc, #236]	; (80056c0 <TIM_Base_SetConfig+0x120>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a3a      	ldr	r2, [pc, #232]	; (80056c4 <TIM_Base_SetConfig+0x124>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d108      	bne.n	80055f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2f      	ldr	r2, [pc, #188]	; (80056b4 <TIM_Base_SetConfig+0x114>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d02b      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005600:	d027      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <TIM_Base_SetConfig+0x118>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d023      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2b      	ldr	r2, [pc, #172]	; (80056bc <TIM_Base_SetConfig+0x11c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01f      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2a      	ldr	r2, [pc, #168]	; (80056c0 <TIM_Base_SetConfig+0x120>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01b      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a29      	ldr	r2, [pc, #164]	; (80056c4 <TIM_Base_SetConfig+0x124>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d017      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a28      	ldr	r2, [pc, #160]	; (80056c8 <TIM_Base_SetConfig+0x128>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a27      	ldr	r2, [pc, #156]	; (80056cc <TIM_Base_SetConfig+0x12c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00f      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a26      	ldr	r2, [pc, #152]	; (80056d0 <TIM_Base_SetConfig+0x130>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00b      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a25      	ldr	r2, [pc, #148]	; (80056d4 <TIM_Base_SetConfig+0x134>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d007      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a24      	ldr	r2, [pc, #144]	; (80056d8 <TIM_Base_SetConfig+0x138>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a23      	ldr	r2, [pc, #140]	; (80056dc <TIM_Base_SetConfig+0x13c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d108      	bne.n	8005664 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <TIM_Base_SetConfig+0x114>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_Base_SetConfig+0xf8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <TIM_Base_SetConfig+0x124>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d103      	bne.n	80056a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	615a      	str	r2, [r3, #20]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40010400 	.word	0x40010400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800
 80056d4:	40001800 	.word	0x40001800
 80056d8:	40001c00 	.word	0x40001c00
 80056dc:	40002000 	.word	0x40002000

080056e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 030a 	bic.w	r3, r3, #10
 800571c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573e:	b480      	push	{r7}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0210 	bic.w	r2, r3, #16
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	031b      	lsls	r3, r3, #12
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800577a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f043 0307 	orr.w	r3, r3, #7
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	609a      	str	r2, [r3, #8]
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	021a      	lsls	r2, r3, #8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	609a      	str	r2, [r3, #8]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005828:	2302      	movs	r3, #2
 800582a:	e06d      	b.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a30      	ldr	r2, [pc, #192]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a2f      	ldr	r2, [pc, #188]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005866:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005878:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a20      	ldr	r2, [pc, #128]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d022      	beq.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589e:	d01d      	beq.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1d      	ldr	r2, [pc, #116]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d018      	beq.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d013      	beq.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00e      	beq.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d009      	beq.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a16      	ldr	r2, [pc, #88]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a15      	ldr	r2, [pc, #84]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d10c      	bne.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40010000 	.word	0x40010000
 8005918:	40010400 	.word	0x40010400
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800
 8005924:	40000c00 	.word	0x40000c00
 8005928:	40014000 	.word	0x40014000
 800592c:	40001800 	.word	0x40001800

08005930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005972:	4b8d      	ldr	r3, [pc, #564]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005974:	22c0      	movs	r2, #192	; 0xc0
 8005976:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005978:	4b8b      	ldr	r3, [pc, #556]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 800597a:	22a8      	movs	r2, #168	; 0xa8
 800597c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800597e:	4b8a      	ldr	r3, [pc, #552]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005980:	2200      	movs	r2, #0
 8005982:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8005984:	4b88      	ldr	r3, [pc, #544]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005986:	227b      	movs	r2, #123	; 0x7b
 8005988:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800598a:	4b88      	ldr	r3, [pc, #544]	; (8005bac <MX_LWIP_Init+0x240>)
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005990:	4b86      	ldr	r3, [pc, #536]	; (8005bac <MX_LWIP_Init+0x240>)
 8005992:	22ff      	movs	r2, #255	; 0xff
 8005994:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005996:	4b85      	ldr	r3, [pc, #532]	; (8005bac <MX_LWIP_Init+0x240>)
 8005998:	22ff      	movs	r2, #255	; 0xff
 800599a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800599c:	4b83      	ldr	r3, [pc, #524]	; (8005bac <MX_LWIP_Init+0x240>)
 800599e:	2200      	movs	r2, #0
 80059a0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80059a2:	4b83      	ldr	r3, [pc, #524]	; (8005bb0 <MX_LWIP_Init+0x244>)
 80059a4:	22c0      	movs	r2, #192	; 0xc0
 80059a6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80059a8:	4b81      	ldr	r3, [pc, #516]	; (8005bb0 <MX_LWIP_Init+0x244>)
 80059aa:	22a8      	movs	r2, #168	; 0xa8
 80059ac:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80059ae:	4b80      	ldr	r3, [pc, #512]	; (8005bb0 <MX_LWIP_Init+0x244>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80059b4:	4b7e      	ldr	r3, [pc, #504]	; (8005bb0 <MX_LWIP_Init+0x244>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80059ba:	f000 fcb5 	bl	8006328 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80059be:	4b7a      	ldr	r3, [pc, #488]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	061a      	lsls	r2, r3, #24
 80059c4:	4b78      	ldr	r3, [pc, #480]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	041b      	lsls	r3, r3, #16
 80059ca:	431a      	orrs	r2, r3
 80059cc:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 80059ce:	789b      	ldrb	r3, [r3, #2]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	4313      	orrs	r3, r2
 80059d4:	4a74      	ldr	r2, [pc, #464]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 80059d6:	78d2      	ldrb	r2, [r2, #3]
 80059d8:	4313      	orrs	r3, r2
 80059da:	061a      	lsls	r2, r3, #24
 80059dc:	4b72      	ldr	r3, [pc, #456]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	0619      	lsls	r1, r3, #24
 80059e2:	4b71      	ldr	r3, [pc, #452]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	4319      	orrs	r1, r3
 80059ea:	4b6f      	ldr	r3, [pc, #444]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 80059ec:	789b      	ldrb	r3, [r3, #2]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	430b      	orrs	r3, r1
 80059f2:	496d      	ldr	r1, [pc, #436]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 80059f4:	78c9      	ldrb	r1, [r1, #3]
 80059f6:	430b      	orrs	r3, r1
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059fe:	431a      	orrs	r2, r3
 8005a00:	4b69      	ldr	r3, [pc, #420]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	0619      	lsls	r1, r3, #24
 8005a06:	4b68      	ldr	r3, [pc, #416]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	041b      	lsls	r3, r3, #16
 8005a0c:	4319      	orrs	r1, r3
 8005a0e:	4b66      	ldr	r3, [pc, #408]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005a10:	789b      	ldrb	r3, [r3, #2]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	430b      	orrs	r3, r1
 8005a16:	4964      	ldr	r1, [pc, #400]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005a18:	78c9      	ldrb	r1, [r1, #3]
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	0a1b      	lsrs	r3, r3, #8
 8005a1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a22:	431a      	orrs	r2, r3
 8005a24:	4b60      	ldr	r3, [pc, #384]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	0619      	lsls	r1, r3, #24
 8005a2a:	4b5f      	ldr	r3, [pc, #380]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	4319      	orrs	r1, r3
 8005a32:	4b5d      	ldr	r3, [pc, #372]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005a34:	789b      	ldrb	r3, [r3, #2]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	495b      	ldr	r1, [pc, #364]	; (8005ba8 <MX_LWIP_Init+0x23c>)
 8005a3c:	78c9      	ldrb	r1, [r1, #3]
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	0e1b      	lsrs	r3, r3, #24
 8005a42:	4313      	orrs	r3, r2
 8005a44:	4a5b      	ldr	r2, [pc, #364]	; (8005bb4 <MX_LWIP_Init+0x248>)
 8005a46:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005a48:	4b58      	ldr	r3, [pc, #352]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	061a      	lsls	r2, r3, #24
 8005a4e:	4b57      	ldr	r3, [pc, #348]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	431a      	orrs	r2, r3
 8005a56:	4b55      	ldr	r3, [pc, #340]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a58:	789b      	ldrb	r3, [r3, #2]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	4a53      	ldr	r2, [pc, #332]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a60:	78d2      	ldrb	r2, [r2, #3]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	061a      	lsls	r2, r3, #24
 8005a66:	4b51      	ldr	r3, [pc, #324]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	0619      	lsls	r1, r3, #24
 8005a6c:	4b4f      	ldr	r3, [pc, #316]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	4319      	orrs	r1, r3
 8005a74:	4b4d      	ldr	r3, [pc, #308]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a76:	789b      	ldrb	r3, [r3, #2]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	494b      	ldr	r1, [pc, #300]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a7e:	78c9      	ldrb	r1, [r1, #3]
 8005a80:	430b      	orrs	r3, r1
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	4b48      	ldr	r3, [pc, #288]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	0619      	lsls	r1, r3, #24
 8005a90:	4b46      	ldr	r3, [pc, #280]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	041b      	lsls	r3, r3, #16
 8005a96:	4319      	orrs	r1, r3
 8005a98:	4b44      	ldr	r3, [pc, #272]	; (8005bac <MX_LWIP_Init+0x240>)
 8005a9a:	789b      	ldrb	r3, [r3, #2]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	430b      	orrs	r3, r1
 8005aa0:	4942      	ldr	r1, [pc, #264]	; (8005bac <MX_LWIP_Init+0x240>)
 8005aa2:	78c9      	ldrb	r1, [r1, #3]
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005aac:	431a      	orrs	r2, r3
 8005aae:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <MX_LWIP_Init+0x240>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	0619      	lsls	r1, r3, #24
 8005ab4:	4b3d      	ldr	r3, [pc, #244]	; (8005bac <MX_LWIP_Init+0x240>)
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	041b      	lsls	r3, r3, #16
 8005aba:	4319      	orrs	r1, r3
 8005abc:	4b3b      	ldr	r3, [pc, #236]	; (8005bac <MX_LWIP_Init+0x240>)
 8005abe:	789b      	ldrb	r3, [r3, #2]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	4939      	ldr	r1, [pc, #228]	; (8005bac <MX_LWIP_Init+0x240>)
 8005ac6:	78c9      	ldrb	r1, [r1, #3]
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	0e1b      	lsrs	r3, r3, #24
 8005acc:	4313      	orrs	r3, r2
 8005ace:	4a3a      	ldr	r2, [pc, #232]	; (8005bb8 <MX_LWIP_Init+0x24c>)
 8005ad0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005ad2:	4b37      	ldr	r3, [pc, #220]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	061a      	lsls	r2, r3, #24
 8005ad8:	4b35      	ldr	r3, [pc, #212]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	041b      	lsls	r3, r3, #16
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	4b33      	ldr	r3, [pc, #204]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005ae2:	789b      	ldrb	r3, [r3, #2]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	4a31      	ldr	r2, [pc, #196]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005aea:	78d2      	ldrb	r2, [r2, #3]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	061a      	lsls	r2, r3, #24
 8005af0:	4b2f      	ldr	r3, [pc, #188]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	0619      	lsls	r1, r3, #24
 8005af6:	4b2e      	ldr	r3, [pc, #184]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	041b      	lsls	r3, r3, #16
 8005afc:	4319      	orrs	r1, r3
 8005afe:	4b2c      	ldr	r3, [pc, #176]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b00:	789b      	ldrb	r3, [r3, #2]
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	430b      	orrs	r3, r1
 8005b06:	492a      	ldr	r1, [pc, #168]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b08:	78c9      	ldrb	r1, [r1, #3]
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b12:	431a      	orrs	r2, r3
 8005b14:	4b26      	ldr	r3, [pc, #152]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	0619      	lsls	r1, r3, #24
 8005b1a:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	041b      	lsls	r3, r3, #16
 8005b20:	4319      	orrs	r1, r3
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b24:	789b      	ldrb	r3, [r3, #2]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	4921      	ldr	r1, [pc, #132]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b2c:	78c9      	ldrb	r1, [r1, #3]
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	0a1b      	lsrs	r3, r3, #8
 8005b32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b36:	431a      	orrs	r2, r3
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	0619      	lsls	r1, r3, #24
 8005b3e:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	4319      	orrs	r1, r3
 8005b46:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b48:	789b      	ldrb	r3, [r3, #2]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	4918      	ldr	r1, [pc, #96]	; (8005bb0 <MX_LWIP_Init+0x244>)
 8005b50:	78c9      	ldrb	r1, [r1, #3]
 8005b52:	430b      	orrs	r3, r1
 8005b54:	0e1b      	lsrs	r3, r3, #24
 8005b56:	4313      	orrs	r3, r2
 8005b58:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <MX_LWIP_Init+0x250>)
 8005b5a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005b5c:	4b18      	ldr	r3, [pc, #96]	; (8005bc0 <MX_LWIP_Init+0x254>)
 8005b5e:	9302      	str	r3, [sp, #8]
 8005b60:	4b18      	ldr	r3, [pc, #96]	; (8005bc4 <MX_LWIP_Init+0x258>)
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	2300      	movs	r3, #0
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <MX_LWIP_Init+0x250>)
 8005b6a:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <MX_LWIP_Init+0x24c>)
 8005b6c:	4911      	ldr	r1, [pc, #68]	; (8005bb4 <MX_LWIP_Init+0x248>)
 8005b6e:	4816      	ldr	r0, [pc, #88]	; (8005bc8 <MX_LWIP_Init+0x25c>)
 8005b70:	f001 f880 	bl	8006c74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005b74:	4814      	ldr	r0, [pc, #80]	; (8005bc8 <MX_LWIP_Init+0x25c>)
 8005b76:	f001 fa2f 	bl	8006fd8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <MX_LWIP_Init+0x25c>)
 8005b7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b80:	089b      	lsrs	r3, r3, #2
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005b8c:	480e      	ldr	r0, [pc, #56]	; (8005bc8 <MX_LWIP_Init+0x25c>)
 8005b8e:	f001 fa33 	bl	8006ff8 <netif_set_up>
 8005b92:	e002      	b.n	8005b9a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005b94:	480c      	ldr	r0, [pc, #48]	; (8005bc8 <MX_LWIP_Init+0x25c>)
 8005b96:	f001 fa9b 	bl	80070d0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005b9a:	490c      	ldr	r1, [pc, #48]	; (8005bcc <MX_LWIP_Init+0x260>)
 8005b9c:	480a      	ldr	r0, [pc, #40]	; (8005bc8 <MX_LWIP_Init+0x25c>)
 8005b9e:	f001 fac9 	bl	8007134 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005ba2:	bf00      	nop
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20000340 	.word	0x20000340
 8005bac:	2000033c 	.word	0x2000033c
 8005bb0:	20000334 	.word	0x20000334
 8005bb4:	20000338 	.word	0x20000338
 8005bb8:	20000344 	.word	0x20000344
 8005bbc:	20000348 	.word	0x20000348
 8005bc0:	08011295 	.word	0x08011295
 8005bc4:	08006155 	.word	0x08006155
 8005bc8:	20000254 	.word	0x20000254
 8005bcc:	080061c1 	.word	0x080061c1

08005bd0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08e      	sub	sp, #56	; 0x38
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	609a      	str	r2, [r3, #8]
 8005be4:	60da      	str	r2, [r3, #12]
 8005be6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a44      	ldr	r2, [pc, #272]	; (8005d00 <HAL_ETH_MspInit+0x130>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	f040 8081 	bne.w	8005cf6 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005bf4:	4b43      	ldr	r3, [pc, #268]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	4a42      	ldr	r2, [pc, #264]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8005c00:	4b40      	ldr	r3, [pc, #256]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	4b3d      	ldr	r3, [pc, #244]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c16:	6313      	str	r3, [r2, #48]	; 0x30
 8005c18:	4b3a      	ldr	r3, [pc, #232]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4b37      	ldr	r3, [pc, #220]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	4a36      	ldr	r2, [pc, #216]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c30:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c3c:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	4a30      	ldr	r2, [pc, #192]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c46:	6313      	str	r3, [r2, #48]	; 0x30
 8005c48:	4b2e      	ldr	r3, [pc, #184]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c54:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c5a:	f043 0304 	orr.w	r3, r3, #4
 8005c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c60:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c6c:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c70:	4a24      	ldr	r2, [pc, #144]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c72:	f043 0301 	orr.w	r3, r3, #1
 8005c76:	6313      	str	r3, [r2, #48]	; 0x30
 8005c78:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <HAL_ETH_MspInit+0x134>)
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8005c84:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c92:	2303      	movs	r3, #3
 8005c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c96:	230b      	movs	r3, #11
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4819      	ldr	r0, [pc, #100]	; (8005d08 <HAL_ETH_MspInit+0x138>)
 8005ca2:	f7fd fdbb 	bl	800381c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005ca6:	2332      	movs	r3, #50	; 0x32
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005caa:	2302      	movs	r3, #2
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cb6:	230b      	movs	r3, #11
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4812      	ldr	r0, [pc, #72]	; (8005d0c <HAL_ETH_MspInit+0x13c>)
 8005cc2:	f7fd fdab 	bl	800381c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005cc6:	2386      	movs	r3, #134	; 0x86
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005cd6:	230b      	movs	r3, #11
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cde:	4619      	mov	r1, r3
 8005ce0:	480b      	ldr	r0, [pc, #44]	; (8005d10 <HAL_ETH_MspInit+0x140>)
 8005ce2:	f7fd fd9b 	bl	800381c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2100      	movs	r1, #0
 8005cea:	203d      	movs	r0, #61	; 0x3d
 8005cec:	f7fc fb65 	bl	80023ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005cf0:	203d      	movs	r0, #61	; 0x3d
 8005cf2:	f7fc fb7e 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005cf6:	bf00      	nop
 8005cf8:	3738      	adds	r7, #56	; 0x38
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40028000 	.word	0x40028000
 8005d04:	40023800 	.word	0x40023800
 8005d08:	40021800 	.word	0x40021800
 8005d0c:	40020800 	.word	0x40020800
 8005d10:	40020000 	.word	0x40020000

08005d14 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005d20:	4b4d      	ldr	r3, [pc, #308]	; (8005e58 <low_level_init+0x144>)
 8005d22:	4a4e      	ldr	r2, [pc, #312]	; (8005e5c <low_level_init+0x148>)
 8005d24:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005d26:	4b4c      	ldr	r3, [pc, #304]	; (8005e58 <low_level_init+0x144>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005d2c:	4b4a      	ldr	r3, [pc, #296]	; (8005e58 <low_level_init+0x144>)
 8005d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d32:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005d34:	4b48      	ldr	r3, [pc, #288]	; (8005e58 <low_level_init+0x144>)
 8005d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d3a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005d3c:	4b46      	ldr	r3, [pc, #280]	; (8005e58 <low_level_init+0x144>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005d42:	2300      	movs	r3, #0
 8005d44:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005d46:	2380      	movs	r3, #128	; 0x80
 8005d48:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005d4a:	23e1      	movs	r3, #225	; 0xe1
 8005d4c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005d52:	2300      	movs	r3, #0
 8005d54:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005d56:	2300      	movs	r3, #0
 8005d58:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005d5a:	4a3f      	ldr	r2, [pc, #252]	; (8005e58 <low_level_init+0x144>)
 8005d5c:	f107 0308 	add.w	r3, r7, #8
 8005d60:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005d62:	4b3d      	ldr	r3, [pc, #244]	; (8005e58 <low_level_init+0x144>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005d68:	4b3b      	ldr	r3, [pc, #236]	; (8005e58 <low_level_init+0x144>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005d6e:	4b3a      	ldr	r3, [pc, #232]	; (8005e58 <low_level_init+0x144>)
 8005d70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005d74:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005d76:	4838      	ldr	r0, [pc, #224]	; (8005e58 <low_level_init+0x144>)
 8005d78:	f7fc fbc6 	bl	8002508 <HAL_ETH_Init>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d108      	bne.n	8005d98 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d8c:	f043 0304 	orr.w	r3, r3, #4
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005d98:	2304      	movs	r3, #4
 8005d9a:	4a31      	ldr	r2, [pc, #196]	; (8005e60 <low_level_init+0x14c>)
 8005d9c:	4931      	ldr	r1, [pc, #196]	; (8005e64 <low_level_init+0x150>)
 8005d9e:	482e      	ldr	r0, [pc, #184]	; (8005e58 <low_level_init+0x144>)
 8005da0:	f7fc fd4c 	bl	800283c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005da4:	2304      	movs	r3, #4
 8005da6:	4a30      	ldr	r2, [pc, #192]	; (8005e68 <low_level_init+0x154>)
 8005da8:	4930      	ldr	r1, [pc, #192]	; (8005e6c <low_level_init+0x158>)
 8005daa:	482b      	ldr	r0, [pc, #172]	; (8005e58 <low_level_init+0x144>)
 8005dac:	f7fc fdaf 	bl	800290e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2206      	movs	r2, #6
 8005db4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005db8:	4b27      	ldr	r3, [pc, #156]	; (8005e58 <low_level_init+0x144>)
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	781a      	ldrb	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005dc4:	4b24      	ldr	r3, [pc, #144]	; (8005e58 <low_level_init+0x144>)
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	785a      	ldrb	r2, [r3, #1]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005dd0:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <low_level_init+0x144>)
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	789a      	ldrb	r2, [r3, #2]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ddc:	4b1e      	ldr	r3, [pc, #120]	; (8005e58 <low_level_init+0x144>)
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	78da      	ldrb	r2, [r3, #3]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005de8:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <low_level_init+0x144>)
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	791a      	ldrb	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005df4:	4b18      	ldr	r3, [pc, #96]	; (8005e58 <low_level_init+0x144>)
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	795a      	ldrb	r2, [r3, #5]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005e06:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e0e:	f043 030a 	orr.w	r3, r3, #10
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005e1a:	480f      	ldr	r0, [pc, #60]	; (8005e58 <low_level_init+0x144>)
 8005e1c:	f7fd f8a5 	bl	8002f6a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005e20:	f107 0310 	add.w	r3, r7, #16
 8005e24:	461a      	mov	r2, r3
 8005e26:	211d      	movs	r1, #29
 8005e28:	480b      	ldr	r0, [pc, #44]	; (8005e58 <low_level_init+0x144>)
 8005e2a:	f7fc ffd0 	bl	8002dce <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f043 030b 	orr.w	r3, r3, #11
 8005e34:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	211d      	movs	r1, #29
 8005e3c:	4806      	ldr	r0, [pc, #24]	; (8005e58 <low_level_init+0x144>)
 8005e3e:	f7fd f82e 	bl	8002e9e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005e42:	f107 0310 	add.w	r3, r7, #16
 8005e46:	461a      	mov	r2, r3
 8005e48:	211d      	movs	r1, #29
 8005e4a:	4803      	ldr	r0, [pc, #12]	; (8005e58 <low_level_init+0x144>)
 8005e4c:	f7fc ffbf 	bl	8002dce <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005e50:	bf00      	nop
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20001c1c 	.word	0x20001c1c
 8005e5c:	40028000 	.word	0x40028000
 8005e60:	20001c64 	.word	0x20001c64
 8005e64:	2000034c 	.word	0x2000034c
 8005e68:	200003cc 	.word	0x200003cc
 8005e6c:	20001b9c 	.word	0x20001b9c

08005e70 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005e7a:	4b4b      	ldr	r3, [pc, #300]	; (8005fa8 <low_level_output+0x138>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005e86:	2300      	movs	r3, #0
 8005e88:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005e92:	4b45      	ldr	r3, [pc, #276]	; (8005fa8 <low_level_output+0x138>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	e05a      	b.n	8005f58 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da03      	bge.n	8005eb2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005eaa:	23f8      	movs	r3, #248	; 0xf8
 8005eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005eb0:	e05c      	b.n	8005f6c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	895b      	ldrh	r3, [r3, #10]
 8005eb6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005ebc:	e02f      	b.n	8005f1e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	18d0      	adds	r0, r2, r3
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	18d1      	adds	r1, r2, r3
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f00b fae5 	bl	80114a4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	da03      	bge.n	8005ef0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005ee8:	23f8      	movs	r3, #248	; 0xf8
 8005eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005eee:	e03d      	b.n	8005f6c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005f00:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005f0c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005f18:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d8c8      	bhi.n	8005ebe <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	18d0      	adds	r0, r2, r3
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4413      	add	r3, r2
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f00b fab1 	bl	80114a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	623b      	str	r3, [r7, #32]
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1a1      	bne.n	8005ea2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	4811      	ldr	r0, [pc, #68]	; (8005fa8 <low_level_output+0x138>)
 8005f62:	f7fc fd41 	bl	80029e8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005f6c:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <low_level_output+0x138>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	f241 0314 	movw	r3, #4116	; 0x1014
 8005f74:	4413      	add	r3, r2
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00d      	beq.n	8005f9c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <low_level_output+0x138>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	f241 0314 	movw	r3, #4116	; 0x1014
 8005f88:	4413      	add	r3, r2
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <low_level_output+0x138>)
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	f241 0304 	movw	r3, #4100	; 0x1004
 8005f96:	4413      	add	r3, r2
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005f9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3728      	adds	r7, #40	; 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20001c1c 	.word	0x20001c1c

08005fac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08c      	sub	sp, #48	; 0x30
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005fd0:	484f      	ldr	r0, [pc, #316]	; (8006110 <low_level_input+0x164>)
 8005fd2:	f7fc fdf3 	bl	8002bbc <HAL_ETH_GetReceivedFrame>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <low_level_input+0x34>

    return NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e092      	b.n	8006106 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005fe0:	4b4b      	ldr	r3, [pc, #300]	; (8006110 <low_level_input+0x164>)
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005fe6:	4b4a      	ldr	r3, [pc, #296]	; (8006110 <low_level_input+0x164>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005fec:	89fb      	ldrh	r3, [r7, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005ff2:	89fb      	ldrh	r3, [r7, #14]
 8005ff4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	f001 f936 	bl	800726c <pbuf_alloc>
 8006000:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d04b      	beq.n	80060a0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006008:	4b41      	ldr	r3, [pc, #260]	; (8006110 <low_level_input+0x164>)
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28
 8006016:	e040      	b.n	800609a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	895b      	ldrh	r3, [r3, #10]
 800601c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006022:	e021      	b.n	8006068 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	18d0      	adds	r0, r2, r3
 800602c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	18d1      	adds	r1, r2, r3
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	461a      	mov	r2, r3
 800603c:	f00b fa32 	bl	80114a4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	4413      	add	r3, r2
 8006052:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006056:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006062:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006072:	4293      	cmp	r3, r2
 8006074:	d8d6      	bhi.n	8006024 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	18d0      	adds	r0, r2, r3
 800607e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4619      	mov	r1, r3
 8006088:	f00b fa0c 	bl	80114a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	4413      	add	r3, r2
 8006092:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1bb      	bne.n	8006018 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80060a0:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <low_level_input+0x164>)
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	e00b      	b.n	80060c4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3301      	adds	r3, #1
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	4b12      	ldr	r3, [pc, #72]	; (8006110 <low_level_input+0x164>)
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d3ee      	bcc.n	80060ac <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80060ce:	4b10      	ldr	r3, [pc, #64]	; (8006110 <low_level_input+0x164>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80060d4:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <low_level_input+0x164>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80060dc:	4413      	add	r3, r2
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80060e8:	4b09      	ldr	r3, [pc, #36]	; (8006110 <low_level_input+0x164>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	f241 0314 	movw	r3, #4116	; 0x1014
 80060f0:	4413      	add	r3, r2
 80060f2:	2280      	movs	r2, #128	; 0x80
 80060f4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80060f6:	4b06      	ldr	r3, [pc, #24]	; (8006110 <low_level_input+0x164>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	f241 0308 	movw	r3, #4104	; 0x1008
 80060fe:	4413      	add	r3, r2
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006106:	4618      	mov	r0, r3
 8006108:	3730      	adds	r7, #48	; 0x30
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20001c1c 	.word	0x20001c1c

08006114 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ff45 	bl	8005fac <low_level_input>
 8006122:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d010      	beq.n	800614c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	4798      	blx	r3
 8006134:	4603      	mov	r3, r0
 8006136:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8006138:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d006      	beq.n	800614e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f001 fb77 	bl	8007834 <pbuf_free>
    p = NULL;
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	e000      	b.n	800614e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800614c:	bf00      	nop
  }
}
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <ethernetif_init+0x1c>
 8006162:	4b0e      	ldr	r3, [pc, #56]	; (800619c <ethernetif_init+0x48>)
 8006164:	f240 220d 	movw	r2, #525	; 0x20d
 8006168:	490d      	ldr	r1, [pc, #52]	; (80061a0 <ethernetif_init+0x4c>)
 800616a:	480e      	ldr	r0, [pc, #56]	; (80061a4 <ethernetif_init+0x50>)
 800616c:	f00b f9ca 	bl	8011504 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2273      	movs	r2, #115	; 0x73
 8006174:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2274      	movs	r2, #116	; 0x74
 800617c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a09      	ldr	r2, [pc, #36]	; (80061a8 <ethernetif_init+0x54>)
 8006184:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a08      	ldr	r2, [pc, #32]	; (80061ac <ethernetif_init+0x58>)
 800618a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fdc1 	bl	8005d14 <low_level_init>

  return ERR_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	08012a24 	.word	0x08012a24
 80061a0:	08012a40 	.word	0x08012a40
 80061a4:	08012a50 	.word	0x08012a50
 80061a8:	0800f635 	.word	0x0800f635
 80061ac:	08005e71 	.word	0x08005e71

080061b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80061b4:	f7fb fff6 	bl	80021a4 <HAL_GetTick>
 80061b8:	4603      	mov	r3, r0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061d6:	089b      	lsrs	r3, r3, #2
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d05d      	beq.n	800629e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80061e2:	4b34      	ldr	r3, [pc, #208]	; (80062b4 <ethernetif_update_config+0xf4>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d03f      	beq.n	800626a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80061ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061ee:	2100      	movs	r1, #0
 80061f0:	4830      	ldr	r0, [pc, #192]	; (80062b4 <ethernetif_update_config+0xf4>)
 80061f2:	f7fc fe54 	bl	8002e9e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80061f6:	f7fb ffd5 	bl	80021a4 <HAL_GetTick>
 80061fa:	4603      	mov	r3, r0
 80061fc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80061fe:	f107 0308 	add.w	r3, r7, #8
 8006202:	461a      	mov	r2, r3
 8006204:	2101      	movs	r1, #1
 8006206:	482b      	ldr	r0, [pc, #172]	; (80062b4 <ethernetif_update_config+0xf4>)
 8006208:	f7fc fde1 	bl	8002dce <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800620c:	f7fb ffca 	bl	80021a4 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800621a:	d828      	bhi.n	800626e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0eb      	beq.n	80061fe <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	461a      	mov	r2, r3
 800622c:	2110      	movs	r1, #16
 800622e:	4821      	ldr	r0, [pc, #132]	; (80062b4 <ethernetif_update_config+0xf4>)
 8006230:	f7fc fdcd 	bl	8002dce <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <ethernetif_update_config+0xf4>)
 8006240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	e002      	b.n	800624e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006248:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <ethernetif_update_config+0xf4>)
 800624a:	2200      	movs	r2, #0
 800624c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006258:	4b16      	ldr	r3, [pc, #88]	; (80062b4 <ethernetif_update_config+0xf4>)
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]
 800625e:	e016      	b.n	800628e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006260:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <ethernetif_update_config+0xf4>)
 8006262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006266:	609a      	str	r2, [r3, #8]
 8006268:	e011      	b.n	800628e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <ethernetif_update_config+0xb0>
          goto error;
 800626e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006270:	4b10      	ldr	r3, [pc, #64]	; (80062b4 <ethernetif_update_config+0xf4>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	08db      	lsrs	r3, r3, #3
 8006276:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <ethernetif_update_config+0xf4>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006280:	4313      	orrs	r3, r2
 8006282:	b29b      	uxth	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	2100      	movs	r1, #0
 8006288:	480a      	ldr	r0, [pc, #40]	; (80062b4 <ethernetif_update_config+0xf4>)
 800628a:	f7fc fe08 	bl	8002e9e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800628e:	2100      	movs	r1, #0
 8006290:	4808      	ldr	r0, [pc, #32]	; (80062b4 <ethernetif_update_config+0xf4>)
 8006292:	f7fc fec9 	bl	8003028 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8006296:	4807      	ldr	r0, [pc, #28]	; (80062b4 <ethernetif_update_config+0xf4>)
 8006298:	f7fc fe67 	bl	8002f6a <HAL_ETH_Start>
 800629c:	e002      	b.n	80062a4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800629e:	4805      	ldr	r0, [pc, #20]	; (80062b4 <ethernetif_update_config+0xf4>)
 80062a0:	f7fc fe92 	bl	8002fc8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f807 	bl	80062b8 <ethernetif_notify_conn_changed>
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20001c1c 	.word	0x20001c1c

080062b8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	4603      	mov	r3, r0
 80062d4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	b21a      	sxth	r2, r3
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	b21b      	sxth	r3, r3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	b21b      	sxth	r3, r3
 80062e8:	b29b      	uxth	r3, r3
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	061a      	lsls	r2, r3, #24
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	0a1b      	lsrs	r3, r3, #8
 8006310:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	0e1b      	lsrs	r3, r3, #24
 800631a:	4313      	orrs	r3, r2
}
 800631c:	4618      	mov	r0, r3
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006332:	f000 f8d5 	bl	80064e0 <mem_init>
  memp_init();
 8006336:	f000 fbdb 	bl	8006af0 <memp_init>
  pbuf_init();
  netif_init();
 800633a:	f000 fc93 	bl	8006c64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800633e:	f008 f85b 	bl	800e3f8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006342:	f001 fda7 	bl	8007e94 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006346:	f007 ffcd 	bl	800e2e4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <ptr_to_mem+0x20>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	4413      	add	r3, r2
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	200000cc 	.word	0x200000cc

08006378 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <mem_to_ptr+0x20>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	b29b      	uxth	r3, r3
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	200000cc 	.word	0x200000cc

0800639c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800639c:	b590      	push	{r4, r7, lr}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80063a4:	4b45      	ldr	r3, [pc, #276]	; (80064bc <plug_holes+0x120>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d206      	bcs.n	80063bc <plug_holes+0x20>
 80063ae:	4b44      	ldr	r3, [pc, #272]	; (80064c0 <plug_holes+0x124>)
 80063b0:	f240 12df 	movw	r2, #479	; 0x1df
 80063b4:	4943      	ldr	r1, [pc, #268]	; (80064c4 <plug_holes+0x128>)
 80063b6:	4844      	ldr	r0, [pc, #272]	; (80064c8 <plug_holes+0x12c>)
 80063b8:	f00b f8a4 	bl	8011504 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80063bc:	4b43      	ldr	r3, [pc, #268]	; (80064cc <plug_holes+0x130>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d306      	bcc.n	80063d4 <plug_holes+0x38>
 80063c6:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <plug_holes+0x124>)
 80063c8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80063cc:	4940      	ldr	r1, [pc, #256]	; (80064d0 <plug_holes+0x134>)
 80063ce:	483e      	ldr	r0, [pc, #248]	; (80064c8 <plug_holes+0x12c>)
 80063d0:	f00b f898 	bl	8011504 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	791b      	ldrb	r3, [r3, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d006      	beq.n	80063ea <plug_holes+0x4e>
 80063dc:	4b38      	ldr	r3, [pc, #224]	; (80064c0 <plug_holes+0x124>)
 80063de:	f240 12e1 	movw	r2, #481	; 0x1e1
 80063e2:	493c      	ldr	r1, [pc, #240]	; (80064d4 <plug_holes+0x138>)
 80063e4:	4838      	ldr	r0, [pc, #224]	; (80064c8 <plug_holes+0x12c>)
 80063e6:	f00b f88d 	bl	8011504 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80063f2:	d906      	bls.n	8006402 <plug_holes+0x66>
 80063f4:	4b32      	ldr	r3, [pc, #200]	; (80064c0 <plug_holes+0x124>)
 80063f6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80063fa:	4937      	ldr	r1, [pc, #220]	; (80064d8 <plug_holes+0x13c>)
 80063fc:	4832      	ldr	r0, [pc, #200]	; (80064c8 <plug_holes+0x12c>)
 80063fe:	f00b f881 	bl	8011504 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff ffa4 	bl	8006354 <ptr_to_mem>
 800640c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	429a      	cmp	r2, r3
 8006414:	d024      	beq.n	8006460 <plug_holes+0xc4>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	791b      	ldrb	r3, [r3, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d120      	bne.n	8006460 <plug_holes+0xc4>
 800641e:	4b2b      	ldr	r3, [pc, #172]	; (80064cc <plug_holes+0x130>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	429a      	cmp	r2, r3
 8006426:	d01b      	beq.n	8006460 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006428:	4b2c      	ldr	r3, [pc, #176]	; (80064dc <plug_holes+0x140>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	429a      	cmp	r2, r3
 8006430:	d102      	bne.n	8006438 <plug_holes+0x9c>
      lfree = mem;
 8006432:	4a2a      	ldr	r2, [pc, #168]	; (80064dc <plug_holes+0x140>)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	881a      	ldrh	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006448:	d00a      	beq.n	8006460 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff ff80 	bl	8006354 <ptr_to_mem>
 8006454:	4604      	mov	r4, r0
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff ff8e 	bl	8006378 <mem_to_ptr>
 800645c:	4603      	mov	r3, r0
 800645e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	885b      	ldrh	r3, [r3, #2]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff ff75 	bl	8006354 <ptr_to_mem>
 800646a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d01f      	beq.n	80064b4 <plug_holes+0x118>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	791b      	ldrb	r3, [r3, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d11b      	bne.n	80064b4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800647c:	4b17      	ldr	r3, [pc, #92]	; (80064dc <plug_holes+0x140>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d102      	bne.n	800648c <plug_holes+0xf0>
      lfree = pmem;
 8006486:	4a15      	ldr	r2, [pc, #84]	; (80064dc <plug_holes+0x140>)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800649c:	d00a      	beq.n	80064b4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff ff56 	bl	8006354 <ptr_to_mem>
 80064a8:	4604      	mov	r4, r0
 80064aa:	68b8      	ldr	r0, [r7, #8]
 80064ac:	f7ff ff64 	bl	8006378 <mem_to_ptr>
 80064b0:	4603      	mov	r3, r0
 80064b2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80064b4:	bf00      	nop
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd90      	pop	{r4, r7, pc}
 80064bc:	200000cc 	.word	0x200000cc
 80064c0:	08012a78 	.word	0x08012a78
 80064c4:	08012aa8 	.word	0x08012aa8
 80064c8:	08012ac0 	.word	0x08012ac0
 80064cc:	200000d0 	.word	0x200000d0
 80064d0:	08012ae8 	.word	0x08012ae8
 80064d4:	08012b04 	.word	0x08012b04
 80064d8:	08012b20 	.word	0x08012b20
 80064dc:	200000d4 	.word	0x200000d4

080064e0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80064e6:	4b18      	ldr	r3, [pc, #96]	; (8006548 <mem_init+0x68>)
 80064e8:	3303      	adds	r3, #3
 80064ea:	f023 0303 	bic.w	r3, r3, #3
 80064ee:	461a      	mov	r2, r3
 80064f0:	4b16      	ldr	r3, [pc, #88]	; (800654c <mem_init+0x6c>)
 80064f2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80064f4:	4b15      	ldr	r3, [pc, #84]	; (800654c <mem_init+0x6c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006500:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800650e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8006512:	f7ff ff1f 	bl	8006354 <ptr_to_mem>
 8006516:	4603      	mov	r3, r0
 8006518:	4a0d      	ldr	r2, [pc, #52]	; (8006550 <mem_init+0x70>)
 800651a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <mem_init+0x70>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2201      	movs	r2, #1
 8006522:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006524:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <mem_init+0x70>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800652c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800652e:	4b08      	ldr	r3, [pc, #32]	; (8006550 <mem_init+0x70>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006536:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006538:	4b04      	ldr	r3, [pc, #16]	; (800654c <mem_init+0x6c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a05      	ldr	r2, [pc, #20]	; (8006554 <mem_init+0x74>)
 800653e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	2000344c 	.word	0x2000344c
 800654c:	200000cc 	.word	0x200000cc
 8006550:	200000d0 	.word	0x200000d0
 8006554:	200000d4 	.word	0x200000d4

08006558 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff ff09 	bl	8006378 <mem_to_ptr>
 8006566:	4603      	mov	r3, r0
 8006568:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff fef0 	bl	8006354 <ptr_to_mem>
 8006574:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	885b      	ldrh	r3, [r3, #2]
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff feea 	bl	8006354 <ptr_to_mem>
 8006580:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800658a:	d818      	bhi.n	80065be <mem_link_valid+0x66>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	885b      	ldrh	r3, [r3, #2]
 8006590:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006594:	d813      	bhi.n	80065be <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800659a:	8afa      	ldrh	r2, [r7, #22]
 800659c:	429a      	cmp	r2, r3
 800659e:	d004      	beq.n	80065aa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	8afa      	ldrh	r2, [r7, #22]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d109      	bne.n	80065be <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80065aa:	4b08      	ldr	r3, [pc, #32]	; (80065cc <mem_link_valid+0x74>)
 80065ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d006      	beq.n	80065c2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	885b      	ldrh	r3, [r3, #2]
 80065b8:	8afa      	ldrh	r2, [r7, #22]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d001      	beq.n	80065c2 <mem_link_valid+0x6a>
    return 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	e000      	b.n	80065c4 <mem_link_valid+0x6c>
  }
  return 1;
 80065c2:	2301      	movs	r3, #1
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	200000d0 	.word	0x200000d0

080065d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d04c      	beq.n	8006678 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f003 0303 	and.w	r3, r3, #3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80065e8:	4b25      	ldr	r3, [pc, #148]	; (8006680 <mem_free+0xb0>)
 80065ea:	f240 2273 	movw	r2, #627	; 0x273
 80065ee:	4925      	ldr	r1, [pc, #148]	; (8006684 <mem_free+0xb4>)
 80065f0:	4825      	ldr	r0, [pc, #148]	; (8006688 <mem_free+0xb8>)
 80065f2:	f00a ff87 	bl	8011504 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80065f6:	e040      	b.n	800667a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3b08      	subs	r3, #8
 80065fc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80065fe:	4b23      	ldr	r3, [pc, #140]	; (800668c <mem_free+0xbc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	429a      	cmp	r2, r3
 8006606:	d306      	bcc.n	8006616 <mem_free+0x46>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f103 020c 	add.w	r2, r3, #12
 800660e:	4b20      	ldr	r3, [pc, #128]	; (8006690 <mem_free+0xc0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d907      	bls.n	8006626 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006616:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <mem_free+0xb0>)
 8006618:	f240 227f 	movw	r2, #639	; 0x27f
 800661c:	491d      	ldr	r1, [pc, #116]	; (8006694 <mem_free+0xc4>)
 800661e:	481a      	ldr	r0, [pc, #104]	; (8006688 <mem_free+0xb8>)
 8006620:	f00a ff70 	bl	8011504 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006624:	e029      	b.n	800667a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	791b      	ldrb	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d107      	bne.n	800663e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <mem_free+0xb0>)
 8006630:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006634:	4918      	ldr	r1, [pc, #96]	; (8006698 <mem_free+0xc8>)
 8006636:	4814      	ldr	r0, [pc, #80]	; (8006688 <mem_free+0xb8>)
 8006638:	f00a ff64 	bl	8011504 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800663c:	e01d      	b.n	800667a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f7ff ff8a 	bl	8006558 <mem_link_valid>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d107      	bne.n	800665a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800664a:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <mem_free+0xb0>)
 800664c:	f240 2295 	movw	r2, #661	; 0x295
 8006650:	4912      	ldr	r1, [pc, #72]	; (800669c <mem_free+0xcc>)
 8006652:	480d      	ldr	r0, [pc, #52]	; (8006688 <mem_free+0xb8>)
 8006654:	f00a ff56 	bl	8011504 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006658:	e00f      	b.n	800667a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006660:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <mem_free+0xd0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	429a      	cmp	r2, r3
 8006668:	d202      	bcs.n	8006670 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800666a:	4a0d      	ldr	r2, [pc, #52]	; (80066a0 <mem_free+0xd0>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fe93 	bl	800639c <plug_holes>
 8006676:	e000      	b.n	800667a <mem_free+0xaa>
    return;
 8006678:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	08012a78 	.word	0x08012a78
 8006684:	08012b4c 	.word	0x08012b4c
 8006688:	08012ac0 	.word	0x08012ac0
 800668c:	200000cc 	.word	0x200000cc
 8006690:	200000d0 	.word	0x200000d0
 8006694:	08012b70 	.word	0x08012b70
 8006698:	08012b8c 	.word	0x08012b8c
 800669c:	08012bb4 	.word	0x08012bb4
 80066a0:	200000d4 	.word	0x200000d4

080066a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80066b0:	887b      	ldrh	r3, [r7, #2]
 80066b2:	3303      	adds	r3, #3
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80066bc:	8bfb      	ldrh	r3, [r7, #30]
 80066be:	2b0b      	cmp	r3, #11
 80066c0:	d801      	bhi.n	80066c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80066c2:	230c      	movs	r3, #12
 80066c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80066c6:	8bfb      	ldrh	r3, [r7, #30]
 80066c8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80066cc:	d803      	bhi.n	80066d6 <mem_trim+0x32>
 80066ce:	8bfa      	ldrh	r2, [r7, #30]
 80066d0:	887b      	ldrh	r3, [r7, #2]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d201      	bcs.n	80066da <mem_trim+0x36>
    return NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e0cc      	b.n	8006874 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80066da:	4b68      	ldr	r3, [pc, #416]	; (800687c <mem_trim+0x1d8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d304      	bcc.n	80066ee <mem_trim+0x4a>
 80066e4:	4b66      	ldr	r3, [pc, #408]	; (8006880 <mem_trim+0x1dc>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d306      	bcc.n	80066fc <mem_trim+0x58>
 80066ee:	4b65      	ldr	r3, [pc, #404]	; (8006884 <mem_trim+0x1e0>)
 80066f0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80066f4:	4964      	ldr	r1, [pc, #400]	; (8006888 <mem_trim+0x1e4>)
 80066f6:	4865      	ldr	r0, [pc, #404]	; (800688c <mem_trim+0x1e8>)
 80066f8:	f00a ff04 	bl	8011504 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80066fc:	4b5f      	ldr	r3, [pc, #380]	; (800687c <mem_trim+0x1d8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	429a      	cmp	r2, r3
 8006704:	d304      	bcc.n	8006710 <mem_trim+0x6c>
 8006706:	4b5e      	ldr	r3, [pc, #376]	; (8006880 <mem_trim+0x1dc>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d301      	bcc.n	8006714 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	e0af      	b.n	8006874 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3b08      	subs	r3, #8
 8006718:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800671a:	69b8      	ldr	r0, [r7, #24]
 800671c:	f7ff fe2c 	bl	8006378 <mem_to_ptr>
 8006720:	4603      	mov	r3, r0
 8006722:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	881a      	ldrh	r2, [r3, #0]
 8006728:	8afb      	ldrh	r3, [r7, #22]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b08      	subs	r3, #8
 8006730:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006732:	8bfa      	ldrh	r2, [r7, #30]
 8006734:	8abb      	ldrh	r3, [r7, #20]
 8006736:	429a      	cmp	r2, r3
 8006738:	d906      	bls.n	8006748 <mem_trim+0xa4>
 800673a:	4b52      	ldr	r3, [pc, #328]	; (8006884 <mem_trim+0x1e0>)
 800673c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006740:	4953      	ldr	r1, [pc, #332]	; (8006890 <mem_trim+0x1ec>)
 8006742:	4852      	ldr	r0, [pc, #328]	; (800688c <mem_trim+0x1e8>)
 8006744:	f00a fede 	bl	8011504 <iprintf>
  if (newsize > size) {
 8006748:	8bfa      	ldrh	r2, [r7, #30]
 800674a:	8abb      	ldrh	r3, [r7, #20]
 800674c:	429a      	cmp	r2, r3
 800674e:	d901      	bls.n	8006754 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006750:	2300      	movs	r3, #0
 8006752:	e08f      	b.n	8006874 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006754:	8bfa      	ldrh	r2, [r7, #30]
 8006756:	8abb      	ldrh	r3, [r7, #20]
 8006758:	429a      	cmp	r2, r3
 800675a:	d101      	bne.n	8006760 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	e089      	b.n	8006874 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fdf5 	bl	8006354 <ptr_to_mem>
 800676a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	791b      	ldrb	r3, [r3, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d13f      	bne.n	80067f4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800677c:	d106      	bne.n	800678c <mem_trim+0xe8>
 800677e:	4b41      	ldr	r3, [pc, #260]	; (8006884 <mem_trim+0x1e0>)
 8006780:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006784:	4943      	ldr	r1, [pc, #268]	; (8006894 <mem_trim+0x1f0>)
 8006786:	4841      	ldr	r0, [pc, #260]	; (800688c <mem_trim+0x1e8>)
 8006788:	f00a febc 	bl	8011504 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006792:	8afa      	ldrh	r2, [r7, #22]
 8006794:	8bfb      	ldrh	r3, [r7, #30]
 8006796:	4413      	add	r3, r2
 8006798:	b29b      	uxth	r3, r3
 800679a:	3308      	adds	r3, #8
 800679c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800679e:	4b3e      	ldr	r3, [pc, #248]	; (8006898 <mem_trim+0x1f4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d106      	bne.n	80067b6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fdd2 	bl	8006354 <ptr_to_mem>
 80067b0:	4603      	mov	r3, r0
 80067b2:	4a39      	ldr	r2, [pc, #228]	; (8006898 <mem_trim+0x1f4>)
 80067b4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80067b6:	89fb      	ldrh	r3, [r7, #14]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fdcb 	bl	8006354 <ptr_to_mem>
 80067be:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2200      	movs	r2, #0
 80067c4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	89ba      	ldrh	r2, [r7, #12]
 80067ca:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	8afa      	ldrh	r2, [r7, #22]
 80067d0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	89fa      	ldrh	r2, [r7, #14]
 80067d6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80067e0:	d047      	beq.n	8006872 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fdb4 	bl	8006354 <ptr_to_mem>
 80067ec:	4602      	mov	r2, r0
 80067ee:	89fb      	ldrh	r3, [r7, #14]
 80067f0:	8053      	strh	r3, [r2, #2]
 80067f2:	e03e      	b.n	8006872 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80067f4:	8bfb      	ldrh	r3, [r7, #30]
 80067f6:	f103 0214 	add.w	r2, r3, #20
 80067fa:	8abb      	ldrh	r3, [r7, #20]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d838      	bhi.n	8006872 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006800:	8afa      	ldrh	r2, [r7, #22]
 8006802:	8bfb      	ldrh	r3, [r7, #30]
 8006804:	4413      	add	r3, r2
 8006806:	b29b      	uxth	r3, r3
 8006808:	3308      	adds	r3, #8
 800680a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006814:	d106      	bne.n	8006824 <mem_trim+0x180>
 8006816:	4b1b      	ldr	r3, [pc, #108]	; (8006884 <mem_trim+0x1e0>)
 8006818:	f240 3216 	movw	r2, #790	; 0x316
 800681c:	491d      	ldr	r1, [pc, #116]	; (8006894 <mem_trim+0x1f0>)
 800681e:	481b      	ldr	r0, [pc, #108]	; (800688c <mem_trim+0x1e8>)
 8006820:	f00a fe70 	bl	8011504 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006824:	89fb      	ldrh	r3, [r7, #14]
 8006826:	4618      	mov	r0, r3
 8006828:	f7ff fd94 	bl	8006354 <ptr_to_mem>
 800682c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800682e:	4b1a      	ldr	r3, [pc, #104]	; (8006898 <mem_trim+0x1f4>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	429a      	cmp	r2, r3
 8006836:	d202      	bcs.n	800683e <mem_trim+0x19a>
      lfree = mem2;
 8006838:	4a17      	ldr	r2, [pc, #92]	; (8006898 <mem_trim+0x1f4>)
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2200      	movs	r2, #0
 8006842:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	881a      	ldrh	r2, [r3, #0]
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	8afa      	ldrh	r2, [r7, #22]
 8006850:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	89fa      	ldrh	r2, [r7, #14]
 8006856:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006860:	d007      	beq.n	8006872 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff fd74 	bl	8006354 <ptr_to_mem>
 800686c:	4602      	mov	r2, r0
 800686e:	89fb      	ldrh	r3, [r7, #14]
 8006870:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006872:	687b      	ldr	r3, [r7, #4]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3720      	adds	r7, #32
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200000cc 	.word	0x200000cc
 8006880:	200000d0 	.word	0x200000d0
 8006884:	08012a78 	.word	0x08012a78
 8006888:	08012be8 	.word	0x08012be8
 800688c:	08012ac0 	.word	0x08012ac0
 8006890:	08012c00 	.word	0x08012c00
 8006894:	08012c20 	.word	0x08012c20
 8006898:	200000d4 	.word	0x200000d4

0800689c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <mem_malloc+0x14>
    return NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e0d9      	b.n	8006a64 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80068b0:	88fb      	ldrh	r3, [r7, #6]
 80068b2:	3303      	adds	r3, #3
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80068bc:	8bbb      	ldrh	r3, [r7, #28]
 80068be:	2b0b      	cmp	r3, #11
 80068c0:	d801      	bhi.n	80068c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80068c2:	230c      	movs	r3, #12
 80068c4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80068c6:	8bbb      	ldrh	r3, [r7, #28]
 80068c8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80068cc:	d803      	bhi.n	80068d6 <mem_malloc+0x3a>
 80068ce:	8bba      	ldrh	r2, [r7, #28]
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d201      	bcs.n	80068da <mem_malloc+0x3e>
    return NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e0c4      	b.n	8006a64 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80068da:	4b64      	ldr	r3, [pc, #400]	; (8006a6c <mem_malloc+0x1d0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff fd4a 	bl	8006378 <mem_to_ptr>
 80068e4:	4603      	mov	r3, r0
 80068e6:	83fb      	strh	r3, [r7, #30]
 80068e8:	e0b4      	b.n	8006a54 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80068ea:	8bfb      	ldrh	r3, [r7, #30]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff fd31 	bl	8006354 <ptr_to_mem>
 80068f2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	791b      	ldrb	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f040 80a4 	bne.w	8006a46 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	8bfb      	ldrh	r3, [r7, #30]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f1a3 0208 	sub.w	r2, r3, #8
 800690c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800690e:	429a      	cmp	r2, r3
 8006910:	f0c0 8099 	bcc.w	8006a46 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	461a      	mov	r2, r3
 800691a:	8bfb      	ldrh	r3, [r7, #30]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f1a3 0208 	sub.w	r2, r3, #8
 8006922:	8bbb      	ldrh	r3, [r7, #28]
 8006924:	3314      	adds	r3, #20
 8006926:	429a      	cmp	r2, r3
 8006928:	d333      	bcc.n	8006992 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800692a:	8bfa      	ldrh	r2, [r7, #30]
 800692c:	8bbb      	ldrh	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	b29b      	uxth	r3, r3
 8006932:	3308      	adds	r3, #8
 8006934:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006936:	8a7b      	ldrh	r3, [r7, #18]
 8006938:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800693c:	d106      	bne.n	800694c <mem_malloc+0xb0>
 800693e:	4b4c      	ldr	r3, [pc, #304]	; (8006a70 <mem_malloc+0x1d4>)
 8006940:	f240 3287 	movw	r2, #903	; 0x387
 8006944:	494b      	ldr	r1, [pc, #300]	; (8006a74 <mem_malloc+0x1d8>)
 8006946:	484c      	ldr	r0, [pc, #304]	; (8006a78 <mem_malloc+0x1dc>)
 8006948:	f00a fddc 	bl	8011504 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800694c:	8a7b      	ldrh	r3, [r7, #18]
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fd00 	bl	8006354 <ptr_to_mem>
 8006954:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	881a      	ldrh	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8bfa      	ldrh	r2, [r7, #30]
 8006968:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	8a7a      	ldrh	r2, [r7, #18]
 800696e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2201      	movs	r2, #1
 8006974:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800697e:	d00b      	beq.n	8006998 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff fce5 	bl	8006354 <ptr_to_mem>
 800698a:	4602      	mov	r2, r0
 800698c:	8a7b      	ldrh	r3, [r7, #18]
 800698e:	8053      	strh	r3, [r2, #2]
 8006990:	e002      	b.n	8006998 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2201      	movs	r2, #1
 8006996:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006998:	4b34      	ldr	r3, [pc, #208]	; (8006a6c <mem_malloc+0x1d0>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d127      	bne.n	80069f2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80069a2:	4b32      	ldr	r3, [pc, #200]	; (8006a6c <mem_malloc+0x1d0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80069a8:	e005      	b.n	80069b6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff fcd0 	bl	8006354 <ptr_to_mem>
 80069b4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	791b      	ldrb	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <mem_malloc+0x12c>
 80069be:	4b2f      	ldr	r3, [pc, #188]	; (8006a7c <mem_malloc+0x1e0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d1f0      	bne.n	80069aa <mem_malloc+0x10e>
          }
          lfree = cur;
 80069c8:	4a28      	ldr	r2, [pc, #160]	; (8006a6c <mem_malloc+0x1d0>)
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80069ce:	4b27      	ldr	r3, [pc, #156]	; (8006a6c <mem_malloc+0x1d0>)
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b2a      	ldr	r3, [pc, #168]	; (8006a7c <mem_malloc+0x1e0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d00b      	beq.n	80069f2 <mem_malloc+0x156>
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <mem_malloc+0x1d0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	791b      	ldrb	r3, [r3, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d006      	beq.n	80069f2 <mem_malloc+0x156>
 80069e4:	4b22      	ldr	r3, [pc, #136]	; (8006a70 <mem_malloc+0x1d4>)
 80069e6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80069ea:	4925      	ldr	r1, [pc, #148]	; (8006a80 <mem_malloc+0x1e4>)
 80069ec:	4822      	ldr	r0, [pc, #136]	; (8006a78 <mem_malloc+0x1dc>)
 80069ee:	f00a fd89 	bl	8011504 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80069f2:	8bba      	ldrh	r2, [r7, #28]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	4413      	add	r3, r2
 80069f8:	3308      	adds	r3, #8
 80069fa:	4a20      	ldr	r2, [pc, #128]	; (8006a7c <mem_malloc+0x1e0>)
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d906      	bls.n	8006a10 <mem_malloc+0x174>
 8006a02:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <mem_malloc+0x1d4>)
 8006a04:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006a08:	491e      	ldr	r1, [pc, #120]	; (8006a84 <mem_malloc+0x1e8>)
 8006a0a:	481b      	ldr	r0, [pc, #108]	; (8006a78 <mem_malloc+0x1dc>)
 8006a0c:	f00a fd7a 	bl	8011504 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d006      	beq.n	8006a28 <mem_malloc+0x18c>
 8006a1a:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <mem_malloc+0x1d4>)
 8006a1c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006a20:	4919      	ldr	r1, [pc, #100]	; (8006a88 <mem_malloc+0x1ec>)
 8006a22:	4815      	ldr	r0, [pc, #84]	; (8006a78 <mem_malloc+0x1dc>)
 8006a24:	f00a fd6e 	bl	8011504 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d006      	beq.n	8006a40 <mem_malloc+0x1a4>
 8006a32:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <mem_malloc+0x1d4>)
 8006a34:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006a38:	4914      	ldr	r1, [pc, #80]	; (8006a8c <mem_malloc+0x1f0>)
 8006a3a:	480f      	ldr	r0, [pc, #60]	; (8006a78 <mem_malloc+0x1dc>)
 8006a3c:	f00a fd62 	bl	8011504 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	3308      	adds	r3, #8
 8006a44:	e00e      	b.n	8006a64 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006a46:	8bfb      	ldrh	r3, [r7, #30]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fc83 	bl	8006354 <ptr_to_mem>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006a54:	8bfa      	ldrh	r2, [r7, #30]
 8006a56:	8bbb      	ldrh	r3, [r7, #28]
 8006a58:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	f4ff af44 	bcc.w	80068ea <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	200000d4 	.word	0x200000d4
 8006a70:	08012a78 	.word	0x08012a78
 8006a74:	08012c20 	.word	0x08012c20
 8006a78:	08012ac0 	.word	0x08012ac0
 8006a7c:	200000d0 	.word	0x200000d0
 8006a80:	08012c34 	.word	0x08012c34
 8006a84:	08012c50 	.word	0x08012c50
 8006a88:	08012c80 	.word	0x08012c80
 8006a8c:	08012cb0 	.word	0x08012cb0

08006a90 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	3303      	adds	r3, #3
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	e011      	b.n	8006ad6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	dbe7      	blt.n	8006ab2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006ae2:	bf00      	nop
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006af6:	2300      	movs	r3, #0
 8006af8:	80fb      	strh	r3, [r7, #6]
 8006afa:	e009      	b.n	8006b10 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006afc:	88fb      	ldrh	r3, [r7, #6]
 8006afe:	4a08      	ldr	r2, [pc, #32]	; (8006b20 <memp_init+0x30>)
 8006b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff ffc3 	bl	8006a90 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	80fb      	strh	r3, [r7, #6]
 8006b10:	88fb      	ldrh	r3, [r7, #6]
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d9f2      	bls.n	8006afc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	08015480 	.word	0x08015480

08006b24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d012      	beq.n	8006b60 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d006      	beq.n	8006b5c <do_memp_malloc_pool+0x38>
 8006b4e:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <do_memp_malloc_pool+0x48>)
 8006b50:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006b54:	4906      	ldr	r1, [pc, #24]	; (8006b70 <do_memp_malloc_pool+0x4c>)
 8006b56:	4807      	ldr	r0, [pc, #28]	; (8006b74 <do_memp_malloc_pool+0x50>)
 8006b58:	f00a fcd4 	bl	8011504 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	e000      	b.n	8006b62 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	08012cd4 	.word	0x08012cd4
 8006b70:	08012d04 	.word	0x08012d04
 8006b74:	08012d28 	.word	0x08012d28

08006b78 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006b82:	79fb      	ldrb	r3, [r7, #7]
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d908      	bls.n	8006b9a <memp_malloc+0x22>
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <memp_malloc+0x3c>)
 8006b8a:	f240 1257 	movw	r2, #343	; 0x157
 8006b8e:	490a      	ldr	r1, [pc, #40]	; (8006bb8 <memp_malloc+0x40>)
 8006b90:	480a      	ldr	r0, [pc, #40]	; (8006bbc <memp_malloc+0x44>)
 8006b92:	f00a fcb7 	bl	8011504 <iprintf>
 8006b96:	2300      	movs	r3, #0
 8006b98:	e008      	b.n	8006bac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	4a08      	ldr	r2, [pc, #32]	; (8006bc0 <memp_malloc+0x48>)
 8006b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff ffbe 	bl	8006b24 <do_memp_malloc_pool>
 8006ba8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006baa:	68fb      	ldr	r3, [r7, #12]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	08012cd4 	.word	0x08012cd4
 8006bb8:	08012d64 	.word	0x08012d64
 8006bbc:	08012d28 	.word	0x08012d28
 8006bc0:	08015480 	.word	0x08015480

08006bc4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	f003 0303 	and.w	r3, r3, #3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <do_memp_free_pool+0x22>
 8006bd8:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <do_memp_free_pool+0x40>)
 8006bda:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006bde:	490a      	ldr	r1, [pc, #40]	; (8006c08 <do_memp_free_pool+0x44>)
 8006be0:	480a      	ldr	r0, [pc, #40]	; (8006c0c <do_memp_free_pool+0x48>)
 8006be2:	f00a fc8f 	bl	8011504 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	08012cd4 	.word	0x08012cd4
 8006c08:	08012d84 	.word	0x08012d84
 8006c0c:	08012d28 	.word	0x08012d28

08006c10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d907      	bls.n	8006c32 <memp_free+0x22>
 8006c22:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <memp_free+0x44>)
 8006c24:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006c28:	490b      	ldr	r1, [pc, #44]	; (8006c58 <memp_free+0x48>)
 8006c2a:	480c      	ldr	r0, [pc, #48]	; (8006c5c <memp_free+0x4c>)
 8006c2c:	f00a fc6a 	bl	8011504 <iprintf>
 8006c30:	e00c      	b.n	8006c4c <memp_free+0x3c>

  if (mem == NULL) {
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <memp_free+0x50>)
 8006c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff ffbe 	bl	8006bc4 <do_memp_free_pool>
 8006c48:	e000      	b.n	8006c4c <memp_free+0x3c>
    return;
 8006c4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	08012cd4 	.word	0x08012cd4
 8006c58:	08012da4 	.word	0x08012da4
 8006c5c:	08012d28 	.word	0x08012d28
 8006c60:	08015480 	.word	0x08015480

08006c64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006c68:	bf00      	nop
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
	...

08006c74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d108      	bne.n	8006c9a <netif_add+0x26>
 8006c88:	4b57      	ldr	r3, [pc, #348]	; (8006de8 <netif_add+0x174>)
 8006c8a:	f240 1227 	movw	r2, #295	; 0x127
 8006c8e:	4957      	ldr	r1, [pc, #348]	; (8006dec <netif_add+0x178>)
 8006c90:	4857      	ldr	r0, [pc, #348]	; (8006df0 <netif_add+0x17c>)
 8006c92:	f00a fc37 	bl	8011504 <iprintf>
 8006c96:	2300      	movs	r3, #0
 8006c98:	e0a2      	b.n	8006de0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d108      	bne.n	8006cb2 <netif_add+0x3e>
 8006ca0:	4b51      	ldr	r3, [pc, #324]	; (8006de8 <netif_add+0x174>)
 8006ca2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006ca6:	4953      	ldr	r1, [pc, #332]	; (8006df4 <netif_add+0x180>)
 8006ca8:	4851      	ldr	r0, [pc, #324]	; (8006df0 <netif_add+0x17c>)
 8006caa:	f00a fc2b 	bl	8011504 <iprintf>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	e096      	b.n	8006de0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006cb8:	4b4f      	ldr	r3, [pc, #316]	; (8006df8 <netif_add+0x184>)
 8006cba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006cc2:	4b4d      	ldr	r3, [pc, #308]	; (8006df8 <netif_add+0x184>)
 8006cc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006ccc:	4b4a      	ldr	r3, [pc, #296]	; (8006df8 <netif_add+0x184>)
 8006cce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a45      	ldr	r2, [pc, #276]	; (8006dfc <netif_add+0x188>)
 8006ce6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a3a      	ldr	r2, [r7, #32]
 8006d00:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006d02:	4b3f      	ldr	r3, [pc, #252]	; (8006e00 <netif_add+0x18c>)
 8006d04:	781a      	ldrb	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d10:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f913 	bl	8006f44 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	4798      	blx	r3
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <netif_add+0xba>
    return NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e058      	b.n	8006de0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d34:	2bff      	cmp	r3, #255	; 0xff
 8006d36:	d103      	bne.n	8006d40 <netif_add+0xcc>
        netif->num = 0;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006d44:	4b2f      	ldr	r3, [pc, #188]	; (8006e04 <netif_add+0x190>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e02b      	b.n	8006da4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d106      	bne.n	8006d62 <netif_add+0xee>
 8006d54:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <netif_add+0x174>)
 8006d56:	f240 128b 	movw	r2, #395	; 0x18b
 8006d5a:	492b      	ldr	r1, [pc, #172]	; (8006e08 <netif_add+0x194>)
 8006d5c:	4824      	ldr	r0, [pc, #144]	; (8006df0 <netif_add+0x17c>)
 8006d5e:	f00a fbd1 	bl	8011504 <iprintf>
        num_netifs++;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3301      	adds	r3, #1
 8006d66:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2bff      	cmp	r3, #255	; 0xff
 8006d6c:	dd06      	ble.n	8006d7c <netif_add+0x108>
 8006d6e:	4b1e      	ldr	r3, [pc, #120]	; (8006de8 <netif_add+0x174>)
 8006d70:	f240 128d 	movw	r2, #397	; 0x18d
 8006d74:	4925      	ldr	r1, [pc, #148]	; (8006e0c <netif_add+0x198>)
 8006d76:	481e      	ldr	r0, [pc, #120]	; (8006df0 <netif_add+0x17c>)
 8006d78:	f00a fbc4 	bl	8011504 <iprintf>
        if (netif2->num == netif->num) {
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d108      	bne.n	8006d9e <netif_add+0x12a>
          netif->num++;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d92:	3301      	adds	r3, #1
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006d9c:	e005      	b.n	8006daa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1d0      	bne.n	8006d4c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1be      	bne.n	8006d2e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006db6:	2bfe      	cmp	r3, #254	; 0xfe
 8006db8:	d103      	bne.n	8006dc2 <netif_add+0x14e>
    netif_num = 0;
 8006dba:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <netif_add+0x18c>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	e006      	b.n	8006dd0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dc8:	3301      	adds	r3, #1
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	4b0c      	ldr	r3, [pc, #48]	; (8006e00 <netif_add+0x18c>)
 8006dce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <netif_add+0x190>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006dd8:	4a0a      	ldr	r2, [pc, #40]	; (8006e04 <netif_add+0x190>)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	08012dc0 	.word	0x08012dc0
 8006dec:	08012e54 	.word	0x08012e54
 8006df0:	08012e10 	.word	0x08012e10
 8006df4:	08012e70 	.word	0x08012e70
 8006df8:	080154e4 	.word	0x080154e4
 8006dfc:	08007157 	.word	0x08007157
 8006e00:	200000fc 	.word	0x200000fc
 8006e04:	20008b28 	.word	0x20008b28
 8006e08:	08012e94 	.word	0x08012e94
 8006e0c:	08012ea8 	.word	0x08012ea8

08006e10 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f002 ff39 	bl	8009c94 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f007 ff89 	bl	800ed3c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <netif_do_set_ipaddr+0x20>
 8006e46:	4b1d      	ldr	r3, [pc, #116]	; (8006ebc <netif_do_set_ipaddr+0x88>)
 8006e48:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006e4c:	491c      	ldr	r1, [pc, #112]	; (8006ec0 <netif_do_set_ipaddr+0x8c>)
 8006e4e:	481d      	ldr	r0, [pc, #116]	; (8006ec4 <netif_do_set_ipaddr+0x90>)
 8006e50:	f00a fb58 	bl	8011504 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <netif_do_set_ipaddr+0x34>
 8006e5a:	4b18      	ldr	r3, [pc, #96]	; (8006ebc <netif_do_set_ipaddr+0x88>)
 8006e5c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006e60:	4917      	ldr	r1, [pc, #92]	; (8006ec0 <netif_do_set_ipaddr+0x8c>)
 8006e62:	4818      	ldr	r0, [pc, #96]	; (8006ec4 <netif_do_set_ipaddr+0x90>)
 8006e64:	f00a fb4e 	bl	8011504 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d01c      	beq.n	8006eb0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006e86:	f107 0314 	add.w	r3, r7, #20
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ffbf 	bl	8006e10 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <netif_do_set_ipaddr+0x6a>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	e000      	b.n	8006ea0 <netif_do_set_ipaddr+0x6c>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f8d2 	bl	8007050 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006eac:	2301      	movs	r3, #1
 8006eae:	e000      	b.n	8006eb2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	08012dc0 	.word	0x08012dc0
 8006ec0:	08012ed8 	.word	0x08012ed8
 8006ec4:	08012e10 	.word	0x08012e10

08006ec8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3308      	adds	r3, #8
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d00a      	beq.n	8006ef8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <netif_do_set_netmask+0x26>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	e000      	b.n	8006ef0 <netif_do_set_netmask+0x28>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	330c      	adds	r3, #12
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d00a      	beq.n	8006f36 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <netif_do_set_gw+0x26>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	e000      	b.n	8006f2e <netif_do_set_gw+0x28>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006f60:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <netif_set_addr+0x90>)
 8006f62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006f6a:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <netif_set_addr+0x90>)
 8006f6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006f74:	4b17      	ldr	r3, [pc, #92]	; (8006fd4 <netif_set_addr+0x90>)
 8006f76:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <netif_set_addr+0x42>
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <netif_set_addr+0x46>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e000      	b.n	8006f8c <netif_set_addr+0x48>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d006      	beq.n	8006fa2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006f94:	f107 0310 	add.w	r3, r7, #16
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f7ff ff49 	bl	8006e34 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7ff ff8e 	bl	8006ec8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff ffa8 	bl	8006f06 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d106      	bne.n	8006fca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006fbc:	f107 0310 	add.w	r3, r7, #16
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff ff35 	bl	8006e34 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006fca:	bf00      	nop
 8006fcc:	3720      	adds	r7, #32
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	080154e4 	.word	0x080154e4

08006fd8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006fe0:	4a04      	ldr	r2, [pc, #16]	; (8006ff4 <netif_set_default+0x1c>)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20008b2c 	.word	0x20008b2c

08006ff8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d107      	bne.n	8007016 <netif_set_up+0x1e>
 8007006:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <netif_set_up+0x4c>)
 8007008:	f44f 7254 	mov.w	r2, #848	; 0x350
 800700c:	490e      	ldr	r1, [pc, #56]	; (8007048 <netif_set_up+0x50>)
 800700e:	480f      	ldr	r0, [pc, #60]	; (800704c <netif_set_up+0x54>)
 8007010:	f00a fa78 	bl	8011504 <iprintf>
 8007014:	e013      	b.n	800703e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10c      	bne.n	800703e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	b2da      	uxtb	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007036:	2103      	movs	r1, #3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f809 	bl	8007050 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	08012dc0 	.word	0x08012dc0
 8007048:	08012f48 	.word	0x08012f48
 800704c:	08012e10 	.word	0x08012e10

08007050 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <netif_issue_reports+0x20>
 8007062:	4b18      	ldr	r3, [pc, #96]	; (80070c4 <netif_issue_reports+0x74>)
 8007064:	f240 326d 	movw	r2, #877	; 0x36d
 8007068:	4917      	ldr	r1, [pc, #92]	; (80070c8 <netif_issue_reports+0x78>)
 800706a:	4818      	ldr	r0, [pc, #96]	; (80070cc <netif_issue_reports+0x7c>)
 800706c:	f00a fa4a 	bl	8011504 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	d01e      	beq.n	80070bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007084:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007088:	2b00      	cmp	r3, #0
 800708a:	d017      	beq.n	80070bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d013      	beq.n	80070be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3304      	adds	r3, #4
 800709a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00e      	beq.n	80070be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070a6:	f003 0308 	and.w	r3, r3, #8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f008 fdab 	bl	800fc10 <etharp_request>
 80070ba:	e000      	b.n	80070be <netif_issue_reports+0x6e>
    return;
 80070bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	08012dc0 	.word	0x08012dc0
 80070c8:	08012f64 	.word	0x08012f64
 80070cc:	08012e10 	.word	0x08012e10

080070d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d107      	bne.n	80070ee <netif_set_down+0x1e>
 80070de:	4b12      	ldr	r3, [pc, #72]	; (8007128 <netif_set_down+0x58>)
 80070e0:	f240 329b 	movw	r2, #923	; 0x39b
 80070e4:	4911      	ldr	r1, [pc, #68]	; (800712c <netif_set_down+0x5c>)
 80070e6:	4812      	ldr	r0, [pc, #72]	; (8007130 <netif_set_down+0x60>)
 80070e8:	f00a fa0c 	bl	8011504 <iprintf>
 80070ec:	e019      	b.n	8007122 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d012      	beq.n	8007122 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007102:	f023 0301 	bic.w	r3, r3, #1
 8007106:	b2da      	uxtb	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007114:	f003 0308 	and.w	r3, r3, #8
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f008 f935 	bl	800f38c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	08012dc0 	.word	0x08012dc0
 800712c:	08012f88 	.word	0x08012f88
 8007130:	08012e10 	.word	0x08012e10

08007134 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	61da      	str	r2, [r3, #28]
  }
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007162:	f06f 030b 	mvn.w	r3, #11
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
	...

08007174 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	4603      	mov	r3, r0
 800717c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d013      	beq.n	80071ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007184:	4b0d      	ldr	r3, [pc, #52]	; (80071bc <netif_get_by_index+0x48>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	e00c      	b.n	80071a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007192:	3301      	adds	r3, #1
 8007194:	b2db      	uxtb	r3, r3
 8007196:	79fa      	ldrb	r2, [r7, #7]
 8007198:	429a      	cmp	r2, r3
 800719a:	d101      	bne.n	80071a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	e006      	b.n	80071ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1ef      	bne.n	800718c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20008b28 	.word	0x20008b28

080071c0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80071c6:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <pbuf_free_ooseq+0x38>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <pbuf_free_ooseq+0x3c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	607b      	str	r3, [r7, #4]
 80071d2:	e00a      	b.n	80071ea <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f002 fd97 	bl	8009d10 <tcp_free_ooseq>
      return;
 80071e2:	e005      	b.n	80071f0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	607b      	str	r3, [r7, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1f1      	bne.n	80071d4 <pbuf_free_ooseq+0x14>
    }
  }
}
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20008b30 	.word	0x20008b30
 80071fc:	20008b38 	.word	0x20008b38

08007200 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007204:	4b03      	ldr	r3, [pc, #12]	; (8007214 <pbuf_pool_is_empty+0x14>)
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800720a:	bf00      	nop
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	20008b30 	.word	0x20008b30

08007218 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4611      	mov	r1, r2
 8007224:	461a      	mov	r2, r3
 8007226:	460b      	mov	r3, r1
 8007228:	80fb      	strh	r3, [r7, #6]
 800722a:	4613      	mov	r3, r2
 800722c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	88fa      	ldrh	r2, [r7, #6]
 800723e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	88ba      	ldrh	r2, [r7, #4]
 8007244:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007246:	8b3b      	ldrh	r3, [r7, #24]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	7f3a      	ldrb	r2, [r7, #28]
 8007252:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	73da      	strb	r2, [r3, #15]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08c      	sub	sp, #48	; 0x30
 8007270:	af02      	add	r7, sp, #8
 8007272:	4603      	mov	r3, r0
 8007274:	71fb      	strb	r3, [r7, #7]
 8007276:	460b      	mov	r3, r1
 8007278:	80bb      	strh	r3, [r7, #4]
 800727a:	4613      	mov	r3, r2
 800727c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007282:	887b      	ldrh	r3, [r7, #2]
 8007284:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007288:	d07f      	beq.n	800738a <pbuf_alloc+0x11e>
 800728a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800728e:	f300 80c8 	bgt.w	8007422 <pbuf_alloc+0x1b6>
 8007292:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007296:	d010      	beq.n	80072ba <pbuf_alloc+0x4e>
 8007298:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800729c:	f300 80c1 	bgt.w	8007422 <pbuf_alloc+0x1b6>
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d002      	beq.n	80072aa <pbuf_alloc+0x3e>
 80072a4:	2b41      	cmp	r3, #65	; 0x41
 80072a6:	f040 80bc 	bne.w	8007422 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80072aa:	887a      	ldrh	r2, [r7, #2]
 80072ac:	88bb      	ldrh	r3, [r7, #4]
 80072ae:	4619      	mov	r1, r3
 80072b0:	2000      	movs	r0, #0
 80072b2:	f000 f8d1 	bl	8007458 <pbuf_alloc_reference>
 80072b6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80072b8:	e0bd      	b.n	8007436 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80072c2:	88bb      	ldrh	r3, [r7, #4]
 80072c4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80072c6:	2008      	movs	r0, #8
 80072c8:	f7ff fc56 	bl	8006b78 <memp_malloc>
 80072cc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d109      	bne.n	80072e8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80072d4:	f7ff ff94 	bl	8007200 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80072de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072e0:	f000 faa8 	bl	8007834 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	e0a7      	b.n	8007438 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80072e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072ea:	3303      	adds	r3, #3
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f023 0303 	bic.w	r3, r3, #3
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	8b7a      	ldrh	r2, [r7, #26]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	bf28      	it	cs
 8007300:	4613      	movcs	r3, r2
 8007302:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007306:	3310      	adds	r3, #16
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4413      	add	r3, r2
 800730c:	3303      	adds	r3, #3
 800730e:	f023 0303 	bic.w	r3, r3, #3
 8007312:	4618      	mov	r0, r3
 8007314:	89f9      	ldrh	r1, [r7, #14]
 8007316:	8b7a      	ldrh	r2, [r7, #26]
 8007318:	2300      	movs	r3, #0
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	887b      	ldrh	r3, [r7, #2]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	460b      	mov	r3, r1
 8007322:	4601      	mov	r1, r0
 8007324:	6938      	ldr	r0, [r7, #16]
 8007326:	f7ff ff77 	bl	8007218 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d006      	beq.n	8007344 <pbuf_alloc+0xd8>
 8007336:	4b42      	ldr	r3, [pc, #264]	; (8007440 <pbuf_alloc+0x1d4>)
 8007338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800733c:	4941      	ldr	r1, [pc, #260]	; (8007444 <pbuf_alloc+0x1d8>)
 800733e:	4842      	ldr	r0, [pc, #264]	; (8007448 <pbuf_alloc+0x1dc>)
 8007340:	f00a f8e0 	bl	8011504 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007346:	3303      	adds	r3, #3
 8007348:	f023 0303 	bic.w	r3, r3, #3
 800734c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007350:	d106      	bne.n	8007360 <pbuf_alloc+0xf4>
 8007352:	4b3b      	ldr	r3, [pc, #236]	; (8007440 <pbuf_alloc+0x1d4>)
 8007354:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007358:	493c      	ldr	r1, [pc, #240]	; (800744c <pbuf_alloc+0x1e0>)
 800735a:	483b      	ldr	r0, [pc, #236]	; (8007448 <pbuf_alloc+0x1dc>)
 800735c:	f00a f8d2 	bl	8011504 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
 800736a:	e002      	b.n	8007372 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007376:	8b7a      	ldrh	r2, [r7, #26]
 8007378:	89fb      	ldrh	r3, [r7, #14]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007382:	8b7b      	ldrh	r3, [r7, #26]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d19e      	bne.n	80072c6 <pbuf_alloc+0x5a>
      break;
 8007388:	e055      	b.n	8007436 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800738a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800738c:	3303      	adds	r3, #3
 800738e:	b29b      	uxth	r3, r3
 8007390:	f023 0303 	bic.w	r3, r3, #3
 8007394:	b29a      	uxth	r2, r3
 8007396:	88bb      	ldrh	r3, [r7, #4]
 8007398:	3303      	adds	r3, #3
 800739a:	b29b      	uxth	r3, r3
 800739c:	f023 0303 	bic.w	r3, r3, #3
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	4413      	add	r3, r2
 80073a4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80073a6:	8b3b      	ldrh	r3, [r7, #24]
 80073a8:	3310      	adds	r3, #16
 80073aa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073ac:	8b3a      	ldrh	r2, [r7, #24]
 80073ae:	88bb      	ldrh	r3, [r7, #4]
 80073b0:	3303      	adds	r3, #3
 80073b2:	f023 0303 	bic.w	r3, r3, #3
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d306      	bcc.n	80073c8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80073ba:	8afa      	ldrh	r2, [r7, #22]
 80073bc:	88bb      	ldrh	r3, [r7, #4]
 80073be:	3303      	adds	r3, #3
 80073c0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d201      	bcs.n	80073cc <pbuf_alloc+0x160>
        return NULL;
 80073c8:	2300      	movs	r3, #0
 80073ca:	e035      	b.n	8007438 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80073cc:	8afb      	ldrh	r3, [r7, #22]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff fa64 	bl	800689c <mem_malloc>
 80073d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <pbuf_alloc+0x174>
        return NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	e02b      	b.n	8007438 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80073e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073e2:	3310      	adds	r3, #16
 80073e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e6:	4413      	add	r3, r2
 80073e8:	3303      	adds	r3, #3
 80073ea:	f023 0303 	bic.w	r3, r3, #3
 80073ee:	4618      	mov	r0, r3
 80073f0:	88b9      	ldrh	r1, [r7, #4]
 80073f2:	88ba      	ldrh	r2, [r7, #4]
 80073f4:	2300      	movs	r3, #0
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	887b      	ldrh	r3, [r7, #2]
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	460b      	mov	r3, r1
 80073fe:	4601      	mov	r1, r0
 8007400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007402:	f7ff ff09 	bl	8007218 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d010      	beq.n	8007434 <pbuf_alloc+0x1c8>
 8007412:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <pbuf_alloc+0x1d4>)
 8007414:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007418:	490d      	ldr	r1, [pc, #52]	; (8007450 <pbuf_alloc+0x1e4>)
 800741a:	480b      	ldr	r0, [pc, #44]	; (8007448 <pbuf_alloc+0x1dc>)
 800741c:	f00a f872 	bl	8011504 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007420:	e008      	b.n	8007434 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007422:	4b07      	ldr	r3, [pc, #28]	; (8007440 <pbuf_alloc+0x1d4>)
 8007424:	f240 1227 	movw	r2, #295	; 0x127
 8007428:	490a      	ldr	r1, [pc, #40]	; (8007454 <pbuf_alloc+0x1e8>)
 800742a:	4807      	ldr	r0, [pc, #28]	; (8007448 <pbuf_alloc+0x1dc>)
 800742c:	f00a f86a 	bl	8011504 <iprintf>
      return NULL;
 8007430:	2300      	movs	r3, #0
 8007432:	e001      	b.n	8007438 <pbuf_alloc+0x1cc>
      break;
 8007434:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007438:	4618      	mov	r0, r3
 800743a:	3728      	adds	r7, #40	; 0x28
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	08012ff0 	.word	0x08012ff0
 8007444:	08013020 	.word	0x08013020
 8007448:	08013050 	.word	0x08013050
 800744c:	08013078 	.word	0x08013078
 8007450:	080130ac 	.word	0x080130ac
 8007454:	080130d8 	.word	0x080130d8

08007458 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af02      	add	r7, sp, #8
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	807b      	strh	r3, [r7, #2]
 8007464:	4613      	mov	r3, r2
 8007466:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007468:	883b      	ldrh	r3, [r7, #0]
 800746a:	2b41      	cmp	r3, #65	; 0x41
 800746c:	d009      	beq.n	8007482 <pbuf_alloc_reference+0x2a>
 800746e:	883b      	ldrh	r3, [r7, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d006      	beq.n	8007482 <pbuf_alloc_reference+0x2a>
 8007474:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <pbuf_alloc_reference+0x5c>)
 8007476:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800747a:	490f      	ldr	r1, [pc, #60]	; (80074b8 <pbuf_alloc_reference+0x60>)
 800747c:	480f      	ldr	r0, [pc, #60]	; (80074bc <pbuf_alloc_reference+0x64>)
 800747e:	f00a f841 	bl	8011504 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007482:	2007      	movs	r0, #7
 8007484:	f7ff fb78 	bl	8006b78 <memp_malloc>
 8007488:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007490:	2300      	movs	r3, #0
 8007492:	e00b      	b.n	80074ac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007494:	8879      	ldrh	r1, [r7, #2]
 8007496:	887a      	ldrh	r2, [r7, #2]
 8007498:	2300      	movs	r3, #0
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	883b      	ldrh	r3, [r7, #0]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	460b      	mov	r3, r1
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f7ff feb7 	bl	8007218 <pbuf_init_alloced_pbuf>
  return p;
 80074aa:	68fb      	ldr	r3, [r7, #12]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	08012ff0 	.word	0x08012ff0
 80074b8:	080130f4 	.word	0x080130f4
 80074bc:	08013050 	.word	0x08013050

080074c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	607b      	str	r3, [r7, #4]
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
 80074cc:	460b      	mov	r3, r1
 80074ce:	81bb      	strh	r3, [r7, #12]
 80074d0:	4613      	mov	r3, r2
 80074d2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80074d8:	8a7b      	ldrh	r3, [r7, #18]
 80074da:	3303      	adds	r3, #3
 80074dc:	f023 0203 	bic.w	r2, r3, #3
 80074e0:	89bb      	ldrh	r3, [r7, #12]
 80074e2:	441a      	add	r2, r3
 80074e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d901      	bls.n	80074ee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	e018      	b.n	8007520 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d007      	beq.n	8007504 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80074f4:	8a7b      	ldrh	r3, [r7, #18]
 80074f6:	3303      	adds	r3, #3
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	6a3a      	ldr	r2, [r7, #32]
 80074fe:	4413      	add	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	e001      	b.n	8007508 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007504:	2300      	movs	r3, #0
 8007506:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	89b9      	ldrh	r1, [r7, #12]
 800750c:	89ba      	ldrh	r2, [r7, #12]
 800750e:	2302      	movs	r3, #2
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	897b      	ldrh	r3, [r7, #10]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	460b      	mov	r3, r1
 8007518:	6979      	ldr	r1, [r7, #20]
 800751a:	f7ff fe7d 	bl	8007218 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800751e:	687b      	ldr	r3, [r7, #4]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <pbuf_realloc+0x20>
 800753a:	4b3a      	ldr	r3, [pc, #232]	; (8007624 <pbuf_realloc+0xfc>)
 800753c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007540:	4939      	ldr	r1, [pc, #228]	; (8007628 <pbuf_realloc+0x100>)
 8007542:	483a      	ldr	r0, [pc, #232]	; (800762c <pbuf_realloc+0x104>)
 8007544:	f009 ffde 	bl	8011504 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	891b      	ldrh	r3, [r3, #8]
 800754c:	887a      	ldrh	r2, [r7, #2]
 800754e:	429a      	cmp	r2, r3
 8007550:	d263      	bcs.n	800761a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	891a      	ldrh	r2, [r3, #8]
 8007556:	887b      	ldrh	r3, [r7, #2]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800755c:	887b      	ldrh	r3, [r7, #2]
 800755e:	817b      	strh	r3, [r7, #10]
  q = p;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007564:	e018      	b.n	8007598 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	895b      	ldrh	r3, [r3, #10]
 800756a:	897a      	ldrh	r2, [r7, #10]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	891a      	ldrh	r2, [r3, #8]
 8007574:	893b      	ldrh	r3, [r7, #8]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	b29a      	uxth	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d106      	bne.n	8007598 <pbuf_realloc+0x70>
 800758a:	4b26      	ldr	r3, [pc, #152]	; (8007624 <pbuf_realloc+0xfc>)
 800758c:	f240 12af 	movw	r2, #431	; 0x1af
 8007590:	4927      	ldr	r1, [pc, #156]	; (8007630 <pbuf_realloc+0x108>)
 8007592:	4826      	ldr	r0, [pc, #152]	; (800762c <pbuf_realloc+0x104>)
 8007594:	f009 ffb6 	bl	8011504 <iprintf>
  while (rem_len > q->len) {
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	895b      	ldrh	r3, [r3, #10]
 800759c:	897a      	ldrh	r2, [r7, #10]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d8e1      	bhi.n	8007566 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	7b1b      	ldrb	r3, [r3, #12]
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d121      	bne.n	80075f2 <pbuf_realloc+0xca>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	895b      	ldrh	r3, [r3, #10]
 80075b2:	897a      	ldrh	r2, [r7, #10]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d01c      	beq.n	80075f2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	7b5b      	ldrb	r3, [r3, #13]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d116      	bne.n	80075f2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	897b      	ldrh	r3, [r7, #10]
 80075d0:	4413      	add	r3, r2
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	4619      	mov	r1, r3
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff f864 	bl	80066a4 <mem_trim>
 80075dc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <pbuf_realloc+0xca>
 80075e4:	4b0f      	ldr	r3, [pc, #60]	; (8007624 <pbuf_realloc+0xfc>)
 80075e6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80075ea:	4912      	ldr	r1, [pc, #72]	; (8007634 <pbuf_realloc+0x10c>)
 80075ec:	480f      	ldr	r0, [pc, #60]	; (800762c <pbuf_realloc+0x104>)
 80075ee:	f009 ff89 	bl	8011504 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	897a      	ldrh	r2, [r7, #10]
 80075f6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	895a      	ldrh	r2, [r3, #10]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d004      	beq.n	8007612 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f911 	bl	8007834 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e000      	b.n	800761c <pbuf_realloc+0xf4>
    return;
 800761a:	bf00      	nop

}
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	08012ff0 	.word	0x08012ff0
 8007628:	08013108 	.word	0x08013108
 800762c:	08013050 	.word	0x08013050
 8007630:	08013120 	.word	0x08013120
 8007634:	08013138 	.word	0x08013138

08007638 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	4613      	mov	r3, r2
 8007644:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <pbuf_add_header_impl+0x22>
 800764c:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <pbuf_add_header_impl+0xc4>)
 800764e:	f240 12df 	movw	r2, #479	; 0x1df
 8007652:	492b      	ldr	r1, [pc, #172]	; (8007700 <pbuf_add_header_impl+0xc8>)
 8007654:	482b      	ldr	r0, [pc, #172]	; (8007704 <pbuf_add_header_impl+0xcc>)
 8007656:	f009 ff55 	bl	8011504 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <pbuf_add_header_impl+0x30>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007666:	d301      	bcc.n	800766c <pbuf_add_header_impl+0x34>
    return 1;
 8007668:	2301      	movs	r3, #1
 800766a:	e043      	b.n	80076f4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <pbuf_add_header_impl+0x3e>
    return 0;
 8007672:	2300      	movs	r3, #0
 8007674:	e03e      	b.n	80076f4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	891a      	ldrh	r2, [r3, #8]
 800767e:	8a7b      	ldrh	r3, [r7, #18]
 8007680:	4413      	add	r3, r2
 8007682:	b29b      	uxth	r3, r3
 8007684:	8a7a      	ldrh	r2, [r7, #18]
 8007686:	429a      	cmp	r2, r3
 8007688:	d901      	bls.n	800768e <pbuf_add_header_impl+0x56>
    return 1;
 800768a:	2301      	movs	r3, #1
 800768c:	e032      	b.n	80076f4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	7b1b      	ldrb	r3, [r3, #12]
 8007692:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007694:	8a3b      	ldrh	r3, [r7, #16]
 8007696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00c      	beq.n	80076b8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	425b      	negs	r3, r3
 80076a6:	4413      	add	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3310      	adds	r3, #16
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d20d      	bcs.n	80076d0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e01d      	b.n	80076f4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d006      	beq.n	80076cc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	425b      	negs	r3, r3
 80076c6:	4413      	add	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	e001      	b.n	80076d0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e011      	b.n	80076f4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	895a      	ldrh	r2, [r3, #10]
 80076da:	8a7b      	ldrh	r3, [r7, #18]
 80076dc:	4413      	add	r3, r2
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	891a      	ldrh	r2, [r3, #8]
 80076e8:	8a7b      	ldrh	r3, [r7, #18]
 80076ea:	4413      	add	r3, r2
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	811a      	strh	r2, [r3, #8]


  return 0;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	08012ff0 	.word	0x08012ff0
 8007700:	08013154 	.word	0x08013154
 8007704:	08013050 	.word	0x08013050

08007708 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007712:	2200      	movs	r2, #0
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff ff8e 	bl	8007638 <pbuf_add_header_impl>
 800771c:	4603      	mov	r3, r0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d106      	bne.n	8007746 <pbuf_remove_header+0x1e>
 8007738:	4b20      	ldr	r3, [pc, #128]	; (80077bc <pbuf_remove_header+0x94>)
 800773a:	f240 224b 	movw	r2, #587	; 0x24b
 800773e:	4920      	ldr	r1, [pc, #128]	; (80077c0 <pbuf_remove_header+0x98>)
 8007740:	4820      	ldr	r0, [pc, #128]	; (80077c4 <pbuf_remove_header+0x9c>)
 8007742:	f009 fedf 	bl	8011504 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <pbuf_remove_header+0x2c>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007752:	d301      	bcc.n	8007758 <pbuf_remove_header+0x30>
    return 1;
 8007754:	2301      	movs	r3, #1
 8007756:	e02c      	b.n	80077b2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <pbuf_remove_header+0x3a>
    return 0;
 800775e:	2300      	movs	r3, #0
 8007760:	e027      	b.n	80077b2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	895b      	ldrh	r3, [r3, #10]
 800776a:	89fa      	ldrh	r2, [r7, #14]
 800776c:	429a      	cmp	r2, r3
 800776e:	d908      	bls.n	8007782 <pbuf_remove_header+0x5a>
 8007770:	4b12      	ldr	r3, [pc, #72]	; (80077bc <pbuf_remove_header+0x94>)
 8007772:	f240 2255 	movw	r2, #597	; 0x255
 8007776:	4914      	ldr	r1, [pc, #80]	; (80077c8 <pbuf_remove_header+0xa0>)
 8007778:	4812      	ldr	r0, [pc, #72]	; (80077c4 <pbuf_remove_header+0x9c>)
 800777a:	f009 fec3 	bl	8011504 <iprintf>
 800777e:	2301      	movs	r3, #1
 8007780:	e017      	b.n	80077b2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	441a      	add	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	895a      	ldrh	r2, [r3, #10]
 8007798:	89fb      	ldrh	r3, [r7, #14]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	891a      	ldrh	r2, [r3, #8]
 80077a6:	89fb      	ldrh	r3, [r7, #14]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	08012ff0 	.word	0x08012ff0
 80077c0:	08013154 	.word	0x08013154
 80077c4:	08013050 	.word	0x08013050
 80077c8:	08013160 	.word	0x08013160

080077cc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	807b      	strh	r3, [r7, #2]
 80077d8:	4613      	mov	r3, r2
 80077da:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80077dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	da08      	bge.n	80077f6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80077e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077e8:	425b      	negs	r3, r3
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff ff9b 	bl	8007728 <pbuf_remove_header>
 80077f2:	4603      	mov	r3, r0
 80077f4:	e007      	b.n	8007806 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80077f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077fa:	787a      	ldrb	r2, [r7, #1]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff ff1a 	bl	8007638 <pbuf_add_header_impl>
 8007804:	4603      	mov	r3, r0
  }
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800781a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800781e:	2201      	movs	r2, #1
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff ffd2 	bl	80077cc <pbuf_header_impl>
 8007828:	4603      	mov	r3, r0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10b      	bne.n	800785a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d106      	bne.n	8007856 <pbuf_free+0x22>
 8007848:	4b38      	ldr	r3, [pc, #224]	; (800792c <pbuf_free+0xf8>)
 800784a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800784e:	4938      	ldr	r1, [pc, #224]	; (8007930 <pbuf_free+0xfc>)
 8007850:	4838      	ldr	r0, [pc, #224]	; (8007934 <pbuf_free+0x100>)
 8007852:	f009 fe57 	bl	8011504 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007856:	2300      	movs	r3, #0
 8007858:	e063      	b.n	8007922 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800785a:	2300      	movs	r3, #0
 800785c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800785e:	e05c      	b.n	800791a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7b9b      	ldrb	r3, [r3, #14]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <pbuf_free+0x42>
 8007868:	4b30      	ldr	r3, [pc, #192]	; (800792c <pbuf_free+0xf8>)
 800786a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800786e:	4932      	ldr	r1, [pc, #200]	; (8007938 <pbuf_free+0x104>)
 8007870:	4830      	ldr	r0, [pc, #192]	; (8007934 <pbuf_free+0x100>)
 8007872:	f009 fe47 	bl	8011504 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7b9b      	ldrb	r3, [r3, #14]
 800787a:	3b01      	subs	r3, #1
 800787c:	b2da      	uxtb	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	739a      	strb	r2, [r3, #14]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7b9b      	ldrb	r3, [r3, #14]
 8007886:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007888:	7dbb      	ldrb	r3, [r7, #22]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d143      	bne.n	8007916 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	7b1b      	ldrb	r3, [r3, #12]
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7b5b      	ldrb	r3, [r3, #13]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d011      	beq.n	80078ce <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <pbuf_free+0x90>
 80078b6:	4b1d      	ldr	r3, [pc, #116]	; (800792c <pbuf_free+0xf8>)
 80078b8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80078bc:	491f      	ldr	r1, [pc, #124]	; (800793c <pbuf_free+0x108>)
 80078be:	481d      	ldr	r0, [pc, #116]	; (8007934 <pbuf_free+0x100>)
 80078c0:	f009 fe20 	bl	8011504 <iprintf>
        pc->custom_free_function(p);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
 80078cc:	e01d      	b.n	800790a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d104      	bne.n	80078de <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	2008      	movs	r0, #8
 80078d8:	f7ff f99a 	bl	8006c10 <memp_free>
 80078dc:	e015      	b.n	800790a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d104      	bne.n	80078ee <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	2007      	movs	r0, #7
 80078e8:	f7ff f992 	bl	8006c10 <memp_free>
 80078ec:	e00d      	b.n	800790a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <pbuf_free+0xc8>
          mem_free(p);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fe fe6b 	bl	80065d0 <mem_free>
 80078fa:	e006      	b.n	800790a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <pbuf_free+0xf8>)
 80078fe:	f240 320f 	movw	r2, #783	; 0x30f
 8007902:	490f      	ldr	r1, [pc, #60]	; (8007940 <pbuf_free+0x10c>)
 8007904:	480b      	ldr	r0, [pc, #44]	; (8007934 <pbuf_free+0x100>)
 8007906:	f009 fdfd 	bl	8011504 <iprintf>
        }
      }
      count++;
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	3301      	adds	r3, #1
 800790e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	e001      	b.n	800791a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d19f      	bne.n	8007860 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007920:	7dfb      	ldrb	r3, [r7, #23]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	08012ff0 	.word	0x08012ff0
 8007930:	08013154 	.word	0x08013154
 8007934:	08013050 	.word	0x08013050
 8007938:	08013180 	.word	0x08013180
 800793c:	08013198 	.word	0x08013198
 8007940:	080131bc 	.word	0x080131bc

08007944 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800794c:	2300      	movs	r3, #0
 800794e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007950:	e005      	b.n	800795e <pbuf_clen+0x1a>
    ++len;
 8007952:	89fb      	ldrh	r3, [r7, #14]
 8007954:	3301      	adds	r3, #1
 8007956:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f6      	bne.n	8007952 <pbuf_clen+0xe>
  }
  return len;
 8007964:	89fb      	ldrh	r3, [r7, #14]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
	...

08007974 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d010      	beq.n	80079a4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7b9b      	ldrb	r3, [r3, #14]
 8007986:	3301      	adds	r3, #1
 8007988:	b2da      	uxtb	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7b9b      	ldrb	r3, [r3, #14]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <pbuf_ref+0x30>
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <pbuf_ref+0x38>)
 8007998:	f240 3242 	movw	r2, #834	; 0x342
 800799c:	4904      	ldr	r1, [pc, #16]	; (80079b0 <pbuf_ref+0x3c>)
 800799e:	4805      	ldr	r0, [pc, #20]	; (80079b4 <pbuf_ref+0x40>)
 80079a0:	f009 fdb0 	bl	8011504 <iprintf>
  }
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	08012ff0 	.word	0x08012ff0
 80079b0:	080131d0 	.word	0x080131d0
 80079b4:	08013050 	.word	0x08013050

080079b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <pbuf_cat+0x16>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d107      	bne.n	80079de <pbuf_cat+0x26>
 80079ce:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <pbuf_cat+0x98>)
 80079d0:	f240 3259 	movw	r2, #857	; 0x359
 80079d4:	491f      	ldr	r1, [pc, #124]	; (8007a54 <pbuf_cat+0x9c>)
 80079d6:	4820      	ldr	r0, [pc, #128]	; (8007a58 <pbuf_cat+0xa0>)
 80079d8:	f009 fd94 	bl	8011504 <iprintf>
 80079dc:	e034      	b.n	8007a48 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	e00a      	b.n	80079fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	891a      	ldrh	r2, [r3, #8]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	891b      	ldrh	r3, [r3, #8]
 80079ec:	4413      	add	r3, r2
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f0      	bne.n	80079e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	891a      	ldrh	r2, [r3, #8]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	895b      	ldrh	r3, [r3, #10]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d006      	beq.n	8007a1c <pbuf_cat+0x64>
 8007a0e:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <pbuf_cat+0x98>)
 8007a10:	f240 3262 	movw	r2, #866	; 0x362
 8007a14:	4911      	ldr	r1, [pc, #68]	; (8007a5c <pbuf_cat+0xa4>)
 8007a16:	4810      	ldr	r0, [pc, #64]	; (8007a58 <pbuf_cat+0xa0>)
 8007a18:	f009 fd74 	bl	8011504 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d006      	beq.n	8007a32 <pbuf_cat+0x7a>
 8007a24:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <pbuf_cat+0x98>)
 8007a26:	f240 3263 	movw	r2, #867	; 0x363
 8007a2a:	490d      	ldr	r1, [pc, #52]	; (8007a60 <pbuf_cat+0xa8>)
 8007a2c:	480a      	ldr	r0, [pc, #40]	; (8007a58 <pbuf_cat+0xa0>)
 8007a2e:	f009 fd69 	bl	8011504 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	891a      	ldrh	r2, [r3, #8]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	891b      	ldrh	r3, [r3, #8]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	08012ff0 	.word	0x08012ff0
 8007a54:	080131e4 	.word	0x080131e4
 8007a58:	08013050 	.word	0x08013050
 8007a5c:	0801321c 	.word	0x0801321c
 8007a60:	0801324c 	.word	0x0801324c

08007a64 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff ffa1 	bl	80079b8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007a76:	6838      	ldr	r0, [r7, #0]
 8007a78:	f7ff ff7c 	bl	8007974 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007a7c:	bf00      	nop
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	2300      	movs	r3, #0
 8007a94:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <pbuf_copy+0x2a>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <pbuf_copy+0x2a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	891a      	ldrh	r2, [r3, #8]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	891b      	ldrh	r3, [r3, #8]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d209      	bcs.n	8007ac2 <pbuf_copy+0x3e>
 8007aae:	4b57      	ldr	r3, [pc, #348]	; (8007c0c <pbuf_copy+0x188>)
 8007ab0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007ab4:	4956      	ldr	r1, [pc, #344]	; (8007c10 <pbuf_copy+0x18c>)
 8007ab6:	4857      	ldr	r0, [pc, #348]	; (8007c14 <pbuf_copy+0x190>)
 8007ab8:	f009 fd24 	bl	8011504 <iprintf>
 8007abc:	f06f 030f 	mvn.w	r3, #15
 8007ac0:	e09f      	b.n	8007c02 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	895b      	ldrh	r3, [r3, #10]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	1ad2      	subs	r2, r2, r3
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	895b      	ldrh	r3, [r3, #10]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1acb      	subs	r3, r1, r3
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d306      	bcc.n	8007ae8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	895b      	ldrh	r3, [r3, #10]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	e005      	b.n	8007af4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	895b      	ldrh	r3, [r3, #10]
 8007aec:	461a      	mov	r2, r3
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	18d0      	adds	r0, r2, r3
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	4413      	add	r3, r2
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	4619      	mov	r1, r3
 8007b08:	f009 fccc 	bl	80114a4 <memcpy>
    offset_to += len;
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4413      	add	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	895b      	ldrh	r3, [r3, #10]
 8007b20:	461a      	mov	r2, r3
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d906      	bls.n	8007b36 <pbuf_copy+0xb2>
 8007b28:	4b38      	ldr	r3, [pc, #224]	; (8007c0c <pbuf_copy+0x188>)
 8007b2a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007b2e:	493a      	ldr	r1, [pc, #232]	; (8007c18 <pbuf_copy+0x194>)
 8007b30:	4838      	ldr	r0, [pc, #224]	; (8007c14 <pbuf_copy+0x190>)
 8007b32:	f009 fce7 	bl	8011504 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	895b      	ldrh	r3, [r3, #10]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d906      	bls.n	8007b50 <pbuf_copy+0xcc>
 8007b42:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <pbuf_copy+0x188>)
 8007b44:	f240 32da 	movw	r2, #986	; 0x3da
 8007b48:	4934      	ldr	r1, [pc, #208]	; (8007c1c <pbuf_copy+0x198>)
 8007b4a:	4832      	ldr	r0, [pc, #200]	; (8007c14 <pbuf_copy+0x190>)
 8007b4c:	f009 fcda 	bl	8011504 <iprintf>
    if (offset_from >= p_from->len) {
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	895b      	ldrh	r3, [r3, #10]
 8007b54:	461a      	mov	r2, r3
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d304      	bcc.n	8007b66 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	895b      	ldrh	r3, [r3, #10]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d114      	bne.n	8007b9c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10c      	bne.n	8007b9c <pbuf_copy+0x118>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d009      	beq.n	8007b9c <pbuf_copy+0x118>
 8007b88:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <pbuf_copy+0x188>)
 8007b8a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007b8e:	4924      	ldr	r1, [pc, #144]	; (8007c20 <pbuf_copy+0x19c>)
 8007b90:	4820      	ldr	r0, [pc, #128]	; (8007c14 <pbuf_copy+0x190>)
 8007b92:	f009 fcb7 	bl	8011504 <iprintf>
 8007b96:	f06f 030f 	mvn.w	r3, #15
 8007b9a:	e032      	b.n	8007c02 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d013      	beq.n	8007bca <pbuf_copy+0x146>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	895a      	ldrh	r2, [r3, #10]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	891b      	ldrh	r3, [r3, #8]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d10d      	bne.n	8007bca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <pbuf_copy+0x146>
 8007bb6:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <pbuf_copy+0x188>)
 8007bb8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007bbc:	4919      	ldr	r1, [pc, #100]	; (8007c24 <pbuf_copy+0x1a0>)
 8007bbe:	4815      	ldr	r0, [pc, #84]	; (8007c14 <pbuf_copy+0x190>)
 8007bc0:	f009 fca0 	bl	8011504 <iprintf>
 8007bc4:	f06f 0305 	mvn.w	r3, #5
 8007bc8:	e01b      	b.n	8007c02 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d013      	beq.n	8007bf8 <pbuf_copy+0x174>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	895a      	ldrh	r2, [r3, #10]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	891b      	ldrh	r3, [r3, #8]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d10d      	bne.n	8007bf8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d009      	beq.n	8007bf8 <pbuf_copy+0x174>
 8007be4:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <pbuf_copy+0x188>)
 8007be6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007bea:	490e      	ldr	r1, [pc, #56]	; (8007c24 <pbuf_copy+0x1a0>)
 8007bec:	4809      	ldr	r0, [pc, #36]	; (8007c14 <pbuf_copy+0x190>)
 8007bee:	f009 fc89 	bl	8011504 <iprintf>
 8007bf2:	f06f 0305 	mvn.w	r3, #5
 8007bf6:	e004      	b.n	8007c02 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f47f af61 	bne.w	8007ac2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	08012ff0 	.word	0x08012ff0
 8007c10:	08013298 	.word	0x08013298
 8007c14:	08013050 	.word	0x08013050
 8007c18:	080132c8 	.word	0x080132c8
 8007c1c:	080132e0 	.word	0x080132e0
 8007c20:	080132fc 	.word	0x080132fc
 8007c24:	0801330c 	.word	0x0801330c

08007c28 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	460b      	mov	r3, r1
 8007c38:	80fb      	strh	r3, [r7, #6]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d108      	bne.n	8007c5e <pbuf_copy_partial+0x36>
 8007c4c:	4b2b      	ldr	r3, [pc, #172]	; (8007cfc <pbuf_copy_partial+0xd4>)
 8007c4e:	f240 420a 	movw	r2, #1034	; 0x40a
 8007c52:	492b      	ldr	r1, [pc, #172]	; (8007d00 <pbuf_copy_partial+0xd8>)
 8007c54:	482b      	ldr	r0, [pc, #172]	; (8007d04 <pbuf_copy_partial+0xdc>)
 8007c56:	f009 fc55 	bl	8011504 <iprintf>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e04a      	b.n	8007cf4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d108      	bne.n	8007c76 <pbuf_copy_partial+0x4e>
 8007c64:	4b25      	ldr	r3, [pc, #148]	; (8007cfc <pbuf_copy_partial+0xd4>)
 8007c66:	f240 420b 	movw	r2, #1035	; 0x40b
 8007c6a:	4927      	ldr	r1, [pc, #156]	; (8007d08 <pbuf_copy_partial+0xe0>)
 8007c6c:	4825      	ldr	r0, [pc, #148]	; (8007d04 <pbuf_copy_partial+0xdc>)
 8007c6e:	f009 fc49 	bl	8011504 <iprintf>
 8007c72:	2300      	movs	r3, #0
 8007c74:	e03e      	b.n	8007cf4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	e034      	b.n	8007ce6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007c7c:	88bb      	ldrh	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <pbuf_copy_partial+0x70>
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	895b      	ldrh	r3, [r3, #10]
 8007c86:	88ba      	ldrh	r2, [r7, #4]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d305      	bcc.n	8007c98 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	895b      	ldrh	r3, [r3, #10]
 8007c90:	88ba      	ldrh	r2, [r7, #4]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	80bb      	strh	r3, [r7, #4]
 8007c96:	e023      	b.n	8007ce0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	895a      	ldrh	r2, [r3, #10]
 8007c9c:	88bb      	ldrh	r3, [r7, #4]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007ca2:	8b3a      	ldrh	r2, [r7, #24]
 8007ca4:	88fb      	ldrh	r3, [r7, #6]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d901      	bls.n	8007cae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007caa:	88fb      	ldrh	r3, [r7, #6]
 8007cac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007cae:	8b7b      	ldrh	r3, [r7, #26]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	18d0      	adds	r0, r2, r3
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	88bb      	ldrh	r3, [r7, #4]
 8007cba:	4413      	add	r3, r2
 8007cbc:	8b3a      	ldrh	r2, [r7, #24]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	f009 fbf0 	bl	80114a4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007cc4:	8afa      	ldrh	r2, [r7, #22]
 8007cc6:	8b3b      	ldrh	r3, [r7, #24]
 8007cc8:	4413      	add	r3, r2
 8007cca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007ccc:	8b7a      	ldrh	r2, [r7, #26]
 8007cce:	8b3b      	ldrh	r3, [r7, #24]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007cd4:	88fa      	ldrh	r2, [r7, #6]
 8007cd6:	8b3b      	ldrh	r3, [r7, #24]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	61fb      	str	r3, [r7, #28]
 8007ce6:	88fb      	ldrh	r3, [r7, #6]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <pbuf_copy_partial+0xca>
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1c4      	bne.n	8007c7c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007cf2:	8afb      	ldrh	r3, [r7, #22]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3720      	adds	r7, #32
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	08012ff0 	.word	0x08012ff0
 8007d00:	08013338 	.word	0x08013338
 8007d04:	08013050 	.word	0x08013050
 8007d08:	08013358 	.word	0x08013358

08007d0c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d109      	bne.n	8007d3c <pbuf_take+0x30>
 8007d28:	4b3a      	ldr	r3, [pc, #232]	; (8007e14 <pbuf_take+0x108>)
 8007d2a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8007d2e:	493a      	ldr	r1, [pc, #232]	; (8007e18 <pbuf_take+0x10c>)
 8007d30:	483a      	ldr	r0, [pc, #232]	; (8007e1c <pbuf_take+0x110>)
 8007d32:	f009 fbe7 	bl	8011504 <iprintf>
 8007d36:	f06f 030f 	mvn.w	r3, #15
 8007d3a:	e067      	b.n	8007e0c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <pbuf_take+0x4a>
 8007d42:	4b34      	ldr	r3, [pc, #208]	; (8007e14 <pbuf_take+0x108>)
 8007d44:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8007d48:	4935      	ldr	r1, [pc, #212]	; (8007e20 <pbuf_take+0x114>)
 8007d4a:	4834      	ldr	r0, [pc, #208]	; (8007e1c <pbuf_take+0x110>)
 8007d4c:	f009 fbda 	bl	8011504 <iprintf>
 8007d50:	f06f 030f 	mvn.w	r3, #15
 8007d54:	e05a      	b.n	8007e0c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	891b      	ldrh	r3, [r3, #8]
 8007d5a:	88fa      	ldrh	r2, [r7, #6]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d909      	bls.n	8007d74 <pbuf_take+0x68>
 8007d60:	4b2c      	ldr	r3, [pc, #176]	; (8007e14 <pbuf_take+0x108>)
 8007d62:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8007d66:	492f      	ldr	r1, [pc, #188]	; (8007e24 <pbuf_take+0x118>)
 8007d68:	482c      	ldr	r0, [pc, #176]	; (8007e1c <pbuf_take+0x110>)
 8007d6a:	f009 fbcb 	bl	8011504 <iprintf>
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d72:	e04b      	b.n	8007e0c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d007      	beq.n	8007d8a <pbuf_take+0x7e>
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d004      	beq.n	8007d8a <pbuf_take+0x7e>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	891b      	ldrh	r3, [r3, #8]
 8007d84:	88fa      	ldrh	r2, [r7, #6]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d902      	bls.n	8007d90 <pbuf_take+0x84>
    return ERR_ARG;
 8007d8a:	f06f 030f 	mvn.w	r3, #15
 8007d8e:	e03d      	b.n	8007e0c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	61fb      	str	r3, [r7, #28]
 8007d94:	e028      	b.n	8007de8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <pbuf_take+0x9e>
 8007d9c:	4b1d      	ldr	r3, [pc, #116]	; (8007e14 <pbuf_take+0x108>)
 8007d9e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007da2:	4921      	ldr	r1, [pc, #132]	; (8007e28 <pbuf_take+0x11c>)
 8007da4:	481d      	ldr	r0, [pc, #116]	; (8007e1c <pbuf_take+0x110>)
 8007da6:	f009 fbad 	bl	8011504 <iprintf>
    buf_copy_len = total_copy_len;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	895b      	ldrh	r3, [r3, #10]
 8007db2:	461a      	mov	r2, r3
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d902      	bls.n	8007dc0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	895b      	ldrh	r3, [r3, #10]
 8007dbe:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	6858      	ldr	r0, [r3, #4]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	4413      	add	r3, r2
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f009 fb69 	bl	80114a4 <memcpy>
    total_copy_len -= buf_copy_len;
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	4413      	add	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1d3      	bne.n	8007d96 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d103      	bne.n	8007dfc <pbuf_take+0xf0>
 8007df4:	88fb      	ldrh	r3, [r7, #6]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d006      	beq.n	8007e0a <pbuf_take+0xfe>
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <pbuf_take+0x108>)
 8007dfe:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8007e02:	490a      	ldr	r1, [pc, #40]	; (8007e2c <pbuf_take+0x120>)
 8007e04:	4805      	ldr	r0, [pc, #20]	; (8007e1c <pbuf_take+0x110>)
 8007e06:	f009 fb7d 	bl	8011504 <iprintf>
  return ERR_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3720      	adds	r7, #32
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	08012ff0 	.word	0x08012ff0
 8007e18:	080133c8 	.word	0x080133c8
 8007e1c:	08013050 	.word	0x08013050
 8007e20:	080133e0 	.word	0x080133e0
 8007e24:	080133fc 	.word	0x080133fc
 8007e28:	0801341c 	.word	0x0801341c
 8007e2c:	08013434 	.word	0x08013434

08007e30 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	603a      	str	r2, [r7, #0]
 8007e3a:	71fb      	strb	r3, [r7, #7]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	8919      	ldrh	r1, [r3, #8]
 8007e44:	88ba      	ldrh	r2, [r7, #4]
 8007e46:	79fb      	ldrb	r3, [r7, #7]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7ff fa0f 	bl	800726c <pbuf_alloc>
 8007e4e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <pbuf_clone+0x2a>
    return NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e011      	b.n	8007e7e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f7ff fe11 	bl	8007a84 <pbuf_copy>
 8007e62:	4603      	mov	r3, r0
 8007e64:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007e66:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d006      	beq.n	8007e7c <pbuf_clone+0x4c>
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <pbuf_clone+0x58>)
 8007e70:	f240 5224 	movw	r2, #1316	; 0x524
 8007e74:	4905      	ldr	r1, [pc, #20]	; (8007e8c <pbuf_clone+0x5c>)
 8007e76:	4806      	ldr	r0, [pc, #24]	; (8007e90 <pbuf_clone+0x60>)
 8007e78:	f009 fb44 	bl	8011504 <iprintf>
  return q;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	08012ff0 	.word	0x08012ff0
 8007e8c:	08013464 	.word	0x08013464
 8007e90:	08013050 	.word	0x08013050

08007e94 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007e98:	f009 fb4c 	bl	8011534 <rand>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	4b01      	ldr	r3, [pc, #4]	; (8007eb4 <tcp_init+0x20>)
 8007eae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007eb0:	bf00      	nop
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	2000002a 	.word	0x2000002a

08007eb8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7d1b      	ldrb	r3, [r3, #20]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d105      	bne.n	8007ed4 <tcp_free+0x1c>
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <tcp_free+0x2c>)
 8007eca:	22d4      	movs	r2, #212	; 0xd4
 8007ecc:	4906      	ldr	r1, [pc, #24]	; (8007ee8 <tcp_free+0x30>)
 8007ece:	4807      	ldr	r0, [pc, #28]	; (8007eec <tcp_free+0x34>)
 8007ed0:	f009 fb18 	bl	8011504 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f7fe fe9a 	bl	8006c10 <memp_free>
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	080134f0 	.word	0x080134f0
 8007ee8:	08013520 	.word	0x08013520
 8007eec:	08013534 	.word	0x08013534

08007ef0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	7d1b      	ldrb	r3, [r3, #20]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d105      	bne.n	8007f0c <tcp_free_listen+0x1c>
 8007f00:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <tcp_free_listen+0x2c>)
 8007f02:	22df      	movs	r2, #223	; 0xdf
 8007f04:	4906      	ldr	r1, [pc, #24]	; (8007f20 <tcp_free_listen+0x30>)
 8007f06:	4807      	ldr	r0, [pc, #28]	; (8007f24 <tcp_free_listen+0x34>)
 8007f08:	f009 fafc 	bl	8011504 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	2002      	movs	r0, #2
 8007f10:	f7fe fe7e 	bl	8006c10 <memp_free>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	080134f0 	.word	0x080134f0
 8007f20:	0801355c 	.word	0x0801355c
 8007f24:	08013534 	.word	0x08013534

08007f28 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007f2c:	f001 f974 	bl	8009218 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <tcp_tmr+0x28>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <tcp_tmr+0x28>)
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	4b04      	ldr	r3, [pc, #16]	; (8007f50 <tcp_tmr+0x28>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007f48:	f000 fe26 	bl	8008b98 <tcp_slowtmr>
  }
}
 8007f4c:	bf00      	nop
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	200000fd 	.word	0x200000fd

08007f54 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d105      	bne.n	8007f70 <tcp_remove_listener+0x1c>
 8007f64:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <tcp_remove_listener+0x48>)
 8007f66:	22ff      	movs	r2, #255	; 0xff
 8007f68:	490d      	ldr	r1, [pc, #52]	; (8007fa0 <tcp_remove_listener+0x4c>)
 8007f6a:	480e      	ldr	r0, [pc, #56]	; (8007fa4 <tcp_remove_listener+0x50>)
 8007f6c:	f009 faca 	bl	8011504 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e00a      	b.n	8007f8c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d102      	bne.n	8007f86 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f1      	bne.n	8007f76 <tcp_remove_listener+0x22>
    }
  }
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	080134f0 	.word	0x080134f0
 8007fa0:	08013578 	.word	0x08013578
 8007fa4:	08013534 	.word	0x08013534

08007fa8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d106      	bne.n	8007fc4 <tcp_listen_closed+0x1c>
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <tcp_listen_closed+0x60>)
 8007fb8:	f240 1211 	movw	r2, #273	; 0x111
 8007fbc:	4913      	ldr	r1, [pc, #76]	; (800800c <tcp_listen_closed+0x64>)
 8007fbe:	4814      	ldr	r0, [pc, #80]	; (8008010 <tcp_listen_closed+0x68>)
 8007fc0:	f009 faa0 	bl	8011504 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	7d1b      	ldrb	r3, [r3, #20]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d006      	beq.n	8007fda <tcp_listen_closed+0x32>
 8007fcc:	4b0e      	ldr	r3, [pc, #56]	; (8008008 <tcp_listen_closed+0x60>)
 8007fce:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007fd2:	4910      	ldr	r1, [pc, #64]	; (8008014 <tcp_listen_closed+0x6c>)
 8007fd4:	480e      	ldr	r0, [pc, #56]	; (8008010 <tcp_listen_closed+0x68>)
 8007fd6:	f009 fa95 	bl	8011504 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007fda:	2301      	movs	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]
 8007fde:	e00b      	b.n	8007ff8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007fe0:	4a0d      	ldr	r2, [pc, #52]	; (8008018 <tcp_listen_closed+0x70>)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff ffb1 	bl	8007f54 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d9f0      	bls.n	8007fe0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	080134f0 	.word	0x080134f0
 800800c:	080135a0 	.word	0x080135a0
 8008010:	08013534 	.word	0x08013534
 8008014:	080135ac 	.word	0x080135ac
 8008018:	080154bc 	.word	0x080154bc

0800801c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800801c:	b5b0      	push	{r4, r5, r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af04      	add	r7, sp, #16
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <tcp_close_shutdown+0x20>
 800802e:	4b63      	ldr	r3, [pc, #396]	; (80081bc <tcp_close_shutdown+0x1a0>)
 8008030:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008034:	4962      	ldr	r1, [pc, #392]	; (80081c0 <tcp_close_shutdown+0x1a4>)
 8008036:	4863      	ldr	r0, [pc, #396]	; (80081c4 <tcp_close_shutdown+0x1a8>)
 8008038:	f009 fa64 	bl	8011504 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d066      	beq.n	8008110 <tcp_close_shutdown+0xf4>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	7d1b      	ldrb	r3, [r3, #20]
 8008046:	2b04      	cmp	r3, #4
 8008048:	d003      	beq.n	8008052 <tcp_close_shutdown+0x36>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	7d1b      	ldrb	r3, [r3, #20]
 800804e:	2b07      	cmp	r3, #7
 8008050:	d15e      	bne.n	8008110 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008056:	2b00      	cmp	r3, #0
 8008058:	d104      	bne.n	8008064 <tcp_close_shutdown+0x48>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008062:	d055      	beq.n	8008110 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8b5b      	ldrh	r3, [r3, #26]
 8008068:	f003 0310 	and.w	r3, r3, #16
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <tcp_close_shutdown+0x62>
 8008070:	4b52      	ldr	r3, [pc, #328]	; (80081bc <tcp_close_shutdown+0x1a0>)
 8008072:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008076:	4954      	ldr	r1, [pc, #336]	; (80081c8 <tcp_close_shutdown+0x1ac>)
 8008078:	4852      	ldr	r0, [pc, #328]	; (80081c4 <tcp_close_shutdown+0x1a8>)
 800807a:	f009 fa43 	bl	8011504 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008086:	687d      	ldr	r5, [r7, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	8ad2      	ldrh	r2, [r2, #22]
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	8b09      	ldrh	r1, [r1, #24]
 8008094:	9102      	str	r1, [sp, #8]
 8008096:	9201      	str	r2, [sp, #4]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	462b      	mov	r3, r5
 800809c:	4622      	mov	r2, r4
 800809e:	4601      	mov	r1, r0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f005 fe9d 	bl	800dde0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 fc7e 	bl	80099a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80080ac:	4b47      	ldr	r3, [pc, #284]	; (80081cc <tcp_close_shutdown+0x1b0>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d105      	bne.n	80080c2 <tcp_close_shutdown+0xa6>
 80080b6:	4b45      	ldr	r3, [pc, #276]	; (80081cc <tcp_close_shutdown+0x1b0>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	4a43      	ldr	r2, [pc, #268]	; (80081cc <tcp_close_shutdown+0x1b0>)
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	e013      	b.n	80080ea <tcp_close_shutdown+0xce>
 80080c2:	4b42      	ldr	r3, [pc, #264]	; (80081cc <tcp_close_shutdown+0x1b0>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	e00c      	b.n	80080e4 <tcp_close_shutdown+0xc8>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d104      	bne.n	80080de <tcp_close_shutdown+0xc2>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	60da      	str	r2, [r3, #12]
 80080dc:	e005      	b.n	80080ea <tcp_close_shutdown+0xce>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1ef      	bne.n	80080ca <tcp_close_shutdown+0xae>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	60da      	str	r2, [r3, #12]
 80080f0:	4b37      	ldr	r3, [pc, #220]	; (80081d0 <tcp_close_shutdown+0x1b4>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80080f6:	4b37      	ldr	r3, [pc, #220]	; (80081d4 <tcp_close_shutdown+0x1b8>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d102      	bne.n	8008106 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008100:	f004 f912 	bl	800c328 <tcp_trigger_input_pcb_close>
 8008104:	e002      	b.n	800810c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff fed6 	bl	8007eb8 <tcp_free>
      }
      return ERR_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e050      	b.n	80081b2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	7d1b      	ldrb	r3, [r3, #20]
 8008114:	2b02      	cmp	r3, #2
 8008116:	d03b      	beq.n	8008190 <tcp_close_shutdown+0x174>
 8008118:	2b02      	cmp	r3, #2
 800811a:	dc44      	bgt.n	80081a6 <tcp_close_shutdown+0x18a>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <tcp_close_shutdown+0x10a>
 8008120:	2b01      	cmp	r3, #1
 8008122:	d02a      	beq.n	800817a <tcp_close_shutdown+0x15e>
 8008124:	e03f      	b.n	80081a6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8adb      	ldrh	r3, [r3, #22]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d021      	beq.n	8008172 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800812e:	4b2a      	ldr	r3, [pc, #168]	; (80081d8 <tcp_close_shutdown+0x1bc>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	429a      	cmp	r2, r3
 8008136:	d105      	bne.n	8008144 <tcp_close_shutdown+0x128>
 8008138:	4b27      	ldr	r3, [pc, #156]	; (80081d8 <tcp_close_shutdown+0x1bc>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	4a26      	ldr	r2, [pc, #152]	; (80081d8 <tcp_close_shutdown+0x1bc>)
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	e013      	b.n	800816c <tcp_close_shutdown+0x150>
 8008144:	4b24      	ldr	r3, [pc, #144]	; (80081d8 <tcp_close_shutdown+0x1bc>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	e00c      	b.n	8008166 <tcp_close_shutdown+0x14a>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d104      	bne.n	8008160 <tcp_close_shutdown+0x144>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	60da      	str	r2, [r3, #12]
 800815e:	e005      	b.n	800816c <tcp_close_shutdown+0x150>
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	60bb      	str	r3, [r7, #8]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1ef      	bne.n	800814c <tcp_close_shutdown+0x130>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff fea0 	bl	8007eb8 <tcp_free>
      break;
 8008178:	e01a      	b.n	80081b0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff ff14 	bl	8007fa8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	4816      	ldr	r0, [pc, #88]	; (80081dc <tcp_close_shutdown+0x1c0>)
 8008184:	f001 fc60 	bl	8009a48 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff feb1 	bl	8007ef0 <tcp_free_listen>
      break;
 800818e:	e00f      	b.n	80081b0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	480e      	ldr	r0, [pc, #56]	; (80081cc <tcp_close_shutdown+0x1b0>)
 8008194:	f001 fc58 	bl	8009a48 <tcp_pcb_remove>
 8008198:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <tcp_close_shutdown+0x1b4>)
 800819a:	2201      	movs	r2, #1
 800819c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff fe8a 	bl	8007eb8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80081a4:	e004      	b.n	80081b0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f81a 	bl	80081e0 <tcp_close_shutdown_fin>
 80081ac:	4603      	mov	r3, r0
 80081ae:	e000      	b.n	80081b2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bdb0      	pop	{r4, r5, r7, pc}
 80081ba:	bf00      	nop
 80081bc:	080134f0 	.word	0x080134f0
 80081c0:	080135c4 	.word	0x080135c4
 80081c4:	08013534 	.word	0x08013534
 80081c8:	080135e4 	.word	0x080135e4
 80081cc:	20008b38 	.word	0x20008b38
 80081d0:	20008b34 	.word	0x20008b34
 80081d4:	20008b4c 	.word	0x20008b4c
 80081d8:	20008b44 	.word	0x20008b44
 80081dc:	20008b40 	.word	0x20008b40

080081e0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d106      	bne.n	80081fc <tcp_close_shutdown_fin+0x1c>
 80081ee:	4b2e      	ldr	r3, [pc, #184]	; (80082a8 <tcp_close_shutdown_fin+0xc8>)
 80081f0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80081f4:	492d      	ldr	r1, [pc, #180]	; (80082ac <tcp_close_shutdown_fin+0xcc>)
 80081f6:	482e      	ldr	r0, [pc, #184]	; (80082b0 <tcp_close_shutdown_fin+0xd0>)
 80081f8:	f009 f984 	bl	8011504 <iprintf>

  switch (pcb->state) {
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	7d1b      	ldrb	r3, [r3, #20]
 8008200:	2b07      	cmp	r3, #7
 8008202:	d020      	beq.n	8008246 <tcp_close_shutdown_fin+0x66>
 8008204:	2b07      	cmp	r3, #7
 8008206:	dc2b      	bgt.n	8008260 <tcp_close_shutdown_fin+0x80>
 8008208:	2b03      	cmp	r3, #3
 800820a:	d002      	beq.n	8008212 <tcp_close_shutdown_fin+0x32>
 800820c:	2b04      	cmp	r3, #4
 800820e:	d00d      	beq.n	800822c <tcp_close_shutdown_fin+0x4c>
 8008210:	e026      	b.n	8008260 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f004 fef2 	bl	800cffc <tcp_send_fin>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800821c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d11f      	bne.n	8008264 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2205      	movs	r2, #5
 8008228:	751a      	strb	r2, [r3, #20]
      }
      break;
 800822a:	e01b      	b.n	8008264 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f004 fee5 	bl	800cffc <tcp_send_fin>
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d114      	bne.n	8008268 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2205      	movs	r2, #5
 8008242:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008244:	e010      	b.n	8008268 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f004 fed8 	bl	800cffc <tcp_send_fin>
 800824c:	4603      	mov	r3, r0
 800824e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d109      	bne.n	800826c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2209      	movs	r2, #9
 800825c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800825e:	e005      	b.n	800826c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	e01c      	b.n	800829e <tcp_close_shutdown_fin+0xbe>
      break;
 8008264:	bf00      	nop
 8008266:	e002      	b.n	800826e <tcp_close_shutdown_fin+0x8e>
      break;
 8008268:	bf00      	nop
 800826a:	e000      	b.n	800826e <tcp_close_shutdown_fin+0x8e>
      break;
 800826c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800826e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d103      	bne.n	800827e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f004 fffe 	bl	800d278 <tcp_output>
 800827c:	e00d      	b.n	800829a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800827e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008286:	d108      	bne.n	800829a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	8b5b      	ldrh	r3, [r3, #26]
 800828c:	f043 0308 	orr.w	r3, r3, #8
 8008290:	b29a      	uxth	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	e001      	b.n	800829e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800829a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	080134f0 	.word	0x080134f0
 80082ac:	080135a0 	.word	0x080135a0
 80082b0:	08013534 	.word	0x08013534

080082b4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d109      	bne.n	80082d6 <tcp_close+0x22>
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <tcp_close+0x4c>)
 80082c4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80082c8:	490e      	ldr	r1, [pc, #56]	; (8008304 <tcp_close+0x50>)
 80082ca:	480f      	ldr	r0, [pc, #60]	; (8008308 <tcp_close+0x54>)
 80082cc:	f009 f91a 	bl	8011504 <iprintf>
 80082d0:	f06f 030f 	mvn.w	r3, #15
 80082d4:	e00f      	b.n	80082f6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7d1b      	ldrb	r3, [r3, #20]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d006      	beq.n	80082ec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8b5b      	ldrh	r3, [r3, #26]
 80082e2:	f043 0310 	orr.w	r3, r3, #16
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80082ec:	2101      	movs	r1, #1
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff fe94 	bl	800801c <tcp_close_shutdown>
 80082f4:	4603      	mov	r3, r0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	080134f0 	.word	0x080134f0
 8008304:	08013600 	.word	0x08013600
 8008308:	08013534 	.word	0x08013534

0800830c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08e      	sub	sp, #56	; 0x38
 8008310:	af04      	add	r7, sp, #16
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d107      	bne.n	800832c <tcp_abandon+0x20>
 800831c:	4b52      	ldr	r3, [pc, #328]	; (8008468 <tcp_abandon+0x15c>)
 800831e:	f240 223d 	movw	r2, #573	; 0x23d
 8008322:	4952      	ldr	r1, [pc, #328]	; (800846c <tcp_abandon+0x160>)
 8008324:	4852      	ldr	r0, [pc, #328]	; (8008470 <tcp_abandon+0x164>)
 8008326:	f009 f8ed 	bl	8011504 <iprintf>
 800832a:	e099      	b.n	8008460 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	7d1b      	ldrb	r3, [r3, #20]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d106      	bne.n	8008342 <tcp_abandon+0x36>
 8008334:	4b4c      	ldr	r3, [pc, #304]	; (8008468 <tcp_abandon+0x15c>)
 8008336:	f44f 7210 	mov.w	r2, #576	; 0x240
 800833a:	494e      	ldr	r1, [pc, #312]	; (8008474 <tcp_abandon+0x168>)
 800833c:	484c      	ldr	r0, [pc, #304]	; (8008470 <tcp_abandon+0x164>)
 800833e:	f009 f8e1 	bl	8011504 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	7d1b      	ldrb	r3, [r3, #20]
 8008346:	2b0a      	cmp	r3, #10
 8008348:	d107      	bne.n	800835a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	484a      	ldr	r0, [pc, #296]	; (8008478 <tcp_abandon+0x16c>)
 800834e:	f001 fb7b 	bl	8009a48 <tcp_pcb_remove>
    tcp_free(pcb);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff fdb0 	bl	8007eb8 <tcp_free>
 8008358:	e082      	b.n	8008460 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800835a:	2300      	movs	r3, #0
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008366:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008374:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7d1b      	ldrb	r3, [r3, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d126      	bne.n	80083d2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	8adb      	ldrh	r3, [r3, #22]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d02e      	beq.n	80083ea <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800838c:	4b3b      	ldr	r3, [pc, #236]	; (800847c <tcp_abandon+0x170>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	429a      	cmp	r2, r3
 8008394:	d105      	bne.n	80083a2 <tcp_abandon+0x96>
 8008396:	4b39      	ldr	r3, [pc, #228]	; (800847c <tcp_abandon+0x170>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	4a37      	ldr	r2, [pc, #220]	; (800847c <tcp_abandon+0x170>)
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	e013      	b.n	80083ca <tcp_abandon+0xbe>
 80083a2:	4b36      	ldr	r3, [pc, #216]	; (800847c <tcp_abandon+0x170>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	e00c      	b.n	80083c4 <tcp_abandon+0xb8>
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d104      	bne.n	80083be <tcp_abandon+0xb2>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	60da      	str	r2, [r3, #12]
 80083bc:	e005      	b.n	80083ca <tcp_abandon+0xbe>
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1ef      	bne.n	80083aa <tcp_abandon+0x9e>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	60da      	str	r2, [r3, #12]
 80083d0:	e00b      	b.n	80083ea <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	8adb      	ldrh	r3, [r3, #22]
 80083da:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4828      	ldr	r0, [pc, #160]	; (8008480 <tcp_abandon+0x174>)
 80083e0:	f001 fb32 	bl	8009a48 <tcp_pcb_remove>
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <tcp_abandon+0x178>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d004      	beq.n	80083fc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 ffee 	bl	80093d8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008408:	4618      	mov	r0, r3
 800840a:	f000 ffe5 	bl	80093d8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008412:	2b00      	cmp	r3, #0
 8008414:	d004      	beq.n	8008420 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800841a:	4618      	mov	r0, r3
 800841c:	f000 ffdc 	bl	80093d8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00e      	beq.n	8008444 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008426:	6879      	ldr	r1, [r7, #4]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3304      	adds	r3, #4
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	8b12      	ldrh	r2, [r2, #24]
 8008430:	9202      	str	r2, [sp, #8]
 8008432:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008434:	9201      	str	r2, [sp, #4]
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	460b      	mov	r3, r1
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	69b9      	ldr	r1, [r7, #24]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f005 fcce 	bl	800dde0 <tcp_rst>
    }
    last_state = pcb->state;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	7d1b      	ldrb	r3, [r3, #20]
 8008448:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff fd34 	bl	8007eb8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d004      	beq.n	8008460 <tcp_abandon+0x154>
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f06f 010c 	mvn.w	r1, #12
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	4798      	blx	r3
  }
}
 8008460:	3728      	adds	r7, #40	; 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	080134f0 	.word	0x080134f0
 800846c:	08013634 	.word	0x08013634
 8008470:	08013534 	.word	0x08013534
 8008474:	08013650 	.word	0x08013650
 8008478:	20008b48 	.word	0x20008b48
 800847c:	20008b44 	.word	0x20008b44
 8008480:	20008b38 	.word	0x20008b38
 8008484:	20008b34 	.word	0x20008b34

08008488 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008490:	2101      	movs	r1, #1
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff ff3a 	bl	800830c <tcp_abandon>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80084ae:	2304      	movs	r3, #4
 80084b0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80084b8:	4b3e      	ldr	r3, [pc, #248]	; (80085b4 <tcp_bind+0x114>)
 80084ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d109      	bne.n	80084d6 <tcp_bind+0x36>
 80084c2:	4b3d      	ldr	r3, [pc, #244]	; (80085b8 <tcp_bind+0x118>)
 80084c4:	f240 22a9 	movw	r2, #681	; 0x2a9
 80084c8:	493c      	ldr	r1, [pc, #240]	; (80085bc <tcp_bind+0x11c>)
 80084ca:	483d      	ldr	r0, [pc, #244]	; (80085c0 <tcp_bind+0x120>)
 80084cc:	f009 f81a 	bl	8011504 <iprintf>
 80084d0:	f06f 030f 	mvn.w	r3, #15
 80084d4:	e06a      	b.n	80085ac <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	7d1b      	ldrb	r3, [r3, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <tcp_bind+0x52>
 80084de:	4b36      	ldr	r3, [pc, #216]	; (80085b8 <tcp_bind+0x118>)
 80084e0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80084e4:	4937      	ldr	r1, [pc, #220]	; (80085c4 <tcp_bind+0x124>)
 80084e6:	4836      	ldr	r0, [pc, #216]	; (80085c0 <tcp_bind+0x120>)
 80084e8:	f009 f80c 	bl	8011504 <iprintf>
 80084ec:	f06f 0305 	mvn.w	r3, #5
 80084f0:	e05c      	b.n	80085ac <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80084f2:	88fb      	ldrh	r3, [r7, #6]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <tcp_bind+0x6c>
    port = tcp_new_port();
 80084f8:	f000 f9f0 	bl	80088dc <tcp_new_port>
 80084fc:	4603      	mov	r3, r0
 80084fe:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d135      	bne.n	8008572 <tcp_bind+0xd2>
      return ERR_BUF;
 8008506:	f06f 0301 	mvn.w	r3, #1
 800850a:	e04f      	b.n	80085ac <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800850c:	2300      	movs	r3, #0
 800850e:	61fb      	str	r3, [r7, #28]
 8008510:	e02b      	b.n	800856a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008512:	4a2d      	ldr	r2, [pc, #180]	; (80085c8 <tcp_bind+0x128>)
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	61bb      	str	r3, [r7, #24]
 800851e:	e01e      	b.n	800855e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	8adb      	ldrh	r3, [r3, #22]
 8008524:	88fa      	ldrh	r2, [r7, #6]
 8008526:	429a      	cmp	r2, r3
 8008528:	d116      	bne.n	8008558 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800852a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800852c:	2b00      	cmp	r3, #0
 800852e:	d010      	beq.n	8008552 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00c      	beq.n	8008552 <tcp_bind+0xb2>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d005      	beq.n	8008552 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800854e:	429a      	cmp	r2, r3
 8008550:	d102      	bne.n	8008558 <tcp_bind+0xb8>
              return ERR_USE;
 8008552:	f06f 0307 	mvn.w	r3, #7
 8008556:	e029      	b.n	80085ac <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	61bb      	str	r3, [r7, #24]
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1dd      	bne.n	8008520 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	3301      	adds	r3, #1
 8008568:	61fb      	str	r3, [r7, #28]
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	429a      	cmp	r2, r3
 8008570:	dbcf      	blt.n	8008512 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00c      	beq.n	8008592 <tcp_bind+0xf2>
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d008      	beq.n	8008592 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <tcp_bind+0xec>
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	e000      	b.n	800858e <tcp_bind+0xee>
 800858c:	2300      	movs	r3, #0
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	88fa      	ldrh	r2, [r7, #6]
 8008596:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008598:	4b0c      	ldr	r3, [pc, #48]	; (80085cc <tcp_bind+0x12c>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	60da      	str	r2, [r3, #12]
 80085a0:	4a0a      	ldr	r2, [pc, #40]	; (80085cc <tcp_bind+0x12c>)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	f005 fddd 	bl	800e164 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3720      	adds	r7, #32
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	080154e4 	.word	0x080154e4
 80085b8:	080134f0 	.word	0x080134f0
 80085bc:	08013684 	.word	0x08013684
 80085c0:	08013534 	.word	0x08013534
 80085c4:	0801369c 	.word	0x0801369c
 80085c8:	080154bc 	.word	0x080154bc
 80085cc:	20008b44 	.word	0x20008b44

080085d0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d106      	bne.n	80085f2 <tcp_accept_null+0x22>
 80085e4:	4b07      	ldr	r3, [pc, #28]	; (8008604 <tcp_accept_null+0x34>)
 80085e6:	f240 320f 	movw	r2, #783	; 0x30f
 80085ea:	4907      	ldr	r1, [pc, #28]	; (8008608 <tcp_accept_null+0x38>)
 80085ec:	4807      	ldr	r0, [pc, #28]	; (800860c <tcp_accept_null+0x3c>)
 80085ee:	f008 ff89 	bl	8011504 <iprintf>

  tcp_abort(pcb);
 80085f2:	68b8      	ldr	r0, [r7, #8]
 80085f4:	f7ff ff48 	bl	8008488 <tcp_abort>

  return ERR_ABRT;
 80085f8:	f06f 030c 	mvn.w	r3, #12
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	080134f0 	.word	0x080134f0
 8008608:	080136c4 	.word	0x080136c4
 800860c:	08013534 	.word	0x08013534

08008610 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	2200      	movs	r2, #0
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f806 	bl	8008634 <tcp_listen_with_backlog_and_err>
 8008628:	4603      	mov	r3, r0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	460b      	mov	r3, r1
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <tcp_listen_with_backlog_and_err+0x2c>
 800864c:	4b47      	ldr	r3, [pc, #284]	; (800876c <tcp_listen_with_backlog_and_err+0x138>)
 800864e:	f240 3259 	movw	r2, #857	; 0x359
 8008652:	4947      	ldr	r1, [pc, #284]	; (8008770 <tcp_listen_with_backlog_and_err+0x13c>)
 8008654:	4847      	ldr	r0, [pc, #284]	; (8008774 <tcp_listen_with_backlog_and_err+0x140>)
 8008656:	f008 ff55 	bl	8011504 <iprintf>
 800865a:	23f0      	movs	r3, #240	; 0xf0
 800865c:	76fb      	strb	r3, [r7, #27]
 800865e:	e079      	b.n	8008754 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	7d1b      	ldrb	r3, [r3, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d009      	beq.n	800867c <tcp_listen_with_backlog_and_err+0x48>
 8008668:	4b40      	ldr	r3, [pc, #256]	; (800876c <tcp_listen_with_backlog_and_err+0x138>)
 800866a:	f240 325a 	movw	r2, #858	; 0x35a
 800866e:	4942      	ldr	r1, [pc, #264]	; (8008778 <tcp_listen_with_backlog_and_err+0x144>)
 8008670:	4840      	ldr	r0, [pc, #256]	; (8008774 <tcp_listen_with_backlog_and_err+0x140>)
 8008672:	f008 ff47 	bl	8011504 <iprintf>
 8008676:	23f1      	movs	r3, #241	; 0xf1
 8008678:	76fb      	strb	r3, [r7, #27]
 800867a:	e06b      	b.n	8008754 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	7d1b      	ldrb	r3, [r3, #20]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d104      	bne.n	800868e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008688:	23f7      	movs	r3, #247	; 0xf7
 800868a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800868c:	e062      	b.n	8008754 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800868e:	2002      	movs	r0, #2
 8008690:	f7fe fa72 	bl	8006b78 <memp_malloc>
 8008694:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d102      	bne.n	80086a2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800869c:	23ff      	movs	r3, #255	; 0xff
 800869e:	76fb      	strb	r3, [r7, #27]
    goto done;
 80086a0:	e058      	b.n	8008754 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	691a      	ldr	r2, [r3, #16]
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8ada      	ldrh	r2, [r3, #22]
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	2201      	movs	r2, #1
 80086b6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	7d5a      	ldrb	r2, [r3, #21]
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	7a5a      	ldrb	r2, [r3, #9]
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	2200      	movs	r2, #0
 80086cc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	7ada      	ldrb	r2, [r3, #11]
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	7a9a      	ldrb	r2, [r3, #10]
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	8adb      	ldrh	r3, [r3, #22]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d021      	beq.n	8008732 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80086ee:	4b23      	ldr	r3, [pc, #140]	; (800877c <tcp_listen_with_backlog_and_err+0x148>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d105      	bne.n	8008704 <tcp_listen_with_backlog_and_err+0xd0>
 80086f8:	4b20      	ldr	r3, [pc, #128]	; (800877c <tcp_listen_with_backlog_and_err+0x148>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	4a1f      	ldr	r2, [pc, #124]	; (800877c <tcp_listen_with_backlog_and_err+0x148>)
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	e013      	b.n	800872c <tcp_listen_with_backlog_and_err+0xf8>
 8008704:	4b1d      	ldr	r3, [pc, #116]	; (800877c <tcp_listen_with_backlog_and_err+0x148>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	617b      	str	r3, [r7, #20]
 800870a:	e00c      	b.n	8008726 <tcp_listen_with_backlog_and_err+0xf2>
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	429a      	cmp	r2, r3
 8008714:	d104      	bne.n	8008720 <tcp_listen_with_backlog_and_err+0xec>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	e005      	b.n	800872c <tcp_listen_with_backlog_and_err+0xf8>
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1ef      	bne.n	800870c <tcp_listen_with_backlog_and_err+0xd8>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7ff fbc0 	bl	8007eb8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	4a11      	ldr	r2, [pc, #68]	; (8008780 <tcp_listen_with_backlog_and_err+0x14c>)
 800873c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800873e:	4b11      	ldr	r3, [pc, #68]	; (8008784 <tcp_listen_with_backlog_and_err+0x150>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	60da      	str	r2, [r3, #12]
 8008746:	4a0f      	ldr	r2, [pc, #60]	; (8008784 <tcp_listen_with_backlog_and_err+0x150>)
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	f005 fd0a 	bl	800e164 <tcp_timer_needed>
  res = ERR_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	7efa      	ldrb	r2, [r7, #27]
 800875e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008760:	69fb      	ldr	r3, [r7, #28]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3720      	adds	r7, #32
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	080134f0 	.word	0x080134f0
 8008770:	080136e4 	.word	0x080136e4
 8008774:	08013534 	.word	0x08013534
 8008778:	08013714 	.word	0x08013714
 800877c:	20008b44 	.word	0x20008b44
 8008780:	080085d1 	.word	0x080085d1
 8008784:	20008b40 	.word	0x20008b40

08008788 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d106      	bne.n	80087a4 <tcp_update_rcv_ann_wnd+0x1c>
 8008796:	4b25      	ldr	r3, [pc, #148]	; (800882c <tcp_update_rcv_ann_wnd+0xa4>)
 8008798:	f240 32a6 	movw	r2, #934	; 0x3a6
 800879c:	4924      	ldr	r1, [pc, #144]	; (8008830 <tcp_update_rcv_ann_wnd+0xa8>)
 800879e:	4825      	ldr	r0, [pc, #148]	; (8008834 <tcp_update_rcv_ann_wnd+0xac>)
 80087a0:	f008 feb0 	bl	8011504 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80087ac:	4413      	add	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80087b8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80087bc:	bf28      	it	cs
 80087be:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80087c2:	b292      	uxth	r2, r2
 80087c4:	4413      	add	r3, r2
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	db08      	blt.n	80087e0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	e020      	b.n	8008822 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dd03      	ble.n	80087f6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087f4:	e014      	b.n	8008820 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008808:	d306      	bcc.n	8008818 <tcp_update_rcv_ann_wnd+0x90>
 800880a:	4b08      	ldr	r3, [pc, #32]	; (800882c <tcp_update_rcv_ann_wnd+0xa4>)
 800880c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008810:	4909      	ldr	r1, [pc, #36]	; (8008838 <tcp_update_rcv_ann_wnd+0xb0>)
 8008812:	4808      	ldr	r0, [pc, #32]	; (8008834 <tcp_update_rcv_ann_wnd+0xac>)
 8008814:	f008 fe76 	bl	8011504 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008820:	2300      	movs	r3, #0
  }
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	080134f0 	.word	0x080134f0
 8008830:	0801374c 	.word	0x0801374c
 8008834:	08013534 	.word	0x08013534
 8008838:	08013770 	.word	0x08013770

0800883c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d107      	bne.n	800885e <tcp_recved+0x22>
 800884e:	4b1f      	ldr	r3, [pc, #124]	; (80088cc <tcp_recved+0x90>)
 8008850:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008854:	491e      	ldr	r1, [pc, #120]	; (80088d0 <tcp_recved+0x94>)
 8008856:	481f      	ldr	r0, [pc, #124]	; (80088d4 <tcp_recved+0x98>)
 8008858:	f008 fe54 	bl	8011504 <iprintf>
 800885c:	e032      	b.n	80088c4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	7d1b      	ldrb	r3, [r3, #20]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d106      	bne.n	8008874 <tcp_recved+0x38>
 8008866:	4b19      	ldr	r3, [pc, #100]	; (80088cc <tcp_recved+0x90>)
 8008868:	f240 32d2 	movw	r2, #978	; 0x3d2
 800886c:	491a      	ldr	r1, [pc, #104]	; (80088d8 <tcp_recved+0x9c>)
 800886e:	4819      	ldr	r0, [pc, #100]	; (80088d4 <tcp_recved+0x98>)
 8008870:	f008 fe48 	bl	8011504 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008878:	887b      	ldrh	r3, [r7, #2]
 800887a:	4413      	add	r3, r2
 800887c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800887e:	89fb      	ldrh	r3, [r7, #14]
 8008880:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008884:	d804      	bhi.n	8008890 <tcp_recved+0x54>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888a:	89fa      	ldrh	r2, [r7, #14]
 800888c:	429a      	cmp	r2, r3
 800888e:	d204      	bcs.n	800889a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008896:	851a      	strh	r2, [r3, #40]	; 0x28
 8008898:	e002      	b.n	80088a0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	89fa      	ldrh	r2, [r7, #14]
 800889e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff ff71 	bl	8008788 <tcp_update_rcv_ann_wnd>
 80088a6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80088ae:	d309      	bcc.n	80088c4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8b5b      	ldrh	r3, [r3, #26]
 80088b4:	f043 0302 	orr.w	r3, r3, #2
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f004 fcda 	bl	800d278 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	080134f0 	.word	0x080134f0
 80088d0:	0801378c 	.word	0x0801378c
 80088d4:	08013534 	.word	0x08013534
 80088d8:	080137a4 	.word	0x080137a4

080088dc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80088e6:	4b1e      	ldr	r3, [pc, #120]	; (8008960 <tcp_new_port+0x84>)
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	4b1c      	ldr	r3, [pc, #112]	; (8008960 <tcp_new_port+0x84>)
 80088f0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80088f2:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <tcp_new_port+0x84>)
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d103      	bne.n	8008906 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80088fe:	4b18      	ldr	r3, [pc, #96]	; (8008960 <tcp_new_port+0x84>)
 8008900:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008904:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008906:	2300      	movs	r3, #0
 8008908:	71fb      	strb	r3, [r7, #7]
 800890a:	e01e      	b.n	800894a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800890c:	79fb      	ldrb	r3, [r7, #7]
 800890e:	4a15      	ldr	r2, [pc, #84]	; (8008964 <tcp_new_port+0x88>)
 8008910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	e011      	b.n	800893e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	8ada      	ldrh	r2, [r3, #22]
 800891e:	4b10      	ldr	r3, [pc, #64]	; (8008960 <tcp_new_port+0x84>)
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d108      	bne.n	8008938 <tcp_new_port+0x5c>
        n++;
 8008926:	88bb      	ldrh	r3, [r7, #4]
 8008928:	3301      	adds	r3, #1
 800892a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800892c:	88bb      	ldrh	r3, [r7, #4]
 800892e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008932:	d3d8      	bcc.n	80088e6 <tcp_new_port+0xa>
          return 0;
 8008934:	2300      	movs	r3, #0
 8008936:	e00d      	b.n	8008954 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	603b      	str	r3, [r7, #0]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1ea      	bne.n	800891a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	3301      	adds	r3, #1
 8008948:	71fb      	strb	r3, [r7, #7]
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	2b03      	cmp	r3, #3
 800894e:	d9dd      	bls.n	800890c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008950:	4b03      	ldr	r3, [pc, #12]	; (8008960 <tcp_new_port+0x84>)
 8008952:	881b      	ldrh	r3, [r3, #0]
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	2000002a 	.word	0x2000002a
 8008964:	080154bc 	.word	0x080154bc

08008968 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b08a      	sub	sp, #40	; 0x28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	4613      	mov	r3, r2
 8008976:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8008978:	2300      	movs	r3, #0
 800897a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d109      	bne.n	8008996 <tcp_connect+0x2e>
 8008982:	4b7d      	ldr	r3, [pc, #500]	; (8008b78 <tcp_connect+0x210>)
 8008984:	f240 4235 	movw	r2, #1077	; 0x435
 8008988:	497c      	ldr	r1, [pc, #496]	; (8008b7c <tcp_connect+0x214>)
 800898a:	487d      	ldr	r0, [pc, #500]	; (8008b80 <tcp_connect+0x218>)
 800898c:	f008 fdba 	bl	8011504 <iprintf>
 8008990:	f06f 030f 	mvn.w	r3, #15
 8008994:	e0ec      	b.n	8008b70 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d109      	bne.n	80089b0 <tcp_connect+0x48>
 800899c:	4b76      	ldr	r3, [pc, #472]	; (8008b78 <tcp_connect+0x210>)
 800899e:	f240 4236 	movw	r2, #1078	; 0x436
 80089a2:	4978      	ldr	r1, [pc, #480]	; (8008b84 <tcp_connect+0x21c>)
 80089a4:	4876      	ldr	r0, [pc, #472]	; (8008b80 <tcp_connect+0x218>)
 80089a6:	f008 fdad 	bl	8011504 <iprintf>
 80089aa:	f06f 030f 	mvn.w	r3, #15
 80089ae:	e0df      	b.n	8008b70 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	7d1b      	ldrb	r3, [r3, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d009      	beq.n	80089cc <tcp_connect+0x64>
 80089b8:	4b6f      	ldr	r3, [pc, #444]	; (8008b78 <tcp_connect+0x210>)
 80089ba:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80089be:	4972      	ldr	r1, [pc, #456]	; (8008b88 <tcp_connect+0x220>)
 80089c0:	486f      	ldr	r0, [pc, #444]	; (8008b80 <tcp_connect+0x218>)
 80089c2:	f008 fd9f 	bl	8011504 <iprintf>
 80089c6:	f06f 0309 	mvn.w	r3, #9
 80089ca:	e0d1      	b.n	8008b70 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <tcp_connect+0x70>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	e000      	b.n	80089da <tcp_connect+0x72>
 80089d8:	2300      	movs	r3, #0
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	88fa      	ldrh	r2, [r7, #6]
 80089e2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	7a1b      	ldrb	r3, [r3, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d006      	beq.n	80089fa <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	7a1b      	ldrb	r3, [r3, #8]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fbbf 	bl	8007174 <netif_get_by_index>
 80089f6:	6278      	str	r0, [r7, #36]	; 0x24
 80089f8:	e005      	b.n	8008a06 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4618      	mov	r0, r3
 8008a00:	f007 faa6 	bl	800ff50 <ip4_route>
 8008a04:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8008a0c:	f06f 0303 	mvn.w	r3, #3
 8008a10:	e0ae      	b.n	8008b70 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <tcp_connect+0xb8>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d111      	bne.n	8008a44 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <tcp_connect+0xc4>
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	3304      	adds	r3, #4
 8008a2a:	e000      	b.n	8008a2e <tcp_connect+0xc6>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <tcp_connect+0xd4>
      return ERR_RTE;
 8008a36:	f06f 0303 	mvn.w	r3, #3
 8008a3a:	e099      	b.n	8008b70 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8adb      	ldrh	r3, [r3, #22]
 8008a48:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8adb      	ldrh	r3, [r3, #22]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10c      	bne.n	8008a6c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8008a52:	f7ff ff43 	bl	80088dc <tcp_new_port>
 8008a56:	4603      	mov	r3, r0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8adb      	ldrh	r3, [r3, #22]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d102      	bne.n	8008a6c <tcp_connect+0x104>
      return ERR_BUF;
 8008a66:	f06f 0301 	mvn.w	r3, #1
 8008a6a:	e081      	b.n	8008b70 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f001 f87f 	bl	8009b70 <tcp_next_iss>
 8008a72:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	1e5a      	subs	r2, r3, #1
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	1e5a      	subs	r2, r3, #1
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	1e5a      	subs	r2, r3, #1
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008ab6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008ac0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	461a      	mov	r2, r3
 8008acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ace:	f001 f875 	bl	8009bbc <tcp_eff_send_mss_netif>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8008aea:	2102      	movs	r1, #2
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f004 fad5 	bl	800d09c <tcp_enqueue_flags>
 8008af2:	4603      	mov	r3, r0
 8008af4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8008af6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d136      	bne.n	8008b6c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2202      	movs	r2, #2
 8008b02:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8008b04:	8b7b      	ldrh	r3, [r7, #26]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d021      	beq.n	8008b4e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008b0a:	4b20      	ldr	r3, [pc, #128]	; (8008b8c <tcp_connect+0x224>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d105      	bne.n	8008b20 <tcp_connect+0x1b8>
 8008b14:	4b1d      	ldr	r3, [pc, #116]	; (8008b8c <tcp_connect+0x224>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	4a1c      	ldr	r2, [pc, #112]	; (8008b8c <tcp_connect+0x224>)
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	e013      	b.n	8008b48 <tcp_connect+0x1e0>
 8008b20:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <tcp_connect+0x224>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	623b      	str	r3, [r7, #32]
 8008b26:	e00c      	b.n	8008b42 <tcp_connect+0x1da>
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d104      	bne.n	8008b3c <tcp_connect+0x1d4>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	60da      	str	r2, [r3, #12]
 8008b3a:	e005      	b.n	8008b48 <tcp_connect+0x1e0>
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	623b      	str	r3, [r7, #32]
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1ef      	bne.n	8008b28 <tcp_connect+0x1c0>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8008b4e:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <tcp_connect+0x228>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	60da      	str	r2, [r3, #12]
 8008b56:	4a0e      	ldr	r2, [pc, #56]	; (8008b90 <tcp_connect+0x228>)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	f005 fb02 	bl	800e164 <tcp_timer_needed>
 8008b60:	4b0c      	ldr	r3, [pc, #48]	; (8008b94 <tcp_connect+0x22c>)
 8008b62:	2201      	movs	r2, #1
 8008b64:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f004 fb86 	bl	800d278 <tcp_output>
  }
  return ret;
 8008b6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3728      	adds	r7, #40	; 0x28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	080134f0 	.word	0x080134f0
 8008b7c:	080137cc 	.word	0x080137cc
 8008b80:	08013534 	.word	0x08013534
 8008b84:	080137e8 	.word	0x080137e8
 8008b88:	08013804 	.word	0x08013804
 8008b8c:	20008b44 	.word	0x20008b44
 8008b90:	20008b38 	.word	0x20008b38
 8008b94:	20008b34 	.word	0x20008b34

08008b98 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008b98:	b5b0      	push	{r4, r5, r7, lr}
 8008b9a:	b090      	sub	sp, #64	; 0x40
 8008b9c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008ba4:	4b94      	ldr	r3, [pc, #592]	; (8008df8 <tcp_slowtmr+0x260>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	4a93      	ldr	r2, [pc, #588]	; (8008df8 <tcp_slowtmr+0x260>)
 8008bac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008bae:	4b93      	ldr	r3, [pc, #588]	; (8008dfc <tcp_slowtmr+0x264>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	4b91      	ldr	r3, [pc, #580]	; (8008dfc <tcp_slowtmr+0x264>)
 8008bb8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008bbe:	4b90      	ldr	r3, [pc, #576]	; (8008e00 <tcp_slowtmr+0x268>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008bc4:	e29d      	b.n	8009102 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc8:	7d1b      	ldrb	r3, [r3, #20]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d106      	bne.n	8008bdc <tcp_slowtmr+0x44>
 8008bce:	4b8d      	ldr	r3, [pc, #564]	; (8008e04 <tcp_slowtmr+0x26c>)
 8008bd0:	f240 42be 	movw	r2, #1214	; 0x4be
 8008bd4:	498c      	ldr	r1, [pc, #560]	; (8008e08 <tcp_slowtmr+0x270>)
 8008bd6:	488d      	ldr	r0, [pc, #564]	; (8008e0c <tcp_slowtmr+0x274>)
 8008bd8:	f008 fc94 	bl	8011504 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	7d1b      	ldrb	r3, [r3, #20]
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d106      	bne.n	8008bf2 <tcp_slowtmr+0x5a>
 8008be4:	4b87      	ldr	r3, [pc, #540]	; (8008e04 <tcp_slowtmr+0x26c>)
 8008be6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008bea:	4989      	ldr	r1, [pc, #548]	; (8008e10 <tcp_slowtmr+0x278>)
 8008bec:	4887      	ldr	r0, [pc, #540]	; (8008e0c <tcp_slowtmr+0x274>)
 8008bee:	f008 fc89 	bl	8011504 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf4:	7d1b      	ldrb	r3, [r3, #20]
 8008bf6:	2b0a      	cmp	r3, #10
 8008bf8:	d106      	bne.n	8008c08 <tcp_slowtmr+0x70>
 8008bfa:	4b82      	ldr	r3, [pc, #520]	; (8008e04 <tcp_slowtmr+0x26c>)
 8008bfc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008c00:	4984      	ldr	r1, [pc, #528]	; (8008e14 <tcp_slowtmr+0x27c>)
 8008c02:	4882      	ldr	r0, [pc, #520]	; (8008e0c <tcp_slowtmr+0x274>)
 8008c04:	f008 fc7e 	bl	8011504 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0a:	7f9a      	ldrb	r2, [r3, #30]
 8008c0c:	4b7b      	ldr	r3, [pc, #492]	; (8008dfc <tcp_slowtmr+0x264>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d105      	bne.n	8008c20 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008c1e:	e270      	b.n	8009102 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008c20:	4b76      	ldr	r3, [pc, #472]	; (8008dfc <tcp_slowtmr+0x264>)
 8008c22:	781a      	ldrb	r2, [r3, #0]
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	7d1b      	ldrb	r3, [r3, #20]
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d10a      	bne.n	8008c52 <tcp_slowtmr+0xba>
 8008c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c42:	2b05      	cmp	r3, #5
 8008c44:	d905      	bls.n	8008c52 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c50:	e11e      	b.n	8008e90 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c58:	2b0b      	cmp	r3, #11
 8008c5a:	d905      	bls.n	8008c68 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c60:	3301      	adds	r3, #1
 8008c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c66:	e113      	b.n	8008e90 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d075      	beq.n	8008d5e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d006      	beq.n	8008c88 <tcp_slowtmr+0xf0>
 8008c7a:	4b62      	ldr	r3, [pc, #392]	; (8008e04 <tcp_slowtmr+0x26c>)
 8008c7c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008c80:	4965      	ldr	r1, [pc, #404]	; (8008e18 <tcp_slowtmr+0x280>)
 8008c82:	4862      	ldr	r0, [pc, #392]	; (8008e0c <tcp_slowtmr+0x274>)
 8008c84:	f008 fc3e 	bl	8011504 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d106      	bne.n	8008c9e <tcp_slowtmr+0x106>
 8008c90:	4b5c      	ldr	r3, [pc, #368]	; (8008e04 <tcp_slowtmr+0x26c>)
 8008c92:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008c96:	4961      	ldr	r1, [pc, #388]	; (8008e1c <tcp_slowtmr+0x284>)
 8008c98:	485c      	ldr	r0, [pc, #368]	; (8008e0c <tcp_slowtmr+0x274>)
 8008c9a:	f008 fc33 	bl	8011504 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008ca4:	2b0b      	cmp	r3, #11
 8008ca6:	d905      	bls.n	8008cb4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cac:	3301      	adds	r3, #1
 8008cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008cb2:	e0ed      	b.n	8008e90 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	4a58      	ldr	r2, [pc, #352]	; (8008e20 <tcp_slowtmr+0x288>)
 8008cbe:	5cd3      	ldrb	r3, [r2, r3]
 8008cc0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008cc8:	7c7a      	ldrb	r2, [r7, #17]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d907      	bls.n	8008cde <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008ce4:	7c7a      	ldrb	r2, [r7, #17]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	f200 80d2 	bhi.w	8008e90 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008cec:	2301      	movs	r3, #1
 8008cee:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d108      	bne.n	8008d0c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cfc:	f005 f964 	bl	800dfc8 <tcp_zero_window_probe>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d014      	beq.n	8008d30 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008d06:	2300      	movs	r3, #0
 8008d08:	623b      	str	r3, [r7, #32]
 8008d0a:	e011      	b.n	8008d30 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d12:	4619      	mov	r1, r3
 8008d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d16:	f004 f829 	bl	800cd6c <tcp_split_unsent_seg>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d107      	bne.n	8008d30 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d22:	f004 faa9 	bl	800d278 <tcp_output>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008d30:	6a3b      	ldr	r3, [r7, #32]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80ac 	beq.w	8008e90 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008d46:	2b06      	cmp	r3, #6
 8008d48:	f200 80a2 	bhi.w	8008e90 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008d52:	3301      	adds	r3, #1
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008d5c:	e098      	b.n	8008e90 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	db0f      	blt.n	8008d88 <tcp_slowtmr+0x1f0>
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d008      	beq.n	8008d88 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3301      	adds	r3, #1
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	b21a      	sxth	r2, r3
 8008d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d86:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d90:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008d94:	429a      	cmp	r2, r3
 8008d96:	db7b      	blt.n	8008e90 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008d98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d9a:	f004 fd5f 	bl	800d85c <tcp_rexmit_rto_prepare>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <tcp_slowtmr+0x21c>
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d171      	bne.n	8008e90 <tcp_slowtmr+0x2f8>
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d06d      	beq.n	8008e90 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	7d1b      	ldrb	r3, [r3, #20]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d03a      	beq.n	8008e32 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008dc2:	2b0c      	cmp	r3, #12
 8008dc4:	bf28      	it	cs
 8008dc6:	230c      	movcs	r3, #12
 8008dc8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dcc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008dd0:	10db      	asrs	r3, r3, #3
 8008dd2:	b21b      	sxth	r3, r3
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ddc:	4413      	add	r3, r2
 8008dde:	7efa      	ldrb	r2, [r7, #27]
 8008de0:	4910      	ldr	r1, [pc, #64]	; (8008e24 <tcp_slowtmr+0x28c>)
 8008de2:	5c8a      	ldrb	r2, [r1, r2]
 8008de4:	4093      	lsls	r3, r2
 8008de6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008dee:	4293      	cmp	r3, r2
 8008df0:	dc1a      	bgt.n	8008e28 <tcp_slowtmr+0x290>
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	b21a      	sxth	r2, r3
 8008df6:	e019      	b.n	8008e2c <tcp_slowtmr+0x294>
 8008df8:	20008b3c 	.word	0x20008b3c
 8008dfc:	200000fe 	.word	0x200000fe
 8008e00:	20008b38 	.word	0x20008b38
 8008e04:	080134f0 	.word	0x080134f0
 8008e08:	08013834 	.word	0x08013834
 8008e0c:	08013534 	.word	0x08013534
 8008e10:	08013860 	.word	0x08013860
 8008e14:	0801388c 	.word	0x0801388c
 8008e18:	080138bc 	.word	0x080138bc
 8008e1c:	080138f0 	.word	0x080138f0
 8008e20:	080154b4 	.word	0x080154b4
 8008e24:	080154a4 	.word	0x080154a4
 8008e28:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	2200      	movs	r2, #0
 8008e36:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008e44:	4293      	cmp	r3, r2
 8008e46:	bf28      	it	cs
 8008e48:	4613      	movcs	r3, r2
 8008e4a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008e4c:	8a7b      	ldrh	r3, [r7, #18]
 8008e4e:	085b      	lsrs	r3, r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d206      	bcs.n	8008e78 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008e8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e8c:	f004 fd56 	bl	800d93c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	7d1b      	ldrb	r3, [r3, #20]
 8008e94:	2b06      	cmp	r3, #6
 8008e96:	d111      	bne.n	8008ebc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	8b5b      	ldrh	r3, [r3, #26]
 8008e9c:	f003 0310 	and.w	r3, r3, #16
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00b      	beq.n	8008ebc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ea4:	4b9c      	ldr	r3, [pc, #624]	; (8009118 <tcp_slowtmr+0x580>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b28      	cmp	r3, #40	; 0x28
 8008eb0:	d904      	bls.n	8008ebc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	7a5b      	ldrb	r3, [r3, #9]
 8008ec0:	f003 0308 	and.w	r3, r3, #8
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d04a      	beq.n	8008f5e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d003      	beq.n	8008ed8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008ed4:	2b07      	cmp	r3, #7
 8008ed6:	d142      	bne.n	8008f5e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ed8:	4b8f      	ldr	r3, [pc, #572]	; (8009118 <tcp_slowtmr+0x580>)
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008ee8:	4b8c      	ldr	r3, [pc, #560]	; (800911c <tcp_slowtmr+0x584>)
 8008eea:	440b      	add	r3, r1
 8008eec:	498c      	ldr	r1, [pc, #560]	; (8009120 <tcp_slowtmr+0x588>)
 8008eee:	fba1 1303 	umull	r1, r3, r1, r3
 8008ef2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d90a      	bls.n	8008f0e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008efc:	3301      	adds	r3, #1
 8008efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008f02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008f06:	3301      	adds	r3, #1
 8008f08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008f0c:	e027      	b.n	8008f5e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f0e:	4b82      	ldr	r3, [pc, #520]	; (8009118 <tcp_slowtmr+0x580>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008f24:	4618      	mov	r0, r3
 8008f26:	4b7f      	ldr	r3, [pc, #508]	; (8009124 <tcp_slowtmr+0x58c>)
 8008f28:	fb03 f300 	mul.w	r3, r3, r0
 8008f2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008f2e:	497c      	ldr	r1, [pc, #496]	; (8009120 <tcp_slowtmr+0x588>)
 8008f30:	fba1 1303 	umull	r1, r3, r1, r3
 8008f34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d911      	bls.n	8008f5e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f3c:	f005 f804 	bl	800df48 <tcp_keepalive>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008f46:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d107      	bne.n	8008f5e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008f54:	3301      	adds	r3, #1
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d011      	beq.n	8008f8a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008f66:	4b6c      	ldr	r3, [pc, #432]	; (8009118 <tcp_slowtmr+0x580>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008f76:	4619      	mov	r1, r3
 8008f78:	460b      	mov	r3, r1
 8008f7a:	005b      	lsls	r3, r3, #1
 8008f7c:	440b      	add	r3, r1
 8008f7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d302      	bcc.n	8008f8a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f86:	f000 fec3 	bl	8009d10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	7d1b      	ldrb	r3, [r3, #20]
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d10b      	bne.n	8008faa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f92:	4b61      	ldr	r3, [pc, #388]	; (8009118 <tcp_slowtmr+0x580>)
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	2b28      	cmp	r3, #40	; 0x28
 8008f9e:	d904      	bls.n	8008faa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	7d1b      	ldrb	r3, [r3, #20]
 8008fae:	2b09      	cmp	r3, #9
 8008fb0:	d10b      	bne.n	8008fca <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008fb2:	4b59      	ldr	r3, [pc, #356]	; (8009118 <tcp_slowtmr+0x580>)
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	2bf0      	cmp	r3, #240	; 0xf0
 8008fbe:	d904      	bls.n	8008fca <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d060      	beq.n	8009094 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008fda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fdc:	f000 fce4 	bl	80099a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d010      	beq.n	8009008 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008fe6:	4b50      	ldr	r3, [pc, #320]	; (8009128 <tcp_slowtmr+0x590>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d106      	bne.n	8008ffe <tcp_slowtmr+0x466>
 8008ff0:	4b4e      	ldr	r3, [pc, #312]	; (800912c <tcp_slowtmr+0x594>)
 8008ff2:	f240 526d 	movw	r2, #1389	; 0x56d
 8008ff6:	494e      	ldr	r1, [pc, #312]	; (8009130 <tcp_slowtmr+0x598>)
 8008ff8:	484e      	ldr	r0, [pc, #312]	; (8009134 <tcp_slowtmr+0x59c>)
 8008ffa:	f008 fa83 	bl	8011504 <iprintf>
        prev->next = pcb->next;
 8008ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	60da      	str	r2, [r3, #12]
 8009006:	e00f      	b.n	8009028 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009008:	4b47      	ldr	r3, [pc, #284]	; (8009128 <tcp_slowtmr+0x590>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800900e:	429a      	cmp	r2, r3
 8009010:	d006      	beq.n	8009020 <tcp_slowtmr+0x488>
 8009012:	4b46      	ldr	r3, [pc, #280]	; (800912c <tcp_slowtmr+0x594>)
 8009014:	f240 5271 	movw	r2, #1393	; 0x571
 8009018:	4947      	ldr	r1, [pc, #284]	; (8009138 <tcp_slowtmr+0x5a0>)
 800901a:	4846      	ldr	r0, [pc, #280]	; (8009134 <tcp_slowtmr+0x59c>)
 800901c:	f008 fa72 	bl	8011504 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	4a40      	ldr	r2, [pc, #256]	; (8009128 <tcp_slowtmr+0x590>)
 8009026:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800902c:	2b00      	cmp	r3, #0
 800902e:	d013      	beq.n	8009058 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009032:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009038:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	3304      	adds	r3, #4
 800903e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009040:	8ad2      	ldrh	r2, [r2, #22]
 8009042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009044:	8b09      	ldrh	r1, [r1, #24]
 8009046:	9102      	str	r1, [sp, #8]
 8009048:	9201      	str	r2, [sp, #4]
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	462b      	mov	r3, r5
 800904e:	4622      	mov	r2, r4
 8009050:	4601      	mov	r1, r0
 8009052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009054:	f004 fec4 	bl	800dde0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009060:	7d1b      	ldrb	r3, [r3, #20]
 8009062:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009066:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800906e:	6838      	ldr	r0, [r7, #0]
 8009070:	f7fe ff22 	bl	8007eb8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009074:	4b31      	ldr	r3, [pc, #196]	; (800913c <tcp_slowtmr+0x5a4>)
 8009076:	2200      	movs	r2, #0
 8009078:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d004      	beq.n	800908a <tcp_slowtmr+0x4f2>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f06f 010c 	mvn.w	r1, #12
 8009086:	68b8      	ldr	r0, [r7, #8]
 8009088:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800908a:	4b2c      	ldr	r3, [pc, #176]	; (800913c <tcp_slowtmr+0x5a4>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d037      	beq.n	8009102 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8009092:	e592      	b.n	8008bba <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	7f1b      	ldrb	r3, [r3, #28]
 80090a2:	3301      	adds	r3, #1
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80090aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ac:	7f1a      	ldrb	r2, [r3, #28]
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	7f5b      	ldrb	r3, [r3, #29]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d325      	bcc.n	8009102 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	2200      	movs	r2, #0
 80090ba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80090bc:	4b1f      	ldr	r3, [pc, #124]	; (800913c <tcp_slowtmr+0x5a4>)
 80090be:	2200      	movs	r2, #0
 80090c0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00b      	beq.n	80090e4 <tcp_slowtmr+0x54c>
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d4:	6912      	ldr	r2, [r2, #16]
 80090d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	4603      	mov	r3, r0
 80090de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80090e2:	e002      	b.n	80090ea <tcp_slowtmr+0x552>
 80090e4:	2300      	movs	r3, #0
 80090e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80090ea:	4b14      	ldr	r3, [pc, #80]	; (800913c <tcp_slowtmr+0x5a4>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d000      	beq.n	80090f4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80090f2:	e562      	b.n	8008bba <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80090f4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d102      	bne.n	8009102 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80090fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090fe:	f004 f8bb 	bl	800d278 <tcp_output>
  while (pcb != NULL) {
 8009102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009104:	2b00      	cmp	r3, #0
 8009106:	f47f ad5e 	bne.w	8008bc6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800910a:	2300      	movs	r3, #0
 800910c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800910e:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <tcp_slowtmr+0x5a8>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009114:	e069      	b.n	80091ea <tcp_slowtmr+0x652>
 8009116:	bf00      	nop
 8009118:	20008b3c 	.word	0x20008b3c
 800911c:	000a4cb8 	.word	0x000a4cb8
 8009120:	10624dd3 	.word	0x10624dd3
 8009124:	000124f8 	.word	0x000124f8
 8009128:	20008b38 	.word	0x20008b38
 800912c:	080134f0 	.word	0x080134f0
 8009130:	08013928 	.word	0x08013928
 8009134:	08013534 	.word	0x08013534
 8009138:	08013954 	.word	0x08013954
 800913c:	20008b34 	.word	0x20008b34
 8009140:	20008b48 	.word	0x20008b48
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009146:	7d1b      	ldrb	r3, [r3, #20]
 8009148:	2b0a      	cmp	r3, #10
 800914a:	d006      	beq.n	800915a <tcp_slowtmr+0x5c2>
 800914c:	4b2b      	ldr	r3, [pc, #172]	; (80091fc <tcp_slowtmr+0x664>)
 800914e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009152:	492b      	ldr	r1, [pc, #172]	; (8009200 <tcp_slowtmr+0x668>)
 8009154:	482b      	ldr	r0, [pc, #172]	; (8009204 <tcp_slowtmr+0x66c>)
 8009156:	f008 f9d5 	bl	8011504 <iprintf>
    pcb_remove = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009160:	4b29      	ldr	r3, [pc, #164]	; (8009208 <tcp_slowtmr+0x670>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	2bf0      	cmp	r3, #240	; 0xf0
 800916c:	d904      	bls.n	8009178 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800916e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009172:	3301      	adds	r3, #1
 8009174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800917c:	2b00      	cmp	r3, #0
 800917e:	d02f      	beq.n	80091e0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009182:	f000 fc11 	bl	80099a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	2b00      	cmp	r3, #0
 800918a:	d010      	beq.n	80091ae <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800918c:	4b1f      	ldr	r3, [pc, #124]	; (800920c <tcp_slowtmr+0x674>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009192:	429a      	cmp	r2, r3
 8009194:	d106      	bne.n	80091a4 <tcp_slowtmr+0x60c>
 8009196:	4b19      	ldr	r3, [pc, #100]	; (80091fc <tcp_slowtmr+0x664>)
 8009198:	f240 52af 	movw	r2, #1455	; 0x5af
 800919c:	491c      	ldr	r1, [pc, #112]	; (8009210 <tcp_slowtmr+0x678>)
 800919e:	4819      	ldr	r0, [pc, #100]	; (8009204 <tcp_slowtmr+0x66c>)
 80091a0:	f008 f9b0 	bl	8011504 <iprintf>
        prev->next = pcb->next;
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	68da      	ldr	r2, [r3, #12]
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	60da      	str	r2, [r3, #12]
 80091ac:	e00f      	b.n	80091ce <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80091ae:	4b17      	ldr	r3, [pc, #92]	; (800920c <tcp_slowtmr+0x674>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d006      	beq.n	80091c6 <tcp_slowtmr+0x62e>
 80091b8:	4b10      	ldr	r3, [pc, #64]	; (80091fc <tcp_slowtmr+0x664>)
 80091ba:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80091be:	4915      	ldr	r1, [pc, #84]	; (8009214 <tcp_slowtmr+0x67c>)
 80091c0:	4810      	ldr	r0, [pc, #64]	; (8009204 <tcp_slowtmr+0x66c>)
 80091c2:	f008 f99f 	bl	8011504 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80091c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	4a10      	ldr	r2, [pc, #64]	; (800920c <tcp_slowtmr+0x674>)
 80091cc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80091ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80091d8:	69f8      	ldr	r0, [r7, #28]
 80091da:	f7fe fe6d 	bl	8007eb8 <tcp_free>
 80091de:	e004      	b.n	80091ea <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80091e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1a9      	bne.n	8009144 <tcp_slowtmr+0x5ac>
    }
  }
}
 80091f0:	bf00      	nop
 80091f2:	bf00      	nop
 80091f4:	3730      	adds	r7, #48	; 0x30
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bdb0      	pop	{r4, r5, r7, pc}
 80091fa:	bf00      	nop
 80091fc:	080134f0 	.word	0x080134f0
 8009200:	08013980 	.word	0x08013980
 8009204:	08013534 	.word	0x08013534
 8009208:	20008b3c 	.word	0x20008b3c
 800920c:	20008b48 	.word	0x20008b48
 8009210:	080139b0 	.word	0x080139b0
 8009214:	080139d8 	.word	0x080139d8

08009218 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800921e:	4b2d      	ldr	r3, [pc, #180]	; (80092d4 <tcp_fasttmr+0xbc>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	3301      	adds	r3, #1
 8009224:	b2da      	uxtb	r2, r3
 8009226:	4b2b      	ldr	r3, [pc, #172]	; (80092d4 <tcp_fasttmr+0xbc>)
 8009228:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800922a:	4b2b      	ldr	r3, [pc, #172]	; (80092d8 <tcp_fasttmr+0xc0>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009230:	e048      	b.n	80092c4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7f9a      	ldrb	r2, [r3, #30]
 8009236:	4b27      	ldr	r3, [pc, #156]	; (80092d4 <tcp_fasttmr+0xbc>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	429a      	cmp	r2, r3
 800923c:	d03f      	beq.n	80092be <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800923e:	4b25      	ldr	r3, [pc, #148]	; (80092d4 <tcp_fasttmr+0xbc>)
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	8b5b      	ldrh	r3, [r3, #26]
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d010      	beq.n	8009274 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	8b5b      	ldrh	r3, [r3, #26]
 8009256:	f043 0302 	orr.w	r3, r3, #2
 800925a:	b29a      	uxth	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f004 f809 	bl	800d278 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	8b5b      	ldrh	r3, [r3, #26]
 800926a:	f023 0303 	bic.w	r3, r3, #3
 800926e:	b29a      	uxth	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	8b5b      	ldrh	r3, [r3, #26]
 8009278:	f003 0308 	and.w	r3, r3, #8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	8b5b      	ldrh	r3, [r3, #26]
 8009284:	f023 0308 	bic.w	r3, r3, #8
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7fe ffa6 	bl	80081e0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80092a2:	4b0e      	ldr	r3, [pc, #56]	; (80092dc <tcp_fasttmr+0xc4>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f819 	bl	80092e0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80092ae:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <tcp_fasttmr+0xc4>)
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d000      	beq.n	80092b8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80092b6:	e7b8      	b.n	800922a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	607b      	str	r3, [r7, #4]
 80092bc:	e002      	b.n	80092c4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1b3      	bne.n	8009232 <tcp_fasttmr+0x1a>
    }
  }
}
 80092ca:	bf00      	nop
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	200000fe 	.word	0x200000fe
 80092d8:	20008b38 	.word	0x20008b38
 80092dc:	20008b34 	.word	0x20008b34

080092e0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80092e0:	b590      	push	{r4, r7, lr}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d109      	bne.n	8009302 <tcp_process_refused_data+0x22>
 80092ee:	4b37      	ldr	r3, [pc, #220]	; (80093cc <tcp_process_refused_data+0xec>)
 80092f0:	f240 6209 	movw	r2, #1545	; 0x609
 80092f4:	4936      	ldr	r1, [pc, #216]	; (80093d0 <tcp_process_refused_data+0xf0>)
 80092f6:	4837      	ldr	r0, [pc, #220]	; (80093d4 <tcp_process_refused_data+0xf4>)
 80092f8:	f008 f904 	bl	8011504 <iprintf>
 80092fc:	f06f 030f 	mvn.w	r3, #15
 8009300:	e060      	b.n	80093c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009306:	7b5b      	ldrb	r3, [r3, #13]
 8009308:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800930e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <tcp_process_refused_data+0x58>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6918      	ldr	r0, [r3, #16]
 800932a:	2300      	movs	r3, #0
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	47a0      	blx	r4
 8009332:	4603      	mov	r3, r0
 8009334:	73fb      	strb	r3, [r7, #15]
 8009336:	e007      	b.n	8009348 <tcp_process_refused_data+0x68>
 8009338:	2300      	movs	r3, #0
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	2000      	movs	r0, #0
 8009340:	f000 f8c2 	bl	80094c8 <tcp_recv_null>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d12a      	bne.n	80093a6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009350:	7bbb      	ldrb	r3, [r7, #14]
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d033      	beq.n	80093c2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800935e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009362:	d005      	beq.n	8009370 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009368:	3301      	adds	r3, #1
 800936a:	b29a      	uxth	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00b      	beq.n	8009392 <tcp_process_refused_data+0xb2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6918      	ldr	r0, [r3, #16]
 8009384:	2300      	movs	r3, #0
 8009386:	2200      	movs	r2, #0
 8009388:	6879      	ldr	r1, [r7, #4]
 800938a:	47a0      	blx	r4
 800938c:	4603      	mov	r3, r0
 800938e:	73fb      	strb	r3, [r7, #15]
 8009390:	e001      	b.n	8009396 <tcp_process_refused_data+0xb6>
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800939a:	f113 0f0d 	cmn.w	r3, #13
 800939e:	d110      	bne.n	80093c2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80093a0:	f06f 030c 	mvn.w	r3, #12
 80093a4:	e00e      	b.n	80093c4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80093a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093aa:	f113 0f0d 	cmn.w	r3, #13
 80093ae:	d102      	bne.n	80093b6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80093b0:	f06f 030c 	mvn.w	r3, #12
 80093b4:	e006      	b.n	80093c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80093bc:	f06f 0304 	mvn.w	r3, #4
 80093c0:	e000      	b.n	80093c4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd90      	pop	{r4, r7, pc}
 80093cc:	080134f0 	.word	0x080134f0
 80093d0:	08013a00 	.word	0x08013a00
 80093d4:	08013534 	.word	0x08013534

080093d8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80093e0:	e007      	b.n	80093f2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f80a 	bl	8009402 <tcp_seg_free>
    seg = next;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f4      	bne.n	80093e2 <tcp_segs_free+0xa>
  }
}
 80093f8:	bf00      	nop
 80093fa:	bf00      	nop
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00c      	beq.n	800942a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d004      	beq.n	8009422 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fa09 	bl	8007834 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009422:	6879      	ldr	r1, [r7, #4]
 8009424:	2003      	movs	r0, #3
 8009426:	f7fd fbf3 	bl	8006c10 <memp_free>
  }
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d107      	bne.n	8009456 <tcp_setprio+0x22>
 8009446:	4b07      	ldr	r3, [pc, #28]	; (8009464 <tcp_setprio+0x30>)
 8009448:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800944c:	4906      	ldr	r1, [pc, #24]	; (8009468 <tcp_setprio+0x34>)
 800944e:	4807      	ldr	r0, [pc, #28]	; (800946c <tcp_setprio+0x38>)
 8009450:	f008 f858 	bl	8011504 <iprintf>
 8009454:	e002      	b.n	800945c <tcp_setprio+0x28>

  pcb->prio = prio;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	755a      	strb	r2, [r3, #21]
}
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	080134f0 	.word	0x080134f0
 8009468:	08013a28 	.word	0x08013a28
 800946c:	08013534 	.word	0x08013534

08009470 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <tcp_seg_copy+0x1c>
 800947e:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <tcp_seg_copy+0x4c>)
 8009480:	f240 6282 	movw	r2, #1666	; 0x682
 8009484:	490e      	ldr	r1, [pc, #56]	; (80094c0 <tcp_seg_copy+0x50>)
 8009486:	480f      	ldr	r0, [pc, #60]	; (80094c4 <tcp_seg_copy+0x54>)
 8009488:	f008 f83c 	bl	8011504 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800948c:	2003      	movs	r0, #3
 800948e:	f7fd fb73 	bl	8006b78 <memp_malloc>
 8009492:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <tcp_seg_copy+0x2e>
    return NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	e00a      	b.n	80094b4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800949e:	2210      	movs	r2, #16
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f007 fffe 	bl	80114a4 <memcpy>
  pbuf_ref(cseg->p);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe fa61 	bl	8007974 <pbuf_ref>
  return cseg;
 80094b2:	68fb      	ldr	r3, [r7, #12]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	080134f0 	.word	0x080134f0
 80094c0:	08013a44 	.word	0x08013a44
 80094c4:	08013534 	.word	0x08013534

080094c8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d109      	bne.n	80094f0 <tcp_recv_null+0x28>
 80094dc:	4b12      	ldr	r3, [pc, #72]	; (8009528 <tcp_recv_null+0x60>)
 80094de:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80094e2:	4912      	ldr	r1, [pc, #72]	; (800952c <tcp_recv_null+0x64>)
 80094e4:	4812      	ldr	r0, [pc, #72]	; (8009530 <tcp_recv_null+0x68>)
 80094e6:	f008 f80d 	bl	8011504 <iprintf>
 80094ea:	f06f 030f 	mvn.w	r3, #15
 80094ee:	e016      	b.n	800951e <tcp_recv_null+0x56>

  if (p != NULL) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d009      	beq.n	800950a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	891b      	ldrh	r3, [r3, #8]
 80094fa:	4619      	mov	r1, r3
 80094fc:	68b8      	ldr	r0, [r7, #8]
 80094fe:	f7ff f99d 	bl	800883c <tcp_recved>
    pbuf_free(p);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7fe f996 	bl	8007834 <pbuf_free>
 8009508:	e008      	b.n	800951c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800950a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d104      	bne.n	800951c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009512:	68b8      	ldr	r0, [r7, #8]
 8009514:	f7fe fece 	bl	80082b4 <tcp_close>
 8009518:	4603      	mov	r3, r0
 800951a:	e000      	b.n	800951e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	080134f0 	.word	0x080134f0
 800952c:	08013a60 	.word	0x08013a60
 8009530:	08013534 	.word	0x08013534

08009534 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800953e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009542:	2b00      	cmp	r3, #0
 8009544:	db01      	blt.n	800954a <tcp_kill_prio+0x16>
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	e000      	b.n	800954c <tcp_kill_prio+0x18>
 800954a:	237f      	movs	r3, #127	; 0x7f
 800954c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d034      	beq.n	80095be <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009554:	7afb      	ldrb	r3, [r7, #11]
 8009556:	3b01      	subs	r3, #1
 8009558:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009562:	4b19      	ldr	r3, [pc, #100]	; (80095c8 <tcp_kill_prio+0x94>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	e01f      	b.n	80095aa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	7d5b      	ldrb	r3, [r3, #21]
 800956e:	7afa      	ldrb	r2, [r7, #11]
 8009570:	429a      	cmp	r2, r3
 8009572:	d80c      	bhi.n	800958e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009578:	7afa      	ldrb	r2, [r7, #11]
 800957a:	429a      	cmp	r2, r3
 800957c:	d112      	bne.n	80095a4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800957e:	4b13      	ldr	r3, [pc, #76]	; (80095cc <tcp_kill_prio+0x98>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	429a      	cmp	r2, r3
 800958c:	d80a      	bhi.n	80095a4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <tcp_kill_prio+0x98>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	7d5b      	ldrb	r3, [r3, #21]
 80095a2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1dc      	bne.n	800956a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80095b6:	6938      	ldr	r0, [r7, #16]
 80095b8:	f7fe ff66 	bl	8008488 <tcp_abort>
 80095bc:	e000      	b.n	80095c0 <tcp_kill_prio+0x8c>
    return;
 80095be:	bf00      	nop
  }
}
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20008b38 	.word	0x20008b38
 80095cc:	20008b3c 	.word	0x20008b3c

080095d0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d009      	beq.n	80095f4 <tcp_kill_state+0x24>
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	2b09      	cmp	r3, #9
 80095e4:	d006      	beq.n	80095f4 <tcp_kill_state+0x24>
 80095e6:	4b1a      	ldr	r3, [pc, #104]	; (8009650 <tcp_kill_state+0x80>)
 80095e8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80095ec:	4919      	ldr	r1, [pc, #100]	; (8009654 <tcp_kill_state+0x84>)
 80095ee:	481a      	ldr	r0, [pc, #104]	; (8009658 <tcp_kill_state+0x88>)
 80095f0:	f007 ff88 	bl	8011504 <iprintf>

  inactivity = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095fc:	4b17      	ldr	r3, [pc, #92]	; (800965c <tcp_kill_state+0x8c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	e017      	b.n	8009634 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	7d1b      	ldrb	r3, [r3, #20]
 8009608:	79fa      	ldrb	r2, [r7, #7]
 800960a:	429a      	cmp	r2, r3
 800960c:	d10f      	bne.n	800962e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800960e:	4b14      	ldr	r3, [pc, #80]	; (8009660 <tcp_kill_state+0x90>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	429a      	cmp	r2, r3
 800961c:	d807      	bhi.n	800962e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800961e:	4b10      	ldr	r3, [pc, #64]	; (8009660 <tcp_kill_state+0x90>)
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e4      	bne.n	8009604 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009640:	2100      	movs	r1, #0
 8009642:	6938      	ldr	r0, [r7, #16]
 8009644:	f7fe fe62 	bl	800830c <tcp_abandon>
  }
}
 8009648:	bf00      	nop
 800964a:	3718      	adds	r7, #24
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	080134f0 	.word	0x080134f0
 8009654:	08013a7c 	.word	0x08013a7c
 8009658:	08013534 	.word	0x08013534
 800965c:	20008b38 	.word	0x20008b38
 8009660:	20008b3c 	.word	0x20008b3c

08009664 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800966e:	2300      	movs	r3, #0
 8009670:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009672:	4b12      	ldr	r3, [pc, #72]	; (80096bc <tcp_kill_timewait+0x58>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	60fb      	str	r3, [r7, #12]
 8009678:	e012      	b.n	80096a0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800967a:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <tcp_kill_timewait+0x5c>)
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	429a      	cmp	r2, r3
 8009688:	d807      	bhi.n	800969a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800968a:	4b0d      	ldr	r3, [pc, #52]	; (80096c0 <tcp_kill_timewait+0x5c>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	60fb      	str	r3, [r7, #12]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e9      	bne.n	800967a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80096ac:	68b8      	ldr	r0, [r7, #8]
 80096ae:	f7fe feeb 	bl	8008488 <tcp_abort>
  }
}
 80096b2:	bf00      	nop
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20008b48 	.word	0x20008b48
 80096c0:	20008b3c 	.word	0x20008b3c

080096c4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80096ca:	4b10      	ldr	r3, [pc, #64]	; (800970c <tcp_handle_closepend+0x48>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80096d0:	e014      	b.n	80096fc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	8b5b      	ldrh	r3, [r3, #26]
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d009      	beq.n	80096f8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	8b5b      	ldrh	r3, [r3, #26]
 80096e8:	f023 0308 	bic.w	r3, r3, #8
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7fe fd74 	bl	80081e0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e7      	bne.n	80096d2 <tcp_handle_closepend+0xe>
  }
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20008b38 	.word	0x20008b38

08009710 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800971a:	2001      	movs	r0, #1
 800971c:	f7fd fa2c 	bl	8006b78 <memp_malloc>
 8009720:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d126      	bne.n	8009776 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009728:	f7ff ffcc 	bl	80096c4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800972c:	f7ff ff9a 	bl	8009664 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009730:	2001      	movs	r0, #1
 8009732:	f7fd fa21 	bl	8006b78 <memp_malloc>
 8009736:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d11b      	bne.n	8009776 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800973e:	2009      	movs	r0, #9
 8009740:	f7ff ff46 	bl	80095d0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009744:	2001      	movs	r0, #1
 8009746:	f7fd fa17 	bl	8006b78 <memp_malloc>
 800974a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d111      	bne.n	8009776 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009752:	2008      	movs	r0, #8
 8009754:	f7ff ff3c 	bl	80095d0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009758:	2001      	movs	r0, #1
 800975a:	f7fd fa0d 	bl	8006b78 <memp_malloc>
 800975e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d107      	bne.n	8009776 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	4618      	mov	r0, r3
 800976a:	f7ff fee3 	bl	8009534 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800976e:	2001      	movs	r0, #1
 8009770:	f7fd fa02 	bl	8006b78 <memp_malloc>
 8009774:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d03f      	beq.n	80097fc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800977c:	229c      	movs	r2, #156	; 0x9c
 800977e:	2100      	movs	r1, #0
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f007 feb7 	bl	80114f4 <memset>
    pcb->prio = prio;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	79fa      	ldrb	r2, [r7, #7]
 800978a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009792:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800979c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	22ff      	movs	r2, #255	; 0xff
 80097aa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 80097b2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2206      	movs	r2, #6
 80097b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2206      	movs	r2, #6
 80097c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097c8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80097d2:	4b0d      	ldr	r3, [pc, #52]	; (8009808 <tcp_alloc+0xf8>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80097da:	4b0c      	ldr	r3, [pc, #48]	; (800980c <tcp_alloc+0xfc>)
 80097dc:	781a      	ldrb	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80097e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4a08      	ldr	r2, [pc, #32]	; (8009810 <tcp_alloc+0x100>)
 80097f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4a07      	ldr	r2, [pc, #28]	; (8009814 <tcp_alloc+0x104>)
 80097f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80097fc:	68fb      	ldr	r3, [r7, #12]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20008b3c 	.word	0x20008b3c
 800980c:	200000fe 	.word	0x200000fe
 8009810:	080094c9 	.word	0x080094c9
 8009814:	006ddd00 	.word	0x006ddd00

08009818 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800981c:	2040      	movs	r0, #64	; 0x40
 800981e:	f7ff ff77 	bl	8009710 <tcp_alloc>
 8009822:	4603      	mov	r3, r0
}
 8009824:	4618      	mov	r0, r3
 8009826:	bd80      	pop	{r7, pc}

08009828 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	611a      	str	r2, [r3, #16]
  }
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
	...

0800984c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00e      	beq.n	800987a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	7d1b      	ldrb	r3, [r3, #20]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d106      	bne.n	8009872 <tcp_recv+0x26>
 8009864:	4b07      	ldr	r3, [pc, #28]	; (8009884 <tcp_recv+0x38>)
 8009866:	f240 72df 	movw	r2, #2015	; 0x7df
 800986a:	4907      	ldr	r1, [pc, #28]	; (8009888 <tcp_recv+0x3c>)
 800986c:	4807      	ldr	r0, [pc, #28]	; (800988c <tcp_recv+0x40>)
 800986e:	f007 fe49 	bl	8011504 <iprintf>
    pcb->recv = recv;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	683a      	ldr	r2, [r7, #0]
 8009876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800987a:	bf00      	nop
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	080134f0 	.word	0x080134f0
 8009888:	08013a8c 	.word	0x08013a8c
 800988c:	08013534 	.word	0x08013534

08009890 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00e      	beq.n	80098be <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	7d1b      	ldrb	r3, [r3, #20]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d106      	bne.n	80098b6 <tcp_sent+0x26>
 80098a8:	4b07      	ldr	r3, [pc, #28]	; (80098c8 <tcp_sent+0x38>)
 80098aa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80098ae:	4907      	ldr	r1, [pc, #28]	; (80098cc <tcp_sent+0x3c>)
 80098b0:	4807      	ldr	r0, [pc, #28]	; (80098d0 <tcp_sent+0x40>)
 80098b2:	f007 fe27 	bl	8011504 <iprintf>
    pcb->sent = sent;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80098be:	bf00      	nop
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	080134f0 	.word	0x080134f0
 80098cc:	08013ab4 	.word	0x08013ab4
 80098d0:	08013534 	.word	0x08013534

080098d4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00e      	beq.n	8009902 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	7d1b      	ldrb	r3, [r3, #20]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d106      	bne.n	80098fa <tcp_err+0x26>
 80098ec:	4b07      	ldr	r3, [pc, #28]	; (800990c <tcp_err+0x38>)
 80098ee:	f640 020d 	movw	r2, #2061	; 0x80d
 80098f2:	4907      	ldr	r1, [pc, #28]	; (8009910 <tcp_err+0x3c>)
 80098f4:	4807      	ldr	r0, [pc, #28]	; (8009914 <tcp_err+0x40>)
 80098f6:	f007 fe05 	bl	8011504 <iprintf>
    pcb->errf = err;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8009902:	bf00      	nop
 8009904:	3708      	adds	r7, #8
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	080134f0 	.word	0x080134f0
 8009910:	08013adc 	.word	0x08013adc
 8009914:	08013534 	.word	0x08013534

08009918 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d008      	beq.n	800993a <tcp_accept+0x22>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	7d1b      	ldrb	r3, [r3, #20]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d104      	bne.n	800993a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	619a      	str	r2, [r3, #24]
  }
}
 800993a:	bf00      	nop
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d107      	bne.n	800996c <tcp_poll+0x24>
 800995c:	4b0e      	ldr	r3, [pc, #56]	; (8009998 <tcp_poll+0x50>)
 800995e:	f640 023d 	movw	r2, #2109	; 0x83d
 8009962:	490e      	ldr	r1, [pc, #56]	; (800999c <tcp_poll+0x54>)
 8009964:	480e      	ldr	r0, [pc, #56]	; (80099a0 <tcp_poll+0x58>)
 8009966:	f007 fdcd 	bl	8011504 <iprintf>
 800996a:	e011      	b.n	8009990 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	7d1b      	ldrb	r3, [r3, #20]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d106      	bne.n	8009982 <tcp_poll+0x3a>
 8009974:	4b08      	ldr	r3, [pc, #32]	; (8009998 <tcp_poll+0x50>)
 8009976:	f640 023e 	movw	r2, #2110	; 0x83e
 800997a:	490a      	ldr	r1, [pc, #40]	; (80099a4 <tcp_poll+0x5c>)
 800997c:	4808      	ldr	r0, [pc, #32]	; (80099a0 <tcp_poll+0x58>)
 800997e:	f007 fdc1 	bl	8011504 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	79fa      	ldrb	r2, [r7, #7]
 800998e:	775a      	strb	r2, [r3, #29]
}
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	080134f0 	.word	0x080134f0
 800999c:	08013b04 	.word	0x08013b04
 80099a0:	08013534 	.word	0x08013534
 80099a4:	08013b1c 	.word	0x08013b1c

080099a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d107      	bne.n	80099c6 <tcp_pcb_purge+0x1e>
 80099b6:	4b21      	ldr	r3, [pc, #132]	; (8009a3c <tcp_pcb_purge+0x94>)
 80099b8:	f640 0251 	movw	r2, #2129	; 0x851
 80099bc:	4920      	ldr	r1, [pc, #128]	; (8009a40 <tcp_pcb_purge+0x98>)
 80099be:	4821      	ldr	r0, [pc, #132]	; (8009a44 <tcp_pcb_purge+0x9c>)
 80099c0:	f007 fda0 	bl	8011504 <iprintf>
 80099c4:	e037      	b.n	8009a36 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	7d1b      	ldrb	r3, [r3, #20]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d033      	beq.n	8009a36 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80099d2:	2b0a      	cmp	r3, #10
 80099d4:	d02f      	beq.n	8009a36 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d02b      	beq.n	8009a36 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d007      	beq.n	80099f6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fd ff22 	bl	8007834 <pbuf_free>
      pcb->refused_data = NULL;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f986 	bl	8009d10 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a0a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7ff fce1 	bl	80093d8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff fcdc 	bl	80093d8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	66da      	str	r2, [r3, #108]	; 0x6c
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	080134f0 	.word	0x080134f0
 8009a40:	08013b3c 	.word	0x08013b3c
 8009a44:	08013534 	.word	0x08013534

08009a48 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d106      	bne.n	8009a66 <tcp_pcb_remove+0x1e>
 8009a58:	4b3e      	ldr	r3, [pc, #248]	; (8009b54 <tcp_pcb_remove+0x10c>)
 8009a5a:	f640 0283 	movw	r2, #2179	; 0x883
 8009a5e:	493e      	ldr	r1, [pc, #248]	; (8009b58 <tcp_pcb_remove+0x110>)
 8009a60:	483e      	ldr	r0, [pc, #248]	; (8009b5c <tcp_pcb_remove+0x114>)
 8009a62:	f007 fd4f 	bl	8011504 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <tcp_pcb_remove+0x32>
 8009a6c:	4b39      	ldr	r3, [pc, #228]	; (8009b54 <tcp_pcb_remove+0x10c>)
 8009a6e:	f640 0284 	movw	r2, #2180	; 0x884
 8009a72:	493b      	ldr	r1, [pc, #236]	; (8009b60 <tcp_pcb_remove+0x118>)
 8009a74:	4839      	ldr	r0, [pc, #228]	; (8009b5c <tcp_pcb_remove+0x114>)
 8009a76:	f007 fd45 	bl	8011504 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d105      	bne.n	8009a90 <tcp_pcb_remove+0x48>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	e013      	b.n	8009ab8 <tcp_pcb_remove+0x70>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e00c      	b.n	8009ab2 <tcp_pcb_remove+0x6a>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d104      	bne.n	8009aac <tcp_pcb_remove+0x64>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	68da      	ldr	r2, [r3, #12]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	60da      	str	r2, [r3, #12]
 8009aaa:	e005      	b.n	8009ab8 <tcp_pcb_remove+0x70>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	60fb      	str	r3, [r7, #12]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1ef      	bne.n	8009a98 <tcp_pcb_remove+0x50>
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2200      	movs	r2, #0
 8009abc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009abe:	6838      	ldr	r0, [r7, #0]
 8009ac0:	f7ff ff72 	bl	80099a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	7d1b      	ldrb	r3, [r3, #20]
 8009ac8:	2b0a      	cmp	r3, #10
 8009aca:	d013      	beq.n	8009af4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d00f      	beq.n	8009af4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	8b5b      	ldrh	r3, [r3, #26]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d009      	beq.n	8009af4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	8b5b      	ldrh	r3, [r3, #26]
 8009ae4:	f043 0302 	orr.w	r3, r3, #2
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009aee:	6838      	ldr	r0, [r7, #0]
 8009af0:	f003 fbc2 	bl	800d278 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	7d1b      	ldrb	r3, [r3, #20]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d020      	beq.n	8009b3e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d006      	beq.n	8009b12 <tcp_pcb_remove+0xca>
 8009b04:	4b13      	ldr	r3, [pc, #76]	; (8009b54 <tcp_pcb_remove+0x10c>)
 8009b06:	f640 0293 	movw	r2, #2195	; 0x893
 8009b0a:	4916      	ldr	r1, [pc, #88]	; (8009b64 <tcp_pcb_remove+0x11c>)
 8009b0c:	4813      	ldr	r0, [pc, #76]	; (8009b5c <tcp_pcb_remove+0x114>)
 8009b0e:	f007 fcf9 	bl	8011504 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d006      	beq.n	8009b28 <tcp_pcb_remove+0xe0>
 8009b1a:	4b0e      	ldr	r3, [pc, #56]	; (8009b54 <tcp_pcb_remove+0x10c>)
 8009b1c:	f640 0294 	movw	r2, #2196	; 0x894
 8009b20:	4911      	ldr	r1, [pc, #68]	; (8009b68 <tcp_pcb_remove+0x120>)
 8009b22:	480e      	ldr	r0, [pc, #56]	; (8009b5c <tcp_pcb_remove+0x114>)
 8009b24:	f007 fcee 	bl	8011504 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d006      	beq.n	8009b3e <tcp_pcb_remove+0xf6>
 8009b30:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <tcp_pcb_remove+0x10c>)
 8009b32:	f640 0296 	movw	r2, #2198	; 0x896
 8009b36:	490d      	ldr	r1, [pc, #52]	; (8009b6c <tcp_pcb_remove+0x124>)
 8009b38:	4808      	ldr	r0, [pc, #32]	; (8009b5c <tcp_pcb_remove+0x114>)
 8009b3a:	f007 fce3 	bl	8011504 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2200      	movs	r2, #0
 8009b42:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2200      	movs	r2, #0
 8009b48:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009b4a:	bf00      	nop
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	080134f0 	.word	0x080134f0
 8009b58:	08013b58 	.word	0x08013b58
 8009b5c:	08013534 	.word	0x08013534
 8009b60:	08013b74 	.word	0x08013b74
 8009b64:	08013b94 	.word	0x08013b94
 8009b68:	08013bac 	.word	0x08013bac
 8009b6c:	08013bc8 	.word	0x08013bc8

08009b70 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d106      	bne.n	8009b8c <tcp_next_iss+0x1c>
 8009b7e:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <tcp_next_iss+0x38>)
 8009b80:	f640 02af 	movw	r2, #2223	; 0x8af
 8009b84:	4909      	ldr	r1, [pc, #36]	; (8009bac <tcp_next_iss+0x3c>)
 8009b86:	480a      	ldr	r0, [pc, #40]	; (8009bb0 <tcp_next_iss+0x40>)
 8009b88:	f007 fcbc 	bl	8011504 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009b8c:	4b09      	ldr	r3, [pc, #36]	; (8009bb4 <tcp_next_iss+0x44>)
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <tcp_next_iss+0x48>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4413      	add	r3, r2
 8009b96:	4a07      	ldr	r2, [pc, #28]	; (8009bb4 <tcp_next_iss+0x44>)
 8009b98:	6013      	str	r3, [r2, #0]
  return iss;
 8009b9a:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <tcp_next_iss+0x44>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	080134f0 	.word	0x080134f0
 8009bac:	08013be0 	.word	0x08013be0
 8009bb0:	08013534 	.word	0x08013534
 8009bb4:	2000002c 	.word	0x2000002c
 8009bb8:	20008b3c 	.word	0x20008b3c

08009bbc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d106      	bne.n	8009bde <tcp_eff_send_mss_netif+0x22>
 8009bd0:	4b14      	ldr	r3, [pc, #80]	; (8009c24 <tcp_eff_send_mss_netif+0x68>)
 8009bd2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009bd6:	4914      	ldr	r1, [pc, #80]	; (8009c28 <tcp_eff_send_mss_netif+0x6c>)
 8009bd8:	4814      	ldr	r0, [pc, #80]	; (8009c2c <tcp_eff_send_mss_netif+0x70>)
 8009bda:	f007 fc93 	bl	8011504 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009be4:	89fb      	ldrh	r3, [r7, #14]
 8009be6:	e019      	b.n	8009c1c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009bec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009bee:	8afb      	ldrh	r3, [r7, #22]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d012      	beq.n	8009c1a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009bf4:	2328      	movs	r3, #40	; 0x28
 8009bf6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009bf8:	8afa      	ldrh	r2, [r7, #22]
 8009bfa:	8abb      	ldrh	r3, [r7, #20]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d904      	bls.n	8009c0a <tcp_eff_send_mss_netif+0x4e>
 8009c00:	8afa      	ldrh	r2, [r7, #22]
 8009c02:	8abb      	ldrh	r3, [r7, #20]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	e000      	b.n	8009c0c <tcp_eff_send_mss_netif+0x50>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009c0e:	8a7a      	ldrh	r2, [r7, #18]
 8009c10:	89fb      	ldrh	r3, [r7, #14]
 8009c12:	4293      	cmp	r3, r2
 8009c14:	bf28      	it	cs
 8009c16:	4613      	movcs	r3, r2
 8009c18:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009c1a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	080134f0 	.word	0x080134f0
 8009c28:	08013bfc 	.word	0x08013bfc
 8009c2c:	08013534 	.word	0x08013534

08009c30 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d119      	bne.n	8009c78 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009c44:	4b10      	ldr	r3, [pc, #64]	; (8009c88 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009c46:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009c4a:	4910      	ldr	r1, [pc, #64]	; (8009c8c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009c4c:	4810      	ldr	r0, [pc, #64]	; (8009c90 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009c4e:	f007 fc59 	bl	8011504 <iprintf>

  while (pcb != NULL) {
 8009c52:	e011      	b.n	8009c78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d108      	bne.n	8009c72 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7fe fc0e 	bl	8008488 <tcp_abort>
      pcb = next;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e002      	b.n	8009c78 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1ea      	bne.n	8009c54 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	080134f0 	.word	0x080134f0
 8009c8c:	08013c24 	.word	0x08013c24
 8009c90:	08013534 	.word	0x08013534

08009c94 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d02a      	beq.n	8009cfa <tcp_netif_ip_addr_changed+0x66>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d026      	beq.n	8009cfa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009cac:	4b15      	ldr	r3, [pc, #84]	; (8009d04 <tcp_netif_ip_addr_changed+0x70>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f7ff ffbc 	bl	8009c30 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009cb8:	4b13      	ldr	r3, [pc, #76]	; (8009d08 <tcp_netif_ip_addr_changed+0x74>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7ff ffb6 	bl	8009c30 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d017      	beq.n	8009cfa <tcp_netif_ip_addr_changed+0x66>
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d013      	beq.n	8009cfa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009cd2:	4b0e      	ldr	r3, [pc, #56]	; (8009d0c <tcp_netif_ip_addr_changed+0x78>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60fb      	str	r3, [r7, #12]
 8009cd8:	e00c      	b.n	8009cf4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d103      	bne.n	8009cee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1ef      	bne.n	8009cda <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20008b38 	.word	0x20008b38
 8009d08:	20008b44 	.word	0x20008b44
 8009d0c:	20008b40 	.word	0x20008b40

08009d10 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d007      	beq.n	8009d30 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff fb57 	bl	80093d8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009d30:	bf00      	nop
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b08d      	sub	sp, #52	; 0x34
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d105      	bne.n	8009d54 <tcp_input+0x1c>
 8009d48:	4b9b      	ldr	r3, [pc, #620]	; (8009fb8 <tcp_input+0x280>)
 8009d4a:	2283      	movs	r2, #131	; 0x83
 8009d4c:	499b      	ldr	r1, [pc, #620]	; (8009fbc <tcp_input+0x284>)
 8009d4e:	489c      	ldr	r0, [pc, #624]	; (8009fc0 <tcp_input+0x288>)
 8009d50:	f007 fbd8 	bl	8011504 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	4a9a      	ldr	r2, [pc, #616]	; (8009fc4 <tcp_input+0x28c>)
 8009d5a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	895b      	ldrh	r3, [r3, #10]
 8009d60:	2b13      	cmp	r3, #19
 8009d62:	f240 83c4 	bls.w	800a4ee <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009d66:	4b98      	ldr	r3, [pc, #608]	; (8009fc8 <tcp_input+0x290>)
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	4a97      	ldr	r2, [pc, #604]	; (8009fc8 <tcp_input+0x290>)
 8009d6c:	6812      	ldr	r2, [r2, #0]
 8009d6e:	4611      	mov	r1, r2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f006 fb83 	bl	801047c <ip4_addr_isbroadcast_u32>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f040 83ba 	bne.w	800a4f2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009d7e:	4b92      	ldr	r3, [pc, #584]	; (8009fc8 <tcp_input+0x290>)
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009d86:	2be0      	cmp	r3, #224	; 0xe0
 8009d88:	f000 83b3 	beq.w	800a4f2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009d8c:	4b8d      	ldr	r3, [pc, #564]	; (8009fc4 <tcp_input+0x28c>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	899b      	ldrh	r3, [r3, #12]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fc fa99 	bl	80062cc <lwip_htons>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	0b1b      	lsrs	r3, r3, #12
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009da6:	7cbb      	ldrb	r3, [r7, #18]
 8009da8:	2b13      	cmp	r3, #19
 8009daa:	f240 83a4 	bls.w	800a4f6 <tcp_input+0x7be>
 8009dae:	7cbb      	ldrb	r3, [r7, #18]
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	891b      	ldrh	r3, [r3, #8]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	f200 839d 	bhi.w	800a4f6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009dbc:	7cbb      	ldrb	r3, [r7, #18]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	3b14      	subs	r3, #20
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	4b81      	ldr	r3, [pc, #516]	; (8009fcc <tcp_input+0x294>)
 8009dc6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009dc8:	4b81      	ldr	r3, [pc, #516]	; (8009fd0 <tcp_input+0x298>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	895a      	ldrh	r2, [r3, #10]
 8009dd2:	7cbb      	ldrb	r3, [r7, #18]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d309      	bcc.n	8009dee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009dda:	4b7c      	ldr	r3, [pc, #496]	; (8009fcc <tcp_input+0x294>)
 8009ddc:	881a      	ldrh	r2, [r3, #0]
 8009dde:	4b7d      	ldr	r3, [pc, #500]	; (8009fd4 <tcp_input+0x29c>)
 8009de0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009de2:	7cbb      	ldrb	r3, [r7, #18]
 8009de4:	4619      	mov	r1, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7fd fc9e 	bl	8007728 <pbuf_remove_header>
 8009dec:	e04e      	b.n	8009e8c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <tcp_input+0xca>
 8009df6:	4b70      	ldr	r3, [pc, #448]	; (8009fb8 <tcp_input+0x280>)
 8009df8:	22c2      	movs	r2, #194	; 0xc2
 8009dfa:	4977      	ldr	r1, [pc, #476]	; (8009fd8 <tcp_input+0x2a0>)
 8009dfc:	4870      	ldr	r0, [pc, #448]	; (8009fc0 <tcp_input+0x288>)
 8009dfe:	f007 fb81 	bl	8011504 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009e02:	2114      	movs	r1, #20
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7fd fc8f 	bl	8007728 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	895a      	ldrh	r2, [r3, #10]
 8009e0e:	4b71      	ldr	r3, [pc, #452]	; (8009fd4 <tcp_input+0x29c>)
 8009e10:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009e12:	4b6e      	ldr	r3, [pc, #440]	; (8009fcc <tcp_input+0x294>)
 8009e14:	881a      	ldrh	r2, [r3, #0]
 8009e16:	4b6f      	ldr	r3, [pc, #444]	; (8009fd4 <tcp_input+0x29c>)
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009e1e:	4b6d      	ldr	r3, [pc, #436]	; (8009fd4 <tcp_input+0x29c>)
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7fd fc7f 	bl	8007728 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	895b      	ldrh	r3, [r3, #10]
 8009e30:	8a3a      	ldrh	r2, [r7, #16]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	f200 8361 	bhi.w	800a4fa <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	4a64      	ldr	r2, [pc, #400]	; (8009fd0 <tcp_input+0x298>)
 8009e40:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	8a3a      	ldrh	r2, [r7, #16]
 8009e48:	4611      	mov	r1, r2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fd fc6c 	bl	8007728 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	891a      	ldrh	r2, [r3, #8]
 8009e54:	8a3b      	ldrh	r3, [r7, #16]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	895b      	ldrh	r3, [r3, #10]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d005      	beq.n	8009e72 <tcp_input+0x13a>
 8009e66:	4b54      	ldr	r3, [pc, #336]	; (8009fb8 <tcp_input+0x280>)
 8009e68:	22df      	movs	r2, #223	; 0xdf
 8009e6a:	495c      	ldr	r1, [pc, #368]	; (8009fdc <tcp_input+0x2a4>)
 8009e6c:	4854      	ldr	r0, [pc, #336]	; (8009fc0 <tcp_input+0x288>)
 8009e6e:	f007 fb49 	bl	8011504 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	891a      	ldrh	r2, [r3, #8]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	891b      	ldrh	r3, [r3, #8]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d005      	beq.n	8009e8c <tcp_input+0x154>
 8009e80:	4b4d      	ldr	r3, [pc, #308]	; (8009fb8 <tcp_input+0x280>)
 8009e82:	22e0      	movs	r2, #224	; 0xe0
 8009e84:	4956      	ldr	r1, [pc, #344]	; (8009fe0 <tcp_input+0x2a8>)
 8009e86:	484e      	ldr	r0, [pc, #312]	; (8009fc0 <tcp_input+0x288>)
 8009e88:	f007 fb3c 	bl	8011504 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009e8c:	4b4d      	ldr	r3, [pc, #308]	; (8009fc4 <tcp_input+0x28c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	4a4b      	ldr	r2, [pc, #300]	; (8009fc4 <tcp_input+0x28c>)
 8009e96:	6814      	ldr	r4, [r2, #0]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fc fa17 	bl	80062cc <lwip_htons>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009ea2:	4b48      	ldr	r3, [pc, #288]	; (8009fc4 <tcp_input+0x28c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	885b      	ldrh	r3, [r3, #2]
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	4a46      	ldr	r2, [pc, #280]	; (8009fc4 <tcp_input+0x28c>)
 8009eac:	6814      	ldr	r4, [r2, #0]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fc fa0c 	bl	80062cc <lwip_htons>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009eb8:	4b42      	ldr	r3, [pc, #264]	; (8009fc4 <tcp_input+0x28c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	4a41      	ldr	r2, [pc, #260]	; (8009fc4 <tcp_input+0x28c>)
 8009ec0:	6814      	ldr	r4, [r2, #0]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fc fa17 	bl	80062f6 <lwip_htonl>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	6063      	str	r3, [r4, #4]
 8009ecc:	6863      	ldr	r3, [r4, #4]
 8009ece:	4a45      	ldr	r2, [pc, #276]	; (8009fe4 <tcp_input+0x2ac>)
 8009ed0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009ed2:	4b3c      	ldr	r3, [pc, #240]	; (8009fc4 <tcp_input+0x28c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	4a3a      	ldr	r2, [pc, #232]	; (8009fc4 <tcp_input+0x28c>)
 8009eda:	6814      	ldr	r4, [r2, #0]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fc fa0a 	bl	80062f6 <lwip_htonl>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	60a3      	str	r3, [r4, #8]
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	4a3f      	ldr	r2, [pc, #252]	; (8009fe8 <tcp_input+0x2b0>)
 8009eea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009eec:	4b35      	ldr	r3, [pc, #212]	; (8009fc4 <tcp_input+0x28c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	89db      	ldrh	r3, [r3, #14]
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	4a33      	ldr	r2, [pc, #204]	; (8009fc4 <tcp_input+0x28c>)
 8009ef6:	6814      	ldr	r4, [r2, #0]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fc f9e7 	bl	80062cc <lwip_htons>
 8009efe:	4603      	mov	r3, r0
 8009f00:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009f02:	4b30      	ldr	r3, [pc, #192]	; (8009fc4 <tcp_input+0x28c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	899b      	ldrh	r3, [r3, #12]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fc f9de 	bl	80062cc <lwip_htons>
 8009f10:	4603      	mov	r3, r0
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	4b34      	ldr	r3, [pc, #208]	; (8009fec <tcp_input+0x2b4>)
 8009f1c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	891a      	ldrh	r2, [r3, #8]
 8009f22:	4b33      	ldr	r3, [pc, #204]	; (8009ff0 <tcp_input+0x2b8>)
 8009f24:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009f26:	4b31      	ldr	r3, [pc, #196]	; (8009fec <tcp_input+0x2b4>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d00c      	beq.n	8009f4c <tcp_input+0x214>
    tcplen++;
 8009f32:	4b2f      	ldr	r3, [pc, #188]	; (8009ff0 <tcp_input+0x2b8>)
 8009f34:	881b      	ldrh	r3, [r3, #0]
 8009f36:	3301      	adds	r3, #1
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <tcp_input+0x2b8>)
 8009f3c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	891a      	ldrh	r2, [r3, #8]
 8009f42:	4b2b      	ldr	r3, [pc, #172]	; (8009ff0 <tcp_input+0x2b8>)
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	f200 82d9 	bhi.w	800a4fe <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f50:	4b28      	ldr	r3, [pc, #160]	; (8009ff4 <tcp_input+0x2bc>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	61fb      	str	r3, [r7, #28]
 8009f56:	e09d      	b.n	800a094 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	7d1b      	ldrb	r3, [r3, #20]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d105      	bne.n	8009f6c <tcp_input+0x234>
 8009f60:	4b15      	ldr	r3, [pc, #84]	; (8009fb8 <tcp_input+0x280>)
 8009f62:	22fb      	movs	r2, #251	; 0xfb
 8009f64:	4924      	ldr	r1, [pc, #144]	; (8009ff8 <tcp_input+0x2c0>)
 8009f66:	4816      	ldr	r0, [pc, #88]	; (8009fc0 <tcp_input+0x288>)
 8009f68:	f007 facc 	bl	8011504 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	7d1b      	ldrb	r3, [r3, #20]
 8009f70:	2b0a      	cmp	r3, #10
 8009f72:	d105      	bne.n	8009f80 <tcp_input+0x248>
 8009f74:	4b10      	ldr	r3, [pc, #64]	; (8009fb8 <tcp_input+0x280>)
 8009f76:	22fc      	movs	r2, #252	; 0xfc
 8009f78:	4920      	ldr	r1, [pc, #128]	; (8009ffc <tcp_input+0x2c4>)
 8009f7a:	4811      	ldr	r0, [pc, #68]	; (8009fc0 <tcp_input+0x288>)
 8009f7c:	f007 fac2 	bl	8011504 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	7d1b      	ldrb	r3, [r3, #20]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d105      	bne.n	8009f94 <tcp_input+0x25c>
 8009f88:	4b0b      	ldr	r3, [pc, #44]	; (8009fb8 <tcp_input+0x280>)
 8009f8a:	22fd      	movs	r2, #253	; 0xfd
 8009f8c:	491c      	ldr	r1, [pc, #112]	; (800a000 <tcp_input+0x2c8>)
 8009f8e:	480c      	ldr	r0, [pc, #48]	; (8009fc0 <tcp_input+0x288>)
 8009f90:	f007 fab8 	bl	8011504 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	7a1b      	ldrb	r3, [r3, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d033      	beq.n	800a004 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	7a1a      	ldrb	r2, [r3, #8]
 8009fa0:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <tcp_input+0x290>)
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fa8:	3301      	adds	r3, #1
 8009faa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d029      	beq.n	800a004 <tcp_input+0x2cc>
      prev = pcb;
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	61bb      	str	r3, [r7, #24]
      continue;
 8009fb4:	e06b      	b.n	800a08e <tcp_input+0x356>
 8009fb6:	bf00      	nop
 8009fb8:	08013c58 	.word	0x08013c58
 8009fbc:	08013c8c 	.word	0x08013c8c
 8009fc0:	08013ca4 	.word	0x08013ca4
 8009fc4:	20000110 	.word	0x20000110
 8009fc8:	20003434 	.word	0x20003434
 8009fcc:	20000114 	.word	0x20000114
 8009fd0:	20000118 	.word	0x20000118
 8009fd4:	20000116 	.word	0x20000116
 8009fd8:	08013ccc 	.word	0x08013ccc
 8009fdc:	08013cdc 	.word	0x08013cdc
 8009fe0:	08013ce8 	.word	0x08013ce8
 8009fe4:	20000120 	.word	0x20000120
 8009fe8:	20000124 	.word	0x20000124
 8009fec:	2000012c 	.word	0x2000012c
 8009ff0:	2000012a 	.word	0x2000012a
 8009ff4:	20008b38 	.word	0x20008b38
 8009ff8:	08013d08 	.word	0x08013d08
 8009ffc:	08013d30 	.word	0x08013d30
 800a000:	08013d5c 	.word	0x08013d5c
    }

    if (pcb->remote_port == tcphdr->src &&
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	8b1a      	ldrh	r2, [r3, #24]
 800a008:	4b94      	ldr	r3, [pc, #592]	; (800a25c <tcp_input+0x524>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	429a      	cmp	r2, r3
 800a012:	d13a      	bne.n	800a08a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	8ada      	ldrh	r2, [r3, #22]
 800a018:	4b90      	ldr	r3, [pc, #576]	; (800a25c <tcp_input+0x524>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	885b      	ldrh	r3, [r3, #2]
 800a01e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a020:	429a      	cmp	r2, r3
 800a022:	d132      	bne.n	800a08a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	4b8d      	ldr	r3, [pc, #564]	; (800a260 <tcp_input+0x528>)
 800a02a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d12c      	bne.n	800a08a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	4b8a      	ldr	r3, [pc, #552]	; (800a260 <tcp_input+0x528>)
 800a036:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a038:	429a      	cmp	r2, r3
 800a03a:	d126      	bne.n	800a08a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	69fa      	ldr	r2, [r7, #28]
 800a042:	429a      	cmp	r2, r3
 800a044:	d106      	bne.n	800a054 <tcp_input+0x31c>
 800a046:	4b87      	ldr	r3, [pc, #540]	; (800a264 <tcp_input+0x52c>)
 800a048:	f240 120d 	movw	r2, #269	; 0x10d
 800a04c:	4986      	ldr	r1, [pc, #536]	; (800a268 <tcp_input+0x530>)
 800a04e:	4887      	ldr	r0, [pc, #540]	; (800a26c <tcp_input+0x534>)
 800a050:	f007 fa58 	bl	8011504 <iprintf>
      if (prev != NULL) {
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <tcp_input+0x338>
        prev->next = pcb->next;
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a062:	4b83      	ldr	r3, [pc, #524]	; (800a270 <tcp_input+0x538>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a06a:	4a81      	ldr	r2, [pc, #516]	; (800a270 <tcp_input+0x538>)
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	69fa      	ldr	r2, [r7, #28]
 800a076:	429a      	cmp	r2, r3
 800a078:	d111      	bne.n	800a09e <tcp_input+0x366>
 800a07a:	4b7a      	ldr	r3, [pc, #488]	; (800a264 <tcp_input+0x52c>)
 800a07c:	f240 1215 	movw	r2, #277	; 0x115
 800a080:	497c      	ldr	r1, [pc, #496]	; (800a274 <tcp_input+0x53c>)
 800a082:	487a      	ldr	r0, [pc, #488]	; (800a26c <tcp_input+0x534>)
 800a084:	f007 fa3e 	bl	8011504 <iprintf>
      break;
 800a088:	e009      	b.n	800a09e <tcp_input+0x366>
    }
    prev = pcb;
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	61fb      	str	r3, [r7, #28]
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f47f af5e 	bne.w	8009f58 <tcp_input+0x220>
 800a09c:	e000      	b.n	800a0a0 <tcp_input+0x368>
      break;
 800a09e:	bf00      	nop
  }

  if (pcb == NULL) {
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f040 8095 	bne.w	800a1d2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0a8:	4b73      	ldr	r3, [pc, #460]	; (800a278 <tcp_input+0x540>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	61fb      	str	r3, [r7, #28]
 800a0ae:	e03f      	b.n	800a130 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	7d1b      	ldrb	r3, [r3, #20]
 800a0b4:	2b0a      	cmp	r3, #10
 800a0b6:	d006      	beq.n	800a0c6 <tcp_input+0x38e>
 800a0b8:	4b6a      	ldr	r3, [pc, #424]	; (800a264 <tcp_input+0x52c>)
 800a0ba:	f240 121f 	movw	r2, #287	; 0x11f
 800a0be:	496f      	ldr	r1, [pc, #444]	; (800a27c <tcp_input+0x544>)
 800a0c0:	486a      	ldr	r0, [pc, #424]	; (800a26c <tcp_input+0x534>)
 800a0c2:	f007 fa1f 	bl	8011504 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	7a1b      	ldrb	r3, [r3, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d009      	beq.n	800a0e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	7a1a      	ldrb	r2, [r3, #8]
 800a0d2:	4b63      	ldr	r3, [pc, #396]	; (800a260 <tcp_input+0x528>)
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0da:	3301      	adds	r3, #1
 800a0dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d122      	bne.n	800a128 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	8b1a      	ldrh	r2, [r3, #24]
 800a0e6:	4b5d      	ldr	r3, [pc, #372]	; (800a25c <tcp_input+0x524>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d11b      	bne.n	800a12a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	8ada      	ldrh	r2, [r3, #22]
 800a0f6:	4b59      	ldr	r3, [pc, #356]	; (800a25c <tcp_input+0x524>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	885b      	ldrh	r3, [r3, #2]
 800a0fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d113      	bne.n	800a12a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	4b56      	ldr	r3, [pc, #344]	; (800a260 <tcp_input+0x528>)
 800a108:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d10d      	bne.n	800a12a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4b53      	ldr	r3, [pc, #332]	; (800a260 <tcp_input+0x528>)
 800a114:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a116:	429a      	cmp	r2, r3
 800a118:	d107      	bne.n	800a12a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a11a:	69f8      	ldr	r0, [r7, #28]
 800a11c:	f000 fb54 	bl	800a7c8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7fd fb87 	bl	8007834 <pbuf_free>
        return;
 800a126:	e1f0      	b.n	800a50a <tcp_input+0x7d2>
        continue;
 800a128:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	61fb      	str	r3, [r7, #28]
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1bc      	bne.n	800a0b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a13a:	4b51      	ldr	r3, [pc, #324]	; (800a280 <tcp_input+0x548>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	617b      	str	r3, [r7, #20]
 800a140:	e02a      	b.n	800a198 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	7a1b      	ldrb	r3, [r3, #8]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00c      	beq.n	800a164 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	7a1a      	ldrb	r2, [r3, #8]
 800a14e:	4b44      	ldr	r3, [pc, #272]	; (800a260 <tcp_input+0x528>)
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a156:	3301      	adds	r3, #1
 800a158:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d002      	beq.n	800a164 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	61bb      	str	r3, [r7, #24]
        continue;
 800a162:	e016      	b.n	800a192 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	8ada      	ldrh	r2, [r3, #22]
 800a168:	4b3c      	ldr	r3, [pc, #240]	; (800a25c <tcp_input+0x524>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	885b      	ldrh	r3, [r3, #2]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	429a      	cmp	r2, r3
 800a172:	d10c      	bne.n	800a18e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	4b39      	ldr	r3, [pc, #228]	; (800a260 <tcp_input+0x528>)
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d00f      	beq.n	800a1a0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00d      	beq.n	800a1a2 <tcp_input+0x46a>
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d009      	beq.n	800a1a2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1d1      	bne.n	800a142 <tcp_input+0x40a>
 800a19e:	e000      	b.n	800a1a2 <tcp_input+0x46a>
            break;
 800a1a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d014      	beq.n	800a1d2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00a      	beq.n	800a1c4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	68da      	ldr	r2, [r3, #12]
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a1b6:	4b32      	ldr	r3, [pc, #200]	; (800a280 <tcp_input+0x548>)
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a1be:	4a30      	ldr	r2, [pc, #192]	; (800a280 <tcp_input+0x548>)
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a1c4:	6978      	ldr	r0, [r7, #20]
 800a1c6:	f000 fa01 	bl	800a5cc <tcp_listen_input>
      }
      pbuf_free(p);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7fd fb32 	bl	8007834 <pbuf_free>
      return;
 800a1d0:	e19b      	b.n	800a50a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 8160 	beq.w	800a49a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a1da:	4b2a      	ldr	r3, [pc, #168]	; (800a284 <tcp_input+0x54c>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	891a      	ldrh	r2, [r3, #8]
 800a1e4:	4b27      	ldr	r3, [pc, #156]	; (800a284 <tcp_input+0x54c>)
 800a1e6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a1e8:	4a26      	ldr	r2, [pc, #152]	; (800a284 <tcp_input+0x54c>)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a1ee:	4b1b      	ldr	r3, [pc, #108]	; (800a25c <tcp_input+0x524>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a24      	ldr	r2, [pc, #144]	; (800a284 <tcp_input+0x54c>)
 800a1f4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a1f6:	4b24      	ldr	r3, [pc, #144]	; (800a288 <tcp_input+0x550>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a1fc:	4b23      	ldr	r3, [pc, #140]	; (800a28c <tcp_input+0x554>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a202:	4b23      	ldr	r3, [pc, #140]	; (800a290 <tcp_input+0x558>)
 800a204:	2200      	movs	r2, #0
 800a206:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a208:	4b22      	ldr	r3, [pc, #136]	; (800a294 <tcp_input+0x55c>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	f003 0308 	and.w	r3, r3, #8
 800a210:	2b00      	cmp	r3, #0
 800a212:	d006      	beq.n	800a222 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	7b5b      	ldrb	r3, [r3, #13]
 800a218:	f043 0301 	orr.w	r3, r3, #1
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a226:	2b00      	cmp	r3, #0
 800a228:	d038      	beq.n	800a29c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a22a:	69f8      	ldr	r0, [r7, #28]
 800a22c:	f7ff f858 	bl	80092e0 <tcp_process_refused_data>
 800a230:	4603      	mov	r3, r0
 800a232:	f113 0f0d 	cmn.w	r3, #13
 800a236:	d007      	beq.n	800a248 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d02d      	beq.n	800a29c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a240:	4b15      	ldr	r3, [pc, #84]	; (800a298 <tcp_input+0x560>)
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d029      	beq.n	800a29c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f040 8104 	bne.w	800a45a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a252:	69f8      	ldr	r0, [r7, #28]
 800a254:	f003 fe16 	bl	800de84 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a258:	e0ff      	b.n	800a45a <tcp_input+0x722>
 800a25a:	bf00      	nop
 800a25c:	20000110 	.word	0x20000110
 800a260:	20003434 	.word	0x20003434
 800a264:	08013c58 	.word	0x08013c58
 800a268:	08013d84 	.word	0x08013d84
 800a26c:	08013ca4 	.word	0x08013ca4
 800a270:	20008b38 	.word	0x20008b38
 800a274:	08013db0 	.word	0x08013db0
 800a278:	20008b48 	.word	0x20008b48
 800a27c:	08013ddc 	.word	0x08013ddc
 800a280:	20008b40 	.word	0x20008b40
 800a284:	20000100 	.word	0x20000100
 800a288:	20000130 	.word	0x20000130
 800a28c:	2000012d 	.word	0x2000012d
 800a290:	20000128 	.word	0x20000128
 800a294:	2000012c 	.word	0x2000012c
 800a298:	2000012a 	.word	0x2000012a
      }
    }
    tcp_input_pcb = pcb;
 800a29c:	4a9c      	ldr	r2, [pc, #624]	; (800a510 <tcp_input+0x7d8>)
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a2a2:	69f8      	ldr	r0, [r7, #28]
 800a2a4:	f000 fb0a 	bl	800a8bc <tcp_process>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a2ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a2b0:	f113 0f0d 	cmn.w	r3, #13
 800a2b4:	f000 80d3 	beq.w	800a45e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800a2b8:	4b96      	ldr	r3, [pc, #600]	; (800a514 <tcp_input+0x7dc>)
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	f003 0308 	and.w	r3, r3, #8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d015      	beq.n	800a2f0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d008      	beq.n	800a2e0 <tcp_input+0x5a8>
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d4:	69fa      	ldr	r2, [r7, #28]
 800a2d6:	6912      	ldr	r2, [r2, #16]
 800a2d8:	f06f 010d 	mvn.w	r1, #13
 800a2dc:	4610      	mov	r0, r2
 800a2de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a2e0:	69f9      	ldr	r1, [r7, #28]
 800a2e2:	488d      	ldr	r0, [pc, #564]	; (800a518 <tcp_input+0x7e0>)
 800a2e4:	f7ff fbb0 	bl	8009a48 <tcp_pcb_remove>
        tcp_free(pcb);
 800a2e8:	69f8      	ldr	r0, [r7, #28]
 800a2ea:	f7fd fde5 	bl	8007eb8 <tcp_free>
 800a2ee:	e0c1      	b.n	800a474 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a2f4:	4b89      	ldr	r3, [pc, #548]	; (800a51c <tcp_input+0x7e4>)
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d01d      	beq.n	800a338 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a2fc:	4b87      	ldr	r3, [pc, #540]	; (800a51c <tcp_input+0x7e4>)
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00a      	beq.n	800a322 <tcp_input+0x5ea>
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a312:	69fa      	ldr	r2, [r7, #28]
 800a314:	6910      	ldr	r0, [r2, #16]
 800a316:	89fa      	ldrh	r2, [r7, #14]
 800a318:	69f9      	ldr	r1, [r7, #28]
 800a31a:	4798      	blx	r3
 800a31c:	4603      	mov	r3, r0
 800a31e:	74fb      	strb	r3, [r7, #19]
 800a320:	e001      	b.n	800a326 <tcp_input+0x5ee>
 800a322:	2300      	movs	r3, #0
 800a324:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a326:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a32a:	f113 0f0d 	cmn.w	r3, #13
 800a32e:	f000 8098 	beq.w	800a462 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a332:	4b7a      	ldr	r3, [pc, #488]	; (800a51c <tcp_input+0x7e4>)
 800a334:	2200      	movs	r2, #0
 800a336:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a338:	69f8      	ldr	r0, [r7, #28]
 800a33a:	f000 f907 	bl	800a54c <tcp_input_delayed_close>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	f040 8090 	bne.w	800a466 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a346:	4b76      	ldr	r3, [pc, #472]	; (800a520 <tcp_input+0x7e8>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d041      	beq.n	800a3d2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a352:	2b00      	cmp	r3, #0
 800a354:	d006      	beq.n	800a364 <tcp_input+0x62c>
 800a356:	4b73      	ldr	r3, [pc, #460]	; (800a524 <tcp_input+0x7ec>)
 800a358:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a35c:	4972      	ldr	r1, [pc, #456]	; (800a528 <tcp_input+0x7f0>)
 800a35e:	4873      	ldr	r0, [pc, #460]	; (800a52c <tcp_input+0x7f4>)
 800a360:	f007 f8d0 	bl	8011504 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	8b5b      	ldrh	r3, [r3, #26]
 800a368:	f003 0310 	and.w	r3, r3, #16
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d008      	beq.n	800a382 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a370:	4b6b      	ldr	r3, [pc, #428]	; (800a520 <tcp_input+0x7e8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4618      	mov	r0, r3
 800a376:	f7fd fa5d 	bl	8007834 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a37a:	69f8      	ldr	r0, [r7, #28]
 800a37c:	f7fe f884 	bl	8008488 <tcp_abort>
            goto aborted;
 800a380:	e078      	b.n	800a474 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00c      	beq.n	800a3a6 <tcp_input+0x66e>
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	6918      	ldr	r0, [r3, #16]
 800a396:	4b62      	ldr	r3, [pc, #392]	; (800a520 <tcp_input+0x7e8>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	2300      	movs	r3, #0
 800a39c:	69f9      	ldr	r1, [r7, #28]
 800a39e:	47a0      	blx	r4
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	74fb      	strb	r3, [r7, #19]
 800a3a4:	e008      	b.n	800a3b8 <tcp_input+0x680>
 800a3a6:	4b5e      	ldr	r3, [pc, #376]	; (800a520 <tcp_input+0x7e8>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	69f9      	ldr	r1, [r7, #28]
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	f7ff f88a 	bl	80094c8 <tcp_recv_null>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a3b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3bc:	f113 0f0d 	cmn.w	r3, #13
 800a3c0:	d053      	beq.n	800a46a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a3c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a3ca:	4b55      	ldr	r3, [pc, #340]	; (800a520 <tcp_input+0x7e8>)
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a3d2:	4b50      	ldr	r3, [pc, #320]	; (800a514 <tcp_input+0x7dc>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	f003 0320 	and.w	r3, r3, #32
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d030      	beq.n	800a440 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d009      	beq.n	800a3fa <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3ea:	7b5a      	ldrb	r2, [r3, #13]
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3f0:	f042 0220 	orr.w	r2, r2, #32
 800a3f4:	b2d2      	uxtb	r2, r2
 800a3f6:	735a      	strb	r2, [r3, #13]
 800a3f8:	e022      	b.n	800a440 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a402:	d005      	beq.n	800a410 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a408:	3301      	adds	r3, #1
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <tcp_input+0x6fa>
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	6918      	ldr	r0, [r3, #16]
 800a424:	2300      	movs	r3, #0
 800a426:	2200      	movs	r2, #0
 800a428:	69f9      	ldr	r1, [r7, #28]
 800a42a:	47a0      	blx	r4
 800a42c:	4603      	mov	r3, r0
 800a42e:	74fb      	strb	r3, [r7, #19]
 800a430:	e001      	b.n	800a436 <tcp_input+0x6fe>
 800a432:	2300      	movs	r3, #0
 800a434:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a436:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a43a:	f113 0f0d 	cmn.w	r3, #13
 800a43e:	d016      	beq.n	800a46e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a440:	4b33      	ldr	r3, [pc, #204]	; (800a510 <tcp_input+0x7d8>)
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a446:	69f8      	ldr	r0, [r7, #28]
 800a448:	f000 f880 	bl	800a54c <tcp_input_delayed_close>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10f      	bne.n	800a472 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a452:	69f8      	ldr	r0, [r7, #28]
 800a454:	f002 ff10 	bl	800d278 <tcp_output>
 800a458:	e00c      	b.n	800a474 <tcp_input+0x73c>
        goto aborted;
 800a45a:	bf00      	nop
 800a45c:	e00a      	b.n	800a474 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a45e:	bf00      	nop
 800a460:	e008      	b.n	800a474 <tcp_input+0x73c>
              goto aborted;
 800a462:	bf00      	nop
 800a464:	e006      	b.n	800a474 <tcp_input+0x73c>
          goto aborted;
 800a466:	bf00      	nop
 800a468:	e004      	b.n	800a474 <tcp_input+0x73c>
            goto aborted;
 800a46a:	bf00      	nop
 800a46c:	e002      	b.n	800a474 <tcp_input+0x73c>
              goto aborted;
 800a46e:	bf00      	nop
 800a470:	e000      	b.n	800a474 <tcp_input+0x73c>
          goto aborted;
 800a472:	bf00      	nop
    tcp_input_pcb = NULL;
 800a474:	4b26      	ldr	r3, [pc, #152]	; (800a510 <tcp_input+0x7d8>)
 800a476:	2200      	movs	r2, #0
 800a478:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a47a:	4b29      	ldr	r3, [pc, #164]	; (800a520 <tcp_input+0x7e8>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a480:	4b2b      	ldr	r3, [pc, #172]	; (800a530 <tcp_input+0x7f8>)
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d03f      	beq.n	800a508 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800a488:	4b29      	ldr	r3, [pc, #164]	; (800a530 <tcp_input+0x7f8>)
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fd f9d1 	bl	8007834 <pbuf_free>
      inseg.p = NULL;
 800a492:	4b27      	ldr	r3, [pc, #156]	; (800a530 <tcp_input+0x7f8>)
 800a494:	2200      	movs	r2, #0
 800a496:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a498:	e036      	b.n	800a508 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a49a:	4b26      	ldr	r3, [pc, #152]	; (800a534 <tcp_input+0x7fc>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	899b      	ldrh	r3, [r3, #12]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fb ff12 	bl	80062cc <lwip_htons>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d118      	bne.n	800a4e6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4b4:	4b20      	ldr	r3, [pc, #128]	; (800a538 <tcp_input+0x800>)
 800a4b6:	6819      	ldr	r1, [r3, #0]
 800a4b8:	4b20      	ldr	r3, [pc, #128]	; (800a53c <tcp_input+0x804>)
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	4b20      	ldr	r3, [pc, #128]	; (800a540 <tcp_input+0x808>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4c4:	4b1b      	ldr	r3, [pc, #108]	; (800a534 <tcp_input+0x7fc>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4c8:	885b      	ldrh	r3, [r3, #2]
 800a4ca:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a4cc:	4a19      	ldr	r2, [pc, #100]	; (800a534 <tcp_input+0x7fc>)
 800a4ce:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a4d0:	8812      	ldrh	r2, [r2, #0]
 800a4d2:	b292      	uxth	r2, r2
 800a4d4:	9202      	str	r2, [sp, #8]
 800a4d6:	9301      	str	r3, [sp, #4]
 800a4d8:	4b1a      	ldr	r3, [pc, #104]	; (800a544 <tcp_input+0x80c>)
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <tcp_input+0x810>)
 800a4de:	4602      	mov	r2, r0
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	f003 fc7d 	bl	800dde0 <tcp_rst>
    pbuf_free(p);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7fd f9a4 	bl	8007834 <pbuf_free>
  return;
 800a4ec:	e00c      	b.n	800a508 <tcp_input+0x7d0>
    goto dropped;
 800a4ee:	bf00      	nop
 800a4f0:	e006      	b.n	800a500 <tcp_input+0x7c8>
    goto dropped;
 800a4f2:	bf00      	nop
 800a4f4:	e004      	b.n	800a500 <tcp_input+0x7c8>
    goto dropped;
 800a4f6:	bf00      	nop
 800a4f8:	e002      	b.n	800a500 <tcp_input+0x7c8>
      goto dropped;
 800a4fa:	bf00      	nop
 800a4fc:	e000      	b.n	800a500 <tcp_input+0x7c8>
      goto dropped;
 800a4fe:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7fd f997 	bl	8007834 <pbuf_free>
 800a506:	e000      	b.n	800a50a <tcp_input+0x7d2>
  return;
 800a508:	bf00      	nop
}
 800a50a:	3724      	adds	r7, #36	; 0x24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd90      	pop	{r4, r7, pc}
 800a510:	20008b4c 	.word	0x20008b4c
 800a514:	2000012d 	.word	0x2000012d
 800a518:	20008b38 	.word	0x20008b38
 800a51c:	20000128 	.word	0x20000128
 800a520:	20000130 	.word	0x20000130
 800a524:	08013c58 	.word	0x08013c58
 800a528:	08013e0c 	.word	0x08013e0c
 800a52c:	08013ca4 	.word	0x08013ca4
 800a530:	20000100 	.word	0x20000100
 800a534:	20000110 	.word	0x20000110
 800a538:	20000124 	.word	0x20000124
 800a53c:	2000012a 	.word	0x2000012a
 800a540:	20000120 	.word	0x20000120
 800a544:	20003444 	.word	0x20003444
 800a548:	20003448 	.word	0x20003448

0800a54c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <tcp_input_delayed_close+0x1c>
 800a55a:	4b17      	ldr	r3, [pc, #92]	; (800a5b8 <tcp_input_delayed_close+0x6c>)
 800a55c:	f240 225a 	movw	r2, #602	; 0x25a
 800a560:	4916      	ldr	r1, [pc, #88]	; (800a5bc <tcp_input_delayed_close+0x70>)
 800a562:	4817      	ldr	r0, [pc, #92]	; (800a5c0 <tcp_input_delayed_close+0x74>)
 800a564:	f006 ffce 	bl	8011504 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a568:	4b16      	ldr	r3, [pc, #88]	; (800a5c4 <tcp_input_delayed_close+0x78>)
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	f003 0310 	and.w	r3, r3, #16
 800a570:	2b00      	cmp	r3, #0
 800a572:	d01c      	beq.n	800a5ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	8b5b      	ldrh	r3, [r3, #26]
 800a578:	f003 0310 	and.w	r3, r3, #16
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10d      	bne.n	800a59c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a586:	2b00      	cmp	r3, #0
 800a588:	d008      	beq.n	800a59c <tcp_input_delayed_close+0x50>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6912      	ldr	r2, [r2, #16]
 800a594:	f06f 010e 	mvn.w	r1, #14
 800a598:	4610      	mov	r0, r2
 800a59a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	480a      	ldr	r0, [pc, #40]	; (800a5c8 <tcp_input_delayed_close+0x7c>)
 800a5a0:	f7ff fa52 	bl	8009a48 <tcp_pcb_remove>
    tcp_free(pcb);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7fd fc87 	bl	8007eb8 <tcp_free>
    return 1;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e000      	b.n	800a5b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	08013c58 	.word	0x08013c58
 800a5bc:	08013e28 	.word	0x08013e28
 800a5c0:	08013ca4 	.word	0x08013ca4
 800a5c4:	2000012d 	.word	0x2000012d
 800a5c8:	20008b38 	.word	0x20008b38

0800a5cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a5cc:	b590      	push	{r4, r7, lr}
 800a5ce:	b08b      	sub	sp, #44	; 0x2c
 800a5d0:	af04      	add	r7, sp, #16
 800a5d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a5d4:	4b6f      	ldr	r3, [pc, #444]	; (800a794 <tcp_listen_input+0x1c8>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f040 80d2 	bne.w	800a786 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d106      	bne.n	800a5f6 <tcp_listen_input+0x2a>
 800a5e8:	4b6b      	ldr	r3, [pc, #428]	; (800a798 <tcp_listen_input+0x1cc>)
 800a5ea:	f240 2281 	movw	r2, #641	; 0x281
 800a5ee:	496b      	ldr	r1, [pc, #428]	; (800a79c <tcp_listen_input+0x1d0>)
 800a5f0:	486b      	ldr	r0, [pc, #428]	; (800a7a0 <tcp_listen_input+0x1d4>)
 800a5f2:	f006 ff87 	bl	8011504 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a5f6:	4b67      	ldr	r3, [pc, #412]	; (800a794 <tcp_listen_input+0x1c8>)
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	f003 0310 	and.w	r3, r3, #16
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d019      	beq.n	800a636 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a602:	4b68      	ldr	r3, [pc, #416]	; (800a7a4 <tcp_listen_input+0x1d8>)
 800a604:	6819      	ldr	r1, [r3, #0]
 800a606:	4b68      	ldr	r3, [pc, #416]	; (800a7a8 <tcp_listen_input+0x1dc>)
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	4b67      	ldr	r3, [pc, #412]	; (800a7ac <tcp_listen_input+0x1e0>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a612:	4b67      	ldr	r3, [pc, #412]	; (800a7b0 <tcp_listen_input+0x1e4>)
 800a614:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a616:	885b      	ldrh	r3, [r3, #2]
 800a618:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a61a:	4a65      	ldr	r2, [pc, #404]	; (800a7b0 <tcp_listen_input+0x1e4>)
 800a61c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a61e:	8812      	ldrh	r2, [r2, #0]
 800a620:	b292      	uxth	r2, r2
 800a622:	9202      	str	r2, [sp, #8]
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	4b63      	ldr	r3, [pc, #396]	; (800a7b4 <tcp_listen_input+0x1e8>)
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	4b63      	ldr	r3, [pc, #396]	; (800a7b8 <tcp_listen_input+0x1ec>)
 800a62c:	4602      	mov	r2, r0
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f003 fbd6 	bl	800dde0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a634:	e0a9      	b.n	800a78a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a636:	4b57      	ldr	r3, [pc, #348]	; (800a794 <tcp_listen_input+0x1c8>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	f003 0302 	and.w	r3, r3, #2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 80a3 	beq.w	800a78a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	7d5b      	ldrb	r3, [r3, #21]
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff f861 	bl	8009710 <tcp_alloc>
 800a64e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d111      	bne.n	800a67a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00a      	beq.n	800a674 <tcp_listen_input+0xa8>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	6910      	ldr	r0, [r2, #16]
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	2100      	movs	r1, #0
 800a66c:	4798      	blx	r3
 800a66e:	4603      	mov	r3, r0
 800a670:	73bb      	strb	r3, [r7, #14]
      return;
 800a672:	e08b      	b.n	800a78c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a674:	23f0      	movs	r3, #240	; 0xf0
 800a676:	73bb      	strb	r3, [r7, #14]
      return;
 800a678:	e088      	b.n	800a78c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a67a:	4b50      	ldr	r3, [pc, #320]	; (800a7bc <tcp_listen_input+0x1f0>)
 800a67c:	695a      	ldr	r2, [r3, #20]
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a682:	4b4e      	ldr	r3, [pc, #312]	; (800a7bc <tcp_listen_input+0x1f0>)
 800a684:	691a      	ldr	r2, [r3, #16]
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	8ada      	ldrh	r2, [r3, #22]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a692:	4b47      	ldr	r3, [pc, #284]	; (800a7b0 <tcp_listen_input+0x1e4>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	b29a      	uxth	r2, r3
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2203      	movs	r2, #3
 800a6a2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a6a4:	4b41      	ldr	r3, [pc, #260]	; (800a7ac <tcp_listen_input+0x1e0>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a6b6:	6978      	ldr	r0, [r7, #20]
 800a6b8:	f7ff fa5a 	bl	8009b70 <tcp_next_iss>
 800a6bc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	693a      	ldr	r2, [r7, #16]
 800a6c2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a6d6:	4b35      	ldr	r3, [pc, #212]	; (800a7ac <tcp_listen_input+0x1e0>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	1e5a      	subs	r2, r3, #1
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691a      	ldr	r2, [r3, #16]
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	7a5b      	ldrb	r3, [r3, #9]
 800a6f2:	f003 030c 	and.w	r3, r3, #12
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	7a1a      	ldrb	r2, [r3, #8]
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a704:	4b2e      	ldr	r3, [pc, #184]	; (800a7c0 <tcp_listen_input+0x1f4>)
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	60da      	str	r2, [r3, #12]
 800a70c:	4a2c      	ldr	r2, [pc, #176]	; (800a7c0 <tcp_listen_input+0x1f4>)
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	f003 fd27 	bl	800e164 <tcp_timer_needed>
 800a716:	4b2b      	ldr	r3, [pc, #172]	; (800a7c4 <tcp_listen_input+0x1f8>)
 800a718:	2201      	movs	r2, #1
 800a71a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a71c:	6978      	ldr	r0, [r7, #20]
 800a71e:	f001 fd8d 	bl	800c23c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a722:	4b23      	ldr	r3, [pc, #140]	; (800a7b0 <tcp_listen_input+0x1e4>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	89db      	ldrh	r3, [r3, #14]
 800a728:	b29a      	uxth	r2, r3
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	3304      	adds	r3, #4
 800a744:	4618      	mov	r0, r3
 800a746:	f005 fc03 	bl	800ff50 <ip4_route>
 800a74a:	4601      	mov	r1, r0
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	3304      	adds	r3, #4
 800a750:	461a      	mov	r2, r3
 800a752:	4620      	mov	r0, r4
 800a754:	f7ff fa32 	bl	8009bbc <tcp_eff_send_mss_netif>
 800a758:	4603      	mov	r3, r0
 800a75a:	461a      	mov	r2, r3
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a760:	2112      	movs	r1, #18
 800a762:	6978      	ldr	r0, [r7, #20]
 800a764:	f002 fc9a 	bl	800d09c <tcp_enqueue_flags>
 800a768:	4603      	mov	r3, r0
 800a76a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a76c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d004      	beq.n	800a77e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a774:	2100      	movs	r1, #0
 800a776:	6978      	ldr	r0, [r7, #20]
 800a778:	f7fd fdc8 	bl	800830c <tcp_abandon>
      return;
 800a77c:	e006      	b.n	800a78c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a77e:	6978      	ldr	r0, [r7, #20]
 800a780:	f002 fd7a 	bl	800d278 <tcp_output>
  return;
 800a784:	e001      	b.n	800a78a <tcp_listen_input+0x1be>
    return;
 800a786:	bf00      	nop
 800a788:	e000      	b.n	800a78c <tcp_listen_input+0x1c0>
  return;
 800a78a:	bf00      	nop
}
 800a78c:	371c      	adds	r7, #28
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd90      	pop	{r4, r7, pc}
 800a792:	bf00      	nop
 800a794:	2000012c 	.word	0x2000012c
 800a798:	08013c58 	.word	0x08013c58
 800a79c:	08013e50 	.word	0x08013e50
 800a7a0:	08013ca4 	.word	0x08013ca4
 800a7a4:	20000124 	.word	0x20000124
 800a7a8:	2000012a 	.word	0x2000012a
 800a7ac:	20000120 	.word	0x20000120
 800a7b0:	20000110 	.word	0x20000110
 800a7b4:	20003444 	.word	0x20003444
 800a7b8:	20003448 	.word	0x20003448
 800a7bc:	20003434 	.word	0x20003434
 800a7c0:	20008b38 	.word	0x20008b38
 800a7c4:	20008b34 	.word	0x20008b34

0800a7c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af04      	add	r7, sp, #16
 800a7ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a7d0:	4b2f      	ldr	r3, [pc, #188]	; (800a890 <tcp_timewait_input+0xc8>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d153      	bne.n	800a884 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <tcp_timewait_input+0x28>
 800a7e2:	4b2c      	ldr	r3, [pc, #176]	; (800a894 <tcp_timewait_input+0xcc>)
 800a7e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a7e8:	492b      	ldr	r1, [pc, #172]	; (800a898 <tcp_timewait_input+0xd0>)
 800a7ea:	482c      	ldr	r0, [pc, #176]	; (800a89c <tcp_timewait_input+0xd4>)
 800a7ec:	f006 fe8a 	bl	8011504 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a7f0:	4b27      	ldr	r3, [pc, #156]	; (800a890 <tcp_timewait_input+0xc8>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	f003 0302 	and.w	r3, r3, #2
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d02a      	beq.n	800a852 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a7fc:	4b28      	ldr	r3, [pc, #160]	; (800a8a0 <tcp_timewait_input+0xd8>)
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	db2d      	blt.n	800a866 <tcp_timewait_input+0x9e>
 800a80a:	4b25      	ldr	r3, [pc, #148]	; (800a8a0 <tcp_timewait_input+0xd8>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a816:	440b      	add	r3, r1
 800a818:	1ad3      	subs	r3, r2, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dc23      	bgt.n	800a866 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a81e:	4b21      	ldr	r3, [pc, #132]	; (800a8a4 <tcp_timewait_input+0xdc>)
 800a820:	6819      	ldr	r1, [r3, #0]
 800a822:	4b21      	ldr	r3, [pc, #132]	; (800a8a8 <tcp_timewait_input+0xe0>)
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	4b1d      	ldr	r3, [pc, #116]	; (800a8a0 <tcp_timewait_input+0xd8>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a82e:	4b1f      	ldr	r3, [pc, #124]	; (800a8ac <tcp_timewait_input+0xe4>)
 800a830:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a832:	885b      	ldrh	r3, [r3, #2]
 800a834:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a836:	4a1d      	ldr	r2, [pc, #116]	; (800a8ac <tcp_timewait_input+0xe4>)
 800a838:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a83a:	8812      	ldrh	r2, [r2, #0]
 800a83c:	b292      	uxth	r2, r2
 800a83e:	9202      	str	r2, [sp, #8]
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	4b1b      	ldr	r3, [pc, #108]	; (800a8b0 <tcp_timewait_input+0xe8>)
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	4b1b      	ldr	r3, [pc, #108]	; (800a8b4 <tcp_timewait_input+0xec>)
 800a848:	4602      	mov	r2, r0
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f003 fac8 	bl	800dde0 <tcp_rst>
      return;
 800a850:	e01b      	b.n	800a88a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a852:	4b0f      	ldr	r3, [pc, #60]	; (800a890 <tcp_timewait_input+0xc8>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a85e:	4b16      	ldr	r3, [pc, #88]	; (800a8b8 <tcp_timewait_input+0xf0>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a866:	4b10      	ldr	r3, [pc, #64]	; (800a8a8 <tcp_timewait_input+0xe0>)
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00c      	beq.n	800a888 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	8b5b      	ldrh	r3, [r3, #26]
 800a872:	f043 0302 	orr.w	r3, r3, #2
 800a876:	b29a      	uxth	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f002 fcfb 	bl	800d278 <tcp_output>
  }
  return;
 800a882:	e001      	b.n	800a888 <tcp_timewait_input+0xc0>
    return;
 800a884:	bf00      	nop
 800a886:	e000      	b.n	800a88a <tcp_timewait_input+0xc2>
  return;
 800a888:	bf00      	nop
}
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	2000012c 	.word	0x2000012c
 800a894:	08013c58 	.word	0x08013c58
 800a898:	08013e70 	.word	0x08013e70
 800a89c:	08013ca4 	.word	0x08013ca4
 800a8a0:	20000120 	.word	0x20000120
 800a8a4:	20000124 	.word	0x20000124
 800a8a8:	2000012a 	.word	0x2000012a
 800a8ac:	20000110 	.word	0x20000110
 800a8b0:	20003444 	.word	0x20003444
 800a8b4:	20003448 	.word	0x20003448
 800a8b8:	20008b3c 	.word	0x20008b3c

0800a8bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a8bc:	b590      	push	{r4, r7, lr}
 800a8be:	b08d      	sub	sp, #52	; 0x34
 800a8c0:	af04      	add	r7, sp, #16
 800a8c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <tcp_process+0x24>
 800a8d2:	4ba5      	ldr	r3, [pc, #660]	; (800ab68 <tcp_process+0x2ac>)
 800a8d4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a8d8:	49a4      	ldr	r1, [pc, #656]	; (800ab6c <tcp_process+0x2b0>)
 800a8da:	48a5      	ldr	r0, [pc, #660]	; (800ab70 <tcp_process+0x2b4>)
 800a8dc:	f006 fe12 	bl	8011504 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a8e0:	4ba4      	ldr	r3, [pc, #656]	; (800ab74 <tcp_process+0x2b8>)
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	f003 0304 	and.w	r3, r3, #4
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d04e      	beq.n	800a98a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	7d1b      	ldrb	r3, [r3, #20]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d108      	bne.n	800a906 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8f8:	4b9f      	ldr	r3, [pc, #636]	; (800ab78 <tcp_process+0x2bc>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d123      	bne.n	800a948 <tcp_process+0x8c>
        acceptable = 1;
 800a900:	2301      	movs	r3, #1
 800a902:	76fb      	strb	r3, [r7, #27]
 800a904:	e020      	b.n	800a948 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a90a:	4b9c      	ldr	r3, [pc, #624]	; (800ab7c <tcp_process+0x2c0>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d102      	bne.n	800a918 <tcp_process+0x5c>
        acceptable = 1;
 800a912:	2301      	movs	r3, #1
 800a914:	76fb      	strb	r3, [r7, #27]
 800a916:	e017      	b.n	800a948 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a918:	4b98      	ldr	r3, [pc, #608]	; (800ab7c <tcp_process+0x2c0>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	db10      	blt.n	800a948 <tcp_process+0x8c>
 800a926:	4b95      	ldr	r3, [pc, #596]	; (800ab7c <tcp_process+0x2c0>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	6879      	ldr	r1, [r7, #4]
 800a930:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a932:	440b      	add	r3, r1
 800a934:	1ad3      	subs	r3, r2, r3
 800a936:	2b00      	cmp	r3, #0
 800a938:	dc06      	bgt.n	800a948 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	8b5b      	ldrh	r3, [r3, #26]
 800a93e:	f043 0302 	orr.w	r3, r3, #2
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a948:	7efb      	ldrb	r3, [r7, #27]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d01b      	beq.n	800a986 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	7d1b      	ldrb	r3, [r3, #20]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <tcp_process+0xa8>
 800a956:	4b84      	ldr	r3, [pc, #528]	; (800ab68 <tcp_process+0x2ac>)
 800a958:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a95c:	4988      	ldr	r1, [pc, #544]	; (800ab80 <tcp_process+0x2c4>)
 800a95e:	4884      	ldr	r0, [pc, #528]	; (800ab70 <tcp_process+0x2b4>)
 800a960:	f006 fdd0 	bl	8011504 <iprintf>
      recv_flags |= TF_RESET;
 800a964:	4b87      	ldr	r3, [pc, #540]	; (800ab84 <tcp_process+0x2c8>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	f043 0308 	orr.w	r3, r3, #8
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	4b85      	ldr	r3, [pc, #532]	; (800ab84 <tcp_process+0x2c8>)
 800a970:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	8b5b      	ldrh	r3, [r3, #26]
 800a976:	f023 0301 	bic.w	r3, r3, #1
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a980:	f06f 030d 	mvn.w	r3, #13
 800a984:	e37a      	b.n	800b07c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	e378      	b.n	800b07c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a98a:	4b7a      	ldr	r3, [pc, #488]	; (800ab74 <tcp_process+0x2b8>)
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d010      	beq.n	800a9b8 <tcp_process+0xfc>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	7d1b      	ldrb	r3, [r3, #20]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d00c      	beq.n	800a9b8 <tcp_process+0xfc>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	7d1b      	ldrb	r3, [r3, #20]
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d008      	beq.n	800a9b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	8b5b      	ldrh	r3, [r3, #26]
 800a9aa:	f043 0302 	orr.w	r3, r3, #2
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	e361      	b.n	800b07c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	8b5b      	ldrh	r3, [r3, #26]
 800a9bc:	f003 0310 	and.w	r3, r3, #16
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d103      	bne.n	800a9cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a9c4:	4b70      	ldr	r3, [pc, #448]	; (800ab88 <tcp_process+0x2cc>)
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 fc2d 	bl	800c23c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	7d1b      	ldrb	r3, [r3, #20]
 800a9e6:	3b02      	subs	r3, #2
 800a9e8:	2b07      	cmp	r3, #7
 800a9ea:	f200 8337 	bhi.w	800b05c <tcp_process+0x7a0>
 800a9ee:	a201      	add	r2, pc, #4	; (adr r2, 800a9f4 <tcp_process+0x138>)
 800a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f4:	0800aa15 	.word	0x0800aa15
 800a9f8:	0800ac45 	.word	0x0800ac45
 800a9fc:	0800adbd 	.word	0x0800adbd
 800aa00:	0800ade7 	.word	0x0800ade7
 800aa04:	0800af0b 	.word	0x0800af0b
 800aa08:	0800adbd 	.word	0x0800adbd
 800aa0c:	0800af97 	.word	0x0800af97
 800aa10:	0800b027 	.word	0x0800b027
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800aa14:	4b57      	ldr	r3, [pc, #348]	; (800ab74 <tcp_process+0x2b8>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 0310 	and.w	r3, r3, #16
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 80e4 	beq.w	800abea <tcp_process+0x32e>
 800aa22:	4b54      	ldr	r3, [pc, #336]	; (800ab74 <tcp_process+0x2b8>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 80dd 	beq.w	800abea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	4b50      	ldr	r3, [pc, #320]	; (800ab78 <tcp_process+0x2bc>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	f040 80d5 	bne.w	800abea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800aa40:	4b4e      	ldr	r3, [pc, #312]	; (800ab7c <tcp_process+0x2c0>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800aa52:	4b49      	ldr	r3, [pc, #292]	; (800ab78 <tcp_process+0x2bc>)
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800aa5a:	4b4c      	ldr	r3, [pc, #304]	; (800ab8c <tcp_process+0x2d0>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	89db      	ldrh	r3, [r3, #14]
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800aa74:	4b41      	ldr	r3, [pc, #260]	; (800ab7c <tcp_process+0x2c0>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	1e5a      	subs	r2, r3, #1
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2204      	movs	r2, #4
 800aa82:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f005 fa5f 	bl	800ff50 <ip4_route>
 800aa92:	4601      	mov	r1, r0
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	3304      	adds	r3, #4
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f7ff f88e 	bl	8009bbc <tcp_eff_send_mss_netif>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aaac:	009a      	lsls	r2, r3, #2
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	f241 111c 	movw	r1, #4380	; 0x111c
 800aab8:	428b      	cmp	r3, r1
 800aaba:	bf38      	it	cc
 800aabc:	460b      	movcc	r3, r1
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d204      	bcs.n	800aacc <tcp_process+0x210>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	e00d      	b.n	800aae8 <tcp_process+0x22c>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	f241 121c 	movw	r2, #4380	; 0x111c
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d904      	bls.n	800aae4 <tcp_process+0x228>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	e001      	b.n	800aae8 <tcp_process+0x22c>
 800aae4:	f241 131c 	movw	r3, #4380	; 0x111c
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d106      	bne.n	800ab06 <tcp_process+0x24a>
 800aaf8:	4b1b      	ldr	r3, [pc, #108]	; (800ab68 <tcp_process+0x2ac>)
 800aafa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800aafe:	4924      	ldr	r1, [pc, #144]	; (800ab90 <tcp_process+0x2d4>)
 800ab00:	481b      	ldr	r0, [pc, #108]	; (800ab70 <tcp_process+0x2b4>)
 800ab02:	f006 fcff 	bl	8011504 <iprintf>
        --pcb->snd_queuelen;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab1a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d111      	bne.n	800ab46 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab26:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <tcp_process+0x280>
 800ab2e:	4b0e      	ldr	r3, [pc, #56]	; (800ab68 <tcp_process+0x2ac>)
 800ab30:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ab34:	4917      	ldr	r1, [pc, #92]	; (800ab94 <tcp_process+0x2d8>)
 800ab36:	480e      	ldr	r0, [pc, #56]	; (800ab70 <tcp_process+0x2b4>)
 800ab38:	f006 fce4 	bl	8011504 <iprintf>
          pcb->unsent = rseg->next;
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	66da      	str	r2, [r3, #108]	; 0x6c
 800ab44:	e003      	b.n	800ab4e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ab4e:	69f8      	ldr	r0, [r7, #28]
 800ab50:	f7fe fc57 	bl	8009402 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d11d      	bne.n	800ab98 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab62:	861a      	strh	r2, [r3, #48]	; 0x30
 800ab64:	e01f      	b.n	800aba6 <tcp_process+0x2ea>
 800ab66:	bf00      	nop
 800ab68:	08013c58 	.word	0x08013c58
 800ab6c:	08013e90 	.word	0x08013e90
 800ab70:	08013ca4 	.word	0x08013ca4
 800ab74:	2000012c 	.word	0x2000012c
 800ab78:	20000124 	.word	0x20000124
 800ab7c:	20000120 	.word	0x20000120
 800ab80:	08013eac 	.word	0x08013eac
 800ab84:	2000012d 	.word	0x2000012d
 800ab88:	20008b3c 	.word	0x20008b3c
 800ab8c:	20000110 	.word	0x20000110
 800ab90:	08013ecc 	.word	0x08013ecc
 800ab94:	08013ee4 	.word	0x08013ee4
        } else {
          pcb->rtime = 0;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00a      	beq.n	800abc6 <tcp_process+0x30a>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	6910      	ldr	r0, [r2, #16]
 800abba:	2200      	movs	r2, #0
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	4798      	blx	r3
 800abc0:	4603      	mov	r3, r0
 800abc2:	76bb      	strb	r3, [r7, #26]
 800abc4:	e001      	b.n	800abca <tcp_process+0x30e>
 800abc6:	2300      	movs	r3, #0
 800abc8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800abca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800abce:	f113 0f0d 	cmn.w	r3, #13
 800abd2:	d102      	bne.n	800abda <tcp_process+0x31e>
          return ERR_ABRT;
 800abd4:	f06f 030c 	mvn.w	r3, #12
 800abd8:	e250      	b.n	800b07c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	8b5b      	ldrh	r3, [r3, #26]
 800abde:	f043 0302 	orr.w	r3, r3, #2
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800abe8:	e23a      	b.n	800b060 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800abea:	4b9d      	ldr	r3, [pc, #628]	; (800ae60 <tcp_process+0x5a4>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	f003 0310 	and.w	r3, r3, #16
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f000 8234 	beq.w	800b060 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abf8:	4b9a      	ldr	r3, [pc, #616]	; (800ae64 <tcp_process+0x5a8>)
 800abfa:	6819      	ldr	r1, [r3, #0]
 800abfc:	4b9a      	ldr	r3, [pc, #616]	; (800ae68 <tcp_process+0x5ac>)
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
 800ac02:	4b9a      	ldr	r3, [pc, #616]	; (800ae6c <tcp_process+0x5b0>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac08:	4b99      	ldr	r3, [pc, #612]	; (800ae70 <tcp_process+0x5b4>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac0c:	885b      	ldrh	r3, [r3, #2]
 800ac0e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac10:	4a97      	ldr	r2, [pc, #604]	; (800ae70 <tcp_process+0x5b4>)
 800ac12:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac14:	8812      	ldrh	r2, [r2, #0]
 800ac16:	b292      	uxth	r2, r2
 800ac18:	9202      	str	r2, [sp, #8]
 800ac1a:	9301      	str	r3, [sp, #4]
 800ac1c:	4b95      	ldr	r3, [pc, #596]	; (800ae74 <tcp_process+0x5b8>)
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	4b95      	ldr	r3, [pc, #596]	; (800ae78 <tcp_process+0x5bc>)
 800ac22:	4602      	mov	r2, r0
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f003 f8db 	bl	800dde0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac30:	2b05      	cmp	r3, #5
 800ac32:	f200 8215 	bhi.w	800b060 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f002 fea5 	bl	800d98c <tcp_rexmit_rto>
      break;
 800ac42:	e20d      	b.n	800b060 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ac44:	4b86      	ldr	r3, [pc, #536]	; (800ae60 <tcp_process+0x5a4>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	f003 0310 	and.w	r3, r3, #16
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 80a1 	beq.w	800ad94 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ac52:	4b84      	ldr	r3, [pc, #528]	; (800ae64 <tcp_process+0x5a8>)
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	db7e      	blt.n	800ad60 <tcp_process+0x4a4>
 800ac62:	4b80      	ldr	r3, [pc, #512]	; (800ae64 <tcp_process+0x5a8>)
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	dc77      	bgt.n	800ad60 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2204      	movs	r2, #4
 800ac74:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d102      	bne.n	800ac84 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ac7e:	23fa      	movs	r3, #250	; 0xfa
 800ac80:	76bb      	strb	r3, [r7, #26]
 800ac82:	e01d      	b.n	800acc0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d106      	bne.n	800ac9c <tcp_process+0x3e0>
 800ac8e:	4b7b      	ldr	r3, [pc, #492]	; (800ae7c <tcp_process+0x5c0>)
 800ac90:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ac94:	497a      	ldr	r1, [pc, #488]	; (800ae80 <tcp_process+0x5c4>)
 800ac96:	487b      	ldr	r0, [pc, #492]	; (800ae84 <tcp_process+0x5c8>)
 800ac98:	f006 fc34 	bl	8011504 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <tcp_process+0x400>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6910      	ldr	r0, [r2, #16]
 800acb0:	2200      	movs	r2, #0
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	4798      	blx	r3
 800acb6:	4603      	mov	r3, r0
 800acb8:	76bb      	strb	r3, [r7, #26]
 800acba:	e001      	b.n	800acc0 <tcp_process+0x404>
 800acbc:	23f0      	movs	r3, #240	; 0xf0
 800acbe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800acc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00a      	beq.n	800acde <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800acc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800accc:	f113 0f0d 	cmn.w	r3, #13
 800acd0:	d002      	beq.n	800acd8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7fd fbd8 	bl	8008488 <tcp_abort>
            }
            return ERR_ABRT;
 800acd8:	f06f 030c 	mvn.w	r3, #12
 800acdc:	e1ce      	b.n	800b07c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fae0 	bl	800b2a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ace4:	4b68      	ldr	r3, [pc, #416]	; (800ae88 <tcp_process+0x5cc>)
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <tcp_process+0x43c>
            recv_acked--;
 800acec:	4b66      	ldr	r3, [pc, #408]	; (800ae88 <tcp_process+0x5cc>)
 800acee:	881b      	ldrh	r3, [r3, #0]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	4b64      	ldr	r3, [pc, #400]	; (800ae88 <tcp_process+0x5cc>)
 800acf6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acfc:	009a      	lsls	r2, r3, #2
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	f241 111c 	movw	r1, #4380	; 0x111c
 800ad08:	428b      	cmp	r3, r1
 800ad0a:	bf38      	it	cc
 800ad0c:	460b      	movcc	r3, r1
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d204      	bcs.n	800ad1c <tcp_process+0x460>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	e00d      	b.n	800ad38 <tcp_process+0x47c>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	f241 121c 	movw	r2, #4380	; 0x111c
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d904      	bls.n	800ad34 <tcp_process+0x478>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	e001      	b.n	800ad38 <tcp_process+0x47c>
 800ad34:	f241 131c 	movw	r3, #4380	; 0x111c
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ad3e:	4b53      	ldr	r3, [pc, #332]	; (800ae8c <tcp_process+0x5d0>)
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	f003 0320 	and.w	r3, r3, #32
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d037      	beq.n	800adba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	8b5b      	ldrh	r3, [r3, #26]
 800ad4e:	f043 0302 	orr.w	r3, r3, #2
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2207      	movs	r2, #7
 800ad5c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ad5e:	e02c      	b.n	800adba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad60:	4b40      	ldr	r3, [pc, #256]	; (800ae64 <tcp_process+0x5a8>)
 800ad62:	6819      	ldr	r1, [r3, #0]
 800ad64:	4b40      	ldr	r3, [pc, #256]	; (800ae68 <tcp_process+0x5ac>)
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	4b40      	ldr	r3, [pc, #256]	; (800ae6c <tcp_process+0x5b0>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad70:	4b3f      	ldr	r3, [pc, #252]	; (800ae70 <tcp_process+0x5b4>)
 800ad72:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad74:	885b      	ldrh	r3, [r3, #2]
 800ad76:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad78:	4a3d      	ldr	r2, [pc, #244]	; (800ae70 <tcp_process+0x5b4>)
 800ad7a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad7c:	8812      	ldrh	r2, [r2, #0]
 800ad7e:	b292      	uxth	r2, r2
 800ad80:	9202      	str	r2, [sp, #8]
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	4b3b      	ldr	r3, [pc, #236]	; (800ae74 <tcp_process+0x5b8>)
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	4b3b      	ldr	r3, [pc, #236]	; (800ae78 <tcp_process+0x5bc>)
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f003 f827 	bl	800dde0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ad92:	e167      	b.n	800b064 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ad94:	4b32      	ldr	r3, [pc, #200]	; (800ae60 <tcp_process+0x5a4>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 8161 	beq.w	800b064 <tcp_process+0x7a8>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	1e5a      	subs	r2, r3, #1
 800ada8:	4b30      	ldr	r3, [pc, #192]	; (800ae6c <tcp_process+0x5b0>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	f040 8159 	bne.w	800b064 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f002 fe0c 	bl	800d9d0 <tcp_rexmit>
      break;
 800adb8:	e154      	b.n	800b064 <tcp_process+0x7a8>
 800adba:	e153      	b.n	800b064 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fa71 	bl	800b2a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800adc2:	4b32      	ldr	r3, [pc, #200]	; (800ae8c <tcp_process+0x5d0>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 814c 	beq.w	800b068 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	8b5b      	ldrh	r3, [r3, #26]
 800add4:	f043 0302 	orr.w	r3, r3, #2
 800add8:	b29a      	uxth	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2207      	movs	r2, #7
 800ade2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ade4:	e140      	b.n	800b068 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fa5c 	bl	800b2a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800adec:	4b27      	ldr	r3, [pc, #156]	; (800ae8c <tcp_process+0x5d0>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	f003 0320 	and.w	r3, r3, #32
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d071      	beq.n	800aedc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800adf8:	4b19      	ldr	r3, [pc, #100]	; (800ae60 <tcp_process+0x5a4>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f003 0310 	and.w	r3, r3, #16
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d060      	beq.n	800aec6 <tcp_process+0x60a>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae08:	4b16      	ldr	r3, [pc, #88]	; (800ae64 <tcp_process+0x5a8>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d15a      	bne.n	800aec6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d156      	bne.n	800aec6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	8b5b      	ldrh	r3, [r3, #26]
 800ae1c:	f043 0302 	orr.w	r3, r3, #2
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7fe fdbe 	bl	80099a8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ae2c:	4b18      	ldr	r3, [pc, #96]	; (800ae90 <tcp_process+0x5d4>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d105      	bne.n	800ae42 <tcp_process+0x586>
 800ae36:	4b16      	ldr	r3, [pc, #88]	; (800ae90 <tcp_process+0x5d4>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	4a14      	ldr	r2, [pc, #80]	; (800ae90 <tcp_process+0x5d4>)
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	e02e      	b.n	800aea0 <tcp_process+0x5e4>
 800ae42:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <tcp_process+0x5d4>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	617b      	str	r3, [r7, #20]
 800ae48:	e027      	b.n	800ae9a <tcp_process+0x5de>
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d11f      	bne.n	800ae94 <tcp_process+0x5d8>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68da      	ldr	r2, [r3, #12]
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	60da      	str	r2, [r3, #12]
 800ae5c:	e020      	b.n	800aea0 <tcp_process+0x5e4>
 800ae5e:	bf00      	nop
 800ae60:	2000012c 	.word	0x2000012c
 800ae64:	20000124 	.word	0x20000124
 800ae68:	2000012a 	.word	0x2000012a
 800ae6c:	20000120 	.word	0x20000120
 800ae70:	20000110 	.word	0x20000110
 800ae74:	20003444 	.word	0x20003444
 800ae78:	20003448 	.word	0x20003448
 800ae7c:	08013c58 	.word	0x08013c58
 800ae80:	08013ef8 	.word	0x08013ef8
 800ae84:	08013ca4 	.word	0x08013ca4
 800ae88:	20000128 	.word	0x20000128
 800ae8c:	2000012d 	.word	0x2000012d
 800ae90:	20008b38 	.word	0x20008b38
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	617b      	str	r3, [r7, #20]
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1d4      	bne.n	800ae4a <tcp_process+0x58e>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	60da      	str	r2, [r3, #12]
 800aea6:	4b77      	ldr	r3, [pc, #476]	; (800b084 <tcp_process+0x7c8>)
 800aea8:	2201      	movs	r2, #1
 800aeaa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	220a      	movs	r2, #10
 800aeb0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800aeb2:	4b75      	ldr	r3, [pc, #468]	; (800b088 <tcp_process+0x7cc>)
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	60da      	str	r2, [r3, #12]
 800aeba:	4a73      	ldr	r2, [pc, #460]	; (800b088 <tcp_process+0x7cc>)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	f003 f950 	bl	800e164 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800aec4:	e0d2      	b.n	800b06c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	8b5b      	ldrh	r3, [r3, #26]
 800aeca:	f043 0302 	orr.w	r3, r3, #2
 800aece:	b29a      	uxth	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2208      	movs	r2, #8
 800aed8:	751a      	strb	r2, [r3, #20]
      break;
 800aeda:	e0c7      	b.n	800b06c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aedc:	4b6b      	ldr	r3, [pc, #428]	; (800b08c <tcp_process+0x7d0>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	f003 0310 	and.w	r3, r3, #16
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 80c1 	beq.w	800b06c <tcp_process+0x7b0>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aeee:	4b68      	ldr	r3, [pc, #416]	; (800b090 <tcp_process+0x7d4>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	f040 80ba 	bne.w	800b06c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f040 80b5 	bne.w	800b06c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2206      	movs	r2, #6
 800af06:	751a      	strb	r2, [r3, #20]
      break;
 800af08:	e0b0      	b.n	800b06c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f9ca 	bl	800b2a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800af10:	4b60      	ldr	r3, [pc, #384]	; (800b094 <tcp_process+0x7d8>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	f003 0320 	and.w	r3, r3, #32
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 80a9 	beq.w	800b070 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	8b5b      	ldrh	r3, [r3, #26]
 800af22:	f043 0302 	orr.w	r3, r3, #2
 800af26:	b29a      	uxth	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7fe fd3b 	bl	80099a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800af32:	4b59      	ldr	r3, [pc, #356]	; (800b098 <tcp_process+0x7dc>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d105      	bne.n	800af48 <tcp_process+0x68c>
 800af3c:	4b56      	ldr	r3, [pc, #344]	; (800b098 <tcp_process+0x7dc>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	4a55      	ldr	r2, [pc, #340]	; (800b098 <tcp_process+0x7dc>)
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	e013      	b.n	800af70 <tcp_process+0x6b4>
 800af48:	4b53      	ldr	r3, [pc, #332]	; (800b098 <tcp_process+0x7dc>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	613b      	str	r3, [r7, #16]
 800af4e:	e00c      	b.n	800af6a <tcp_process+0x6ae>
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	d104      	bne.n	800af64 <tcp_process+0x6a8>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	60da      	str	r2, [r3, #12]
 800af62:	e005      	b.n	800af70 <tcp_process+0x6b4>
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	613b      	str	r3, [r7, #16]
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1ef      	bne.n	800af50 <tcp_process+0x694>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	60da      	str	r2, [r3, #12]
 800af76:	4b43      	ldr	r3, [pc, #268]	; (800b084 <tcp_process+0x7c8>)
 800af78:	2201      	movs	r2, #1
 800af7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	220a      	movs	r2, #10
 800af80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800af82:	4b41      	ldr	r3, [pc, #260]	; (800b088 <tcp_process+0x7cc>)
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60da      	str	r2, [r3, #12]
 800af8a:	4a3f      	ldr	r2, [pc, #252]	; (800b088 <tcp_process+0x7cc>)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	f003 f8e8 	bl	800e164 <tcp_timer_needed>
      }
      break;
 800af94:	e06c      	b.n	800b070 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f984 	bl	800b2a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800af9c:	4b3b      	ldr	r3, [pc, #236]	; (800b08c <tcp_process+0x7d0>)
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	f003 0310 	and.w	r3, r3, #16
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d065      	beq.n	800b074 <tcp_process+0x7b8>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afac:	4b38      	ldr	r3, [pc, #224]	; (800b090 <tcp_process+0x7d4>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d15f      	bne.n	800b074 <tcp_process+0x7b8>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d15b      	bne.n	800b074 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7fe fcf3 	bl	80099a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800afc2:	4b35      	ldr	r3, [pc, #212]	; (800b098 <tcp_process+0x7dc>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d105      	bne.n	800afd8 <tcp_process+0x71c>
 800afcc:	4b32      	ldr	r3, [pc, #200]	; (800b098 <tcp_process+0x7dc>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	4a31      	ldr	r2, [pc, #196]	; (800b098 <tcp_process+0x7dc>)
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	e013      	b.n	800b000 <tcp_process+0x744>
 800afd8:	4b2f      	ldr	r3, [pc, #188]	; (800b098 <tcp_process+0x7dc>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	e00c      	b.n	800affa <tcp_process+0x73e>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d104      	bne.n	800aff4 <tcp_process+0x738>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68da      	ldr	r2, [r3, #12]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	60da      	str	r2, [r3, #12]
 800aff2:	e005      	b.n	800b000 <tcp_process+0x744>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1ef      	bne.n	800afe0 <tcp_process+0x724>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	60da      	str	r2, [r3, #12]
 800b006:	4b1f      	ldr	r3, [pc, #124]	; (800b084 <tcp_process+0x7c8>)
 800b008:	2201      	movs	r2, #1
 800b00a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	220a      	movs	r2, #10
 800b010:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b012:	4b1d      	ldr	r3, [pc, #116]	; (800b088 <tcp_process+0x7cc>)
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60da      	str	r2, [r3, #12]
 800b01a:	4a1b      	ldr	r2, [pc, #108]	; (800b088 <tcp_process+0x7cc>)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6013      	str	r3, [r2, #0]
 800b020:	f003 f8a0 	bl	800e164 <tcp_timer_needed>
      }
      break;
 800b024:	e026      	b.n	800b074 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f93c 	bl	800b2a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b02c:	4b17      	ldr	r3, [pc, #92]	; (800b08c <tcp_process+0x7d0>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	f003 0310 	and.w	r3, r3, #16
 800b034:	2b00      	cmp	r3, #0
 800b036:	d01f      	beq.n	800b078 <tcp_process+0x7bc>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b03c:	4b14      	ldr	r3, [pc, #80]	; (800b090 <tcp_process+0x7d4>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	429a      	cmp	r2, r3
 800b042:	d119      	bne.n	800b078 <tcp_process+0x7bc>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d115      	bne.n	800b078 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b04c:	4b11      	ldr	r3, [pc, #68]	; (800b094 <tcp_process+0x7d8>)
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	f043 0310 	orr.w	r3, r3, #16
 800b054:	b2da      	uxtb	r2, r3
 800b056:	4b0f      	ldr	r3, [pc, #60]	; (800b094 <tcp_process+0x7d8>)
 800b058:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b05a:	e00d      	b.n	800b078 <tcp_process+0x7bc>
    default:
      break;
 800b05c:	bf00      	nop
 800b05e:	e00c      	b.n	800b07a <tcp_process+0x7be>
      break;
 800b060:	bf00      	nop
 800b062:	e00a      	b.n	800b07a <tcp_process+0x7be>
      break;
 800b064:	bf00      	nop
 800b066:	e008      	b.n	800b07a <tcp_process+0x7be>
      break;
 800b068:	bf00      	nop
 800b06a:	e006      	b.n	800b07a <tcp_process+0x7be>
      break;
 800b06c:	bf00      	nop
 800b06e:	e004      	b.n	800b07a <tcp_process+0x7be>
      break;
 800b070:	bf00      	nop
 800b072:	e002      	b.n	800b07a <tcp_process+0x7be>
      break;
 800b074:	bf00      	nop
 800b076:	e000      	b.n	800b07a <tcp_process+0x7be>
      break;
 800b078:	bf00      	nop
  }
  return ERR_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3724      	adds	r7, #36	; 0x24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd90      	pop	{r4, r7, pc}
 800b084:	20008b34 	.word	0x20008b34
 800b088:	20008b48 	.word	0x20008b48
 800b08c:	2000012c 	.word	0x2000012c
 800b090:	20000124 	.word	0x20000124
 800b094:	2000012d 	.word	0x2000012d
 800b098:	20008b38 	.word	0x20008b38

0800b09c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b09c:	b590      	push	{r4, r7, lr}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d106      	bne.n	800b0ba <tcp_oos_insert_segment+0x1e>
 800b0ac:	4b3b      	ldr	r3, [pc, #236]	; (800b19c <tcp_oos_insert_segment+0x100>)
 800b0ae:	f240 421f 	movw	r2, #1055	; 0x41f
 800b0b2:	493b      	ldr	r1, [pc, #236]	; (800b1a0 <tcp_oos_insert_segment+0x104>)
 800b0b4:	483b      	ldr	r0, [pc, #236]	; (800b1a4 <tcp_oos_insert_segment+0x108>)
 800b0b6:	f006 fa25 	bl	8011504 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	899b      	ldrh	r3, [r3, #12]
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fb f902 	bl	80062cc <lwip_htons>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d028      	beq.n	800b126 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b0d4:	6838      	ldr	r0, [r7, #0]
 800b0d6:	f7fe f97f 	bl	80093d8 <tcp_segs_free>
    next = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	603b      	str	r3, [r7, #0]
 800b0de:	e056      	b.n	800b18e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	899b      	ldrh	r3, [r3, #12]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fb f8ef 	bl	80062cc <lwip_htons>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	f003 0301 	and.w	r3, r3, #1
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00d      	beq.n	800b116 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	899b      	ldrh	r3, [r3, #12]
 800b100:	b29c      	uxth	r4, r3
 800b102:	2001      	movs	r0, #1
 800b104:	f7fb f8e2 	bl	80062cc <lwip_htons>
 800b108:	4603      	mov	r3, r0
 800b10a:	461a      	mov	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	4322      	orrs	r2, r4
 800b112:	b292      	uxth	r2, r2
 800b114:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b120:	68f8      	ldr	r0, [r7, #12]
 800b122:	f7fe f96e 	bl	8009402 <tcp_seg_free>
    while (next &&
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00e      	beq.n	800b14a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	891b      	ldrh	r3, [r3, #8]
 800b130:	461a      	mov	r2, r3
 800b132:	4b1d      	ldr	r3, [pc, #116]	; (800b1a8 <tcp_oos_insert_segment+0x10c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	441a      	add	r2, r3
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	8909      	ldrh	r1, [r1, #8]
 800b142:	440b      	add	r3, r1
 800b144:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b146:	2b00      	cmp	r3, #0
 800b148:	daca      	bge.n	800b0e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01e      	beq.n	800b18e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	891b      	ldrh	r3, [r3, #8]
 800b154:	461a      	mov	r2, r3
 800b156:	4b14      	ldr	r3, [pc, #80]	; (800b1a8 <tcp_oos_insert_segment+0x10c>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	441a      	add	r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b164:	2b00      	cmp	r3, #0
 800b166:	dd12      	ble.n	800b18e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	b29a      	uxth	r2, r3
 800b170:	4b0d      	ldr	r3, [pc, #52]	; (800b1a8 <tcp_oos_insert_segment+0x10c>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	b29b      	uxth	r3, r3
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	b29a      	uxth	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	891b      	ldrh	r3, [r3, #8]
 800b186:	4619      	mov	r1, r3
 800b188:	4610      	mov	r0, r2
 800b18a:	f7fc f9cd 	bl	8007528 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	601a      	str	r2, [r3, #0]
}
 800b194:	bf00      	nop
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd90      	pop	{r4, r7, pc}
 800b19c:	08013c58 	.word	0x08013c58
 800b1a0:	08013f18 	.word	0x08013f18
 800b1a4:	08013ca4 	.word	0x08013ca4
 800b1a8:	20000120 	.word	0x20000120

0800b1ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b1ac:	b5b0      	push	{r4, r5, r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
 800b1b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b1ba:	e03e      	b.n	800b23a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fc fbba 	bl	8007944 <pbuf_clen>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1da:	8a7a      	ldrh	r2, [r7, #18]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d906      	bls.n	800b1ee <tcp_free_acked_segments+0x42>
 800b1e0:	4b2a      	ldr	r3, [pc, #168]	; (800b28c <tcp_free_acked_segments+0xe0>)
 800b1e2:	f240 4257 	movw	r2, #1111	; 0x457
 800b1e6:	492a      	ldr	r1, [pc, #168]	; (800b290 <tcp_free_acked_segments+0xe4>)
 800b1e8:	482a      	ldr	r0, [pc, #168]	; (800b294 <tcp_free_acked_segments+0xe8>)
 800b1ea:	f006 f98b 	bl	8011504 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b1f4:	8a7b      	ldrh	r3, [r7, #18]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	891a      	ldrh	r2, [r3, #8]
 800b204:	4b24      	ldr	r3, [pc, #144]	; (800b298 <tcp_free_acked_segments+0xec>)
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	4413      	add	r3, r2
 800b20a:	b29a      	uxth	r2, r3
 800b20c:	4b22      	ldr	r3, [pc, #136]	; (800b298 <tcp_free_acked_segments+0xec>)
 800b20e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b210:	6978      	ldr	r0, [r7, #20]
 800b212:	f7fe f8f6 	bl	8009402 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00c      	beq.n	800b23a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d109      	bne.n	800b23a <tcp_free_acked_segments+0x8e>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d106      	bne.n	800b23a <tcp_free_acked_segments+0x8e>
 800b22c:	4b17      	ldr	r3, [pc, #92]	; (800b28c <tcp_free_acked_segments+0xe0>)
 800b22e:	f240 4261 	movw	r2, #1121	; 0x461
 800b232:	491a      	ldr	r1, [pc, #104]	; (800b29c <tcp_free_acked_segments+0xf0>)
 800b234:	4817      	ldr	r0, [pc, #92]	; (800b294 <tcp_free_acked_segments+0xe8>)
 800b236:	f006 f965 	bl	8011504 <iprintf>
  while (seg_list != NULL &&
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d020      	beq.n	800b282 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	4618      	mov	r0, r3
 800b248:	f7fb f855 	bl	80062f6 <lwip_htonl>
 800b24c:	4604      	mov	r4, r0
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	891b      	ldrh	r3, [r3, #8]
 800b252:	461d      	mov	r5, r3
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	899b      	ldrh	r3, [r3, #12]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fb f835 	bl	80062cc <lwip_htons>
 800b262:	4603      	mov	r3, r0
 800b264:	b2db      	uxtb	r3, r3
 800b266:	f003 0303 	and.w	r3, r3, #3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <tcp_free_acked_segments+0xc6>
 800b26e:	2301      	movs	r3, #1
 800b270:	e000      	b.n	800b274 <tcp_free_acked_segments+0xc8>
 800b272:	2300      	movs	r3, #0
 800b274:	442b      	add	r3, r5
 800b276:	18e2      	adds	r2, r4, r3
 800b278:	4b09      	ldr	r3, [pc, #36]	; (800b2a0 <tcp_free_acked_segments+0xf4>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b27e:	2b00      	cmp	r3, #0
 800b280:	dd9c      	ble.n	800b1bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b282:	68bb      	ldr	r3, [r7, #8]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3718      	adds	r7, #24
 800b288:	46bd      	mov	sp, r7
 800b28a:	bdb0      	pop	{r4, r5, r7, pc}
 800b28c:	08013c58 	.word	0x08013c58
 800b290:	08013f40 	.word	0x08013f40
 800b294:	08013ca4 	.word	0x08013ca4
 800b298:	20000128 	.word	0x20000128
 800b29c:	08013f68 	.word	0x08013f68
 800b2a0:	20000124 	.word	0x20000124

0800b2a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b2a4:	b5b0      	push	{r4, r5, r7, lr}
 800b2a6:	b094      	sub	sp, #80	; 0x50
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <tcp_receive+0x20>
 800b2b6:	4ba6      	ldr	r3, [pc, #664]	; (800b550 <tcp_receive+0x2ac>)
 800b2b8:	f240 427b 	movw	r2, #1147	; 0x47b
 800b2bc:	49a5      	ldr	r1, [pc, #660]	; (800b554 <tcp_receive+0x2b0>)
 800b2be:	48a6      	ldr	r0, [pc, #664]	; (800b558 <tcp_receive+0x2b4>)
 800b2c0:	f006 f920 	bl	8011504 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	7d1b      	ldrb	r3, [r3, #20]
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d806      	bhi.n	800b2da <tcp_receive+0x36>
 800b2cc:	4ba0      	ldr	r3, [pc, #640]	; (800b550 <tcp_receive+0x2ac>)
 800b2ce:	f240 427c 	movw	r2, #1148	; 0x47c
 800b2d2:	49a2      	ldr	r1, [pc, #648]	; (800b55c <tcp_receive+0x2b8>)
 800b2d4:	48a0      	ldr	r0, [pc, #640]	; (800b558 <tcp_receive+0x2b4>)
 800b2d6:	f006 f915 	bl	8011504 <iprintf>

  if (flags & TCP_ACK) {
 800b2da:	4ba1      	ldr	r3, [pc, #644]	; (800b560 <tcp_receive+0x2bc>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	f003 0310 	and.w	r3, r3, #16
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f000 8263 	beq.w	800b7ae <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f4:	4413      	add	r3, r2
 800b2f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2fc:	4b99      	ldr	r3, [pc, #612]	; (800b564 <tcp_receive+0x2c0>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	2b00      	cmp	r3, #0
 800b304:	db1b      	blt.n	800b33e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b30a:	4b96      	ldr	r3, [pc, #600]	; (800b564 <tcp_receive+0x2c0>)
 800b30c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b30e:	429a      	cmp	r2, r3
 800b310:	d106      	bne.n	800b320 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b316:	4b94      	ldr	r3, [pc, #592]	; (800b568 <tcp_receive+0x2c4>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	db0e      	blt.n	800b33e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b324:	4b90      	ldr	r3, [pc, #576]	; (800b568 <tcp_receive+0x2c4>)
 800b326:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b328:	429a      	cmp	r2, r3
 800b32a:	d125      	bne.n	800b378 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b32c:	4b8f      	ldr	r3, [pc, #572]	; (800b56c <tcp_receive+0x2c8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	89db      	ldrh	r3, [r3, #14]
 800b332:	b29a      	uxth	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d91c      	bls.n	800b378 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b33e:	4b8b      	ldr	r3, [pc, #556]	; (800b56c <tcp_receive+0x2c8>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	89db      	ldrh	r3, [r3, #14]
 800b344:	b29a      	uxth	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b358:	429a      	cmp	r2, r3
 800b35a:	d205      	bcs.n	800b368 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b368:	4b7e      	ldr	r3, [pc, #504]	; (800b564 <tcp_receive+0x2c0>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b370:	4b7d      	ldr	r3, [pc, #500]	; (800b568 <tcp_receive+0x2c4>)
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b378:	4b7b      	ldr	r3, [pc, #492]	; (800b568 <tcp_receive+0x2c4>)
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	dc58      	bgt.n	800b438 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b386:	4b7a      	ldr	r3, [pc, #488]	; (800b570 <tcp_receive+0x2cc>)
 800b388:	881b      	ldrh	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d14b      	bne.n	800b426 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b398:	4413      	add	r3, r2
 800b39a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d142      	bne.n	800b426 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	db3d      	blt.n	800b426 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3ae:	4b6e      	ldr	r3, [pc, #440]	; (800b568 <tcp_receive+0x2c4>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d137      	bne.n	800b426 <tcp_receive+0x182>
              found_dupack = 1;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3c0:	2bff      	cmp	r3, #255	; 0xff
 800b3c2:	d007      	beq.n	800b3d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	b2da      	uxtb	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3da:	2b03      	cmp	r3, #3
 800b3dc:	d91b      	bls.n	800b416 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3e8:	4413      	add	r3, r2
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d30a      	bcc.n	800b40c <tcp_receive+0x168>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b400:	4413      	add	r3, r2
 800b402:	b29a      	uxth	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b40a:	e004      	b.n	800b416 <tcp_receive+0x172>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b412:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d902      	bls.n	800b426 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f002 fb41 	bl	800daa8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f040 8160 	bne.w	800b6ee <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b436:	e15a      	b.n	800b6ee <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b438:	4b4b      	ldr	r3, [pc, #300]	; (800b568 <tcp_receive+0x2c4>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	3b01      	subs	r3, #1
 800b444:	2b00      	cmp	r3, #0
 800b446:	f2c0 814d 	blt.w	800b6e4 <tcp_receive+0x440>
 800b44a:	4b47      	ldr	r3, [pc, #284]	; (800b568 <tcp_receive+0x2c4>)
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	2b00      	cmp	r3, #0
 800b456:	f300 8145 	bgt.w	800b6e4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	8b5b      	ldrh	r3, [r3, #26]
 800b45e:	f003 0304 	and.w	r3, r3, #4
 800b462:	2b00      	cmp	r3, #0
 800b464:	d010      	beq.n	800b488 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	8b5b      	ldrh	r3, [r3, #26]
 800b46a:	f023 0304 	bic.w	r3, r3, #4
 800b46e:	b29a      	uxth	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b496:	10db      	asrs	r3, r3, #3
 800b498:	b21b      	sxth	r3, r3
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	4413      	add	r3, r2
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	b21a      	sxth	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b4b0:	4b2d      	ldr	r3, [pc, #180]	; (800b568 <tcp_receive+0x2c4>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b4c8:	4b27      	ldr	r3, [pc, #156]	; (800b568 <tcp_receive+0x2c4>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	7d1b      	ldrb	r3, [r3, #20]
 800b4d4:	2b03      	cmp	r3, #3
 800b4d6:	f240 8096 	bls.w	800b606 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d244      	bcs.n	800b574 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	8b5b      	ldrh	r3, [r3, #26]
 800b4ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <tcp_receive+0x256>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e000      	b.n	800b4fc <tcp_receive+0x258>
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b500:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b504:	b29a      	uxth	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b50a:	fb12 f303 	smulbb	r3, r2, r3
 800b50e:	b29b      	uxth	r3, r3
 800b510:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b512:	4293      	cmp	r3, r2
 800b514:	bf28      	it	cs
 800b516:	4613      	movcs	r3, r2
 800b518:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b520:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b522:	4413      	add	r3, r2
 800b524:	b29a      	uxth	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d309      	bcc.n	800b544 <tcp_receive+0x2a0>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b536:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b538:	4413      	add	r3, r2
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b542:	e060      	b.n	800b606 <tcp_receive+0x362>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b54a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b54e:	e05a      	b.n	800b606 <tcp_receive+0x362>
 800b550:	08013c58 	.word	0x08013c58
 800b554:	08013f88 	.word	0x08013f88
 800b558:	08013ca4 	.word	0x08013ca4
 800b55c:	08013fa4 	.word	0x08013fa4
 800b560:	2000012c 	.word	0x2000012c
 800b564:	20000120 	.word	0x20000120
 800b568:	20000124 	.word	0x20000124
 800b56c:	20000110 	.word	0x20000110
 800b570:	2000012a 	.word	0x2000012a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b57a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b57c:	4413      	add	r3, r2
 800b57e:	b29a      	uxth	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b586:	429a      	cmp	r2, r3
 800b588:	d309      	bcc.n	800b59e <tcp_receive+0x2fa>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b590:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b592:	4413      	add	r3, r2
 800b594:	b29a      	uxth	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b59c:	e004      	b.n	800b5a8 <tcp_receive+0x304>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d326      	bcc.n	800b606 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5d8:	4413      	add	r3, r2
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d30a      	bcc.n	800b5fc <tcp_receive+0x358>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b5f0:	4413      	add	r3, r2
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b5fa:	e004      	b.n	800b606 <tcp_receive+0x362>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b602:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b60e:	4a98      	ldr	r2, [pc, #608]	; (800b870 <tcp_receive+0x5cc>)
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff fdcb 	bl	800b1ac <tcp_free_acked_segments>
 800b616:	4602      	mov	r2, r0
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b624:	4a93      	ldr	r2, [pc, #588]	; (800b874 <tcp_receive+0x5d0>)
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff fdc0 	bl	800b1ac <tcp_free_acked_segments>
 800b62c:	4602      	mov	r2, r0
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b636:	2b00      	cmp	r3, #0
 800b638:	d104      	bne.n	800b644 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b640:	861a      	strh	r2, [r3, #48]	; 0x30
 800b642:	e002      	b.n	800b64a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b654:	2b00      	cmp	r3, #0
 800b656:	d103      	bne.n	800b660 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b666:	4b84      	ldr	r3, [pc, #528]	; (800b878 <tcp_receive+0x5d4>)
 800b668:	881b      	ldrh	r3, [r3, #0]
 800b66a:	4413      	add	r3, r2
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	8b5b      	ldrh	r3, [r3, #26]
 800b678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d035      	beq.n	800b6ec <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b684:	2b00      	cmp	r3, #0
 800b686:	d118      	bne.n	800b6ba <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00c      	beq.n	800b6aa <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fa fe2a 	bl	80062f6 <lwip_htonl>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	dc20      	bgt.n	800b6ec <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	8b5b      	ldrh	r3, [r3, #26]
 800b6ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b6b8:	e018      	b.n	800b6ec <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fa fe15 	bl	80062f6 <lwip_htonl>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	1ae3      	subs	r3, r4, r3
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	dc0b      	bgt.n	800b6ec <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	8b5b      	ldrh	r3, [r3, #26]
 800b6d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b6e2:	e003      	b.n	800b6ec <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f002 fbcd 	bl	800de84 <tcp_send_empty_ack>
 800b6ea:	e000      	b.n	800b6ee <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b6ec:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d05b      	beq.n	800b7ae <tcp_receive+0x50a>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6fa:	4b60      	ldr	r3, [pc, #384]	; (800b87c <tcp_receive+0x5d8>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	da54      	bge.n	800b7ae <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b704:	4b5e      	ldr	r3, [pc, #376]	; (800b880 <tcp_receive+0x5dc>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	b29a      	uxth	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70e:	b29b      	uxth	r3, r3
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	b29b      	uxth	r3, r3
 800b714:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b718:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b722:	10db      	asrs	r3, r3, #3
 800b724:	b21b      	sxth	r3, r3
 800b726:	b29b      	uxth	r3, r3
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b736:	b29a      	uxth	r2, r3
 800b738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b73c:	4413      	add	r3, r2
 800b73e:	b29b      	uxth	r3, r3
 800b740:	b21a      	sxth	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b746:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	da05      	bge.n	800b75a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800b74e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b752:	425b      	negs	r3, r3
 800b754:	b29b      	uxth	r3, r3
 800b756:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b75a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b764:	109b      	asrs	r3, r3, #2
 800b766:	b21b      	sxth	r3, r3
 800b768:	b29b      	uxth	r3, r3
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b778:	b29a      	uxth	r2, r3
 800b77a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b77e:	4413      	add	r3, r2
 800b780:	b29b      	uxth	r3, r3
 800b782:	b21a      	sxth	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b78e:	10db      	asrs	r3, r3, #3
 800b790:	b21b      	sxth	r3, r3
 800b792:	b29a      	uxth	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b79a:	b29b      	uxth	r3, r3
 800b79c:	4413      	add	r3, r2
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	b21a      	sxth	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b7ae:	4b35      	ldr	r3, [pc, #212]	; (800b884 <tcp_receive+0x5e0>)
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 84e1 	beq.w	800c17a <tcp_receive+0xed6>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	7d1b      	ldrb	r3, [r3, #20]
 800b7bc:	2b06      	cmp	r3, #6
 800b7be:	f200 84dc 	bhi.w	800c17a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7c6:	4b30      	ldr	r3, [pc, #192]	; (800b888 <tcp_receive+0x5e4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f2c0 808e 	blt.w	800b8f0 <tcp_receive+0x64c>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7d8:	4b2a      	ldr	r3, [pc, #168]	; (800b884 <tcp_receive+0x5e0>)
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4b2a      	ldr	r3, [pc, #168]	; (800b888 <tcp_receive+0x5e4>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	440b      	add	r3, r1
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	f300 8081 	bgt.w	800b8f0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b7ee:	4b27      	ldr	r3, [pc, #156]	; (800b88c <tcp_receive+0x5e8>)
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7f8:	4b23      	ldr	r3, [pc, #140]	; (800b888 <tcp_receive+0x5e4>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b800:	4b22      	ldr	r3, [pc, #136]	; (800b88c <tcp_receive+0x5e8>)
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d106      	bne.n	800b816 <tcp_receive+0x572>
 800b808:	4b21      	ldr	r3, [pc, #132]	; (800b890 <tcp_receive+0x5ec>)
 800b80a:	f240 5294 	movw	r2, #1428	; 0x594
 800b80e:	4921      	ldr	r1, [pc, #132]	; (800b894 <tcp_receive+0x5f0>)
 800b810:	4821      	ldr	r0, [pc, #132]	; (800b898 <tcp_receive+0x5f4>)
 800b812:	f005 fe77 	bl	8011504 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b818:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d906      	bls.n	800b82e <tcp_receive+0x58a>
 800b820:	4b1b      	ldr	r3, [pc, #108]	; (800b890 <tcp_receive+0x5ec>)
 800b822:	f240 5295 	movw	r2, #1429	; 0x595
 800b826:	491d      	ldr	r1, [pc, #116]	; (800b89c <tcp_receive+0x5f8>)
 800b828:	481b      	ldr	r0, [pc, #108]	; (800b898 <tcp_receive+0x5f4>)
 800b82a:	f005 fe6b 	bl	8011504 <iprintf>
      off = (u16_t)off32;
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b834:	4b15      	ldr	r3, [pc, #84]	; (800b88c <tcp_receive+0x5e8>)
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	891b      	ldrh	r3, [r3, #8]
 800b83a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b83e:	429a      	cmp	r2, r3
 800b840:	d906      	bls.n	800b850 <tcp_receive+0x5ac>
 800b842:	4b13      	ldr	r3, [pc, #76]	; (800b890 <tcp_receive+0x5ec>)
 800b844:	f240 5297 	movw	r2, #1431	; 0x597
 800b848:	4915      	ldr	r1, [pc, #84]	; (800b8a0 <tcp_receive+0x5fc>)
 800b84a:	4813      	ldr	r0, [pc, #76]	; (800b898 <tcp_receive+0x5f4>)
 800b84c:	f005 fe5a 	bl	8011504 <iprintf>
      inseg.len -= off;
 800b850:	4b0e      	ldr	r3, [pc, #56]	; (800b88c <tcp_receive+0x5e8>)
 800b852:	891a      	ldrh	r2, [r3, #8]
 800b854:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	4b0b      	ldr	r3, [pc, #44]	; (800b88c <tcp_receive+0x5e8>)
 800b85e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b860:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <tcp_receive+0x5e8>)
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	891a      	ldrh	r2, [r3, #8]
 800b866:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b86e:	e029      	b.n	800b8c4 <tcp_receive+0x620>
 800b870:	08013fc0 	.word	0x08013fc0
 800b874:	08013fc8 	.word	0x08013fc8
 800b878:	20000128 	.word	0x20000128
 800b87c:	20000124 	.word	0x20000124
 800b880:	20008b3c 	.word	0x20008b3c
 800b884:	2000012a 	.word	0x2000012a
 800b888:	20000120 	.word	0x20000120
 800b88c:	20000100 	.word	0x20000100
 800b890:	08013c58 	.word	0x08013c58
 800b894:	08013fd0 	.word	0x08013fd0
 800b898:	08013ca4 	.word	0x08013ca4
 800b89c:	08013fe0 	.word	0x08013fe0
 800b8a0:	08013ff0 	.word	0x08013ff0
        off -= p->len;
 800b8a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a6:	895b      	ldrh	r3, [r3, #10]
 800b8a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b8b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b8b6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b8b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b8be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b8c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c6:	895b      	ldrh	r3, [r3, #10]
 800b8c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d8e9      	bhi.n	800b8a4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b8d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b8d8:	f7fb ff26 	bl	8007728 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e0:	4a91      	ldr	r2, [pc, #580]	; (800bb28 <tcp_receive+0x884>)
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	4b91      	ldr	r3, [pc, #580]	; (800bb2c <tcp_receive+0x888>)
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	4a8f      	ldr	r2, [pc, #572]	; (800bb28 <tcp_receive+0x884>)
 800b8ea:	6812      	ldr	r2, [r2, #0]
 800b8ec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b8ee:	e00d      	b.n	800b90c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b8f0:	4b8d      	ldr	r3, [pc, #564]	; (800bb28 <tcp_receive+0x884>)
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	da06      	bge.n	800b90c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8b5b      	ldrh	r3, [r3, #26]
 800b902:	f043 0302 	orr.w	r3, r3, #2
 800b906:	b29a      	uxth	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b90c:	4b86      	ldr	r3, [pc, #536]	; (800bb28 <tcp_receive+0x884>)
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	2b00      	cmp	r3, #0
 800b918:	f2c0 842a 	blt.w	800c170 <tcp_receive+0xecc>
 800b91c:	4b82      	ldr	r3, [pc, #520]	; (800bb28 <tcp_receive+0x884>)
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b924:	6879      	ldr	r1, [r7, #4]
 800b926:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b928:	440b      	add	r3, r1
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	3301      	adds	r3, #1
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f300 841e 	bgt.w	800c170 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b938:	4b7b      	ldr	r3, [pc, #492]	; (800bb28 <tcp_receive+0x884>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	f040 829a 	bne.w	800be76 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b942:	4b7a      	ldr	r3, [pc, #488]	; (800bb2c <tcp_receive+0x888>)
 800b944:	891c      	ldrh	r4, [r3, #8]
 800b946:	4b79      	ldr	r3, [pc, #484]	; (800bb2c <tcp_receive+0x888>)
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	899b      	ldrh	r3, [r3, #12]
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fa fcbc 	bl	80062cc <lwip_htons>
 800b954:	4603      	mov	r3, r0
 800b956:	b2db      	uxtb	r3, r3
 800b958:	f003 0303 	and.w	r3, r3, #3
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d001      	beq.n	800b964 <tcp_receive+0x6c0>
 800b960:	2301      	movs	r3, #1
 800b962:	e000      	b.n	800b966 <tcp_receive+0x6c2>
 800b964:	2300      	movs	r3, #0
 800b966:	4423      	add	r3, r4
 800b968:	b29a      	uxth	r2, r3
 800b96a:	4b71      	ldr	r3, [pc, #452]	; (800bb30 <tcp_receive+0x88c>)
 800b96c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b972:	4b6f      	ldr	r3, [pc, #444]	; (800bb30 <tcp_receive+0x88c>)
 800b974:	881b      	ldrh	r3, [r3, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d275      	bcs.n	800ba66 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b97a:	4b6c      	ldr	r3, [pc, #432]	; (800bb2c <tcp_receive+0x888>)
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	899b      	ldrh	r3, [r3, #12]
 800b980:	b29b      	uxth	r3, r3
 800b982:	4618      	mov	r0, r3
 800b984:	f7fa fca2 	bl	80062cc <lwip_htons>
 800b988:	4603      	mov	r3, r0
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	f003 0301 	and.w	r3, r3, #1
 800b990:	2b00      	cmp	r3, #0
 800b992:	d01f      	beq.n	800b9d4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b994:	4b65      	ldr	r3, [pc, #404]	; (800bb2c <tcp_receive+0x888>)
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	899b      	ldrh	r3, [r3, #12]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	b21b      	sxth	r3, r3
 800b99e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b9a2:	b21c      	sxth	r4, r3
 800b9a4:	4b61      	ldr	r3, [pc, #388]	; (800bb2c <tcp_receive+0x888>)
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	899b      	ldrh	r3, [r3, #12]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7fa fc8d 	bl	80062cc <lwip_htons>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fa fc84 	bl	80062cc <lwip_htons>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	b21b      	sxth	r3, r3
 800b9c8:	4323      	orrs	r3, r4
 800b9ca:	b21a      	sxth	r2, r3
 800b9cc:	4b57      	ldr	r3, [pc, #348]	; (800bb2c <tcp_receive+0x888>)
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	b292      	uxth	r2, r2
 800b9d2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b9d8:	4b54      	ldr	r3, [pc, #336]	; (800bb2c <tcp_receive+0x888>)
 800b9da:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b9dc:	4b53      	ldr	r3, [pc, #332]	; (800bb2c <tcp_receive+0x888>)
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	899b      	ldrh	r3, [r3, #12]
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fa fc71 	bl	80062cc <lwip_htons>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	f003 0302 	and.w	r3, r3, #2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d005      	beq.n	800ba02 <tcp_receive+0x75e>
            inseg.len -= 1;
 800b9f6:	4b4d      	ldr	r3, [pc, #308]	; (800bb2c <tcp_receive+0x888>)
 800b9f8:	891b      	ldrh	r3, [r3, #8]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	4b4b      	ldr	r3, [pc, #300]	; (800bb2c <tcp_receive+0x888>)
 800ba00:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ba02:	4b4a      	ldr	r3, [pc, #296]	; (800bb2c <tcp_receive+0x888>)
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	4a49      	ldr	r2, [pc, #292]	; (800bb2c <tcp_receive+0x888>)
 800ba08:	8912      	ldrh	r2, [r2, #8]
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fb fd8b 	bl	8007528 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ba12:	4b46      	ldr	r3, [pc, #280]	; (800bb2c <tcp_receive+0x888>)
 800ba14:	891c      	ldrh	r4, [r3, #8]
 800ba16:	4b45      	ldr	r3, [pc, #276]	; (800bb2c <tcp_receive+0x888>)
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	899b      	ldrh	r3, [r3, #12]
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7fa fc54 	bl	80062cc <lwip_htons>
 800ba24:	4603      	mov	r3, r0
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	f003 0303 	and.w	r3, r3, #3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <tcp_receive+0x790>
 800ba30:	2301      	movs	r3, #1
 800ba32:	e000      	b.n	800ba36 <tcp_receive+0x792>
 800ba34:	2300      	movs	r3, #0
 800ba36:	4423      	add	r3, r4
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	4b3d      	ldr	r3, [pc, #244]	; (800bb30 <tcp_receive+0x88c>)
 800ba3c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ba3e:	4b3c      	ldr	r3, [pc, #240]	; (800bb30 <tcp_receive+0x88c>)
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	461a      	mov	r2, r3
 800ba44:	4b38      	ldr	r3, [pc, #224]	; (800bb28 <tcp_receive+0x884>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	441a      	add	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ba52:	440b      	add	r3, r1
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d006      	beq.n	800ba66 <tcp_receive+0x7c2>
 800ba58:	4b36      	ldr	r3, [pc, #216]	; (800bb34 <tcp_receive+0x890>)
 800ba5a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ba5e:	4936      	ldr	r1, [pc, #216]	; (800bb38 <tcp_receive+0x894>)
 800ba60:	4836      	ldr	r0, [pc, #216]	; (800bb3c <tcp_receive+0x898>)
 800ba62:	f005 fd4f 	bl	8011504 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f000 80e7 	beq.w	800bc3e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ba70:	4b2e      	ldr	r3, [pc, #184]	; (800bb2c <tcp_receive+0x888>)
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	899b      	ldrh	r3, [r3, #12]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fa fc27 	bl	80062cc <lwip_htons>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d010      	beq.n	800baac <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ba8a:	e00a      	b.n	800baa2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba90:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f7fd fcb0 	bl	8009402 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1f0      	bne.n	800ba8c <tcp_receive+0x7e8>
 800baaa:	e0c8      	b.n	800bc3e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bab0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bab2:	e052      	b.n	800bb5a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	899b      	ldrh	r3, [r3, #12]
 800baba:	b29b      	uxth	r3, r3
 800babc:	4618      	mov	r0, r3
 800babe:	f7fa fc05 	bl	80062cc <lwip_htons>
 800bac2:	4603      	mov	r3, r0
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d03d      	beq.n	800bb4a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bace:	4b17      	ldr	r3, [pc, #92]	; (800bb2c <tcp_receive+0x888>)
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	899b      	ldrh	r3, [r3, #12]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fa fbf8 	bl	80062cc <lwip_htons>
 800badc:	4603      	mov	r3, r0
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d130      	bne.n	800bb4a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bae8:	4b10      	ldr	r3, [pc, #64]	; (800bb2c <tcp_receive+0x888>)
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	899b      	ldrh	r3, [r3, #12]
 800baee:	b29c      	uxth	r4, r3
 800baf0:	2001      	movs	r0, #1
 800baf2:	f7fa fbeb 	bl	80062cc <lwip_htons>
 800baf6:	4603      	mov	r3, r0
 800baf8:	461a      	mov	r2, r3
 800bafa:	4b0c      	ldr	r3, [pc, #48]	; (800bb2c <tcp_receive+0x888>)
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	4322      	orrs	r2, r4
 800bb00:	b292      	uxth	r2, r2
 800bb02:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bb04:	4b09      	ldr	r3, [pc, #36]	; (800bb2c <tcp_receive+0x888>)
 800bb06:	891c      	ldrh	r4, [r3, #8]
 800bb08:	4b08      	ldr	r3, [pc, #32]	; (800bb2c <tcp_receive+0x888>)
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	899b      	ldrh	r3, [r3, #12]
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fa fbdb 	bl	80062cc <lwip_htons>
 800bb16:	4603      	mov	r3, r0
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	f003 0303 	and.w	r3, r3, #3
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00e      	beq.n	800bb40 <tcp_receive+0x89c>
 800bb22:	2301      	movs	r3, #1
 800bb24:	e00d      	b.n	800bb42 <tcp_receive+0x89e>
 800bb26:	bf00      	nop
 800bb28:	20000120 	.word	0x20000120
 800bb2c:	20000100 	.word	0x20000100
 800bb30:	2000012a 	.word	0x2000012a
 800bb34:	08013c58 	.word	0x08013c58
 800bb38:	08014000 	.word	0x08014000
 800bb3c:	08013ca4 	.word	0x08013ca4
 800bb40:	2300      	movs	r3, #0
 800bb42:	4423      	add	r3, r4
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	4b98      	ldr	r3, [pc, #608]	; (800bda8 <tcp_receive+0xb04>)
 800bb48:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800bb4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb4c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800bb54:	6938      	ldr	r0, [r7, #16]
 800bb56:	f7fd fc54 	bl	8009402 <tcp_seg_free>
            while (next &&
 800bb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00e      	beq.n	800bb7e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bb60:	4b91      	ldr	r3, [pc, #580]	; (800bda8 <tcp_receive+0xb04>)
 800bb62:	881b      	ldrh	r3, [r3, #0]
 800bb64:	461a      	mov	r2, r3
 800bb66:	4b91      	ldr	r3, [pc, #580]	; (800bdac <tcp_receive+0xb08>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	441a      	add	r2, r3
 800bb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb74:	8909      	ldrh	r1, [r1, #8]
 800bb76:	440b      	add	r3, r1
 800bb78:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	da9a      	bge.n	800bab4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d059      	beq.n	800bc38 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800bb84:	4b88      	ldr	r3, [pc, #544]	; (800bda8 <tcp_receive+0xb04>)
 800bb86:	881b      	ldrh	r3, [r3, #0]
 800bb88:	461a      	mov	r2, r3
 800bb8a:	4b88      	ldr	r3, [pc, #544]	; (800bdac <tcp_receive+0xb08>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	441a      	add	r2, r3
 800bb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	dd4d      	ble.n	800bc38 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	b29a      	uxth	r2, r3
 800bba4:	4b81      	ldr	r3, [pc, #516]	; (800bdac <tcp_receive+0xb08>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	1ad3      	subs	r3, r2, r3
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	4b80      	ldr	r3, [pc, #512]	; (800bdb0 <tcp_receive+0xb0c>)
 800bbb0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bbb2:	4b7f      	ldr	r3, [pc, #508]	; (800bdb0 <tcp_receive+0xb0c>)
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	899b      	ldrh	r3, [r3, #12]
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fa fb86 	bl	80062cc <lwip_htons>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	f003 0302 	and.w	r3, r3, #2
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d005      	beq.n	800bbd8 <tcp_receive+0x934>
                inseg.len -= 1;
 800bbcc:	4b78      	ldr	r3, [pc, #480]	; (800bdb0 <tcp_receive+0xb0c>)
 800bbce:	891b      	ldrh	r3, [r3, #8]
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	4b76      	ldr	r3, [pc, #472]	; (800bdb0 <tcp_receive+0xb0c>)
 800bbd6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bbd8:	4b75      	ldr	r3, [pc, #468]	; (800bdb0 <tcp_receive+0xb0c>)
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	4a74      	ldr	r2, [pc, #464]	; (800bdb0 <tcp_receive+0xb0c>)
 800bbde:	8912      	ldrh	r2, [r2, #8]
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fb fca0 	bl	8007528 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bbe8:	4b71      	ldr	r3, [pc, #452]	; (800bdb0 <tcp_receive+0xb0c>)
 800bbea:	891c      	ldrh	r4, [r3, #8]
 800bbec:	4b70      	ldr	r3, [pc, #448]	; (800bdb0 <tcp_receive+0xb0c>)
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	899b      	ldrh	r3, [r3, #12]
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fa fb69 	bl	80062cc <lwip_htons>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	f003 0303 	and.w	r3, r3, #3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <tcp_receive+0x966>
 800bc06:	2301      	movs	r3, #1
 800bc08:	e000      	b.n	800bc0c <tcp_receive+0x968>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4423      	add	r3, r4
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	4b65      	ldr	r3, [pc, #404]	; (800bda8 <tcp_receive+0xb04>)
 800bc12:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bc14:	4b64      	ldr	r3, [pc, #400]	; (800bda8 <tcp_receive+0xb04>)
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4b64      	ldr	r3, [pc, #400]	; (800bdac <tcp_receive+0xb08>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	441a      	add	r2, r3
 800bc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d006      	beq.n	800bc38 <tcp_receive+0x994>
 800bc2a:	4b62      	ldr	r3, [pc, #392]	; (800bdb4 <tcp_receive+0xb10>)
 800bc2c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bc30:	4961      	ldr	r1, [pc, #388]	; (800bdb8 <tcp_receive+0xb14>)
 800bc32:	4862      	ldr	r0, [pc, #392]	; (800bdbc <tcp_receive+0xb18>)
 800bc34:	f005 fc66 	bl	8011504 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc3c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bc3e:	4b5a      	ldr	r3, [pc, #360]	; (800bda8 <tcp_receive+0xb04>)
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	4b59      	ldr	r3, [pc, #356]	; (800bdac <tcp_receive+0xb08>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	441a      	add	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bc52:	4b55      	ldr	r3, [pc, #340]	; (800bda8 <tcp_receive+0xb04>)
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d206      	bcs.n	800bc68 <tcp_receive+0x9c4>
 800bc5a:	4b56      	ldr	r3, [pc, #344]	; (800bdb4 <tcp_receive+0xb10>)
 800bc5c:	f240 6207 	movw	r2, #1543	; 0x607
 800bc60:	4957      	ldr	r1, [pc, #348]	; (800bdc0 <tcp_receive+0xb1c>)
 800bc62:	4856      	ldr	r0, [pc, #344]	; (800bdbc <tcp_receive+0xb18>)
 800bc64:	f005 fc4e 	bl	8011504 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bc6c:	4b4e      	ldr	r3, [pc, #312]	; (800bda8 <tcp_receive+0xb04>)
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7fc fd85 	bl	8008788 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bc7e:	4b4c      	ldr	r3, [pc, #304]	; (800bdb0 <tcp_receive+0xb0c>)
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	891b      	ldrh	r3, [r3, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d006      	beq.n	800bc96 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800bc88:	4b49      	ldr	r3, [pc, #292]	; (800bdb0 <tcp_receive+0xb0c>)
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	4a4d      	ldr	r2, [pc, #308]	; (800bdc4 <tcp_receive+0xb20>)
 800bc8e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bc90:	4b47      	ldr	r3, [pc, #284]	; (800bdb0 <tcp_receive+0xb0c>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bc96:	4b46      	ldr	r3, [pc, #280]	; (800bdb0 <tcp_receive+0xb0c>)
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	899b      	ldrh	r3, [r3, #12]
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fa fb14 	bl	80062cc <lwip_htons>
 800bca4:	4603      	mov	r3, r0
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 80b8 	beq.w	800be22 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bcb2:	4b45      	ldr	r3, [pc, #276]	; (800bdc8 <tcp_receive+0xb24>)
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	f043 0320 	orr.w	r3, r3, #32
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	4b42      	ldr	r3, [pc, #264]	; (800bdc8 <tcp_receive+0xb24>)
 800bcbe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bcc0:	e0af      	b.n	800be22 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcc6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	4a36      	ldr	r2, [pc, #216]	; (800bdac <tcp_receive+0xb08>)
 800bcd2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	891b      	ldrh	r3, [r3, #8]
 800bcd8:	461c      	mov	r4, r3
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	899b      	ldrh	r3, [r3, #12]
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fa faf2 	bl	80062cc <lwip_htons>
 800bce8:	4603      	mov	r3, r0
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	f003 0303 	and.w	r3, r3, #3
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d001      	beq.n	800bcf8 <tcp_receive+0xa54>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e000      	b.n	800bcfa <tcp_receive+0xa56>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	191a      	adds	r2, r3, r4
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd00:	441a      	add	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd0a:	461c      	mov	r4, r3
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	891b      	ldrh	r3, [r3, #8]
 800bd10:	461d      	mov	r5, r3
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	899b      	ldrh	r3, [r3, #12]
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fa fad6 	bl	80062cc <lwip_htons>
 800bd20:	4603      	mov	r3, r0
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	f003 0303 	and.w	r3, r3, #3
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <tcp_receive+0xa8c>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e000      	b.n	800bd32 <tcp_receive+0xa8e>
 800bd30:	2300      	movs	r3, #0
 800bd32:	442b      	add	r3, r5
 800bd34:	429c      	cmp	r4, r3
 800bd36:	d206      	bcs.n	800bd46 <tcp_receive+0xaa2>
 800bd38:	4b1e      	ldr	r3, [pc, #120]	; (800bdb4 <tcp_receive+0xb10>)
 800bd3a:	f240 622b 	movw	r2, #1579	; 0x62b
 800bd3e:	4923      	ldr	r1, [pc, #140]	; (800bdcc <tcp_receive+0xb28>)
 800bd40:	481e      	ldr	r0, [pc, #120]	; (800bdbc <tcp_receive+0xb18>)
 800bd42:	f005 fbdf 	bl	8011504 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	891b      	ldrh	r3, [r3, #8]
 800bd4a:	461c      	mov	r4, r3
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	899b      	ldrh	r3, [r3, #12]
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fa fab9 	bl	80062cc <lwip_htons>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 0303 	and.w	r3, r3, #3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <tcp_receive+0xac6>
 800bd66:	2301      	movs	r3, #1
 800bd68:	e000      	b.n	800bd6c <tcp_receive+0xac8>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	1919      	adds	r1, r3, r4
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd72:	b28b      	uxth	r3, r1
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7fc fd03 	bl	8008788 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	891b      	ldrh	r3, [r3, #8]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d028      	beq.n	800bdde <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bd8c:	4b0d      	ldr	r3, [pc, #52]	; (800bdc4 <tcp_receive+0xb20>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d01d      	beq.n	800bdd0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800bd94:	4b0b      	ldr	r3, [pc, #44]	; (800bdc4 <tcp_receive+0xb20>)
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4610      	mov	r0, r2
 800bda0:	f7fb fe0a 	bl	80079b8 <pbuf_cat>
 800bda4:	e018      	b.n	800bdd8 <tcp_receive+0xb34>
 800bda6:	bf00      	nop
 800bda8:	2000012a 	.word	0x2000012a
 800bdac:	20000120 	.word	0x20000120
 800bdb0:	20000100 	.word	0x20000100
 800bdb4:	08013c58 	.word	0x08013c58
 800bdb8:	08014038 	.word	0x08014038
 800bdbc:	08013ca4 	.word	0x08013ca4
 800bdc0:	08014074 	.word	0x08014074
 800bdc4:	20000130 	.word	0x20000130
 800bdc8:	2000012d 	.word	0x2000012d
 800bdcc:	08014094 	.word	0x08014094
            } else {
              recv_data = cseg->p;
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	4a70      	ldr	r2, [pc, #448]	; (800bf98 <tcp_receive+0xcf4>)
 800bdd6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	2200      	movs	r2, #0
 800bddc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	899b      	ldrh	r3, [r3, #12]
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fa fa70 	bl	80062cc <lwip_htons>
 800bdec:	4603      	mov	r3, r0
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00d      	beq.n	800be14 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bdf8:	4b68      	ldr	r3, [pc, #416]	; (800bf9c <tcp_receive+0xcf8>)
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	f043 0320 	orr.w	r3, r3, #32
 800be00:	b2da      	uxtb	r2, r3
 800be02:	4b66      	ldr	r3, [pc, #408]	; (800bf9c <tcp_receive+0xcf8>)
 800be04:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	7d1b      	ldrb	r3, [r3, #20]
 800be0a:	2b04      	cmp	r3, #4
 800be0c:	d102      	bne.n	800be14 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2207      	movs	r2, #7
 800be12:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800be1c:	68b8      	ldr	r0, [r7, #8]
 800be1e:	f7fd faf0 	bl	8009402 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be26:	2b00      	cmp	r3, #0
 800be28:	d008      	beq.n	800be3c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	685a      	ldr	r2, [r3, #4]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800be36:	429a      	cmp	r2, r3
 800be38:	f43f af43 	beq.w	800bcc2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	8b5b      	ldrh	r3, [r3, #26]
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00e      	beq.n	800be66 <tcp_receive+0xbc2>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	8b5b      	ldrh	r3, [r3, #26]
 800be4c:	f023 0301 	bic.w	r3, r3, #1
 800be50:	b29a      	uxth	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	835a      	strh	r2, [r3, #26]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	8b5b      	ldrh	r3, [r3, #26]
 800be5a:	f043 0302 	orr.w	r3, r3, #2
 800be5e:	b29a      	uxth	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800be64:	e188      	b.n	800c178 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	8b5b      	ldrh	r3, [r3, #26]
 800be6a:	f043 0301 	orr.w	r3, r3, #1
 800be6e:	b29a      	uxth	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800be74:	e180      	b.n	800c178 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800be7e:	4848      	ldr	r0, [pc, #288]	; (800bfa0 <tcp_receive+0xcfc>)
 800be80:	f7fd faf6 	bl	8009470 <tcp_seg_copy>
 800be84:	4602      	mov	r2, r0
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	675a      	str	r2, [r3, #116]	; 0x74
 800be8a:	e16d      	b.n	800c168 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800be8c:	2300      	movs	r3, #0
 800be8e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be94:	63bb      	str	r3, [r7, #56]	; 0x38
 800be96:	e157      	b.n	800c148 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	685a      	ldr	r2, [r3, #4]
 800be9e:	4b41      	ldr	r3, [pc, #260]	; (800bfa4 <tcp_receive+0xd00>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d11d      	bne.n	800bee2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bea6:	4b3e      	ldr	r3, [pc, #248]	; (800bfa0 <tcp_receive+0xcfc>)
 800bea8:	891a      	ldrh	r2, [r3, #8]
 800beaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beac:	891b      	ldrh	r3, [r3, #8]
 800beae:	429a      	cmp	r2, r3
 800beb0:	f240 814f 	bls.w	800c152 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800beb4:	483a      	ldr	r0, [pc, #232]	; (800bfa0 <tcp_receive+0xcfc>)
 800beb6:	f7fd fadb 	bl	8009470 <tcp_seg_copy>
 800beba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f000 8149 	beq.w	800c156 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800bec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d003      	beq.n	800bed2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800beca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	601a      	str	r2, [r3, #0]
 800bed0:	e002      	b.n	800bed8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bed8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800beda:	6978      	ldr	r0, [r7, #20]
 800bedc:	f7ff f8de 	bl	800b09c <tcp_oos_insert_segment>
                }
                break;
 800bee0:	e139      	b.n	800c156 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d117      	bne.n	800bf18 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bee8:	4b2e      	ldr	r3, [pc, #184]	; (800bfa4 <tcp_receive+0xd00>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	da57      	bge.n	800bfa8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bef8:	4829      	ldr	r0, [pc, #164]	; (800bfa0 <tcp_receive+0xcfc>)
 800befa:	f7fd fab9 	bl	8009470 <tcp_seg_copy>
 800befe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 8129 	beq.w	800c15a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bf0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf10:	69b8      	ldr	r0, [r7, #24]
 800bf12:	f7ff f8c3 	bl	800b09c <tcp_oos_insert_segment>
                  }
                  break;
 800bf16:	e120      	b.n	800c15a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bf18:	4b22      	ldr	r3, [pc, #136]	; (800bfa4 <tcp_receive+0xd00>)
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	3b01      	subs	r3, #1
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	db3e      	blt.n	800bfa8 <tcp_receive+0xd04>
 800bf2a:	4b1e      	ldr	r3, [pc, #120]	; (800bfa4 <tcp_receive+0xd00>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	3301      	adds	r3, #1
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	dc35      	bgt.n	800bfa8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bf3c:	4818      	ldr	r0, [pc, #96]	; (800bfa0 <tcp_receive+0xcfc>)
 800bf3e:	f7fd fa97 	bl	8009470 <tcp_seg_copy>
 800bf42:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f000 8109 	beq.w	800c15e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bf4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf54:	8912      	ldrh	r2, [r2, #8]
 800bf56:	441a      	add	r2, r3
 800bf58:	4b12      	ldr	r3, [pc, #72]	; (800bfa4 <tcp_receive+0xd00>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	dd12      	ble.n	800bf88 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bf62:	4b10      	ldr	r3, [pc, #64]	; (800bfa4 <tcp_receive+0xd00>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf76:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7e:	891b      	ldrh	r3, [r3, #8]
 800bf80:	4619      	mov	r1, r3
 800bf82:	4610      	mov	r0, r2
 800bf84:	f7fb fad0 	bl	8007528 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bf88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf8a:	69fa      	ldr	r2, [r7, #28]
 800bf8c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bf8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf90:	69f8      	ldr	r0, [r7, #28]
 800bf92:	f7ff f883 	bl	800b09c <tcp_oos_insert_segment>
                  }
                  break;
 800bf96:	e0e2      	b.n	800c15e <tcp_receive+0xeba>
 800bf98:	20000130 	.word	0x20000130
 800bf9c:	2000012d 	.word	0x2000012d
 800bfa0:	20000100 	.word	0x20000100
 800bfa4:	20000120 	.word	0x20000120
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfaa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f040 80c6 	bne.w	800c142 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bfb6:	4b80      	ldr	r3, [pc, #512]	; (800c1b8 <tcp_receive+0xf14>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f340 80bd 	ble.w	800c142 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	899b      	ldrh	r3, [r3, #12]
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fa f97b 	bl	80062cc <lwip_htons>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	f003 0301 	and.w	r3, r3, #1
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f040 80bf 	bne.w	800c162 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bfe4:	4875      	ldr	r0, [pc, #468]	; (800c1bc <tcp_receive+0xf18>)
 800bfe6:	f7fd fa43 	bl	8009470 <tcp_seg_copy>
 800bfea:	4602      	mov	r2, r0
 800bfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 80b6 	beq.w	800c166 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c002:	8912      	ldrh	r2, [r2, #8]
 800c004:	441a      	add	r2, r3
 800c006:	4b6c      	ldr	r3, [pc, #432]	; (800c1b8 <tcp_receive+0xf14>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	1ad3      	subs	r3, r2, r3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	dd12      	ble.n	800c036 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c010:	4b69      	ldr	r3, [pc, #420]	; (800c1b8 <tcp_receive+0xf14>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	b29a      	uxth	r2, r3
 800c016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	b29a      	uxth	r2, r3
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	891b      	ldrh	r3, [r3, #8]
 800c02e:	4619      	mov	r1, r3
 800c030:	4610      	mov	r0, r2
 800c032:	f7fb fa79 	bl	8007528 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c036:	4b62      	ldr	r3, [pc, #392]	; (800c1c0 <tcp_receive+0xf1c>)
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	461a      	mov	r2, r3
 800c03c:	4b5e      	ldr	r3, [pc, #376]	; (800c1b8 <tcp_receive+0xf14>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	441a      	add	r2, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	6879      	ldr	r1, [r7, #4]
 800c048:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c04a:	440b      	add	r3, r1
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f340 8089 	ble.w	800c166 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	899b      	ldrh	r3, [r3, #12]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fa f934 	bl	80062cc <lwip_htons>
 800c064:	4603      	mov	r3, r0
 800c066:	b2db      	uxtb	r3, r3
 800c068:	f003 0301 	and.w	r3, r3, #1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d022      	beq.n	800c0b6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	899b      	ldrh	r3, [r3, #12]
 800c078:	b29b      	uxth	r3, r3
 800c07a:	b21b      	sxth	r3, r3
 800c07c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c080:	b21c      	sxth	r4, r3
 800c082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	899b      	ldrh	r3, [r3, #12]
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fa f91d 	bl	80062cc <lwip_htons>
 800c092:	4603      	mov	r3, r0
 800c094:	b2db      	uxtb	r3, r3
 800c096:	b29b      	uxth	r3, r3
 800c098:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fa f914 	bl	80062cc <lwip_htons>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	b21b      	sxth	r3, r3
 800c0a8:	4323      	orrs	r3, r4
 800c0aa:	b21a      	sxth	r2, r3
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	b292      	uxth	r2, r2
 800c0b4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0c0:	4413      	add	r3, r2
 800c0c2:	b299      	uxth	r1, r3
 800c0c4:	4b3c      	ldr	r3, [pc, #240]	; (800c1b8 <tcp_receive+0xf14>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	1a8a      	subs	r2, r1, r2
 800c0d0:	b292      	uxth	r2, r2
 800c0d2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	891b      	ldrh	r3, [r3, #8]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	f7fb fa20 	bl	8007528 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	891c      	ldrh	r4, [r3, #8]
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	899b      	ldrh	r3, [r3, #12]
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fa f8e7 	bl	80062cc <lwip_htons>
 800c0fe:	4603      	mov	r3, r0
 800c100:	b2db      	uxtb	r3, r3
 800c102:	f003 0303 	and.w	r3, r3, #3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <tcp_receive+0xe6a>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e000      	b.n	800c110 <tcp_receive+0xe6c>
 800c10e:	2300      	movs	r3, #0
 800c110:	4423      	add	r3, r4
 800c112:	b29a      	uxth	r2, r3
 800c114:	4b2a      	ldr	r3, [pc, #168]	; (800c1c0 <tcp_receive+0xf1c>)
 800c116:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c118:	4b29      	ldr	r3, [pc, #164]	; (800c1c0 <tcp_receive+0xf1c>)
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	461a      	mov	r2, r3
 800c11e:	4b26      	ldr	r3, [pc, #152]	; (800c1b8 <tcp_receive+0xf14>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	441a      	add	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c128:	6879      	ldr	r1, [r7, #4]
 800c12a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c12c:	440b      	add	r3, r1
 800c12e:	429a      	cmp	r2, r3
 800c130:	d019      	beq.n	800c166 <tcp_receive+0xec2>
 800c132:	4b24      	ldr	r3, [pc, #144]	; (800c1c4 <tcp_receive+0xf20>)
 800c134:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c138:	4923      	ldr	r1, [pc, #140]	; (800c1c8 <tcp_receive+0xf24>)
 800c13a:	4824      	ldr	r0, [pc, #144]	; (800c1cc <tcp_receive+0xf28>)
 800c13c:	f005 f9e2 	bl	8011504 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c140:	e011      	b.n	800c166 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	63bb      	str	r3, [r7, #56]	; 0x38
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f47f aea4 	bne.w	800be98 <tcp_receive+0xbf4>
 800c150:	e00a      	b.n	800c168 <tcp_receive+0xec4>
                break;
 800c152:	bf00      	nop
 800c154:	e008      	b.n	800c168 <tcp_receive+0xec4>
                break;
 800c156:	bf00      	nop
 800c158:	e006      	b.n	800c168 <tcp_receive+0xec4>
                  break;
 800c15a:	bf00      	nop
 800c15c:	e004      	b.n	800c168 <tcp_receive+0xec4>
                  break;
 800c15e:	bf00      	nop
 800c160:	e002      	b.n	800c168 <tcp_receive+0xec4>
                  break;
 800c162:	bf00      	nop
 800c164:	e000      	b.n	800c168 <tcp_receive+0xec4>
                break;
 800c166:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f001 fe8b 	bl	800de84 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c16e:	e003      	b.n	800c178 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f001 fe87 	bl	800de84 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c176:	e01a      	b.n	800c1ae <tcp_receive+0xf0a>
 800c178:	e019      	b.n	800c1ae <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c17a:	4b0f      	ldr	r3, [pc, #60]	; (800c1b8 <tcp_receive+0xf14>)
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c182:	1ad3      	subs	r3, r2, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	db0a      	blt.n	800c19e <tcp_receive+0xefa>
 800c188:	4b0b      	ldr	r3, [pc, #44]	; (800c1b8 <tcp_receive+0xf14>)
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c194:	440b      	add	r3, r1
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	3301      	adds	r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	dd07      	ble.n	800c1ae <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	8b5b      	ldrh	r3, [r3, #26]
 800c1a2:	f043 0302 	orr.w	r3, r3, #2
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c1ac:	e7ff      	b.n	800c1ae <tcp_receive+0xf0a>
 800c1ae:	bf00      	nop
 800c1b0:	3750      	adds	r7, #80	; 0x50
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20000120 	.word	0x20000120
 800c1bc:	20000100 	.word	0x20000100
 800c1c0:	2000012a 	.word	0x2000012a
 800c1c4:	08013c58 	.word	0x08013c58
 800c1c8:	08014000 	.word	0x08014000
 800c1cc:	08013ca4 	.word	0x08013ca4

0800c1d0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c1d6:	4b15      	ldr	r3, [pc, #84]	; (800c22c <tcp_get_next_optbyte+0x5c>)
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	1c5a      	adds	r2, r3, #1
 800c1dc:	b291      	uxth	r1, r2
 800c1de:	4a13      	ldr	r2, [pc, #76]	; (800c22c <tcp_get_next_optbyte+0x5c>)
 800c1e0:	8011      	strh	r1, [r2, #0]
 800c1e2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c1e4:	4b12      	ldr	r3, [pc, #72]	; (800c230 <tcp_get_next_optbyte+0x60>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d004      	beq.n	800c1f6 <tcp_get_next_optbyte+0x26>
 800c1ec:	4b11      	ldr	r3, [pc, #68]	; (800c234 <tcp_get_next_optbyte+0x64>)
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	88fa      	ldrh	r2, [r7, #6]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d208      	bcs.n	800c208 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <tcp_get_next_optbyte+0x68>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3314      	adds	r3, #20
 800c1fc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c1fe:	88fb      	ldrh	r3, [r7, #6]
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	4413      	add	r3, r2
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	e00b      	b.n	800c220 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c208:	88fb      	ldrh	r3, [r7, #6]
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	4b09      	ldr	r3, [pc, #36]	; (800c234 <tcp_get_next_optbyte+0x64>)
 800c20e:	881b      	ldrh	r3, [r3, #0]
 800c210:	b2db      	uxtb	r3, r3
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c216:	4b06      	ldr	r3, [pc, #24]	; (800c230 <tcp_get_next_optbyte+0x60>)
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	797b      	ldrb	r3, [r7, #5]
 800c21c:	4413      	add	r3, r2
 800c21e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c220:	4618      	mov	r0, r3
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	2000011c 	.word	0x2000011c
 800c230:	20000118 	.word	0x20000118
 800c234:	20000116 	.word	0x20000116
 800c238:	20000110 	.word	0x20000110

0800c23c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d106      	bne.n	800c258 <tcp_parseopt+0x1c>
 800c24a:	4b32      	ldr	r3, [pc, #200]	; (800c314 <tcp_parseopt+0xd8>)
 800c24c:	f240 727d 	movw	r2, #1917	; 0x77d
 800c250:	4931      	ldr	r1, [pc, #196]	; (800c318 <tcp_parseopt+0xdc>)
 800c252:	4832      	ldr	r0, [pc, #200]	; (800c31c <tcp_parseopt+0xe0>)
 800c254:	f005 f956 	bl	8011504 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c258:	4b31      	ldr	r3, [pc, #196]	; (800c320 <tcp_parseopt+0xe4>)
 800c25a:	881b      	ldrh	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d055      	beq.n	800c30c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c260:	4b30      	ldr	r3, [pc, #192]	; (800c324 <tcp_parseopt+0xe8>)
 800c262:	2200      	movs	r2, #0
 800c264:	801a      	strh	r2, [r3, #0]
 800c266:	e045      	b.n	800c2f4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c268:	f7ff ffb2 	bl	800c1d0 <tcp_get_next_optbyte>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	2b02      	cmp	r3, #2
 800c274:	d006      	beq.n	800c284 <tcp_parseopt+0x48>
 800c276:	2b02      	cmp	r3, #2
 800c278:	dc2b      	bgt.n	800c2d2 <tcp_parseopt+0x96>
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d041      	beq.n	800c302 <tcp_parseopt+0xc6>
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d127      	bne.n	800c2d2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c282:	e037      	b.n	800c2f4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c284:	f7ff ffa4 	bl	800c1d0 <tcp_get_next_optbyte>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b04      	cmp	r3, #4
 800c28c:	d13b      	bne.n	800c306 <tcp_parseopt+0xca>
 800c28e:	4b25      	ldr	r3, [pc, #148]	; (800c324 <tcp_parseopt+0xe8>)
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	3301      	adds	r3, #1
 800c294:	4a22      	ldr	r2, [pc, #136]	; (800c320 <tcp_parseopt+0xe4>)
 800c296:	8812      	ldrh	r2, [r2, #0]
 800c298:	4293      	cmp	r3, r2
 800c29a:	da34      	bge.n	800c306 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c29c:	f7ff ff98 	bl	800c1d0 <tcp_get_next_optbyte>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	021b      	lsls	r3, r3, #8
 800c2a6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c2a8:	f7ff ff92 	bl	800c1d0 <tcp_get_next_optbyte>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	89bb      	ldrh	r3, [r7, #12]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c2b6:	89bb      	ldrh	r3, [r7, #12]
 800c2b8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c2bc:	d804      	bhi.n	800c2c8 <tcp_parseopt+0x8c>
 800c2be:	89bb      	ldrh	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <tcp_parseopt+0x8c>
 800c2c4:	89ba      	ldrh	r2, [r7, #12]
 800c2c6:	e001      	b.n	800c2cc <tcp_parseopt+0x90>
 800c2c8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c2d0:	e010      	b.n	800c2f4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c2d2:	f7ff ff7d 	bl	800c1d0 <tcp_get_next_optbyte>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c2da:	7afb      	ldrb	r3, [r7, #11]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d914      	bls.n	800c30a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <tcp_parseopt+0xe8>)
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	3b02      	subs	r3, #2
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	4b0c      	ldr	r3, [pc, #48]	; (800c324 <tcp_parseopt+0xe8>)
 800c2f2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c2f4:	4b0b      	ldr	r3, [pc, #44]	; (800c324 <tcp_parseopt+0xe8>)
 800c2f6:	881a      	ldrh	r2, [r3, #0]
 800c2f8:	4b09      	ldr	r3, [pc, #36]	; (800c320 <tcp_parseopt+0xe4>)
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d3b3      	bcc.n	800c268 <tcp_parseopt+0x2c>
 800c300:	e004      	b.n	800c30c <tcp_parseopt+0xd0>
          return;
 800c302:	bf00      	nop
 800c304:	e002      	b.n	800c30c <tcp_parseopt+0xd0>
            return;
 800c306:	bf00      	nop
 800c308:	e000      	b.n	800c30c <tcp_parseopt+0xd0>
            return;
 800c30a:	bf00      	nop
      }
    }
  }
}
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	08013c58 	.word	0x08013c58
 800c318:	080140bc 	.word	0x080140bc
 800c31c:	08013ca4 	.word	0x08013ca4
 800c320:	20000114 	.word	0x20000114
 800c324:	2000011c 	.word	0x2000011c

0800c328 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c328:	b480      	push	{r7}
 800c32a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <tcp_trigger_input_pcb_close+0x1c>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	f043 0310 	orr.w	r3, r3, #16
 800c334:	b2da      	uxtb	r2, r3
 800c336:	4b03      	ldr	r3, [pc, #12]	; (800c344 <tcp_trigger_input_pcb_close+0x1c>)
 800c338:	701a      	strb	r2, [r3, #0]
}
 800c33a:	bf00      	nop
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr
 800c344:	2000012d 	.word	0x2000012d

0800c348 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00a      	beq.n	800c370 <tcp_route+0x28>
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	7a1b      	ldrb	r3, [r3, #8]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d006      	beq.n	800c370 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	7a1b      	ldrb	r3, [r3, #8]
 800c366:	4618      	mov	r0, r3
 800c368:	f7fa ff04 	bl	8007174 <netif_get_by_index>
 800c36c:	4603      	mov	r3, r0
 800c36e:	e003      	b.n	800c378 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f003 fded 	bl	800ff50 <ip4_route>
 800c376:	4603      	mov	r3, r0
  }
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c380:	b590      	push	{r4, r7, lr}
 800c382:	b087      	sub	sp, #28
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	603b      	str	r3, [r7, #0]
 800c38c:	4613      	mov	r3, r2
 800c38e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d105      	bne.n	800c3a2 <tcp_create_segment+0x22>
 800c396:	4b44      	ldr	r3, [pc, #272]	; (800c4a8 <tcp_create_segment+0x128>)
 800c398:	22a3      	movs	r2, #163	; 0xa3
 800c39a:	4944      	ldr	r1, [pc, #272]	; (800c4ac <tcp_create_segment+0x12c>)
 800c39c:	4844      	ldr	r0, [pc, #272]	; (800c4b0 <tcp_create_segment+0x130>)
 800c39e:	f005 f8b1 	bl	8011504 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d105      	bne.n	800c3b4 <tcp_create_segment+0x34>
 800c3a8:	4b3f      	ldr	r3, [pc, #252]	; (800c4a8 <tcp_create_segment+0x128>)
 800c3aa:	22a4      	movs	r2, #164	; 0xa4
 800c3ac:	4941      	ldr	r1, [pc, #260]	; (800c4b4 <tcp_create_segment+0x134>)
 800c3ae:	4840      	ldr	r0, [pc, #256]	; (800c4b0 <tcp_create_segment+0x130>)
 800c3b0:	f005 f8a8 	bl	8011504 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c3b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	f003 0304 	and.w	r3, r3, #4
 800c3c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c3c2:	2003      	movs	r0, #3
 800c3c4:	f7fa fbd8 	bl	8006b78 <memp_malloc>
 800c3c8:	6138      	str	r0, [r7, #16]
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d104      	bne.n	800c3da <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c3d0:	68b8      	ldr	r0, [r7, #8]
 800c3d2:	f7fb fa2f 	bl	8007834 <pbuf_free>
    return NULL;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e061      	b.n	800c49e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c3e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	891a      	ldrh	r2, [r3, #8]
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d205      	bcs.n	800c406 <tcp_create_segment+0x86>
 800c3fa:	4b2b      	ldr	r3, [pc, #172]	; (800c4a8 <tcp_create_segment+0x128>)
 800c3fc:	22b0      	movs	r2, #176	; 0xb0
 800c3fe:	492e      	ldr	r1, [pc, #184]	; (800c4b8 <tcp_create_segment+0x138>)
 800c400:	482b      	ldr	r0, [pc, #172]	; (800c4b0 <tcp_create_segment+0x130>)
 800c402:	f005 f87f 	bl	8011504 <iprintf>
  seg->len = p->tot_len - optlen;
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	891a      	ldrh	r2, [r3, #8]
 800c40a:	7dfb      	ldrb	r3, [r7, #23]
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	b29a      	uxth	r2, r3
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c416:	2114      	movs	r1, #20
 800c418:	68b8      	ldr	r0, [r7, #8]
 800c41a:	f7fb f975 	bl	8007708 <pbuf_add_header>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d004      	beq.n	800c42e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c424:	6938      	ldr	r0, [r7, #16]
 800c426:	f7fc ffec 	bl	8009402 <tcp_seg_free>
    return NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	e037      	b.n	800c49e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	685a      	ldr	r2, [r3, #4]
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	8ada      	ldrh	r2, [r3, #22]
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	68dc      	ldr	r4, [r3, #12]
 800c440:	4610      	mov	r0, r2
 800c442:	f7f9 ff43 	bl	80062cc <lwip_htons>
 800c446:	4603      	mov	r3, r0
 800c448:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	8b1a      	ldrh	r2, [r3, #24]
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	68dc      	ldr	r4, [r3, #12]
 800c452:	4610      	mov	r0, r2
 800c454:	f7f9 ff3a 	bl	80062cc <lwip_htons>
 800c458:	4603      	mov	r3, r0
 800c45a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	68dc      	ldr	r4, [r3, #12]
 800c460:	6838      	ldr	r0, [r7, #0]
 800c462:	f7f9 ff48 	bl	80062f6 <lwip_htonl>
 800c466:	4603      	mov	r3, r0
 800c468:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	089b      	lsrs	r3, r3, #2
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	b29b      	uxth	r3, r3
 800c472:	3305      	adds	r3, #5
 800c474:	b29b      	uxth	r3, r3
 800c476:	031b      	lsls	r3, r3, #12
 800c478:	b29a      	uxth	r2, r3
 800c47a:	79fb      	ldrb	r3, [r7, #7]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	4313      	orrs	r3, r2
 800c480:	b29a      	uxth	r2, r3
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	68dc      	ldr	r4, [r3, #12]
 800c486:	4610      	mov	r0, r2
 800c488:	f7f9 ff20 	bl	80062cc <lwip_htons>
 800c48c:	4603      	mov	r3, r0
 800c48e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	749a      	strb	r2, [r3, #18]
 800c498:	2200      	movs	r2, #0
 800c49a:	74da      	strb	r2, [r3, #19]
  return seg;
 800c49c:	693b      	ldr	r3, [r7, #16]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	371c      	adds	r7, #28
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd90      	pop	{r4, r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	080140d8 	.word	0x080140d8
 800c4ac:	0801410c 	.word	0x0801410c
 800c4b0:	0801412c 	.word	0x0801412c
 800c4b4:	08014154 	.word	0x08014154
 800c4b8:	08014178 	.word	0x08014178

0800c4bc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	607b      	str	r3, [r7, #4]
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73fb      	strb	r3, [r7, #15]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	81bb      	strh	r3, [r7, #12]
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c4d0:	89bb      	ldrh	r3, [r7, #12]
 800c4d2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d105      	bne.n	800c4e6 <tcp_pbuf_prealloc+0x2a>
 800c4da:	4b30      	ldr	r3, [pc, #192]	; (800c59c <tcp_pbuf_prealloc+0xe0>)
 800c4dc:	22e8      	movs	r2, #232	; 0xe8
 800c4de:	4930      	ldr	r1, [pc, #192]	; (800c5a0 <tcp_pbuf_prealloc+0xe4>)
 800c4e0:	4830      	ldr	r0, [pc, #192]	; (800c5a4 <tcp_pbuf_prealloc+0xe8>)
 800c4e2:	f005 f80f 	bl	8011504 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d105      	bne.n	800c4f8 <tcp_pbuf_prealloc+0x3c>
 800c4ec:	4b2b      	ldr	r3, [pc, #172]	; (800c59c <tcp_pbuf_prealloc+0xe0>)
 800c4ee:	22e9      	movs	r2, #233	; 0xe9
 800c4f0:	492d      	ldr	r1, [pc, #180]	; (800c5a8 <tcp_pbuf_prealloc+0xec>)
 800c4f2:	482c      	ldr	r0, [pc, #176]	; (800c5a4 <tcp_pbuf_prealloc+0xe8>)
 800c4f4:	f005 f806 	bl	8011504 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c4f8:	89ba      	ldrh	r2, [r7, #12]
 800c4fa:	897b      	ldrh	r3, [r7, #10]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d221      	bcs.n	800c544 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c500:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c504:	f003 0302 	and.w	r3, r3, #2
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d111      	bne.n	800c530 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c50c:	6a3b      	ldr	r3, [r7, #32]
 800c50e:	8b5b      	ldrh	r3, [r3, #26]
 800c510:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c514:	2b00      	cmp	r3, #0
 800c516:	d115      	bne.n	800c544 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c518:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d007      	beq.n	800c530 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c524:	2b00      	cmp	r3, #0
 800c526:	d103      	bne.n	800c530 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d009      	beq.n	800c544 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c530:	89bb      	ldrh	r3, [r7, #12]
 800c532:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c536:	f023 0203 	bic.w	r2, r3, #3
 800c53a:	897b      	ldrh	r3, [r7, #10]
 800c53c:	4293      	cmp	r3, r2
 800c53e:	bf28      	it	cs
 800c540:	4613      	movcs	r3, r2
 800c542:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c544:	8af9      	ldrh	r1, [r7, #22]
 800c546:	7bfb      	ldrb	r3, [r7, #15]
 800c548:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fa fe8d 	bl	800726c <pbuf_alloc>
 800c552:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	e019      	b.n	800c592 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d006      	beq.n	800c574 <tcp_pbuf_prealloc+0xb8>
 800c566:	4b0d      	ldr	r3, [pc, #52]	; (800c59c <tcp_pbuf_prealloc+0xe0>)
 800c568:	f240 120b 	movw	r2, #267	; 0x10b
 800c56c:	490f      	ldr	r1, [pc, #60]	; (800c5ac <tcp_pbuf_prealloc+0xf0>)
 800c56e:	480d      	ldr	r0, [pc, #52]	; (800c5a4 <tcp_pbuf_prealloc+0xe8>)
 800c570:	f004 ffc8 	bl	8011504 <iprintf>
  *oversize = p->len - length;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	895a      	ldrh	r2, [r3, #10]
 800c578:	89bb      	ldrh	r3, [r7, #12]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	89ba      	ldrh	r2, [r7, #12]
 800c586:	811a      	strh	r2, [r3, #8]
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	891a      	ldrh	r2, [r3, #8]
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	815a      	strh	r2, [r3, #10]
  return p;
 800c590:	693b      	ldr	r3, [r7, #16]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3718      	adds	r7, #24
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	080140d8 	.word	0x080140d8
 800c5a0:	08014190 	.word	0x08014190
 800c5a4:	0801412c 	.word	0x0801412c
 800c5a8:	080141b4 	.word	0x080141b4
 800c5ac:	080141d4 	.word	0x080141d4

0800c5b0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d106      	bne.n	800c5d0 <tcp_write_checks+0x20>
 800c5c2:	4b33      	ldr	r3, [pc, #204]	; (800c690 <tcp_write_checks+0xe0>)
 800c5c4:	f240 1233 	movw	r2, #307	; 0x133
 800c5c8:	4932      	ldr	r1, [pc, #200]	; (800c694 <tcp_write_checks+0xe4>)
 800c5ca:	4833      	ldr	r0, [pc, #204]	; (800c698 <tcp_write_checks+0xe8>)
 800c5cc:	f004 ff9a 	bl	8011504 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	7d1b      	ldrb	r3, [r3, #20]
 800c5d4:	2b04      	cmp	r3, #4
 800c5d6:	d00e      	beq.n	800c5f6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c5dc:	2b07      	cmp	r3, #7
 800c5de:	d00a      	beq.n	800c5f6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d006      	beq.n	800c5f6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c5ec:	2b03      	cmp	r3, #3
 800c5ee:	d002      	beq.n	800c5f6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c5f0:	f06f 030a 	mvn.w	r3, #10
 800c5f4:	e048      	b.n	800c688 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c5f6:	887b      	ldrh	r3, [r7, #2]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <tcp_write_checks+0x50>
    return ERR_OK;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	e043      	b.n	800c688 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c606:	887a      	ldrh	r2, [r7, #2]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d909      	bls.n	800c620 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	8b5b      	ldrh	r3, [r3, #26]
 800c610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c614:	b29a      	uxth	r2, r3
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c61a:	f04f 33ff 	mov.w	r3, #4294967295
 800c61e:	e033      	b.n	800c688 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c626:	2b08      	cmp	r3, #8
 800c628:	d909      	bls.n	800c63e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	8b5b      	ldrh	r3, [r3, #26]
 800c62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c632:	b29a      	uxth	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c638:	f04f 33ff 	mov.w	r3, #4294967295
 800c63c:	e024      	b.n	800c688 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00f      	beq.n	800c668 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d11a      	bne.n	800c686 <tcp_write_checks+0xd6>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c654:	2b00      	cmp	r3, #0
 800c656:	d116      	bne.n	800c686 <tcp_write_checks+0xd6>
 800c658:	4b0d      	ldr	r3, [pc, #52]	; (800c690 <tcp_write_checks+0xe0>)
 800c65a:	f240 1255 	movw	r2, #341	; 0x155
 800c65e:	490f      	ldr	r1, [pc, #60]	; (800c69c <tcp_write_checks+0xec>)
 800c660:	480d      	ldr	r0, [pc, #52]	; (800c698 <tcp_write_checks+0xe8>)
 800c662:	f004 ff4f 	bl	8011504 <iprintf>
 800c666:	e00e      	b.n	800c686 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <tcp_write_checks+0xc8>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c674:	2b00      	cmp	r3, #0
 800c676:	d006      	beq.n	800c686 <tcp_write_checks+0xd6>
 800c678:	4b05      	ldr	r3, [pc, #20]	; (800c690 <tcp_write_checks+0xe0>)
 800c67a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c67e:	4908      	ldr	r1, [pc, #32]	; (800c6a0 <tcp_write_checks+0xf0>)
 800c680:	4805      	ldr	r0, [pc, #20]	; (800c698 <tcp_write_checks+0xe8>)
 800c682:	f004 ff3f 	bl	8011504 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	080140d8 	.word	0x080140d8
 800c694:	080141e8 	.word	0x080141e8
 800c698:	0801412c 	.word	0x0801412c
 800c69c:	08014208 	.word	0x08014208
 800c6a0:	08014244 	.word	0x08014244

0800c6a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c6a4:	b590      	push	{r4, r7, lr}
 800c6a6:	b09b      	sub	sp, #108	; 0x6c
 800c6a8:	af04      	add	r7, sp, #16
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	80fb      	strh	r3, [r7, #6]
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	653b      	str	r3, [r7, #80]	; 0x50
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d109      	bne.n	800c700 <tcp_write+0x5c>
 800c6ec:	4ba4      	ldr	r3, [pc, #656]	; (800c980 <tcp_write+0x2dc>)
 800c6ee:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c6f2:	49a4      	ldr	r1, [pc, #656]	; (800c984 <tcp_write+0x2e0>)
 800c6f4:	48a4      	ldr	r0, [pc, #656]	; (800c988 <tcp_write+0x2e4>)
 800c6f6:	f004 ff05 	bl	8011504 <iprintf>
 800c6fa:	f06f 030f 	mvn.w	r3, #15
 800c6fe:	e32a      	b.n	800cd56 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c706:	085b      	lsrs	r3, r3, #1
 800c708:	b29a      	uxth	r2, r3
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c70e:	4293      	cmp	r3, r2
 800c710:	bf28      	it	cs
 800c712:	4613      	movcs	r3, r2
 800c714:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d102      	bne.n	800c722 <tcp_write+0x7e>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c720:	e000      	b.n	800c724 <tcp_write+0x80>
 800c722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c724:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d109      	bne.n	800c740 <tcp_write+0x9c>
 800c72c:	4b94      	ldr	r3, [pc, #592]	; (800c980 <tcp_write+0x2dc>)
 800c72e:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c732:	4996      	ldr	r1, [pc, #600]	; (800c98c <tcp_write+0x2e8>)
 800c734:	4894      	ldr	r0, [pc, #592]	; (800c988 <tcp_write+0x2e4>)
 800c736:	f004 fee5 	bl	8011504 <iprintf>
 800c73a:	f06f 030f 	mvn.w	r3, #15
 800c73e:	e30a      	b.n	800cd56 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c740:	88fb      	ldrh	r3, [r7, #6]
 800c742:	4619      	mov	r1, r3
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f7ff ff33 	bl	800c5b0 <tcp_write_checks>
 800c74a:	4603      	mov	r3, r0
 800c74c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c750:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <tcp_write+0xba>
    return err;
 800c758:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c75c:	e2fb      	b.n	800cd56 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c764:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c768:	2300      	movs	r3, #0
 800c76a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 80f6 	beq.w	800c964 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c77c:	653b      	str	r3, [r7, #80]	; 0x50
 800c77e:	e002      	b.n	800c786 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1f8      	bne.n	800c780 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c78e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c790:	7a9b      	ldrb	r3, [r3, #10]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	b29b      	uxth	r3, r3
 800c796:	f003 0304 	and.w	r3, r3, #4
 800c79a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c79c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c79e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7a0:	891b      	ldrh	r3, [r3, #8]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	8c3b      	ldrh	r3, [r7, #32]
 800c7a6:	440b      	add	r3, r1
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	da06      	bge.n	800c7ba <tcp_write+0x116>
 800c7ac:	4b74      	ldr	r3, [pc, #464]	; (800c980 <tcp_write+0x2dc>)
 800c7ae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c7b2:	4977      	ldr	r1, [pc, #476]	; (800c990 <tcp_write+0x2ec>)
 800c7b4:	4874      	ldr	r0, [pc, #464]	; (800c988 <tcp_write+0x2e4>)
 800c7b6:	f004 fea5 	bl	8011504 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7bc:	891a      	ldrh	r2, [r3, #8]
 800c7be:	8c3b      	ldrh	r3, [r7, #32]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7d0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c7d2:	8a7b      	ldrh	r3, [r7, #18]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d026      	beq.n	800c826 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c7d8:	8a7b      	ldrh	r3, [r7, #18]
 800c7da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d206      	bcs.n	800c7ee <tcp_write+0x14a>
 800c7e0:	4b67      	ldr	r3, [pc, #412]	; (800c980 <tcp_write+0x2dc>)
 800c7e2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c7e6:	496b      	ldr	r1, [pc, #428]	; (800c994 <tcp_write+0x2f0>)
 800c7e8:	4867      	ldr	r0, [pc, #412]	; (800c988 <tcp_write+0x2e4>)
 800c7ea:	f004 fe8b 	bl	8011504 <iprintf>
      seg = last_unsent;
 800c7ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7f0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c7f2:	8a7b      	ldrh	r3, [r7, #18]
 800c7f4:	88fa      	ldrh	r2, [r7, #6]
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	bf28      	it	cs
 800c7fa:	4613      	movcs	r3, r2
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c800:	4293      	cmp	r3, r2
 800c802:	bf28      	it	cs
 800c804:	4613      	movcs	r3, r2
 800c806:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c808:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c80c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c80e:	4413      	add	r3, r2
 800c810:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c814:	8a7a      	ldrh	r2, [r7, #18]
 800c816:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c81e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c820:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c826:	8a7b      	ldrh	r3, [r7, #18]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00b      	beq.n	800c844 <tcp_write+0x1a0>
 800c82c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c830:	88fb      	ldrh	r3, [r7, #6]
 800c832:	429a      	cmp	r2, r3
 800c834:	d006      	beq.n	800c844 <tcp_write+0x1a0>
 800c836:	4b52      	ldr	r3, [pc, #328]	; (800c980 <tcp_write+0x2dc>)
 800c838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c83c:	4956      	ldr	r1, [pc, #344]	; (800c998 <tcp_write+0x2f4>)
 800c83e:	4852      	ldr	r0, [pc, #328]	; (800c988 <tcp_write+0x2e4>)
 800c840:	f004 fe60 	bl	8011504 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c844:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c848:	88fb      	ldrh	r3, [r7, #6]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	f080 8167 	bcs.w	800cb1e <tcp_write+0x47a>
 800c850:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 8163 	beq.w	800cb1e <tcp_write+0x47a>
 800c858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c85a:	891b      	ldrh	r3, [r3, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 815e 	beq.w	800cb1e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c862:	88fa      	ldrh	r2, [r7, #6]
 800c864:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c868:	1ad2      	subs	r2, r2, r3
 800c86a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c86c:	4293      	cmp	r3, r2
 800c86e:	bfa8      	it	ge
 800c870:	4613      	movge	r3, r2
 800c872:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c876:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c878:	797b      	ldrb	r3, [r7, #5]
 800c87a:	f003 0301 	and.w	r3, r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d027      	beq.n	800c8d2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c882:	f107 0012 	add.w	r0, r7, #18
 800c886:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c888:	8bf9      	ldrh	r1, [r7, #30]
 800c88a:	2301      	movs	r3, #1
 800c88c:	9302      	str	r3, [sp, #8]
 800c88e:	797b      	ldrb	r3, [r7, #5]
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	4603      	mov	r3, r0
 800c898:	2000      	movs	r0, #0
 800c89a:	f7ff fe0f 	bl	800c4bc <tcp_pbuf_prealloc>
 800c89e:	6578      	str	r0, [r7, #84]	; 0x54
 800c8a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 8225 	beq.w	800ccf2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c8a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8aa:	6858      	ldr	r0, [r3, #4]
 800c8ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	8bfa      	ldrh	r2, [r7, #30]
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	f004 fdf4 	bl	80114a4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c8bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c8be:	f7fb f841 	bl	8007944 <pbuf_clen>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c8d0:	e041      	b.n	800c956 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c8d8:	e002      	b.n	800c8e0 <tcp_write+0x23c>
 800c8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	637b      	str	r3, [r7, #52]	; 0x34
 800c8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1f8      	bne.n	800c8da <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ea:	7b1b      	ldrb	r3, [r3, #12]
 800c8ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d115      	bne.n	800c920 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8fa:	8952      	ldrh	r2, [r2, #10]
 800c8fc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	429a      	cmp	r2, r3
 800c902:	d10d      	bne.n	800c920 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c904:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d006      	beq.n	800c91a <tcp_write+0x276>
 800c90c:	4b1c      	ldr	r3, [pc, #112]	; (800c980 <tcp_write+0x2dc>)
 800c90e:	f240 2231 	movw	r2, #561	; 0x231
 800c912:	4922      	ldr	r1, [pc, #136]	; (800c99c <tcp_write+0x2f8>)
 800c914:	481c      	ldr	r0, [pc, #112]	; (800c988 <tcp_write+0x2e4>)
 800c916:	f004 fdf5 	bl	8011504 <iprintf>
          extendlen = seglen;
 800c91a:	8bfb      	ldrh	r3, [r7, #30]
 800c91c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c91e:	e01a      	b.n	800c956 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c920:	8bfb      	ldrh	r3, [r7, #30]
 800c922:	2201      	movs	r2, #1
 800c924:	4619      	mov	r1, r3
 800c926:	2000      	movs	r0, #0
 800c928:	f7fa fca0 	bl	800726c <pbuf_alloc>
 800c92c:	6578      	str	r0, [r7, #84]	; 0x54
 800c92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 81e0 	beq.w	800ccf6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c936:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	441a      	add	r2, r3
 800c93e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c940:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c942:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c944:	f7fa fffe 	bl	8007944 <pbuf_clen>
 800c948:	4603      	mov	r3, r0
 800c94a:	461a      	mov	r2, r3
 800c94c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c950:	4413      	add	r3, r2
 800c952:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c956:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c95a:	8bfb      	ldrh	r3, [r7, #30]
 800c95c:	4413      	add	r3, r2
 800c95e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c962:	e0dc      	b.n	800cb1e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 80d7 	beq.w	800cb1e <tcp_write+0x47a>
 800c970:	4b03      	ldr	r3, [pc, #12]	; (800c980 <tcp_write+0x2dc>)
 800c972:	f240 224a 	movw	r2, #586	; 0x24a
 800c976:	490a      	ldr	r1, [pc, #40]	; (800c9a0 <tcp_write+0x2fc>)
 800c978:	4803      	ldr	r0, [pc, #12]	; (800c988 <tcp_write+0x2e4>)
 800c97a:	f004 fdc3 	bl	8011504 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c97e:	e0ce      	b.n	800cb1e <tcp_write+0x47a>
 800c980:	080140d8 	.word	0x080140d8
 800c984:	08014278 	.word	0x08014278
 800c988:	0801412c 	.word	0x0801412c
 800c98c:	08014290 	.word	0x08014290
 800c990:	080142c4 	.word	0x080142c4
 800c994:	080142dc 	.word	0x080142dc
 800c998:	080142fc 	.word	0x080142fc
 800c99c:	0801431c 	.word	0x0801431c
 800c9a0:	08014348 	.word	0x08014348
    struct pbuf *p;
    u16_t left = len - pos;
 800c9a4:	88fa      	ldrh	r2, [r7, #6]
 800c9a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c9ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c9ba:	8b7a      	ldrh	r2, [r7, #26]
 800c9bc:	8bbb      	ldrh	r3, [r7, #28]
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	bf28      	it	cs
 800c9c2:	4613      	movcs	r3, r2
 800c9c4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c9c6:	797b      	ldrb	r3, [r7, #5]
 800c9c8:	f003 0301 	and.w	r3, r3, #1
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d036      	beq.n	800ca3e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c9d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	8b3b      	ldrh	r3, [r7, #24]
 800c9d8:	4413      	add	r3, r2
 800c9da:	b299      	uxth	r1, r3
 800c9dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	bf0c      	ite	eq
 800c9e2:	2301      	moveq	r3, #1
 800c9e4:	2300      	movne	r3, #0
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	f107 0012 	add.w	r0, r7, #18
 800c9ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c9ee:	9302      	str	r3, [sp, #8]
 800c9f0:	797b      	ldrb	r3, [r7, #5]
 800c9f2:	9301      	str	r3, [sp, #4]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2036      	movs	r0, #54	; 0x36
 800c9fc:	f7ff fd5e 	bl	800c4bc <tcp_pbuf_prealloc>
 800ca00:	6338      	str	r0, [r7, #48]	; 0x30
 800ca02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 8178 	beq.w	800ccfa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ca0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0c:	895b      	ldrh	r3, [r3, #10]
 800ca0e:	8b3a      	ldrh	r2, [r7, #24]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d906      	bls.n	800ca22 <tcp_write+0x37e>
 800ca14:	4b8c      	ldr	r3, [pc, #560]	; (800cc48 <tcp_write+0x5a4>)
 800ca16:	f240 2266 	movw	r2, #614	; 0x266
 800ca1a:	498c      	ldr	r1, [pc, #560]	; (800cc4c <tcp_write+0x5a8>)
 800ca1c:	488c      	ldr	r0, [pc, #560]	; (800cc50 <tcp_write+0x5ac>)
 800ca1e:	f004 fd71 	bl	8011504 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800ca22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ca2a:	18d0      	adds	r0, r2, r3
 800ca2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	4413      	add	r3, r2
 800ca34:	8b3a      	ldrh	r2, [r7, #24]
 800ca36:	4619      	mov	r1, r3
 800ca38:	f004 fd34 	bl	80114a4 <memcpy>
 800ca3c:	e02f      	b.n	800ca9e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ca3e:	8a7b      	ldrh	r3, [r7, #18]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d006      	beq.n	800ca52 <tcp_write+0x3ae>
 800ca44:	4b80      	ldr	r3, [pc, #512]	; (800cc48 <tcp_write+0x5a4>)
 800ca46:	f240 2271 	movw	r2, #625	; 0x271
 800ca4a:	4982      	ldr	r1, [pc, #520]	; (800cc54 <tcp_write+0x5b0>)
 800ca4c:	4880      	ldr	r0, [pc, #512]	; (800cc50 <tcp_write+0x5ac>)
 800ca4e:	f004 fd59 	bl	8011504 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ca52:	8b3b      	ldrh	r3, [r7, #24]
 800ca54:	2201      	movs	r2, #1
 800ca56:	4619      	mov	r1, r3
 800ca58:	2036      	movs	r0, #54	; 0x36
 800ca5a:	f7fa fc07 	bl	800726c <pbuf_alloc>
 800ca5e:	6178      	str	r0, [r7, #20]
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 814b 	beq.w	800ccfe <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ca68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	441a      	add	r2, r3
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ca74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca7e:	4619      	mov	r1, r3
 800ca80:	2036      	movs	r0, #54	; 0x36
 800ca82:	f7fa fbf3 	bl	800726c <pbuf_alloc>
 800ca86:	6338      	str	r0, [r7, #48]	; 0x30
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d103      	bne.n	800ca96 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ca8e:	6978      	ldr	r0, [r7, #20]
 800ca90:	f7fa fed0 	bl	8007834 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ca94:	e136      	b.n	800cd04 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ca96:	6979      	ldr	r1, [r7, #20]
 800ca98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca9a:	f7fa ff8d 	bl	80079b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ca9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800caa0:	f7fa ff50 	bl	8007944 <pbuf_clen>
 800caa4:	4603      	mov	r3, r0
 800caa6:	461a      	mov	r2, r3
 800caa8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800caac:	4413      	add	r3, r2
 800caae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cab2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cab6:	2b09      	cmp	r3, #9
 800cab8:	d903      	bls.n	800cac2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800caba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cabc:	f7fa feba 	bl	8007834 <pbuf_free>
      goto memerr;
 800cac0:	e120      	b.n	800cd04 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cac6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800caca:	441a      	add	r2, r3
 800cacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	4613      	mov	r3, r2
 800cad4:	2200      	movs	r2, #0
 800cad6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff fc51 	bl	800c380 <tcp_create_segment>
 800cade:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f000 810d 	beq.w	800cd02 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800cae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caea:	2b00      	cmp	r3, #0
 800caec:	d102      	bne.n	800caf4 <tcp_write+0x450>
      queue = seg;
 800caee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caf0:	647b      	str	r3, [r7, #68]	; 0x44
 800caf2:	e00c      	b.n	800cb0e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800caf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d106      	bne.n	800cb08 <tcp_write+0x464>
 800cafa:	4b53      	ldr	r3, [pc, #332]	; (800cc48 <tcp_write+0x5a4>)
 800cafc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cb00:	4955      	ldr	r1, [pc, #340]	; (800cc58 <tcp_write+0x5b4>)
 800cb02:	4853      	ldr	r0, [pc, #332]	; (800cc50 <tcp_write+0x5ac>)
 800cb04:	f004 fcfe 	bl	8011504 <iprintf>
      prev_seg->next = seg;
 800cb08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb0c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800cb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb10:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800cb12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb16:	8b3b      	ldrh	r3, [r7, #24]
 800cb18:	4413      	add	r3, r2
 800cb1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800cb1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cb22:	88fb      	ldrh	r3, [r7, #6]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	f4ff af3d 	bcc.w	800c9a4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800cb2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d02c      	beq.n	800cb8a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800cb30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb36:	e01e      	b.n	800cb76 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800cb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3a:	891a      	ldrh	r2, [r3, #8]
 800cb3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb3e:	4413      	add	r3, r2
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800cb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d110      	bne.n	800cb70 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800cb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb54:	8952      	ldrh	r2, [r2, #10]
 800cb56:	4413      	add	r3, r2
 800cb58:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cb5a:	68b9      	ldr	r1, [r7, #8]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f004 fca1 	bl	80114a4 <memcpy>
        p->len += oversize_used;
 800cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb64:	895a      	ldrh	r2, [r3, #10]
 800cb66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb68:	4413      	add	r3, r2
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1dd      	bne.n	800cb38 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800cb7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb7e:	891a      	ldrh	r2, [r3, #8]
 800cb80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb82:	4413      	add	r3, r2
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb88:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800cb8a:	8a7a      	ldrh	r2, [r7, #18]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800cb92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d018      	beq.n	800cbca <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800cb98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d106      	bne.n	800cbac <tcp_write+0x508>
 800cb9e:	4b2a      	ldr	r3, [pc, #168]	; (800cc48 <tcp_write+0x5a4>)
 800cba0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800cba4:	492d      	ldr	r1, [pc, #180]	; (800cc5c <tcp_write+0x5b8>)
 800cba6:	482a      	ldr	r0, [pc, #168]	; (800cc50 <tcp_write+0x5ac>)
 800cba8:	f004 fcac 	bl	8011504 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800cbac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fa ff00 	bl	80079b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbba:	891a      	ldrh	r2, [r3, #8]
 800cbbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbbe:	891b      	ldrh	r3, [r3, #8]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbc6:	811a      	strh	r2, [r3, #8]
 800cbc8:	e037      	b.n	800cc3a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800cbca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d034      	beq.n	800cc3a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cbd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d003      	beq.n	800cbde <tcp_write+0x53a>
 800cbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d106      	bne.n	800cbec <tcp_write+0x548>
 800cbde:	4b1a      	ldr	r3, [pc, #104]	; (800cc48 <tcp_write+0x5a4>)
 800cbe0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cbe4:	491e      	ldr	r1, [pc, #120]	; (800cc60 <tcp_write+0x5bc>)
 800cbe6:	481a      	ldr	r0, [pc, #104]	; (800cc50 <tcp_write+0x5ac>)
 800cbe8:	f004 fc8c 	bl	8011504 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbf2:	e009      	b.n	800cc08 <tcp_write+0x564>
      p->tot_len += extendlen;
 800cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf6:	891a      	ldrh	r2, [r3, #8]
 800cbf8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cbfa:	4413      	add	r3, r2
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc00:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f1      	bne.n	800cbf4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800cc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc12:	891a      	ldrh	r2, [r3, #8]
 800cc14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cc16:	4413      	add	r3, r2
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800cc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc20:	895a      	ldrh	r2, [r3, #10]
 800cc22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cc24:	4413      	add	r3, r2
 800cc26:	b29a      	uxth	r2, r3
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cc2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc2e:	891a      	ldrh	r2, [r3, #8]
 800cc30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cc32:	4413      	add	r3, r2
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc38:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800cc3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d111      	bne.n	800cc64 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc44:	66da      	str	r2, [r3, #108]	; 0x6c
 800cc46:	e010      	b.n	800cc6a <tcp_write+0x5c6>
 800cc48:	080140d8 	.word	0x080140d8
 800cc4c:	08014378 	.word	0x08014378
 800cc50:	0801412c 	.word	0x0801412c
 800cc54:	080143b8 	.word	0x080143b8
 800cc58:	080143c8 	.word	0x080143c8
 800cc5c:	080143dc 	.word	0x080143dc
 800cc60:	08014414 	.word	0x08014414
  } else {
    last_unsent->next = queue;
 800cc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc68:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc6e:	88fb      	ldrh	r3, [r7, #6]
 800cc70:	441a      	add	r2, r3
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cc7c:	88fb      	ldrh	r3, [r7, #6]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cc8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00e      	beq.n	800ccba <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10a      	bne.n	800ccba <tcp_write+0x616>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d106      	bne.n	800ccba <tcp_write+0x616>
 800ccac:	4b2c      	ldr	r3, [pc, #176]	; (800cd60 <tcp_write+0x6bc>)
 800ccae:	f240 3212 	movw	r2, #786	; 0x312
 800ccb2:	492c      	ldr	r1, [pc, #176]	; (800cd64 <tcp_write+0x6c0>)
 800ccb4:	482c      	ldr	r0, [pc, #176]	; (800cd68 <tcp_write+0x6c4>)
 800ccb6:	f004 fc25 	bl	8011504 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ccba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d016      	beq.n	800ccee <tcp_write+0x64a>
 800ccc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d012      	beq.n	800ccee <tcp_write+0x64a>
 800ccc8:	797b      	ldrb	r3, [r7, #5]
 800ccca:	f003 0302 	and.w	r3, r3, #2
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d10d      	bne.n	800ccee <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ccd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	899b      	ldrh	r3, [r3, #12]
 800ccd8:	b29c      	uxth	r4, r3
 800ccda:	2008      	movs	r0, #8
 800ccdc:	f7f9 faf6 	bl	80062cc <lwip_htons>
 800cce0:	4603      	mov	r3, r0
 800cce2:	461a      	mov	r2, r3
 800cce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	4322      	orrs	r2, r4
 800ccea:	b292      	uxth	r2, r2
 800ccec:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	e031      	b.n	800cd56 <tcp_write+0x6b2>
          goto memerr;
 800ccf2:	bf00      	nop
 800ccf4:	e006      	b.n	800cd04 <tcp_write+0x660>
            goto memerr;
 800ccf6:	bf00      	nop
 800ccf8:	e004      	b.n	800cd04 <tcp_write+0x660>
        goto memerr;
 800ccfa:	bf00      	nop
 800ccfc:	e002      	b.n	800cd04 <tcp_write+0x660>
        goto memerr;
 800ccfe:	bf00      	nop
 800cd00:	e000      	b.n	800cd04 <tcp_write+0x660>
      goto memerr;
 800cd02:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	8b5b      	ldrh	r3, [r3, #26]
 800cd08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800cd12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <tcp_write+0x67a>
    pbuf_free(concat_p);
 800cd18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cd1a:	f7fa fd8b 	bl	8007834 <pbuf_free>
  }
  if (queue != NULL) {
 800cd1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d002      	beq.n	800cd2a <tcp_write+0x686>
    tcp_segs_free(queue);
 800cd24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cd26:	f7fc fb57 	bl	80093d8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00e      	beq.n	800cd52 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <tcp_write+0x6ae>
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d106      	bne.n	800cd52 <tcp_write+0x6ae>
 800cd44:	4b06      	ldr	r3, [pc, #24]	; (800cd60 <tcp_write+0x6bc>)
 800cd46:	f240 3227 	movw	r2, #807	; 0x327
 800cd4a:	4906      	ldr	r1, [pc, #24]	; (800cd64 <tcp_write+0x6c0>)
 800cd4c:	4806      	ldr	r0, [pc, #24]	; (800cd68 <tcp_write+0x6c4>)
 800cd4e:	f004 fbd9 	bl	8011504 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800cd52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	375c      	adds	r7, #92	; 0x5c
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd90      	pop	{r4, r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	080140d8 	.word	0x080140d8
 800cd64:	0801444c 	.word	0x0801444c
 800cd68:	0801412c 	.word	0x0801412c

0800cd6c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cd6c:	b590      	push	{r4, r7, lr}
 800cd6e:	b08b      	sub	sp, #44	; 0x2c
 800cd70:	af02      	add	r7, sp, #8
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	61fb      	str	r3, [r7, #28]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cd80:	2300      	movs	r3, #0
 800cd82:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d106      	bne.n	800cd98 <tcp_split_unsent_seg+0x2c>
 800cd8a:	4b95      	ldr	r3, [pc, #596]	; (800cfe0 <tcp_split_unsent_seg+0x274>)
 800cd8c:	f240 324b 	movw	r2, #843	; 0x34b
 800cd90:	4994      	ldr	r1, [pc, #592]	; (800cfe4 <tcp_split_unsent_seg+0x278>)
 800cd92:	4895      	ldr	r0, [pc, #596]	; (800cfe8 <tcp_split_unsent_seg+0x27c>)
 800cd94:	f004 fbb6 	bl	8011504 <iprintf>

  useg = pcb->unsent;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd9c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cda4:	f04f 33ff 	mov.w	r3, #4294967295
 800cda8:	e116      	b.n	800cfd8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800cdaa:	887b      	ldrh	r3, [r7, #2]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d109      	bne.n	800cdc4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cdb0:	4b8b      	ldr	r3, [pc, #556]	; (800cfe0 <tcp_split_unsent_seg+0x274>)
 800cdb2:	f240 3253 	movw	r2, #851	; 0x353
 800cdb6:	498d      	ldr	r1, [pc, #564]	; (800cfec <tcp_split_unsent_seg+0x280>)
 800cdb8:	488b      	ldr	r0, [pc, #556]	; (800cfe8 <tcp_split_unsent_seg+0x27c>)
 800cdba:	f004 fba3 	bl	8011504 <iprintf>
    return ERR_VAL;
 800cdbe:	f06f 0305 	mvn.w	r3, #5
 800cdc2:	e109      	b.n	800cfd8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	891b      	ldrh	r3, [r3, #8]
 800cdc8:	887a      	ldrh	r2, [r7, #2]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d301      	bcc.n	800cdd2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	e102      	b.n	800cfd8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdd6:	887a      	ldrh	r2, [r7, #2]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d906      	bls.n	800cdea <tcp_split_unsent_seg+0x7e>
 800cddc:	4b80      	ldr	r3, [pc, #512]	; (800cfe0 <tcp_split_unsent_seg+0x274>)
 800cdde:	f240 325b 	movw	r2, #859	; 0x35b
 800cde2:	4983      	ldr	r1, [pc, #524]	; (800cff0 <tcp_split_unsent_seg+0x284>)
 800cde4:	4880      	ldr	r0, [pc, #512]	; (800cfe8 <tcp_split_unsent_seg+0x27c>)
 800cde6:	f004 fb8d 	bl	8011504 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	891b      	ldrh	r3, [r3, #8]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d106      	bne.n	800ce00 <tcp_split_unsent_seg+0x94>
 800cdf2:	4b7b      	ldr	r3, [pc, #492]	; (800cfe0 <tcp_split_unsent_seg+0x274>)
 800cdf4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cdf8:	497e      	ldr	r1, [pc, #504]	; (800cff4 <tcp_split_unsent_seg+0x288>)
 800cdfa:	487b      	ldr	r0, [pc, #492]	; (800cfe8 <tcp_split_unsent_seg+0x27c>)
 800cdfc:	f004 fb82 	bl	8011504 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	7a9b      	ldrb	r3, [r3, #10]
 800ce04:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ce06:	7bfb      	ldrb	r3, [r7, #15]
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	f003 0304 	and.w	r3, r3, #4
 800ce10:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	891a      	ldrh	r2, [r3, #8]
 800ce16:	887b      	ldrh	r3, [r7, #2]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ce1c:	7bbb      	ldrb	r3, [r7, #14]
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	89bb      	ldrh	r3, [r7, #12]
 800ce22:	4413      	add	r3, r2
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	2036      	movs	r0, #54	; 0x36
 800ce2e:	f7fa fa1d 	bl	800726c <pbuf_alloc>
 800ce32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 80b7 	beq.w	800cfaa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	891a      	ldrh	r2, [r3, #8]
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	891b      	ldrh	r3, [r3, #8]
 800ce46:	1ad3      	subs	r3, r2, r3
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	887b      	ldrh	r3, [r7, #2]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	6858      	ldr	r0, [r3, #4]
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	7bbb      	ldrb	r3, [r7, #14]
 800ce5a:	18d1      	adds	r1, r2, r3
 800ce5c:	897b      	ldrh	r3, [r7, #10]
 800ce5e:	89ba      	ldrh	r2, [r7, #12]
 800ce60:	f7fa fee2 	bl	8007c28 <pbuf_copy_partial>
 800ce64:	4603      	mov	r3, r0
 800ce66:	461a      	mov	r2, r3
 800ce68:	89bb      	ldrh	r3, [r7, #12]
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	f040 809f 	bne.w	800cfae <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	899b      	ldrh	r3, [r3, #12]
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7f9 fa27 	bl	80062cc <lwip_htons>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce86:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ce88:	2300      	movs	r3, #0
 800ce8a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ce8c:	7efb      	ldrb	r3, [r7, #27]
 800ce8e:	f003 0308 	and.w	r3, r3, #8
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d007      	beq.n	800cea6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ce96:	7efb      	ldrb	r3, [r7, #27]
 800ce98:	f023 0308 	bic.w	r3, r3, #8
 800ce9c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ce9e:	7ebb      	ldrb	r3, [r7, #26]
 800cea0:	f043 0308 	orr.w	r3, r3, #8
 800cea4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cea6:	7efb      	ldrb	r3, [r7, #27]
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d007      	beq.n	800cec0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ceb0:	7efb      	ldrb	r3, [r7, #27]
 800ceb2:	f023 0301 	bic.w	r3, r3, #1
 800ceb6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ceb8:	7ebb      	ldrb	r3, [r7, #26]
 800ceba:	f043 0301 	orr.w	r3, r3, #1
 800cebe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7f9 fa15 	bl	80062f6 <lwip_htonl>
 800cecc:	4602      	mov	r2, r0
 800cece:	887b      	ldrh	r3, [r7, #2]
 800ced0:	18d1      	adds	r1, r2, r3
 800ced2:	7eba      	ldrb	r2, [r7, #26]
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	460b      	mov	r3, r1
 800ceda:	6939      	ldr	r1, [r7, #16]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff fa4f 	bl	800c380 <tcp_create_segment>
 800cee2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d063      	beq.n	800cfb2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7fa fd28 	bl	8007944 <pbuf_clen>
 800cef4:	4603      	mov	r3, r0
 800cef6:	461a      	mov	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cefe:	1a9b      	subs	r3, r3, r2
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	6858      	ldr	r0, [r3, #4]
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	891a      	ldrh	r2, [r3, #8]
 800cf12:	89bb      	ldrh	r3, [r7, #12]
 800cf14:	1ad3      	subs	r3, r2, r3
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f7fa fb05 	bl	8007528 <pbuf_realloc>
  useg->len -= remainder;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	891a      	ldrh	r2, [r3, #8]
 800cf22:	89bb      	ldrh	r3, [r7, #12]
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	b29a      	uxth	r2, r3
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	899b      	ldrh	r3, [r3, #12]
 800cf32:	b29c      	uxth	r4, r3
 800cf34:	7efb      	ldrb	r3, [r7, #27]
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7f9 f9c7 	bl	80062cc <lwip_htons>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	461a      	mov	r2, r3
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	4322      	orrs	r2, r4
 800cf48:	b292      	uxth	r2, r2
 800cf4a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fa fcf7 	bl	8007944 <pbuf_clen>
 800cf56:	4603      	mov	r3, r0
 800cf58:	461a      	mov	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf60:	4413      	add	r3, r2
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fa fce8 	bl	8007944 <pbuf_clen>
 800cf74:	4603      	mov	r3, r0
 800cf76:	461a      	mov	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf7e:	4413      	add	r3, r2
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	69fa      	ldr	r2, [r7, #28]
 800cf94:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d103      	bne.n	800cfa6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	e016      	b.n	800cfd8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800cfaa:	bf00      	nop
 800cfac:	e002      	b.n	800cfb4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cfae:	bf00      	nop
 800cfb0:	e000      	b.n	800cfb4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cfb2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d006      	beq.n	800cfc8 <tcp_split_unsent_seg+0x25c>
 800cfba:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <tcp_split_unsent_seg+0x274>)
 800cfbc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cfc0:	490d      	ldr	r1, [pc, #52]	; (800cff8 <tcp_split_unsent_seg+0x28c>)
 800cfc2:	4809      	ldr	r0, [pc, #36]	; (800cfe8 <tcp_split_unsent_seg+0x27c>)
 800cfc4:	f004 fa9e 	bl	8011504 <iprintf>
  if (p != NULL) {
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800cfce:	6938      	ldr	r0, [r7, #16]
 800cfd0:	f7fa fc30 	bl	8007834 <pbuf_free>
  }

  return ERR_MEM;
 800cfd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3724      	adds	r7, #36	; 0x24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd90      	pop	{r4, r7, pc}
 800cfe0:	080140d8 	.word	0x080140d8
 800cfe4:	0801446c 	.word	0x0801446c
 800cfe8:	0801412c 	.word	0x0801412c
 800cfec:	08014490 	.word	0x08014490
 800cff0:	080144b4 	.word	0x080144b4
 800cff4:	080144c4 	.word	0x080144c4
 800cff8:	080144d4 	.word	0x080144d4

0800cffc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cffc:	b590      	push	{r4, r7, lr}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <tcp_send_fin+0x1c>
 800d00a:	4b21      	ldr	r3, [pc, #132]	; (800d090 <tcp_send_fin+0x94>)
 800d00c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d010:	4920      	ldr	r1, [pc, #128]	; (800d094 <tcp_send_fin+0x98>)
 800d012:	4821      	ldr	r0, [pc, #132]	; (800d098 <tcp_send_fin+0x9c>)
 800d014:	f004 fa76 	bl	8011504 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d02e      	beq.n	800d07e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d024:	60fb      	str	r3, [r7, #12]
 800d026:	e002      	b.n	800d02e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1f8      	bne.n	800d028 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	899b      	ldrh	r3, [r3, #12]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	4618      	mov	r0, r3
 800d040:	f7f9 f944 	bl	80062cc <lwip_htons>
 800d044:	4603      	mov	r3, r0
 800d046:	b2db      	uxtb	r3, r3
 800d048:	f003 0307 	and.w	r3, r3, #7
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d116      	bne.n	800d07e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	899b      	ldrh	r3, [r3, #12]
 800d056:	b29c      	uxth	r4, r3
 800d058:	2001      	movs	r0, #1
 800d05a:	f7f9 f937 	bl	80062cc <lwip_htons>
 800d05e:	4603      	mov	r3, r0
 800d060:	461a      	mov	r2, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	4322      	orrs	r2, r4
 800d068:	b292      	uxth	r2, r2
 800d06a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	8b5b      	ldrh	r3, [r3, #26]
 800d070:	f043 0320 	orr.w	r3, r3, #32
 800d074:	b29a      	uxth	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	e004      	b.n	800d088 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d07e:	2101      	movs	r1, #1
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f80b 	bl	800d09c <tcp_enqueue_flags>
 800d086:	4603      	mov	r3, r0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd90      	pop	{r4, r7, pc}
 800d090:	080140d8 	.word	0x080140d8
 800d094:	080144e0 	.word	0x080144e0
 800d098:	0801412c 	.word	0x0801412c

0800d09c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b08a      	sub	sp, #40	; 0x28
 800d0a0:	af02      	add	r7, sp, #8
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	f003 0303 	and.w	r3, r3, #3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d106      	bne.n	800d0c8 <tcp_enqueue_flags+0x2c>
 800d0ba:	4b67      	ldr	r3, [pc, #412]	; (800d258 <tcp_enqueue_flags+0x1bc>)
 800d0bc:	f240 4211 	movw	r2, #1041	; 0x411
 800d0c0:	4966      	ldr	r1, [pc, #408]	; (800d25c <tcp_enqueue_flags+0x1c0>)
 800d0c2:	4867      	ldr	r0, [pc, #412]	; (800d260 <tcp_enqueue_flags+0x1c4>)
 800d0c4:	f004 fa1e 	bl	8011504 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d106      	bne.n	800d0dc <tcp_enqueue_flags+0x40>
 800d0ce:	4b62      	ldr	r3, [pc, #392]	; (800d258 <tcp_enqueue_flags+0x1bc>)
 800d0d0:	f240 4213 	movw	r2, #1043	; 0x413
 800d0d4:	4963      	ldr	r1, [pc, #396]	; (800d264 <tcp_enqueue_flags+0x1c8>)
 800d0d6:	4862      	ldr	r0, [pc, #392]	; (800d260 <tcp_enqueue_flags+0x1c4>)
 800d0d8:	f004 fa14 	bl	8011504 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d0dc:	78fb      	ldrb	r3, [r7, #3]
 800d0de:	f003 0302 	and.w	r3, r3, #2
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d0ea:	7ffb      	ldrb	r3, [r7, #31]
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	f003 0304 	and.w	r3, r3, #4
 800d0f4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d0f6:	7dfb      	ldrb	r3, [r7, #23]
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0fe:	4619      	mov	r1, r3
 800d100:	2036      	movs	r0, #54	; 0x36
 800d102:	f7fa f8b3 	bl	800726c <pbuf_alloc>
 800d106:	6138      	str	r0, [r7, #16]
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d109      	bne.n	800d122 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	8b5b      	ldrh	r3, [r3, #26]
 800d112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d116:	b29a      	uxth	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d11c:	f04f 33ff 	mov.w	r3, #4294967295
 800d120:	e095      	b.n	800d24e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	895a      	ldrh	r2, [r3, #10]
 800d126:	7dfb      	ldrb	r3, [r7, #23]
 800d128:	b29b      	uxth	r3, r3
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d206      	bcs.n	800d13c <tcp_enqueue_flags+0xa0>
 800d12e:	4b4a      	ldr	r3, [pc, #296]	; (800d258 <tcp_enqueue_flags+0x1bc>)
 800d130:	f240 4239 	movw	r2, #1081	; 0x439
 800d134:	494c      	ldr	r1, [pc, #304]	; (800d268 <tcp_enqueue_flags+0x1cc>)
 800d136:	484a      	ldr	r0, [pc, #296]	; (800d260 <tcp_enqueue_flags+0x1c4>)
 800d138:	f004 f9e4 	bl	8011504 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d140:	78fa      	ldrb	r2, [r7, #3]
 800d142:	7ffb      	ldrb	r3, [r7, #31]
 800d144:	9300      	str	r3, [sp, #0]
 800d146:	460b      	mov	r3, r1
 800d148:	6939      	ldr	r1, [r7, #16]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7ff f918 	bl	800c380 <tcp_create_segment>
 800d150:	60f8      	str	r0, [r7, #12]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d109      	bne.n	800d16c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	8b5b      	ldrh	r3, [r3, #26]
 800d15c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d160:	b29a      	uxth	r2, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d166:	f04f 33ff 	mov.w	r3, #4294967295
 800d16a:	e070      	b.n	800d24e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	f003 0303 	and.w	r3, r3, #3
 800d174:	2b00      	cmp	r3, #0
 800d176:	d006      	beq.n	800d186 <tcp_enqueue_flags+0xea>
 800d178:	4b37      	ldr	r3, [pc, #220]	; (800d258 <tcp_enqueue_flags+0x1bc>)
 800d17a:	f240 4242 	movw	r2, #1090	; 0x442
 800d17e:	493b      	ldr	r1, [pc, #236]	; (800d26c <tcp_enqueue_flags+0x1d0>)
 800d180:	4837      	ldr	r0, [pc, #220]	; (800d260 <tcp_enqueue_flags+0x1c4>)
 800d182:	f004 f9bf 	bl	8011504 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	891b      	ldrh	r3, [r3, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d006      	beq.n	800d19c <tcp_enqueue_flags+0x100>
 800d18e:	4b32      	ldr	r3, [pc, #200]	; (800d258 <tcp_enqueue_flags+0x1bc>)
 800d190:	f240 4243 	movw	r2, #1091	; 0x443
 800d194:	4936      	ldr	r1, [pc, #216]	; (800d270 <tcp_enqueue_flags+0x1d4>)
 800d196:	4832      	ldr	r0, [pc, #200]	; (800d260 <tcp_enqueue_flags+0x1c4>)
 800d198:	f004 f9b4 	bl	8011504 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d103      	bne.n	800d1ac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	68fa      	ldr	r2, [r7, #12]
 800d1a8:	66da      	str	r2, [r3, #108]	; 0x6c
 800d1aa:	e00d      	b.n	800d1c8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b0:	61bb      	str	r3, [r7, #24]
 800d1b2:	e002      	b.n	800d1ba <tcp_enqueue_flags+0x11e>
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	61bb      	str	r3, [r7, #24]
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1f8      	bne.n	800d1b4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d1d0:	78fb      	ldrb	r3, [r7, #3]
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d104      	bne.n	800d1e4 <tcp_enqueue_flags+0x148>
 800d1da:	78fb      	ldrb	r3, [r7, #3]
 800d1dc:	f003 0301 	and.w	r3, r3, #1
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d004      	beq.n	800d1ee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d1ee:	78fb      	ldrb	r3, [r7, #3]
 800d1f0:	f003 0301 	and.w	r3, r3, #1
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d006      	beq.n	800d206 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	8b5b      	ldrh	r3, [r3, #26]
 800d1fc:	f043 0320 	orr.w	r3, r3, #32
 800d200:	b29a      	uxth	r2, r3
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fa fb9a 	bl	8007944 <pbuf_clen>
 800d210:	4603      	mov	r3, r0
 800d212:	461a      	mov	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d21a:	4413      	add	r3, r2
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00e      	beq.n	800d24c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10a      	bne.n	800d24c <tcp_enqueue_flags+0x1b0>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d106      	bne.n	800d24c <tcp_enqueue_flags+0x1b0>
 800d23e:	4b06      	ldr	r3, [pc, #24]	; (800d258 <tcp_enqueue_flags+0x1bc>)
 800d240:	f240 4265 	movw	r2, #1125	; 0x465
 800d244:	490b      	ldr	r1, [pc, #44]	; (800d274 <tcp_enqueue_flags+0x1d8>)
 800d246:	4806      	ldr	r0, [pc, #24]	; (800d260 <tcp_enqueue_flags+0x1c4>)
 800d248:	f004 f95c 	bl	8011504 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3720      	adds	r7, #32
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	080140d8 	.word	0x080140d8
 800d25c:	080144fc 	.word	0x080144fc
 800d260:	0801412c 	.word	0x0801412c
 800d264:	08014554 	.word	0x08014554
 800d268:	08014574 	.word	0x08014574
 800d26c:	080145b0 	.word	0x080145b0
 800d270:	080145c8 	.word	0x080145c8
 800d274:	080145f4 	.word	0x080145f4

0800d278 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d278:	b5b0      	push	{r4, r5, r7, lr}
 800d27a:	b08a      	sub	sp, #40	; 0x28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d106      	bne.n	800d294 <tcp_output+0x1c>
 800d286:	4b9e      	ldr	r3, [pc, #632]	; (800d500 <tcp_output+0x288>)
 800d288:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d28c:	499d      	ldr	r1, [pc, #628]	; (800d504 <tcp_output+0x28c>)
 800d28e:	489e      	ldr	r0, [pc, #632]	; (800d508 <tcp_output+0x290>)
 800d290:	f004 f938 	bl	8011504 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	7d1b      	ldrb	r3, [r3, #20]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d106      	bne.n	800d2aa <tcp_output+0x32>
 800d29c:	4b98      	ldr	r3, [pc, #608]	; (800d500 <tcp_output+0x288>)
 800d29e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d2a2:	499a      	ldr	r1, [pc, #616]	; (800d50c <tcp_output+0x294>)
 800d2a4:	4898      	ldr	r0, [pc, #608]	; (800d508 <tcp_output+0x290>)
 800d2a6:	f004 f92d 	bl	8011504 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d2aa:	4b99      	ldr	r3, [pc, #612]	; (800d510 <tcp_output+0x298>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d101      	bne.n	800d2b8 <tcp_output+0x40>
    return ERR_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	e1ce      	b.n	800d656 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	bf28      	it	cs
 800d2c8:	4613      	movcs	r3, r2
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10b      	bne.n	800d2f2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	8b5b      	ldrh	r3, [r3, #26]
 800d2de:	f003 0302 	and.w	r3, r3, #2
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 81aa 	beq.w	800d63c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fdcb 	bl	800de84 <tcp_send_empty_ack>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	e1b1      	b.n	800d656 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d2f2:	6879      	ldr	r1, [r7, #4]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	3304      	adds	r3, #4
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7ff f824 	bl	800c348 <tcp_route>
 800d300:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <tcp_output+0x96>
    return ERR_RTE;
 800d308:	f06f 0303 	mvn.w	r3, #3
 800d30c:	e1a3      	b.n	800d656 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d003      	beq.n	800d31c <tcp_output+0xa4>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d111      	bne.n	800d340 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d002      	beq.n	800d328 <tcp_output+0xb0>
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	3304      	adds	r3, #4
 800d326:	e000      	b.n	800d32a <tcp_output+0xb2>
 800d328:	2300      	movs	r3, #0
 800d32a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d102      	bne.n	800d338 <tcp_output+0xc0>
      return ERR_RTE;
 800d332:	f06f 0303 	mvn.w	r3, #3
 800d336:	e18e      	b.n	800d656 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	4618      	mov	r0, r3
 800d348:	f7f8 ffd5 	bl	80062f6 <lwip_htonl>
 800d34c:	4602      	mov	r2, r0
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d356:	8912      	ldrh	r2, [r2, #8]
 800d358:	4413      	add	r3, r2
 800d35a:	69ba      	ldr	r2, [r7, #24]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d227      	bcs.n	800d3b0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d366:	461a      	mov	r2, r3
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d114      	bne.n	800d398 <tcp_output+0x120>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d372:	2b00      	cmp	r3, #0
 800d374:	d110      	bne.n	800d398 <tcp_output+0x120>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10b      	bne.n	800d398 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	8b5b      	ldrh	r3, [r3, #26]
 800d39c:	f003 0302 	and.w	r3, r3, #2
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 814d 	beq.w	800d640 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fd6c 	bl	800de84 <tcp_send_empty_ack>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	e152      	b.n	800d656 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3bc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d3be:	6a3b      	ldr	r3, [r7, #32]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f000 811c 	beq.w	800d5fe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d3c6:	e002      	b.n	800d3ce <tcp_output+0x156>
 800d3c8:	6a3b      	ldr	r3, [r7, #32]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	623b      	str	r3, [r7, #32]
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d1f8      	bne.n	800d3c8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d3d6:	e112      	b.n	800d5fe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	899b      	ldrh	r3, [r3, #12]
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7f8 ff73 	bl	80062cc <lwip_htons>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	f003 0304 	and.w	r3, r3, #4
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d006      	beq.n	800d400 <tcp_output+0x188>
 800d3f2:	4b43      	ldr	r3, [pc, #268]	; (800d500 <tcp_output+0x288>)
 800d3f4:	f240 5236 	movw	r2, #1334	; 0x536
 800d3f8:	4946      	ldr	r1, [pc, #280]	; (800d514 <tcp_output+0x29c>)
 800d3fa:	4843      	ldr	r0, [pc, #268]	; (800d508 <tcp_output+0x290>)
 800d3fc:	f004 f882 	bl	8011504 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01f      	beq.n	800d448 <tcp_output+0x1d0>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	8b5b      	ldrh	r3, [r3, #26]
 800d40c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d410:	2b00      	cmp	r3, #0
 800d412:	d119      	bne.n	800d448 <tcp_output+0x1d0>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00b      	beq.n	800d434 <tcp_output+0x1bc>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d110      	bne.n	800d448 <tcp_output+0x1d0>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d42a:	891a      	ldrh	r2, [r3, #8]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d430:	429a      	cmp	r2, r3
 800d432:	d209      	bcs.n	800d448 <tcp_output+0x1d0>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d004      	beq.n	800d448 <tcp_output+0x1d0>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d444:	2b08      	cmp	r3, #8
 800d446:	d901      	bls.n	800d44c <tcp_output+0x1d4>
 800d448:	2301      	movs	r3, #1
 800d44a:	e000      	b.n	800d44e <tcp_output+0x1d6>
 800d44c:	2300      	movs	r3, #0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d106      	bne.n	800d460 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	8b5b      	ldrh	r3, [r3, #26]
 800d456:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f000 80e4 	beq.w	800d628 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	7d1b      	ldrb	r3, [r3, #20]
 800d464:	2b02      	cmp	r3, #2
 800d466:	d00d      	beq.n	800d484 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	899b      	ldrh	r3, [r3, #12]
 800d46e:	b29c      	uxth	r4, r3
 800d470:	2010      	movs	r0, #16
 800d472:	f7f8 ff2b 	bl	80062cc <lwip_htons>
 800d476:	4603      	mov	r3, r0
 800d478:	461a      	mov	r2, r3
 800d47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	4322      	orrs	r2, r4
 800d480:	b292      	uxth	r2, r2
 800d482:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d484:	697a      	ldr	r2, [r7, #20]
 800d486:	6879      	ldr	r1, [r7, #4]
 800d488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d48a:	f000 f909 	bl	800d6a0 <tcp_output_segment>
 800d48e:	4603      	mov	r3, r0
 800d490:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d009      	beq.n	800d4ae <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	8b5b      	ldrh	r3, [r3, #26]
 800d49e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	835a      	strh	r2, [r3, #26]
      return err;
 800d4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ac:	e0d3      	b.n	800d656 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7d1b      	ldrb	r3, [r3, #20]
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d006      	beq.n	800d4cc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	8b5b      	ldrh	r3, [r3, #26]
 800d4c2:	f023 0303 	bic.w	r3, r3, #3
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7f8 ff0f 	bl	80062f6 <lwip_htonl>
 800d4d8:	4604      	mov	r4, r0
 800d4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4dc:	891b      	ldrh	r3, [r3, #8]
 800d4de:	461d      	mov	r5, r3
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	899b      	ldrh	r3, [r3, #12]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f8 feef 	bl	80062cc <lwip_htons>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	f003 0303 	and.w	r3, r3, #3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00e      	beq.n	800d518 <tcp_output+0x2a0>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e00d      	b.n	800d51a <tcp_output+0x2a2>
 800d4fe:	bf00      	nop
 800d500:	080140d8 	.word	0x080140d8
 800d504:	0801461c 	.word	0x0801461c
 800d508:	0801412c 	.word	0x0801412c
 800d50c:	08014634 	.word	0x08014634
 800d510:	20008b4c 	.word	0x20008b4c
 800d514:	0801465c 	.word	0x0801465c
 800d518:	2300      	movs	r3, #0
 800d51a:	442b      	add	r3, r5
 800d51c:	4423      	add	r3, r4
 800d51e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	2b00      	cmp	r3, #0
 800d52a:	da02      	bge.n	800d532 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d534:	891b      	ldrh	r3, [r3, #8]
 800d536:	461c      	mov	r4, r3
 800d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	899b      	ldrh	r3, [r3, #12]
 800d53e:	b29b      	uxth	r3, r3
 800d540:	4618      	mov	r0, r3
 800d542:	f7f8 fec3 	bl	80062cc <lwip_htons>
 800d546:	4603      	mov	r3, r0
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	f003 0303 	and.w	r3, r3, #3
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d001      	beq.n	800d556 <tcp_output+0x2de>
 800d552:	2301      	movs	r3, #1
 800d554:	e000      	b.n	800d558 <tcp_output+0x2e0>
 800d556:	2300      	movs	r3, #0
 800d558:	4423      	add	r3, r4
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d049      	beq.n	800d5f2 <tcp_output+0x37a>
      seg->next = NULL;
 800d55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d560:	2200      	movs	r2, #0
 800d562:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d105      	bne.n	800d578 <tcp_output+0x300>
        pcb->unacked = seg;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d570:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d574:	623b      	str	r3, [r7, #32]
 800d576:	e03f      	b.n	800d5f8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	4618      	mov	r0, r3
 800d580:	f7f8 feb9 	bl	80062f6 <lwip_htonl>
 800d584:	4604      	mov	r4, r0
 800d586:	6a3b      	ldr	r3, [r7, #32]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7f8 feb2 	bl	80062f6 <lwip_htonl>
 800d592:	4603      	mov	r3, r0
 800d594:	1ae3      	subs	r3, r4, r3
 800d596:	2b00      	cmp	r3, #0
 800d598:	da24      	bge.n	800d5e4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	3370      	adds	r3, #112	; 0x70
 800d59e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d5a0:	e002      	b.n	800d5a8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d011      	beq.n	800d5d4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7f8 fe9c 	bl	80062f6 <lwip_htonl>
 800d5be:	4604      	mov	r4, r0
 800d5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f8 fe95 	bl	80062f6 <lwip_htonl>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	dbe6      	blt.n	800d5a2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	e009      	b.n	800d5f8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5e8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d5ea:	6a3b      	ldr	r3, [r7, #32]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	623b      	str	r3, [r7, #32]
 800d5f0:	e002      	b.n	800d5f8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d5f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5f4:	f7fb ff05 	bl	8009402 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	2b00      	cmp	r3, #0
 800d602:	d012      	beq.n	800d62a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7f8 fe73 	bl	80062f6 <lwip_htonl>
 800d610:	4602      	mov	r2, r0
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d61a:	8912      	ldrh	r2, [r2, #8]
 800d61c:	4413      	add	r3, r2
  while (seg != NULL &&
 800d61e:	69ba      	ldr	r2, [r7, #24]
 800d620:	429a      	cmp	r2, r3
 800d622:	f4bf aed9 	bcs.w	800d3d8 <tcp_output+0x160>
 800d626:	e000      	b.n	800d62a <tcp_output+0x3b2>
      break;
 800d628:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d108      	bne.n	800d644 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d63a:	e004      	b.n	800d646 <tcp_output+0x3ce>
    goto output_done;
 800d63c:	bf00      	nop
 800d63e:	e002      	b.n	800d646 <tcp_output+0x3ce>
    goto output_done;
 800d640:	bf00      	nop
 800d642:	e000      	b.n	800d646 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d644:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	8b5b      	ldrh	r3, [r3, #26]
 800d64a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d64e:	b29a      	uxth	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3728      	adds	r7, #40	; 0x28
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bdb0      	pop	{r4, r5, r7, pc}
 800d65e:	bf00      	nop

0800d660 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d106      	bne.n	800d67c <tcp_output_segment_busy+0x1c>
 800d66e:	4b09      	ldr	r3, [pc, #36]	; (800d694 <tcp_output_segment_busy+0x34>)
 800d670:	f240 529a 	movw	r2, #1434	; 0x59a
 800d674:	4908      	ldr	r1, [pc, #32]	; (800d698 <tcp_output_segment_busy+0x38>)
 800d676:	4809      	ldr	r0, [pc, #36]	; (800d69c <tcp_output_segment_busy+0x3c>)
 800d678:	f003 ff44 	bl	8011504 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	7b9b      	ldrb	r3, [r3, #14]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d001      	beq.n	800d68a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d686:	2301      	movs	r3, #1
 800d688:	e000      	b.n	800d68c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d68a:	2300      	movs	r3, #0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	080140d8 	.word	0x080140d8
 800d698:	08014674 	.word	0x08014674
 800d69c:	0801412c 	.word	0x0801412c

0800d6a0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d6a0:	b5b0      	push	{r4, r5, r7, lr}
 800d6a2:	b08c      	sub	sp, #48	; 0x30
 800d6a4:	af04      	add	r7, sp, #16
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d106      	bne.n	800d6c0 <tcp_output_segment+0x20>
 800d6b2:	4b63      	ldr	r3, [pc, #396]	; (800d840 <tcp_output_segment+0x1a0>)
 800d6b4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d6b8:	4962      	ldr	r1, [pc, #392]	; (800d844 <tcp_output_segment+0x1a4>)
 800d6ba:	4863      	ldr	r0, [pc, #396]	; (800d848 <tcp_output_segment+0x1a8>)
 800d6bc:	f003 ff22 	bl	8011504 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d106      	bne.n	800d6d4 <tcp_output_segment+0x34>
 800d6c6:	4b5e      	ldr	r3, [pc, #376]	; (800d840 <tcp_output_segment+0x1a0>)
 800d6c8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d6cc:	495f      	ldr	r1, [pc, #380]	; (800d84c <tcp_output_segment+0x1ac>)
 800d6ce:	485e      	ldr	r0, [pc, #376]	; (800d848 <tcp_output_segment+0x1a8>)
 800d6d0:	f003 ff18 	bl	8011504 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <tcp_output_segment+0x48>
 800d6da:	4b59      	ldr	r3, [pc, #356]	; (800d840 <tcp_output_segment+0x1a0>)
 800d6dc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d6e0:	495b      	ldr	r1, [pc, #364]	; (800d850 <tcp_output_segment+0x1b0>)
 800d6e2:	4859      	ldr	r0, [pc, #356]	; (800d848 <tcp_output_segment+0x1a8>)
 800d6e4:	f003 ff0e 	bl	8011504 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f7ff ffb9 	bl	800d660 <tcp_output_segment_busy>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	e09f      	b.n	800d838 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	68dc      	ldr	r4, [r3, #12]
 800d700:	4610      	mov	r0, r2
 800d702:	f7f8 fdf8 	bl	80062f6 <lwip_htonl>
 800d706:	4603      	mov	r3, r0
 800d708:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	68dc      	ldr	r4, [r3, #12]
 800d712:	4610      	mov	r0, r2
 800d714:	f7f8 fdda 	bl	80062cc <lwip_htons>
 800d718:	4603      	mov	r3, r0
 800d71a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d720:	68ba      	ldr	r2, [r7, #8]
 800d722:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d724:	441a      	add	r2, r3
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	3314      	adds	r3, #20
 800d730:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	7a9b      	ldrb	r3, [r3, #10]
 800d736:	f003 0301 	and.w	r3, r3, #1
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d015      	beq.n	800d76a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	3304      	adds	r3, #4
 800d742:	461a      	mov	r2, r3
 800d744:	6879      	ldr	r1, [r7, #4]
 800d746:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d74a:	f7fc fa37 	bl	8009bbc <tcp_eff_send_mss_netif>
 800d74e:	4603      	mov	r3, r0
 800d750:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d752:	8b7b      	ldrh	r3, [r7, #26]
 800d754:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d758:	4618      	mov	r0, r3
 800d75a:	f7f8 fdcc 	bl	80062f6 <lwip_htonl>
 800d75e:	4602      	mov	r2, r0
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	3304      	adds	r3, #4
 800d768:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d770:	2b00      	cmp	r3, #0
 800d772:	da02      	bge.n	800d77a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2200      	movs	r2, #0
 800d778:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10c      	bne.n	800d79c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d782:	4b34      	ldr	r3, [pc, #208]	; (800d854 <tcp_output_segment+0x1b4>)
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	4618      	mov	r0, r3
 800d792:	f7f8 fdb0 	bl	80062f6 <lwip_htonl>
 800d796:	4602      	mov	r2, r0
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	68da      	ldr	r2, [r3, #12]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	8959      	ldrh	r1, [r3, #10]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	8b3a      	ldrh	r2, [r7, #24]
 800d7b6:	1a8a      	subs	r2, r1, r2
 800d7b8:	b292      	uxth	r2, r2
 800d7ba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	685b      	ldr	r3, [r3, #4]
 800d7c0:	8919      	ldrh	r1, [r3, #8]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	8b3a      	ldrh	r2, [r7, #24]
 800d7c8:	1a8a      	subs	r2, r1, r2
 800d7ca:	b292      	uxth	r2, r2
 800d7cc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	68fa      	ldr	r2, [r7, #12]
 800d7d4:	68d2      	ldr	r2, [r2, #12]
 800d7d6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	741a      	strb	r2, [r3, #16]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	f103 0214 	add.w	r2, r3, #20
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	7a9b      	ldrb	r3, [r3, #10]
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	f003 0304 	and.w	r3, r3, #4
 800d7f6:	4413      	add	r3, r2
 800d7f8:	69fa      	ldr	r2, [r7, #28]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d006      	beq.n	800d80c <tcp_output_segment+0x16c>
 800d7fe:	4b10      	ldr	r3, [pc, #64]	; (800d840 <tcp_output_segment+0x1a0>)
 800d800:	f240 621c 	movw	r2, #1564	; 0x61c
 800d804:	4914      	ldr	r1, [pc, #80]	; (800d858 <tcp_output_segment+0x1b8>)
 800d806:	4810      	ldr	r0, [pc, #64]	; (800d848 <tcp_output_segment+0x1a8>)
 800d808:	f003 fe7c 	bl	8011504 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6858      	ldr	r0, [r3, #4]
 800d810:	68b9      	ldr	r1, [r7, #8]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	1d1c      	adds	r4, r3, #4
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	7add      	ldrb	r5, [r3, #11]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	7a9b      	ldrb	r3, [r3, #10]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	9202      	str	r2, [sp, #8]
 800d822:	2206      	movs	r2, #6
 800d824:	9201      	str	r2, [sp, #4]
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	462b      	mov	r3, r5
 800d82a:	4622      	mov	r2, r4
 800d82c:	f002 fd4e 	bl	80102cc <ip4_output_if>
 800d830:	4603      	mov	r3, r0
 800d832:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d834:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3720      	adds	r7, #32
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bdb0      	pop	{r4, r5, r7, pc}
 800d840:	080140d8 	.word	0x080140d8
 800d844:	0801469c 	.word	0x0801469c
 800d848:	0801412c 	.word	0x0801412c
 800d84c:	080146bc 	.word	0x080146bc
 800d850:	080146dc 	.word	0x080146dc
 800d854:	20008b3c 	.word	0x20008b3c
 800d858:	08014700 	.word	0x08014700

0800d85c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d85c:	b5b0      	push	{r4, r5, r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d106      	bne.n	800d878 <tcp_rexmit_rto_prepare+0x1c>
 800d86a:	4b31      	ldr	r3, [pc, #196]	; (800d930 <tcp_rexmit_rto_prepare+0xd4>)
 800d86c:	f240 6263 	movw	r2, #1635	; 0x663
 800d870:	4930      	ldr	r1, [pc, #192]	; (800d934 <tcp_rexmit_rto_prepare+0xd8>)
 800d872:	4831      	ldr	r0, [pc, #196]	; (800d938 <tcp_rexmit_rto_prepare+0xdc>)
 800d874:	f003 fe46 	bl	8011504 <iprintf>

  if (pcb->unacked == NULL) {
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d102      	bne.n	800d886 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d880:	f06f 0305 	mvn.w	r3, #5
 800d884:	e050      	b.n	800d928 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	e00b      	b.n	800d8a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f7ff fee6 	bl	800d660 <tcp_output_segment_busy>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d002      	beq.n	800d8a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d89a:	f06f 0305 	mvn.w	r3, #5
 800d89e:	e043      	b.n	800d928 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	60fb      	str	r3, [r7, #12]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1ef      	bne.n	800d88e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f7ff fed6 	bl	800d660 <tcp_output_segment_busy>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d002      	beq.n	800d8c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d8ba:	f06f 0305 	mvn.w	r3, #5
 800d8be:	e033      	b.n	800d928 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	8b5b      	ldrh	r3, [r3, #26]
 800d8da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7f8 fd03 	bl	80062f6 <lwip_htonl>
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	891b      	ldrh	r3, [r3, #8]
 800d8f6:	461d      	mov	r5, r3
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	899b      	ldrh	r3, [r3, #12]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	4618      	mov	r0, r3
 800d902:	f7f8 fce3 	bl	80062cc <lwip_htons>
 800d906:	4603      	mov	r3, r0
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	f003 0303 	and.w	r3, r3, #3
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d001      	beq.n	800d916 <tcp_rexmit_rto_prepare+0xba>
 800d912:	2301      	movs	r3, #1
 800d914:	e000      	b.n	800d918 <tcp_rexmit_rto_prepare+0xbc>
 800d916:	2300      	movs	r3, #0
 800d918:	442b      	add	r3, r5
 800d91a:	18e2      	adds	r2, r4, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2200      	movs	r2, #0
 800d924:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d926:	2300      	movs	r3, #0
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bdb0      	pop	{r4, r5, r7, pc}
 800d930:	080140d8 	.word	0x080140d8
 800d934:	08014714 	.word	0x08014714
 800d938:	0801412c 	.word	0x0801412c

0800d93c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <tcp_rexmit_rto_commit+0x1c>
 800d94a:	4b0d      	ldr	r3, [pc, #52]	; (800d980 <tcp_rexmit_rto_commit+0x44>)
 800d94c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d950:	490c      	ldr	r1, [pc, #48]	; (800d984 <tcp_rexmit_rto_commit+0x48>)
 800d952:	480d      	ldr	r0, [pc, #52]	; (800d988 <tcp_rexmit_rto_commit+0x4c>)
 800d954:	f003 fdd6 	bl	8011504 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d95e:	2bff      	cmp	r3, #255	; 0xff
 800d960:	d007      	beq.n	800d972 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d968:	3301      	adds	r3, #1
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7ff fc80 	bl	800d278 <tcp_output>
}
 800d978:	bf00      	nop
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	080140d8 	.word	0x080140d8
 800d984:	08014738 	.word	0x08014738
 800d988:	0801412c 	.word	0x0801412c

0800d98c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d106      	bne.n	800d9a8 <tcp_rexmit_rto+0x1c>
 800d99a:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <tcp_rexmit_rto+0x38>)
 800d99c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d9a0:	4909      	ldr	r1, [pc, #36]	; (800d9c8 <tcp_rexmit_rto+0x3c>)
 800d9a2:	480a      	ldr	r0, [pc, #40]	; (800d9cc <tcp_rexmit_rto+0x40>)
 800d9a4:	f003 fdae 	bl	8011504 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f7ff ff57 	bl	800d85c <tcp_rexmit_rto_prepare>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d102      	bne.n	800d9ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff ffc1 	bl	800d93c <tcp_rexmit_rto_commit>
  }
}
 800d9ba:	bf00      	nop
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	080140d8 	.word	0x080140d8
 800d9c8:	0801475c 	.word	0x0801475c
 800d9cc:	0801412c 	.word	0x0801412c

0800d9d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d9d0:	b590      	push	{r4, r7, lr}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <tcp_rexmit+0x1c>
 800d9de:	4b2f      	ldr	r3, [pc, #188]	; (800da9c <tcp_rexmit+0xcc>)
 800d9e0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d9e4:	492e      	ldr	r1, [pc, #184]	; (800daa0 <tcp_rexmit+0xd0>)
 800d9e6:	482f      	ldr	r0, [pc, #188]	; (800daa4 <tcp_rexmit+0xd4>)
 800d9e8:	f003 fd8c 	bl	8011504 <iprintf>

  if (pcb->unacked == NULL) {
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d102      	bne.n	800d9fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d9f4:	f06f 0305 	mvn.w	r3, #5
 800d9f8:	e04c      	b.n	800da94 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800da00:	68b8      	ldr	r0, [r7, #8]
 800da02:	f7ff fe2d 	bl	800d660 <tcp_output_segment_busy>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800da0c:	f06f 0305 	mvn.w	r3, #5
 800da10:	e040      	b.n	800da94 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	336c      	adds	r3, #108	; 0x6c
 800da1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800da20:	e002      	b.n	800da28 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d011      	beq.n	800da54 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	4618      	mov	r0, r3
 800da3a:	f7f8 fc5c 	bl	80062f6 <lwip_htonl>
 800da3e:	4604      	mov	r4, r0
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	4618      	mov	r0, r3
 800da48:	f7f8 fc55 	bl	80062f6 <lwip_htonl>
 800da4c:	4603      	mov	r3, r0
 800da4e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800da50:	2b00      	cmp	r3, #0
 800da52:	dbe6      	blt.n	800da22 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d103      	bne.n	800da72 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2200      	movs	r2, #0
 800da6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da78:	2bff      	cmp	r3, #255	; 0xff
 800da7a:	d007      	beq.n	800da8c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da82:	3301      	adds	r3, #1
 800da84:	b2da      	uxtb	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3714      	adds	r7, #20
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd90      	pop	{r4, r7, pc}
 800da9c:	080140d8 	.word	0x080140d8
 800daa0:	08014778 	.word	0x08014778
 800daa4:	0801412c 	.word	0x0801412c

0800daa8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d106      	bne.n	800dac4 <tcp_rexmit_fast+0x1c>
 800dab6:	4b2a      	ldr	r3, [pc, #168]	; (800db60 <tcp_rexmit_fast+0xb8>)
 800dab8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800dabc:	4929      	ldr	r1, [pc, #164]	; (800db64 <tcp_rexmit_fast+0xbc>)
 800dabe:	482a      	ldr	r0, [pc, #168]	; (800db68 <tcp_rexmit_fast+0xc0>)
 800dac0:	f003 fd20 	bl	8011504 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d045      	beq.n	800db58 <tcp_rexmit_fast+0xb0>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	8b5b      	ldrh	r3, [r3, #26]
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d13f      	bne.n	800db58 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7ff ff79 	bl	800d9d0 <tcp_rexmit>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d139      	bne.n	800db58 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800daf0:	4293      	cmp	r3, r2
 800daf2:	bf28      	it	cs
 800daf4:	4613      	movcs	r3, r2
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	da00      	bge.n	800dafe <tcp_rexmit_fast+0x56>
 800dafc:	3301      	adds	r3, #1
 800dafe:	105b      	asrs	r3, r3, #1
 800db00:	b29a      	uxth	r2, r3
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800db0e:	461a      	mov	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db14:	005b      	lsls	r3, r3, #1
 800db16:	429a      	cmp	r2, r3
 800db18:	d206      	bcs.n	800db28 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db1e:	005b      	lsls	r3, r3, #1
 800db20:	b29a      	uxth	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800db32:	4619      	mov	r1, r3
 800db34:	0049      	lsls	r1, r1, #1
 800db36:	440b      	add	r3, r1
 800db38:	b29b      	uxth	r3, r3
 800db3a:	4413      	add	r3, r2
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	8b5b      	ldrh	r3, [r3, #26]
 800db48:	f043 0304 	orr.w	r3, r3, #4
 800db4c:	b29a      	uxth	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	080140d8 	.word	0x080140d8
 800db64:	08014790 	.word	0x08014790
 800db68:	0801412c 	.word	0x0801412c

0800db6c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b086      	sub	sp, #24
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	607b      	str	r3, [r7, #4]
 800db76:	460b      	mov	r3, r1
 800db78:	817b      	strh	r3, [r7, #10]
 800db7a:	4613      	mov	r3, r2
 800db7c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800db7e:	897a      	ldrh	r2, [r7, #10]
 800db80:	893b      	ldrh	r3, [r7, #8]
 800db82:	4413      	add	r3, r2
 800db84:	b29b      	uxth	r3, r3
 800db86:	3314      	adds	r3, #20
 800db88:	b29b      	uxth	r3, r3
 800db8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db8e:	4619      	mov	r1, r3
 800db90:	2022      	movs	r0, #34	; 0x22
 800db92:	f7f9 fb6b 	bl	800726c <pbuf_alloc>
 800db96:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d04d      	beq.n	800dc3a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800db9e:	897b      	ldrh	r3, [r7, #10]
 800dba0:	3313      	adds	r3, #19
 800dba2:	697a      	ldr	r2, [r7, #20]
 800dba4:	8952      	ldrh	r2, [r2, #10]
 800dba6:	4293      	cmp	r3, r2
 800dba8:	db06      	blt.n	800dbb8 <tcp_output_alloc_header_common+0x4c>
 800dbaa:	4b26      	ldr	r3, [pc, #152]	; (800dc44 <tcp_output_alloc_header_common+0xd8>)
 800dbac:	f240 7223 	movw	r2, #1827	; 0x723
 800dbb0:	4925      	ldr	r1, [pc, #148]	; (800dc48 <tcp_output_alloc_header_common+0xdc>)
 800dbb2:	4826      	ldr	r0, [pc, #152]	; (800dc4c <tcp_output_alloc_header_common+0xe0>)
 800dbb4:	f003 fca6 	bl	8011504 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dbbe:	8c3b      	ldrh	r3, [r7, #32]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7f8 fb83 	bl	80062cc <lwip_htons>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	461a      	mov	r2, r3
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dbce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7f8 fb7b 	bl	80062cc <lwip_htons>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461a      	mov	r2, r3
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dbe4:	68f8      	ldr	r0, [r7, #12]
 800dbe6:	f7f8 fb86 	bl	80062f6 <lwip_htonl>
 800dbea:	4602      	mov	r2, r0
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dbf0:	897b      	ldrh	r3, [r7, #10]
 800dbf2:	089b      	lsrs	r3, r3, #2
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	3305      	adds	r3, #5
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	031b      	lsls	r3, r3, #12
 800dbfc:	b29a      	uxth	r2, r3
 800dbfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	4313      	orrs	r3, r2
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7f8 fb5f 	bl	80062cc <lwip_htons>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	461a      	mov	r2, r3
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800dc16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7f8 fb57 	bl	80062cc <lwip_htons>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	461a      	mov	r2, r3
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	741a      	strb	r2, [r3, #16]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	2200      	movs	r2, #0
 800dc34:	749a      	strb	r2, [r3, #18]
 800dc36:	2200      	movs	r2, #0
 800dc38:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800dc3a:	697b      	ldr	r3, [r7, #20]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3718      	adds	r7, #24
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	080140d8 	.word	0x080140d8
 800dc48:	080147b0 	.word	0x080147b0
 800dc4c:	0801412c 	.word	0x0801412c

0800dc50 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800dc50:	b5b0      	push	{r4, r5, r7, lr}
 800dc52:	b08a      	sub	sp, #40	; 0x28
 800dc54:	af04      	add	r7, sp, #16
 800dc56:	60f8      	str	r0, [r7, #12]
 800dc58:	607b      	str	r3, [r7, #4]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	817b      	strh	r3, [r7, #10]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d106      	bne.n	800dc76 <tcp_output_alloc_header+0x26>
 800dc68:	4b15      	ldr	r3, [pc, #84]	; (800dcc0 <tcp_output_alloc_header+0x70>)
 800dc6a:	f240 7242 	movw	r2, #1858	; 0x742
 800dc6e:	4915      	ldr	r1, [pc, #84]	; (800dcc4 <tcp_output_alloc_header+0x74>)
 800dc70:	4815      	ldr	r0, [pc, #84]	; (800dcc8 <tcp_output_alloc_header+0x78>)
 800dc72:	f003 fc47 	bl	8011504 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	8adb      	ldrh	r3, [r3, #22]
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	8b12      	ldrh	r2, [r2, #24]
 800dc82:	68f9      	ldr	r1, [r7, #12]
 800dc84:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800dc86:	893d      	ldrh	r5, [r7, #8]
 800dc88:	897c      	ldrh	r4, [r7, #10]
 800dc8a:	9103      	str	r1, [sp, #12]
 800dc8c:	2110      	movs	r1, #16
 800dc8e:	9102      	str	r1, [sp, #8]
 800dc90:	9201      	str	r2, [sp, #4]
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	462a      	mov	r2, r5
 800dc98:	4621      	mov	r1, r4
 800dc9a:	f7ff ff67 	bl	800db6c <tcp_output_alloc_header_common>
 800dc9e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d006      	beq.n	800dcb4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dcae:	441a      	add	r2, r3
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dcb4:	697b      	ldr	r3, [r7, #20]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3718      	adds	r7, #24
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bdb0      	pop	{r4, r5, r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	080140d8 	.word	0x080140d8
 800dcc4:	080147e0 	.word	0x080147e0
 800dcc8:	0801412c 	.word	0x0801412c

0800dccc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	461a      	mov	r2, r3
 800dcda:	460b      	mov	r3, r1
 800dcdc:	71fb      	strb	r3, [r7, #7]
 800dcde:	4613      	mov	r3, r2
 800dce0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d106      	bne.n	800dcfa <tcp_output_fill_options+0x2e>
 800dcec:	4b13      	ldr	r3, [pc, #76]	; (800dd3c <tcp_output_fill_options+0x70>)
 800dcee:	f240 7256 	movw	r2, #1878	; 0x756
 800dcf2:	4913      	ldr	r1, [pc, #76]	; (800dd40 <tcp_output_fill_options+0x74>)
 800dcf4:	4813      	ldr	r0, [pc, #76]	; (800dd44 <tcp_output_fill_options+0x78>)
 800dcf6:	f003 fc05 	bl	8011504 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	3314      	adds	r3, #20
 800dd04:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	f103 0214 	add.w	r2, r3, #20
 800dd0c:	8bfb      	ldrh	r3, [r7, #30]
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4619      	mov	r1, r3
 800dd12:	79fb      	ldrb	r3, [r7, #7]
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	f003 0304 	and.w	r3, r3, #4
 800dd1a:	440b      	add	r3, r1
 800dd1c:	4413      	add	r3, r2
 800dd1e:	697a      	ldr	r2, [r7, #20]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d006      	beq.n	800dd32 <tcp_output_fill_options+0x66>
 800dd24:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <tcp_output_fill_options+0x70>)
 800dd26:	f240 7275 	movw	r2, #1909	; 0x775
 800dd2a:	4907      	ldr	r1, [pc, #28]	; (800dd48 <tcp_output_fill_options+0x7c>)
 800dd2c:	4805      	ldr	r0, [pc, #20]	; (800dd44 <tcp_output_fill_options+0x78>)
 800dd2e:	f003 fbe9 	bl	8011504 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dd32:	bf00      	nop
 800dd34:	3720      	adds	r7, #32
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	080140d8 	.word	0x080140d8
 800dd40:	08014808 	.word	0x08014808
 800dd44:	0801412c 	.word	0x0801412c
 800dd48:	08014700 	.word	0x08014700

0800dd4c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08a      	sub	sp, #40	; 0x28
 800dd50:	af04      	add	r7, sp, #16
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <tcp_output_control_segment+0x22>
 800dd60:	4b1c      	ldr	r3, [pc, #112]	; (800ddd4 <tcp_output_control_segment+0x88>)
 800dd62:	f240 7287 	movw	r2, #1927	; 0x787
 800dd66:	491c      	ldr	r1, [pc, #112]	; (800ddd8 <tcp_output_control_segment+0x8c>)
 800dd68:	481c      	ldr	r0, [pc, #112]	; (800dddc <tcp_output_control_segment+0x90>)
 800dd6a:	f003 fbcb 	bl	8011504 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	6879      	ldr	r1, [r7, #4]
 800dd72:	68f8      	ldr	r0, [r7, #12]
 800dd74:	f7fe fae8 	bl	800c348 <tcp_route>
 800dd78:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d102      	bne.n	800dd86 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dd80:	23fc      	movs	r3, #252	; 0xfc
 800dd82:	75fb      	strb	r3, [r7, #23]
 800dd84:	e01c      	b.n	800ddc0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d006      	beq.n	800dd9a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	7adb      	ldrb	r3, [r3, #11]
 800dd90:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	7a9b      	ldrb	r3, [r3, #10]
 800dd96:	757b      	strb	r3, [r7, #21]
 800dd98:	e003      	b.n	800dda2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dd9a:	23ff      	movs	r3, #255	; 0xff
 800dd9c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dda2:	7dba      	ldrb	r2, [r7, #22]
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	9302      	str	r3, [sp, #8]
 800dda8:	2306      	movs	r3, #6
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	7d7b      	ldrb	r3, [r7, #21]
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	683a      	ldr	r2, [r7, #0]
 800ddb4:	6879      	ldr	r1, [r7, #4]
 800ddb6:	68b8      	ldr	r0, [r7, #8]
 800ddb8:	f002 fa88 	bl	80102cc <ip4_output_if>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ddc0:	68b8      	ldr	r0, [r7, #8]
 800ddc2:	f7f9 fd37 	bl	8007834 <pbuf_free>
  return err;
 800ddc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3718      	adds	r7, #24
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	080140d8 	.word	0x080140d8
 800ddd8:	08014830 	.word	0x08014830
 800dddc:	0801412c 	.word	0x0801412c

0800dde0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dde0:	b590      	push	{r4, r7, lr}
 800dde2:	b08b      	sub	sp, #44	; 0x2c
 800dde4:	af04      	add	r7, sp, #16
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	607a      	str	r2, [r7, #4]
 800ddec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d106      	bne.n	800de02 <tcp_rst+0x22>
 800ddf4:	4b1f      	ldr	r3, [pc, #124]	; (800de74 <tcp_rst+0x94>)
 800ddf6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ddfa:	491f      	ldr	r1, [pc, #124]	; (800de78 <tcp_rst+0x98>)
 800ddfc:	481f      	ldr	r0, [pc, #124]	; (800de7c <tcp_rst+0x9c>)
 800ddfe:	f003 fb81 	bl	8011504 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800de02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de04:	2b00      	cmp	r3, #0
 800de06:	d106      	bne.n	800de16 <tcp_rst+0x36>
 800de08:	4b1a      	ldr	r3, [pc, #104]	; (800de74 <tcp_rst+0x94>)
 800de0a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800de0e:	491c      	ldr	r1, [pc, #112]	; (800de80 <tcp_rst+0xa0>)
 800de10:	481a      	ldr	r0, [pc, #104]	; (800de7c <tcp_rst+0x9c>)
 800de12:	f003 fb77 	bl	8011504 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de16:	2300      	movs	r3, #0
 800de18:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800de1a:	f246 0308 	movw	r3, #24584	; 0x6008
 800de1e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800de20:	7dfb      	ldrb	r3, [r7, #23]
 800de22:	b29c      	uxth	r4, r3
 800de24:	68b8      	ldr	r0, [r7, #8]
 800de26:	f7f8 fa66 	bl	80062f6 <lwip_htonl>
 800de2a:	4602      	mov	r2, r0
 800de2c:	8abb      	ldrh	r3, [r7, #20]
 800de2e:	9303      	str	r3, [sp, #12]
 800de30:	2314      	movs	r3, #20
 800de32:	9302      	str	r3, [sp, #8]
 800de34:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	4613      	mov	r3, r2
 800de3e:	2200      	movs	r2, #0
 800de40:	4621      	mov	r1, r4
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f7ff fe92 	bl	800db6c <tcp_output_alloc_header_common>
 800de48:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00c      	beq.n	800de6a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800de50:	7dfb      	ldrb	r3, [r7, #23]
 800de52:	2200      	movs	r2, #0
 800de54:	6939      	ldr	r1, [r7, #16]
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f7ff ff38 	bl	800dccc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	6939      	ldr	r1, [r7, #16]
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f7ff ff72 	bl	800dd4c <tcp_output_control_segment>
 800de68:	e000      	b.n	800de6c <tcp_rst+0x8c>
    return;
 800de6a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800de6c:	371c      	adds	r7, #28
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd90      	pop	{r4, r7, pc}
 800de72:	bf00      	nop
 800de74:	080140d8 	.word	0x080140d8
 800de78:	0801485c 	.word	0x0801485c
 800de7c:	0801412c 	.word	0x0801412c
 800de80:	08014878 	.word	0x08014878

0800de84 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800de84:	b590      	push	{r4, r7, lr}
 800de86:	b087      	sub	sp, #28
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800de8c:	2300      	movs	r3, #0
 800de8e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800de90:	2300      	movs	r3, #0
 800de92:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <tcp_send_empty_ack+0x24>
 800de9a:	4b28      	ldr	r3, [pc, #160]	; (800df3c <tcp_send_empty_ack+0xb8>)
 800de9c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800dea0:	4927      	ldr	r1, [pc, #156]	; (800df40 <tcp_send_empty_ack+0xbc>)
 800dea2:	4828      	ldr	r0, [pc, #160]	; (800df44 <tcp_send_empty_ack+0xc0>)
 800dea4:	f003 fb2e 	bl	8011504 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dea8:	7dfb      	ldrb	r3, [r7, #23]
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	b2db      	uxtb	r3, r3
 800deae:	f003 0304 	and.w	r3, r3, #4
 800deb2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800deb4:	7d7b      	ldrb	r3, [r7, #21]
 800deb6:	b29c      	uxth	r4, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800debc:	4618      	mov	r0, r3
 800debe:	f7f8 fa1a 	bl	80062f6 <lwip_htonl>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2200      	movs	r2, #0
 800dec6:	4621      	mov	r1, r4
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7ff fec1 	bl	800dc50 <tcp_output_alloc_header>
 800dece:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d109      	bne.n	800deea <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	8b5b      	ldrh	r3, [r3, #26]
 800deda:	f043 0303 	orr.w	r3, r3, #3
 800dede:	b29a      	uxth	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dee4:	f06f 0301 	mvn.w	r3, #1
 800dee8:	e023      	b.n	800df32 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800deea:	7dbb      	ldrb	r3, [r7, #22]
 800deec:	7dfa      	ldrb	r2, [r7, #23]
 800deee:	6939      	ldr	r1, [r7, #16]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff feeb 	bl	800dccc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	3304      	adds	r3, #4
 800defc:	6939      	ldr	r1, [r7, #16]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f7ff ff24 	bl	800dd4c <tcp_output_control_segment>
 800df04:	4603      	mov	r3, r0
 800df06:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800df08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d007      	beq.n	800df20 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	8b5b      	ldrh	r3, [r3, #26]
 800df14:	f043 0303 	orr.w	r3, r3, #3
 800df18:	b29a      	uxth	r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	835a      	strh	r2, [r3, #26]
 800df1e:	e006      	b.n	800df2e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	8b5b      	ldrh	r3, [r3, #26]
 800df24:	f023 0303 	bic.w	r3, r3, #3
 800df28:	b29a      	uxth	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800df2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df32:	4618      	mov	r0, r3
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	bd90      	pop	{r4, r7, pc}
 800df3a:	bf00      	nop
 800df3c:	080140d8 	.word	0x080140d8
 800df40:	08014894 	.word	0x08014894
 800df44:	0801412c 	.word	0x0801412c

0800df48 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800df48:	b590      	push	{r4, r7, lr}
 800df4a:	b087      	sub	sp, #28
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800df50:	2300      	movs	r3, #0
 800df52:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d106      	bne.n	800df68 <tcp_keepalive+0x20>
 800df5a:	4b18      	ldr	r3, [pc, #96]	; (800dfbc <tcp_keepalive+0x74>)
 800df5c:	f640 0224 	movw	r2, #2084	; 0x824
 800df60:	4917      	ldr	r1, [pc, #92]	; (800dfc0 <tcp_keepalive+0x78>)
 800df62:	4818      	ldr	r0, [pc, #96]	; (800dfc4 <tcp_keepalive+0x7c>)
 800df64:	f003 face 	bl	8011504 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800df68:	7dfb      	ldrb	r3, [r7, #23]
 800df6a:	b29c      	uxth	r4, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df70:	3b01      	subs	r3, #1
 800df72:	4618      	mov	r0, r3
 800df74:	f7f8 f9bf 	bl	80062f6 <lwip_htonl>
 800df78:	4603      	mov	r3, r0
 800df7a:	2200      	movs	r2, #0
 800df7c:	4621      	mov	r1, r4
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7ff fe66 	bl	800dc50 <tcp_output_alloc_header>
 800df84:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d102      	bne.n	800df92 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800df8c:	f04f 33ff 	mov.w	r3, #4294967295
 800df90:	e010      	b.n	800dfb4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800df92:	7dfb      	ldrb	r3, [r7, #23]
 800df94:	2200      	movs	r2, #0
 800df96:	6939      	ldr	r1, [r7, #16]
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f7ff fe97 	bl	800dccc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	3304      	adds	r3, #4
 800dfa4:	6939      	ldr	r1, [r7, #16]
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7ff fed0 	bl	800dd4c <tcp_output_control_segment>
 800dfac:	4603      	mov	r3, r0
 800dfae:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800dfb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	371c      	adds	r7, #28
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd90      	pop	{r4, r7, pc}
 800dfbc:	080140d8 	.word	0x080140d8
 800dfc0:	080148b4 	.word	0x080148b4
 800dfc4:	0801412c 	.word	0x0801412c

0800dfc8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dfc8:	b590      	push	{r4, r7, lr}
 800dfca:	b08b      	sub	sp, #44	; 0x2c
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d106      	bne.n	800dfea <tcp_zero_window_probe+0x22>
 800dfdc:	4b4c      	ldr	r3, [pc, #304]	; (800e110 <tcp_zero_window_probe+0x148>)
 800dfde:	f640 024f 	movw	r2, #2127	; 0x84f
 800dfe2:	494c      	ldr	r1, [pc, #304]	; (800e114 <tcp_zero_window_probe+0x14c>)
 800dfe4:	484c      	ldr	r0, [pc, #304]	; (800e118 <tcp_zero_window_probe+0x150>)
 800dfe6:	f003 fa8d 	bl	8011504 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfee:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800dff0:	6a3b      	ldr	r3, [r7, #32]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d101      	bne.n	800dffa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800dff6:	2300      	movs	r3, #0
 800dff8:	e086      	b.n	800e108 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e000:	2bff      	cmp	r3, #255	; 0xff
 800e002:	d007      	beq.n	800e014 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e00a:	3301      	adds	r3, #1
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	899b      	ldrh	r3, [r3, #12]
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7f8 f955 	bl	80062cc <lwip_htons>
 800e022:	4603      	mov	r3, r0
 800e024:	b2db      	uxtb	r3, r3
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d005      	beq.n	800e03a <tcp_zero_window_probe+0x72>
 800e02e:	6a3b      	ldr	r3, [r7, #32]
 800e030:	891b      	ldrh	r3, [r3, #8]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <tcp_zero_window_probe+0x72>
 800e036:	2301      	movs	r3, #1
 800e038:	e000      	b.n	800e03c <tcp_zero_window_probe+0x74>
 800e03a:	2300      	movs	r3, #0
 800e03c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e03e:	7ffb      	ldrb	r3, [r7, #31]
 800e040:	2b00      	cmp	r3, #0
 800e042:	bf0c      	ite	eq
 800e044:	2301      	moveq	r3, #1
 800e046:	2300      	movne	r3, #0
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e04c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e050:	b299      	uxth	r1, r3
 800e052:	6a3b      	ldr	r3, [r7, #32]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	8bba      	ldrh	r2, [r7, #28]
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f7ff fdf8 	bl	800dc50 <tcp_output_alloc_header>
 800e060:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d102      	bne.n	800e06e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e068:	f04f 33ff 	mov.w	r3, #4294967295
 800e06c:	e04c      	b.n	800e108 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e074:	7ffb      	ldrb	r3, [r7, #31]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d011      	beq.n	800e09e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	899b      	ldrh	r3, [r3, #12]
 800e07e:	b29b      	uxth	r3, r3
 800e080:	b21b      	sxth	r3, r3
 800e082:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e086:	b21c      	sxth	r4, r3
 800e088:	2011      	movs	r0, #17
 800e08a:	f7f8 f91f 	bl	80062cc <lwip_htons>
 800e08e:	4603      	mov	r3, r0
 800e090:	b21b      	sxth	r3, r3
 800e092:	4323      	orrs	r3, r4
 800e094:	b21b      	sxth	r3, r3
 800e096:	b29a      	uxth	r2, r3
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	819a      	strh	r2, [r3, #12]
 800e09c:	e010      	b.n	800e0c0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	3314      	adds	r3, #20
 800e0a4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e0a6:	6a3b      	ldr	r3, [r7, #32]
 800e0a8:	6858      	ldr	r0, [r3, #4]
 800e0aa:	6a3b      	ldr	r3, [r7, #32]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	891a      	ldrh	r2, [r3, #8]
 800e0b0:	6a3b      	ldr	r3, [r7, #32]
 800e0b2:	891b      	ldrh	r3, [r3, #8]
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	6939      	ldr	r1, [r7, #16]
 800e0bc:	f7f9 fdb4 	bl	8007c28 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7f8 f915 	bl	80062f6 <lwip_htonl>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	1ad3      	subs	r3, r2, r3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	da02      	bge.n	800e0e4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	69b9      	ldr	r1, [r7, #24]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7ff fded 	bl	800dccc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	69b9      	ldr	r1, [r7, #24]
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f7ff fe26 	bl	800dd4c <tcp_output_control_segment>
 800e100:	4603      	mov	r3, r0
 800e102:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e104:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e108:	4618      	mov	r0, r3
 800e10a:	372c      	adds	r7, #44	; 0x2c
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd90      	pop	{r4, r7, pc}
 800e110:	080140d8 	.word	0x080140d8
 800e114:	080148d0 	.word	0x080148d0
 800e118:	0801412c 	.word	0x0801412c

0800e11c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e124:	f7f9 ff00 	bl	8007f28 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e128:	4b0a      	ldr	r3, [pc, #40]	; (800e154 <tcpip_tcp_timer+0x38>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d103      	bne.n	800e138 <tcpip_tcp_timer+0x1c>
 800e130:	4b09      	ldr	r3, [pc, #36]	; (800e158 <tcpip_tcp_timer+0x3c>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d005      	beq.n	800e144 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e138:	2200      	movs	r2, #0
 800e13a:	4908      	ldr	r1, [pc, #32]	; (800e15c <tcpip_tcp_timer+0x40>)
 800e13c:	20fa      	movs	r0, #250	; 0xfa
 800e13e:	f000 f8f3 	bl	800e328 <sys_timeout>
 800e142:	e003      	b.n	800e14c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e144:	4b06      	ldr	r3, [pc, #24]	; (800e160 <tcpip_tcp_timer+0x44>)
 800e146:	2200      	movs	r2, #0
 800e148:	601a      	str	r2, [r3, #0]
  }
}
 800e14a:	bf00      	nop
 800e14c:	bf00      	nop
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	20008b38 	.word	0x20008b38
 800e158:	20008b48 	.word	0x20008b48
 800e15c:	0800e11d 	.word	0x0800e11d
 800e160:	2000013c 	.word	0x2000013c

0800e164 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e168:	4b0a      	ldr	r3, [pc, #40]	; (800e194 <tcp_timer_needed+0x30>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10f      	bne.n	800e190 <tcp_timer_needed+0x2c>
 800e170:	4b09      	ldr	r3, [pc, #36]	; (800e198 <tcp_timer_needed+0x34>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d103      	bne.n	800e180 <tcp_timer_needed+0x1c>
 800e178:	4b08      	ldr	r3, [pc, #32]	; (800e19c <tcp_timer_needed+0x38>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d007      	beq.n	800e190 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e180:	4b04      	ldr	r3, [pc, #16]	; (800e194 <tcp_timer_needed+0x30>)
 800e182:	2201      	movs	r2, #1
 800e184:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e186:	2200      	movs	r2, #0
 800e188:	4905      	ldr	r1, [pc, #20]	; (800e1a0 <tcp_timer_needed+0x3c>)
 800e18a:	20fa      	movs	r0, #250	; 0xfa
 800e18c:	f000 f8cc 	bl	800e328 <sys_timeout>
  }
}
 800e190:	bf00      	nop
 800e192:	bd80      	pop	{r7, pc}
 800e194:	2000013c 	.word	0x2000013c
 800e198:	20008b38 	.word	0x20008b38
 800e19c:	20008b48 	.word	0x20008b48
 800e1a0:	0800e11d 	.word	0x0800e11d

0800e1a4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e1b0:	2006      	movs	r0, #6
 800e1b2:	f7f8 fce1 	bl	8006b78 <memp_malloc>
 800e1b6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d109      	bne.n	800e1d2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d151      	bne.n	800e268 <sys_timeout_abs+0xc4>
 800e1c4:	4b2a      	ldr	r3, [pc, #168]	; (800e270 <sys_timeout_abs+0xcc>)
 800e1c6:	22be      	movs	r2, #190	; 0xbe
 800e1c8:	492a      	ldr	r1, [pc, #168]	; (800e274 <sys_timeout_abs+0xd0>)
 800e1ca:	482b      	ldr	r0, [pc, #172]	; (800e278 <sys_timeout_abs+0xd4>)
 800e1cc:	f003 f99a 	bl	8011504 <iprintf>
    return;
 800e1d0:	e04a      	b.n	800e268 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e1ea:	4b24      	ldr	r3, [pc, #144]	; (800e27c <sys_timeout_abs+0xd8>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d103      	bne.n	800e1fa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e1f2:	4a22      	ldr	r2, [pc, #136]	; (800e27c <sys_timeout_abs+0xd8>)
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	6013      	str	r3, [r2, #0]
    return;
 800e1f8:	e037      	b.n	800e26a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	4b1f      	ldr	r3, [pc, #124]	; (800e27c <sys_timeout_abs+0xd8>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	0fdb      	lsrs	r3, r3, #31
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d007      	beq.n	800e222 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e212:	4b1a      	ldr	r3, [pc, #104]	; (800e27c <sys_timeout_abs+0xd8>)
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e21a:	4a18      	ldr	r2, [pc, #96]	; (800e27c <sys_timeout_abs+0xd8>)
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	e023      	b.n	800e26a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e222:	4b16      	ldr	r3, [pc, #88]	; (800e27c <sys_timeout_abs+0xd8>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	617b      	str	r3, [r7, #20]
 800e228:	e01a      	b.n	800e260 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00b      	beq.n	800e24a <sys_timeout_abs+0xa6>
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	685a      	ldr	r2, [r3, #4]
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	1ad3      	subs	r3, r2, r3
 800e23e:	0fdb      	lsrs	r3, r3, #31
 800e240:	f003 0301 	and.w	r3, r3, #1
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d007      	beq.n	800e25a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	601a      	str	r2, [r3, #0]
        break;
 800e258:	e007      	b.n	800e26a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	617b      	str	r3, [r7, #20]
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1e1      	bne.n	800e22a <sys_timeout_abs+0x86>
 800e266:	e000      	b.n	800e26a <sys_timeout_abs+0xc6>
    return;
 800e268:	bf00      	nop
      }
    }
  }
}
 800e26a:	3718      	adds	r7, #24
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	080148f4 	.word	0x080148f4
 800e274:	08014928 	.word	0x08014928
 800e278:	08014968 	.word	0x08014968
 800e27c:	20000134 	.word	0x20000134

0800e280 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	4798      	blx	r3

  now = sys_now();
 800e292:	f7f7 ff8d 	bl	80061b0 <sys_now>
 800e296:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <lwip_cyclic_timer+0x5c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	0fdb      	lsrs	r3, r3, #31
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d009      	beq.n	800e2ca <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	4413      	add	r3, r2
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	4907      	ldr	r1, [pc, #28]	; (800e2e0 <lwip_cyclic_timer+0x60>)
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7ff ff6e 	bl	800e1a4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e2c8:	e004      	b.n	800e2d4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	4904      	ldr	r1, [pc, #16]	; (800e2e0 <lwip_cyclic_timer+0x60>)
 800e2ce:	68f8      	ldr	r0, [r7, #12]
 800e2d0:	f7ff ff68 	bl	800e1a4 <sys_timeout_abs>
}
 800e2d4:	bf00      	nop
 800e2d6:	3718      	adds	r7, #24
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20000138 	.word	0x20000138
 800e2e0:	0800e281 	.word	0x0800e281

0800e2e4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	607b      	str	r3, [r7, #4]
 800e2ee:	e00e      	b.n	800e30e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e2f0:	4a0b      	ldr	r2, [pc, #44]	; (800e320 <sys_timeouts_init+0x3c>)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	4a08      	ldr	r2, [pc, #32]	; (800e320 <sys_timeouts_init+0x3c>)
 800e2fe:	4413      	add	r3, r2
 800e300:	461a      	mov	r2, r3
 800e302:	4908      	ldr	r1, [pc, #32]	; (800e324 <sys_timeouts_init+0x40>)
 800e304:	f000 f810 	bl	800e328 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	3301      	adds	r3, #1
 800e30c:	607b      	str	r3, [r7, #4]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b02      	cmp	r3, #2
 800e312:	d9ed      	bls.n	800e2f0 <sys_timeouts_init+0xc>
  }
}
 800e314:	bf00      	nop
 800e316:	bf00      	nop
 800e318:	3708      	adds	r7, #8
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	080154cc 	.word	0x080154cc
 800e324:	0800e281 	.word	0x0800e281

0800e328 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b086      	sub	sp, #24
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e33a:	d306      	bcc.n	800e34a <sys_timeout+0x22>
 800e33c:	4b0a      	ldr	r3, [pc, #40]	; (800e368 <sys_timeout+0x40>)
 800e33e:	f240 1229 	movw	r2, #297	; 0x129
 800e342:	490a      	ldr	r1, [pc, #40]	; (800e36c <sys_timeout+0x44>)
 800e344:	480a      	ldr	r0, [pc, #40]	; (800e370 <sys_timeout+0x48>)
 800e346:	f003 f8dd 	bl	8011504 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e34a:	f7f7 ff31 	bl	80061b0 <sys_now>
 800e34e:	4602      	mov	r2, r0
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	4413      	add	r3, r2
 800e354:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	68b9      	ldr	r1, [r7, #8]
 800e35a:	6978      	ldr	r0, [r7, #20]
 800e35c:	f7ff ff22 	bl	800e1a4 <sys_timeout_abs>
#endif
}
 800e360:	bf00      	nop
 800e362:	3718      	adds	r7, #24
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	080148f4 	.word	0x080148f4
 800e36c:	08014990 	.word	0x08014990
 800e370:	08014968 	.word	0x08014968

0800e374 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e37a:	f7f7 ff19 	bl	80061b0 <sys_now>
 800e37e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e380:	4b1a      	ldr	r3, [pc, #104]	; (800e3ec <sys_check_timeouts+0x78>)
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <sys_check_timeouts+0x1a>
 800e38a:	f7f8 ff19 	bl	80071c0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e38e:	4b18      	ldr	r3, [pc, #96]	; (800e3f0 <sys_check_timeouts+0x7c>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d022      	beq.n	800e3e0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	68fa      	ldr	r2, [r7, #12]
 800e3a0:	1ad3      	subs	r3, r2, r3
 800e3a2:	0fdb      	lsrs	r3, r3, #31
 800e3a4:	f003 0301 	and.w	r3, r3, #1
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d11a      	bne.n	800e3e4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4a0f      	ldr	r2, [pc, #60]	; (800e3f0 <sys_check_timeouts+0x7c>)
 800e3b4:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	4a0b      	ldr	r2, [pc, #44]	; (800e3f4 <sys_check_timeouts+0x80>)
 800e3c8:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e3ca:	68b9      	ldr	r1, [r7, #8]
 800e3cc:	2006      	movs	r0, #6
 800e3ce:	f7f8 fc1f 	bl	8006c10 <memp_free>
    if (handler != NULL) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d0d3      	beq.n	800e380 <sys_check_timeouts+0xc>
      handler(arg);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6838      	ldr	r0, [r7, #0]
 800e3dc:	4798      	blx	r3
  do {
 800e3de:	e7cf      	b.n	800e380 <sys_check_timeouts+0xc>
      return;
 800e3e0:	bf00      	nop
 800e3e2:	e000      	b.n	800e3e6 <sys_check_timeouts+0x72>
      return;
 800e3e4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	20008b30 	.word	0x20008b30
 800e3f0:	20000134 	.word	0x20000134
 800e3f4:	20000138 	.word	0x20000138

0800e3f8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e3fc:	f003 f89a 	bl	8011534 <rand>
 800e400:	4603      	mov	r3, r0
 800e402:	b29b      	uxth	r3, r3
 800e404:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e408:	b29b      	uxth	r3, r3
 800e40a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e40e:	b29a      	uxth	r2, r3
 800e410:	4b01      	ldr	r3, [pc, #4]	; (800e418 <udp_init+0x20>)
 800e412:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e414:	bf00      	nop
 800e416:	bd80      	pop	{r7, pc}
 800e418:	20000030 	.word	0x20000030

0800e41c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e422:	2300      	movs	r3, #0
 800e424:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e426:	4b17      	ldr	r3, [pc, #92]	; (800e484 <udp_new_port+0x68>)
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	b291      	uxth	r1, r2
 800e42e:	4a15      	ldr	r2, [pc, #84]	; (800e484 <udp_new_port+0x68>)
 800e430:	8011      	strh	r1, [r2, #0]
 800e432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e436:	4293      	cmp	r3, r2
 800e438:	d103      	bne.n	800e442 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e43a:	4b12      	ldr	r3, [pc, #72]	; (800e484 <udp_new_port+0x68>)
 800e43c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e440:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e442:	4b11      	ldr	r3, [pc, #68]	; (800e488 <udp_new_port+0x6c>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	603b      	str	r3, [r7, #0]
 800e448:	e011      	b.n	800e46e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	8a5a      	ldrh	r2, [r3, #18]
 800e44e:	4b0d      	ldr	r3, [pc, #52]	; (800e484 <udp_new_port+0x68>)
 800e450:	881b      	ldrh	r3, [r3, #0]
 800e452:	429a      	cmp	r2, r3
 800e454:	d108      	bne.n	800e468 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e456:	88fb      	ldrh	r3, [r7, #6]
 800e458:	3301      	adds	r3, #1
 800e45a:	80fb      	strh	r3, [r7, #6]
 800e45c:	88fb      	ldrh	r3, [r7, #6]
 800e45e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e462:	d3e0      	bcc.n	800e426 <udp_new_port+0xa>
        return 0;
 800e464:	2300      	movs	r3, #0
 800e466:	e007      	b.n	800e478 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	603b      	str	r3, [r7, #0]
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d1ea      	bne.n	800e44a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e474:	4b03      	ldr	r3, [pc, #12]	; (800e484 <udp_new_port+0x68>)
 800e476:	881b      	ldrh	r3, [r3, #0]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	370c      	adds	r7, #12
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	20000030 	.word	0x20000030
 800e488:	20008b50 	.word	0x20008b50

0800e48c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	4613      	mov	r3, r2
 800e498:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d105      	bne.n	800e4ac <udp_input_local_match+0x20>
 800e4a0:	4b27      	ldr	r3, [pc, #156]	; (800e540 <udp_input_local_match+0xb4>)
 800e4a2:	2287      	movs	r2, #135	; 0x87
 800e4a4:	4927      	ldr	r1, [pc, #156]	; (800e544 <udp_input_local_match+0xb8>)
 800e4a6:	4828      	ldr	r0, [pc, #160]	; (800e548 <udp_input_local_match+0xbc>)
 800e4a8:	f003 f82c 	bl	8011504 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d105      	bne.n	800e4be <udp_input_local_match+0x32>
 800e4b2:	4b23      	ldr	r3, [pc, #140]	; (800e540 <udp_input_local_match+0xb4>)
 800e4b4:	2288      	movs	r2, #136	; 0x88
 800e4b6:	4925      	ldr	r1, [pc, #148]	; (800e54c <udp_input_local_match+0xc0>)
 800e4b8:	4823      	ldr	r0, [pc, #140]	; (800e548 <udp_input_local_match+0xbc>)
 800e4ba:	f003 f823 	bl	8011504 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	7a1b      	ldrb	r3, [r3, #8]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00b      	beq.n	800e4de <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	7a1a      	ldrb	r2, [r3, #8]
 800e4ca:	4b21      	ldr	r3, [pc, #132]	; (800e550 <udp_input_local_match+0xc4>)
 800e4cc:	685b      	ldr	r3, [r3, #4]
 800e4ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d001      	beq.n	800e4de <udp_input_local_match+0x52>
    return 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e02b      	b.n	800e536 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e4de:	79fb      	ldrb	r3, [r7, #7]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d018      	beq.n	800e516 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d013      	beq.n	800e512 <udp_input_local_match+0x86>
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00f      	beq.n	800e512 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e4f2:	4b17      	ldr	r3, [pc, #92]	; (800e550 <udp_input_local_match+0xc4>)
 800e4f4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fa:	d00a      	beq.n	800e512 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	4b13      	ldr	r3, [pc, #76]	; (800e550 <udp_input_local_match+0xc4>)
 800e502:	695b      	ldr	r3, [r3, #20]
 800e504:	405a      	eors	r2, r3
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	3308      	adds	r3, #8
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d110      	bne.n	800e534 <udp_input_local_match+0xa8>
          return 1;
 800e512:	2301      	movs	r3, #1
 800e514:	e00f      	b.n	800e536 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d009      	beq.n	800e530 <udp_input_local_match+0xa4>
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d005      	beq.n	800e530 <udp_input_local_match+0xa4>
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681a      	ldr	r2, [r3, #0]
 800e528:	4b09      	ldr	r3, [pc, #36]	; (800e550 <udp_input_local_match+0xc4>)
 800e52a:	695b      	ldr	r3, [r3, #20]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d101      	bne.n	800e534 <udp_input_local_match+0xa8>
        return 1;
 800e530:	2301      	movs	r3, #1
 800e532:	e000      	b.n	800e536 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	080149dc 	.word	0x080149dc
 800e544:	08014a0c 	.word	0x08014a0c
 800e548:	08014a30 	.word	0x08014a30
 800e54c:	08014a58 	.word	0x08014a58
 800e550:	20003434 	.word	0x20003434

0800e554 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e554:	b590      	push	{r4, r7, lr}
 800e556:	b08d      	sub	sp, #52	; 0x34
 800e558:	af02      	add	r7, sp, #8
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e55e:	2300      	movs	r3, #0
 800e560:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d105      	bne.n	800e574 <udp_input+0x20>
 800e568:	4b7c      	ldr	r3, [pc, #496]	; (800e75c <udp_input+0x208>)
 800e56a:	22cf      	movs	r2, #207	; 0xcf
 800e56c:	497c      	ldr	r1, [pc, #496]	; (800e760 <udp_input+0x20c>)
 800e56e:	487d      	ldr	r0, [pc, #500]	; (800e764 <udp_input+0x210>)
 800e570:	f002 ffc8 	bl	8011504 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d105      	bne.n	800e586 <udp_input+0x32>
 800e57a:	4b78      	ldr	r3, [pc, #480]	; (800e75c <udp_input+0x208>)
 800e57c:	22d0      	movs	r2, #208	; 0xd0
 800e57e:	497a      	ldr	r1, [pc, #488]	; (800e768 <udp_input+0x214>)
 800e580:	4878      	ldr	r0, [pc, #480]	; (800e764 <udp_input+0x210>)
 800e582:	f002 ffbf 	bl	8011504 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	895b      	ldrh	r3, [r3, #10]
 800e58a:	2b07      	cmp	r3, #7
 800e58c:	d803      	bhi.n	800e596 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f7f9 f950 	bl	8007834 <pbuf_free>
    goto end;
 800e594:	e0de      	b.n	800e754 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e59c:	4b73      	ldr	r3, [pc, #460]	; (800e76c <udp_input+0x218>)
 800e59e:	695b      	ldr	r3, [r3, #20]
 800e5a0:	4a72      	ldr	r2, [pc, #456]	; (800e76c <udp_input+0x218>)
 800e5a2:	6812      	ldr	r2, [r2, #0]
 800e5a4:	4611      	mov	r1, r2
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f001 ff68 	bl	801047c <ip4_addr_isbroadcast_u32>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	881b      	ldrh	r3, [r3, #0]
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7f7 fe88 	bl	80062cc <lwip_htons>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	885b      	ldrh	r3, [r3, #2]
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7f7 fe80 	bl	80062cc <lwip_htons>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5dc:	4b64      	ldr	r3, [pc, #400]	; (800e770 <udp_input+0x21c>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	627b      	str	r3, [r7, #36]	; 0x24
 800e5e2:	e054      	b.n	800e68e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	8a5b      	ldrh	r3, [r3, #18]
 800e5e8:	89fa      	ldrh	r2, [r7, #14]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d14a      	bne.n	800e684 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e5ee:	7cfb      	ldrb	r3, [r7, #19]
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5f6:	f7ff ff49 	bl	800e48c <udp_input_local_match>
 800e5fa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d041      	beq.n	800e684 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	7c1b      	ldrb	r3, [r3, #16]
 800e604:	f003 0304 	and.w	r3, r3, #4
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d11d      	bne.n	800e648 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d102      	bne.n	800e618 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	61fb      	str	r3, [r7, #28]
 800e616:	e017      	b.n	800e648 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e618:	7cfb      	ldrb	r3, [r7, #19]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d014      	beq.n	800e648 <udp_input+0xf4>
 800e61e:	4b53      	ldr	r3, [pc, #332]	; (800e76c <udp_input+0x218>)
 800e620:	695b      	ldr	r3, [r3, #20]
 800e622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e626:	d10f      	bne.n	800e648 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	3304      	adds	r3, #4
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	429a      	cmp	r2, r3
 800e634:	d008      	beq.n	800e648 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	3304      	adds	r3, #4
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	429a      	cmp	r2, r3
 800e642:	d101      	bne.n	800e648 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	8a9b      	ldrh	r3, [r3, #20]
 800e64c:	8a3a      	ldrh	r2, [r7, #16]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d118      	bne.n	800e684 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e654:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e656:	2b00      	cmp	r3, #0
 800e658:	d005      	beq.n	800e666 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	4b43      	ldr	r3, [pc, #268]	; (800e76c <udp_input+0x218>)
 800e660:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e662:	429a      	cmp	r2, r3
 800e664:	d10e      	bne.n	800e684 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e666:	6a3b      	ldr	r3, [r7, #32]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d014      	beq.n	800e696 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	68da      	ldr	r2, [r3, #12]
 800e670:	6a3b      	ldr	r3, [r7, #32]
 800e672:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e674:	4b3e      	ldr	r3, [pc, #248]	; (800e770 <udp_input+0x21c>)
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e67c:	4a3c      	ldr	r2, [pc, #240]	; (800e770 <udp_input+0x21c>)
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e682:	e008      	b.n	800e696 <udp_input+0x142>
      }
    }

    prev = pcb;
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	627b      	str	r3, [r7, #36]	; 0x24
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1a7      	bne.n	800e5e4 <udp_input+0x90>
 800e694:	e000      	b.n	800e698 <udp_input+0x144>
        break;
 800e696:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d101      	bne.n	800e6a2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d002      	beq.n	800e6ae <udp_input+0x15a>
    for_us = 1;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	76fb      	strb	r3, [r7, #27]
 800e6ac:	e00a      	b.n	800e6c4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	3304      	adds	r3, #4
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	4b2d      	ldr	r3, [pc, #180]	; (800e76c <udp_input+0x218>)
 800e6b6:	695b      	ldr	r3, [r3, #20]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	bf0c      	ite	eq
 800e6bc:	2301      	moveq	r3, #1
 800e6be:	2300      	movne	r3, #0
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e6c4:	7efb      	ldrb	r3, [r7, #27]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d041      	beq.n	800e74e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e6ca:	2108      	movs	r1, #8
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7f9 f82b 	bl	8007728 <pbuf_remove_header>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00a      	beq.n	800e6ee <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e6d8:	4b20      	ldr	r3, [pc, #128]	; (800e75c <udp_input+0x208>)
 800e6da:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e6de:	4925      	ldr	r1, [pc, #148]	; (800e774 <udp_input+0x220>)
 800e6e0:	4820      	ldr	r0, [pc, #128]	; (800e764 <udp_input+0x210>)
 800e6e2:	f002 ff0f 	bl	8011504 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7f9 f8a4 	bl	8007834 <pbuf_free>
      goto end;
 800e6ec:	e032      	b.n	800e754 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d012      	beq.n	800e71a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	699b      	ldr	r3, [r3, #24]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00a      	beq.n	800e712 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fe:	699c      	ldr	r4, [r3, #24]
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	69d8      	ldr	r0, [r3, #28]
 800e704:	8a3b      	ldrh	r3, [r7, #16]
 800e706:	9300      	str	r3, [sp, #0]
 800e708:	4b1b      	ldr	r3, [pc, #108]	; (800e778 <udp_input+0x224>)
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e70e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e710:	e021      	b.n	800e756 <udp_input+0x202>
        pbuf_free(p);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7f9 f88e 	bl	8007834 <pbuf_free>
        goto end;
 800e718:	e01c      	b.n	800e754 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e71a:	7cfb      	ldrb	r3, [r7, #19]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d112      	bne.n	800e746 <udp_input+0x1f2>
 800e720:	4b12      	ldr	r3, [pc, #72]	; (800e76c <udp_input+0x218>)
 800e722:	695b      	ldr	r3, [r3, #20]
 800e724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e728:	2be0      	cmp	r3, #224	; 0xe0
 800e72a:	d00c      	beq.n	800e746 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e72c:	4b0f      	ldr	r3, [pc, #60]	; (800e76c <udp_input+0x218>)
 800e72e:	899b      	ldrh	r3, [r3, #12]
 800e730:	3308      	adds	r3, #8
 800e732:	b29b      	uxth	r3, r3
 800e734:	b21b      	sxth	r3, r3
 800e736:	4619      	mov	r1, r3
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f7f9 f868 	bl	800780e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e73e:	2103      	movs	r1, #3
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f001 fb7b 	bl	800fe3c <icmp_dest_unreach>
      pbuf_free(p);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f7f9 f874 	bl	8007834 <pbuf_free>
  return;
 800e74c:	e003      	b.n	800e756 <udp_input+0x202>
    pbuf_free(p);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f7f9 f870 	bl	8007834 <pbuf_free>
  return;
 800e754:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e756:	372c      	adds	r7, #44	; 0x2c
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd90      	pop	{r4, r7, pc}
 800e75c:	080149dc 	.word	0x080149dc
 800e760:	08014a80 	.word	0x08014a80
 800e764:	08014a30 	.word	0x08014a30
 800e768:	08014a98 	.word	0x08014a98
 800e76c:	20003434 	.word	0x20003434
 800e770:	20008b50 	.word	0x20008b50
 800e774:	08014ab4 	.word	0x08014ab4
 800e778:	20003444 	.word	0x20003444

0800e77c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b088      	sub	sp, #32
 800e780:	af02      	add	r7, sp, #8
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	607a      	str	r2, [r7, #4]
 800e788:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d109      	bne.n	800e7a4 <udp_sendto+0x28>
 800e790:	4b23      	ldr	r3, [pc, #140]	; (800e820 <udp_sendto+0xa4>)
 800e792:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e796:	4923      	ldr	r1, [pc, #140]	; (800e824 <udp_sendto+0xa8>)
 800e798:	4823      	ldr	r0, [pc, #140]	; (800e828 <udp_sendto+0xac>)
 800e79a:	f002 feb3 	bl	8011504 <iprintf>
 800e79e:	f06f 030f 	mvn.w	r3, #15
 800e7a2:	e038      	b.n	800e816 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d109      	bne.n	800e7be <udp_sendto+0x42>
 800e7aa:	4b1d      	ldr	r3, [pc, #116]	; (800e820 <udp_sendto+0xa4>)
 800e7ac:	f240 2219 	movw	r2, #537	; 0x219
 800e7b0:	491e      	ldr	r1, [pc, #120]	; (800e82c <udp_sendto+0xb0>)
 800e7b2:	481d      	ldr	r0, [pc, #116]	; (800e828 <udp_sendto+0xac>)
 800e7b4:	f002 fea6 	bl	8011504 <iprintf>
 800e7b8:	f06f 030f 	mvn.w	r3, #15
 800e7bc:	e02b      	b.n	800e816 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d109      	bne.n	800e7d8 <udp_sendto+0x5c>
 800e7c4:	4b16      	ldr	r3, [pc, #88]	; (800e820 <udp_sendto+0xa4>)
 800e7c6:	f240 221a 	movw	r2, #538	; 0x21a
 800e7ca:	4919      	ldr	r1, [pc, #100]	; (800e830 <udp_sendto+0xb4>)
 800e7cc:	4816      	ldr	r0, [pc, #88]	; (800e828 <udp_sendto+0xac>)
 800e7ce:	f002 fe99 	bl	8011504 <iprintf>
 800e7d2:	f06f 030f 	mvn.w	r3, #15
 800e7d6:	e01e      	b.n	800e816 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	7a1b      	ldrb	r3, [r3, #8]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d006      	beq.n	800e7ee <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	7a1b      	ldrb	r3, [r3, #8]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7f8 fcc5 	bl	8007174 <netif_get_by_index>
 800e7ea:	6178      	str	r0, [r7, #20]
 800e7ec:	e003      	b.n	800e7f6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f001 fbae 	bl	800ff50 <ip4_route>
 800e7f4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d102      	bne.n	800e802 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800e7fc:	f06f 0303 	mvn.w	r3, #3
 800e800:	e009      	b.n	800e816 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800e802:	887a      	ldrh	r2, [r7, #2]
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	4613      	mov	r3, r2
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	68b9      	ldr	r1, [r7, #8]
 800e80e:	68f8      	ldr	r0, [r7, #12]
 800e810:	f000 f810 	bl	800e834 <udp_sendto_if>
 800e814:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e816:	4618      	mov	r0, r3
 800e818:	3718      	adds	r7, #24
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	080149dc 	.word	0x080149dc
 800e824:	08014b00 	.word	0x08014b00
 800e828:	08014a30 	.word	0x08014a30
 800e82c:	08014b18 	.word	0x08014b18
 800e830:	08014b34 	.word	0x08014b34

0800e834 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b088      	sub	sp, #32
 800e838:	af02      	add	r7, sp, #8
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
 800e840:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d109      	bne.n	800e85c <udp_sendto_if+0x28>
 800e848:	4b2e      	ldr	r3, [pc, #184]	; (800e904 <udp_sendto_if+0xd0>)
 800e84a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e84e:	492e      	ldr	r1, [pc, #184]	; (800e908 <udp_sendto_if+0xd4>)
 800e850:	482e      	ldr	r0, [pc, #184]	; (800e90c <udp_sendto_if+0xd8>)
 800e852:	f002 fe57 	bl	8011504 <iprintf>
 800e856:	f06f 030f 	mvn.w	r3, #15
 800e85a:	e04f      	b.n	800e8fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d109      	bne.n	800e876 <udp_sendto_if+0x42>
 800e862:	4b28      	ldr	r3, [pc, #160]	; (800e904 <udp_sendto_if+0xd0>)
 800e864:	f240 2281 	movw	r2, #641	; 0x281
 800e868:	4929      	ldr	r1, [pc, #164]	; (800e910 <udp_sendto_if+0xdc>)
 800e86a:	4828      	ldr	r0, [pc, #160]	; (800e90c <udp_sendto_if+0xd8>)
 800e86c:	f002 fe4a 	bl	8011504 <iprintf>
 800e870:	f06f 030f 	mvn.w	r3, #15
 800e874:	e042      	b.n	800e8fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d109      	bne.n	800e890 <udp_sendto_if+0x5c>
 800e87c:	4b21      	ldr	r3, [pc, #132]	; (800e904 <udp_sendto_if+0xd0>)
 800e87e:	f240 2282 	movw	r2, #642	; 0x282
 800e882:	4924      	ldr	r1, [pc, #144]	; (800e914 <udp_sendto_if+0xe0>)
 800e884:	4821      	ldr	r0, [pc, #132]	; (800e90c <udp_sendto_if+0xd8>)
 800e886:	f002 fe3d 	bl	8011504 <iprintf>
 800e88a:	f06f 030f 	mvn.w	r3, #15
 800e88e:	e035      	b.n	800e8fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d109      	bne.n	800e8aa <udp_sendto_if+0x76>
 800e896:	4b1b      	ldr	r3, [pc, #108]	; (800e904 <udp_sendto_if+0xd0>)
 800e898:	f240 2283 	movw	r2, #643	; 0x283
 800e89c:	491e      	ldr	r1, [pc, #120]	; (800e918 <udp_sendto_if+0xe4>)
 800e89e:	481b      	ldr	r0, [pc, #108]	; (800e90c <udp_sendto_if+0xd8>)
 800e8a0:	f002 fe30 	bl	8011504 <iprintf>
 800e8a4:	f06f 030f 	mvn.w	r3, #15
 800e8a8:	e028      	b.n	800e8fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d009      	beq.n	800e8c4 <udp_sendto_if+0x90>
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d005      	beq.n	800e8c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e8c0:	2be0      	cmp	r3, #224	; 0xe0
 800e8c2:	d103      	bne.n	800e8cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e8c4:	6a3b      	ldr	r3, [r7, #32]
 800e8c6:	3304      	adds	r3, #4
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	e00b      	b.n	800e8e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	3304      	adds	r3, #4
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d002      	beq.n	800e8e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e8da:	f06f 0303 	mvn.w	r3, #3
 800e8de:	e00d      	b.n	800e8fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e8e4:	887a      	ldrh	r2, [r7, #2]
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	6a3b      	ldr	r3, [r7, #32]
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	68b9      	ldr	r1, [r7, #8]
 800e8f4:	68f8      	ldr	r0, [r7, #12]
 800e8f6:	f000 f811 	bl	800e91c <udp_sendto_if_src>
 800e8fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3718      	adds	r7, #24
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}
 800e904:	080149dc 	.word	0x080149dc
 800e908:	08014b50 	.word	0x08014b50
 800e90c:	08014a30 	.word	0x08014a30
 800e910:	08014b6c 	.word	0x08014b6c
 800e914:	08014b88 	.word	0x08014b88
 800e918:	08014ba8 	.word	0x08014ba8

0800e91c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b08c      	sub	sp, #48	; 0x30
 800e920:	af04      	add	r7, sp, #16
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	607a      	str	r2, [r7, #4]
 800e928:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d109      	bne.n	800e944 <udp_sendto_if_src+0x28>
 800e930:	4b65      	ldr	r3, [pc, #404]	; (800eac8 <udp_sendto_if_src+0x1ac>)
 800e932:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e936:	4965      	ldr	r1, [pc, #404]	; (800eacc <udp_sendto_if_src+0x1b0>)
 800e938:	4865      	ldr	r0, [pc, #404]	; (800ead0 <udp_sendto_if_src+0x1b4>)
 800e93a:	f002 fde3 	bl	8011504 <iprintf>
 800e93e:	f06f 030f 	mvn.w	r3, #15
 800e942:	e0bc      	b.n	800eabe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d109      	bne.n	800e95e <udp_sendto_if_src+0x42>
 800e94a:	4b5f      	ldr	r3, [pc, #380]	; (800eac8 <udp_sendto_if_src+0x1ac>)
 800e94c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e950:	4960      	ldr	r1, [pc, #384]	; (800ead4 <udp_sendto_if_src+0x1b8>)
 800e952:	485f      	ldr	r0, [pc, #380]	; (800ead0 <udp_sendto_if_src+0x1b4>)
 800e954:	f002 fdd6 	bl	8011504 <iprintf>
 800e958:	f06f 030f 	mvn.w	r3, #15
 800e95c:	e0af      	b.n	800eabe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d109      	bne.n	800e978 <udp_sendto_if_src+0x5c>
 800e964:	4b58      	ldr	r3, [pc, #352]	; (800eac8 <udp_sendto_if_src+0x1ac>)
 800e966:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e96a:	495b      	ldr	r1, [pc, #364]	; (800ead8 <udp_sendto_if_src+0x1bc>)
 800e96c:	4858      	ldr	r0, [pc, #352]	; (800ead0 <udp_sendto_if_src+0x1b4>)
 800e96e:	f002 fdc9 	bl	8011504 <iprintf>
 800e972:	f06f 030f 	mvn.w	r3, #15
 800e976:	e0a2      	b.n	800eabe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d109      	bne.n	800e992 <udp_sendto_if_src+0x76>
 800e97e:	4b52      	ldr	r3, [pc, #328]	; (800eac8 <udp_sendto_if_src+0x1ac>)
 800e980:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e984:	4955      	ldr	r1, [pc, #340]	; (800eadc <udp_sendto_if_src+0x1c0>)
 800e986:	4852      	ldr	r0, [pc, #328]	; (800ead0 <udp_sendto_if_src+0x1b4>)
 800e988:	f002 fdbc 	bl	8011504 <iprintf>
 800e98c:	f06f 030f 	mvn.w	r3, #15
 800e990:	e095      	b.n	800eabe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e994:	2b00      	cmp	r3, #0
 800e996:	d109      	bne.n	800e9ac <udp_sendto_if_src+0x90>
 800e998:	4b4b      	ldr	r3, [pc, #300]	; (800eac8 <udp_sendto_if_src+0x1ac>)
 800e99a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e99e:	4950      	ldr	r1, [pc, #320]	; (800eae0 <udp_sendto_if_src+0x1c4>)
 800e9a0:	484b      	ldr	r0, [pc, #300]	; (800ead0 <udp_sendto_if_src+0x1b4>)
 800e9a2:	f002 fdaf 	bl	8011504 <iprintf>
 800e9a6:	f06f 030f 	mvn.w	r3, #15
 800e9aa:	e088      	b.n	800eabe <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	8a5b      	ldrh	r3, [r3, #18]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10f      	bne.n	800e9d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e9b4:	68f9      	ldr	r1, [r7, #12]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	8a5b      	ldrh	r3, [r3, #18]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f000 f893 	bl	800eae8 <udp_bind>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800e9c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d002      	beq.n	800e9d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e9ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e9d2:	e074      	b.n	800eabe <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	891b      	ldrh	r3, [r3, #8]
 800e9d8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d902      	bls.n	800e9e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e4:	e06b      	b.n	800eabe <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e9e6:	2108      	movs	r1, #8
 800e9e8:	68b8      	ldr	r0, [r7, #8]
 800e9ea:	f7f8 fe8d 	bl	8007708 <pbuf_add_header>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d015      	beq.n	800ea20 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e9f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e9f8:	2108      	movs	r1, #8
 800e9fa:	2022      	movs	r0, #34	; 0x22
 800e9fc:	f7f8 fc36 	bl	800726c <pbuf_alloc>
 800ea00:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ea02:	69fb      	ldr	r3, [r7, #28]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d102      	bne.n	800ea0e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ea08:	f04f 33ff 	mov.w	r3, #4294967295
 800ea0c:	e057      	b.n	800eabe <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	891b      	ldrh	r3, [r3, #8]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d006      	beq.n	800ea24 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ea16:	68b9      	ldr	r1, [r7, #8]
 800ea18:	69f8      	ldr	r0, [r7, #28]
 800ea1a:	f7f9 f823 	bl	8007a64 <pbuf_chain>
 800ea1e:	e001      	b.n	800ea24 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	895b      	ldrh	r3, [r3, #10]
 800ea28:	2b07      	cmp	r3, #7
 800ea2a:	d806      	bhi.n	800ea3a <udp_sendto_if_src+0x11e>
 800ea2c:	4b26      	ldr	r3, [pc, #152]	; (800eac8 <udp_sendto_if_src+0x1ac>)
 800ea2e:	f240 320d 	movw	r2, #781	; 0x30d
 800ea32:	492c      	ldr	r1, [pc, #176]	; (800eae4 <udp_sendto_if_src+0x1c8>)
 800ea34:	4826      	ldr	r0, [pc, #152]	; (800ead0 <udp_sendto_if_src+0x1b4>)
 800ea36:	f002 fd65 	bl	8011504 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	8a5b      	ldrh	r3, [r3, #18]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7f7 fc41 	bl	80062cc <lwip_htons>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ea52:	887b      	ldrh	r3, [r7, #2]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f7 fc39 	bl	80062cc <lwip_htons>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	2200      	movs	r2, #0
 800ea66:	719a      	strb	r2, [r3, #6]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800ea6c:	69fb      	ldr	r3, [r7, #28]
 800ea6e:	891b      	ldrh	r3, [r3, #8]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7f7 fc2b 	bl	80062cc <lwip_htons>
 800ea76:	4603      	mov	r3, r0
 800ea78:	461a      	mov	r2, r3
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800ea7e:	2311      	movs	r3, #17
 800ea80:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	7adb      	ldrb	r3, [r3, #11]
 800ea86:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	7a9b      	ldrb	r3, [r3, #10]
 800ea8c:	7cb9      	ldrb	r1, [r7, #18]
 800ea8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea90:	9202      	str	r2, [sp, #8]
 800ea92:	7cfa      	ldrb	r2, [r7, #19]
 800ea94:	9201      	str	r2, [sp, #4]
 800ea96:	9300      	str	r3, [sp, #0]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea9e:	69f8      	ldr	r0, [r7, #28]
 800eaa0:	f001 fc3e 	bl	8010320 <ip4_output_if_src>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800eaa8:	69fa      	ldr	r2, [r7, #28]
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d004      	beq.n	800eaba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800eab0:	69f8      	ldr	r0, [r7, #28]
 800eab2:	f7f8 febf 	bl	8007834 <pbuf_free>
    q = NULL;
 800eab6:	2300      	movs	r3, #0
 800eab8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800eaba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3720      	adds	r7, #32
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	080149dc 	.word	0x080149dc
 800eacc:	08014bc8 	.word	0x08014bc8
 800ead0:	08014a30 	.word	0x08014a30
 800ead4:	08014be8 	.word	0x08014be8
 800ead8:	08014c08 	.word	0x08014c08
 800eadc:	08014c2c 	.word	0x08014c2c
 800eae0:	08014c50 	.word	0x08014c50
 800eae4:	08014c74 	.word	0x08014c74

0800eae8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b086      	sub	sp, #24
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d101      	bne.n	800eb00 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800eafc:	4b39      	ldr	r3, [pc, #228]	; (800ebe4 <udp_bind+0xfc>)
 800eafe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d109      	bne.n	800eb1a <udp_bind+0x32>
 800eb06:	4b38      	ldr	r3, [pc, #224]	; (800ebe8 <udp_bind+0x100>)
 800eb08:	f240 32b7 	movw	r2, #951	; 0x3b7
 800eb0c:	4937      	ldr	r1, [pc, #220]	; (800ebec <udp_bind+0x104>)
 800eb0e:	4838      	ldr	r0, [pc, #224]	; (800ebf0 <udp_bind+0x108>)
 800eb10:	f002 fcf8 	bl	8011504 <iprintf>
 800eb14:	f06f 030f 	mvn.w	r3, #15
 800eb18:	e060      	b.n	800ebdc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eb1e:	4b35      	ldr	r3, [pc, #212]	; (800ebf4 <udp_bind+0x10c>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	617b      	str	r3, [r7, #20]
 800eb24:	e009      	b.n	800eb3a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800eb26:	68fa      	ldr	r2, [r7, #12]
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d102      	bne.n	800eb34 <udp_bind+0x4c>
      rebind = 1;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	74fb      	strb	r3, [r7, #19]
      break;
 800eb32:	e005      	b.n	800eb40 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	617b      	str	r3, [r7, #20]
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d1f2      	bne.n	800eb26 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800eb40:	88fb      	ldrh	r3, [r7, #6]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d109      	bne.n	800eb5a <udp_bind+0x72>
    port = udp_new_port();
 800eb46:	f7ff fc69 	bl	800e41c <udp_new_port>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800eb4e:	88fb      	ldrh	r3, [r7, #6]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d12c      	bne.n	800ebae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800eb54:	f06f 0307 	mvn.w	r3, #7
 800eb58:	e040      	b.n	800ebdc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eb5a:	4b26      	ldr	r3, [pc, #152]	; (800ebf4 <udp_bind+0x10c>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	617b      	str	r3, [r7, #20]
 800eb60:	e022      	b.n	800eba8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800eb62:	68fa      	ldr	r2, [r7, #12]
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d01b      	beq.n	800eba2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	8a5b      	ldrh	r3, [r3, #18]
 800eb6e:	88fa      	ldrh	r2, [r7, #6]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d116      	bne.n	800eba2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d00d      	beq.n	800eb9c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d00a      	beq.n	800eb9c <udp_bind+0xb4>
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d006      	beq.n	800eb9c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800eb8e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d003      	beq.n	800eb9c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d102      	bne.n	800eba2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800eb9c:	f06f 0307 	mvn.w	r3, #7
 800eba0:	e01c      	b.n	800ebdc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	617b      	str	r3, [r7, #20]
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1d9      	bne.n	800eb62 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d002      	beq.n	800ebba <udp_bind+0xd2>
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	e000      	b.n	800ebbc <udp_bind+0xd4>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	68fa      	ldr	r2, [r7, #12]
 800ebbe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	88fa      	ldrh	r2, [r7, #6]
 800ebc4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ebc6:	7cfb      	ldrb	r3, [r7, #19]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d106      	bne.n	800ebda <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ebcc:	4b09      	ldr	r3, [pc, #36]	; (800ebf4 <udp_bind+0x10c>)
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ebd4:	4a07      	ldr	r2, [pc, #28]	; (800ebf4 <udp_bind+0x10c>)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3718      	adds	r7, #24
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	080154e4 	.word	0x080154e4
 800ebe8:	080149dc 	.word	0x080149dc
 800ebec:	08014ca4 	.word	0x08014ca4
 800ebf0:	08014a30 	.word	0x08014a30
 800ebf4:	20008b50 	.word	0x20008b50

0800ebf8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d107      	bne.n	800ec16 <udp_disconnect+0x1e>
 800ec06:	4b0d      	ldr	r3, [pc, #52]	; (800ec3c <udp_disconnect+0x44>)
 800ec08:	f240 426a 	movw	r2, #1130	; 0x46a
 800ec0c:	490c      	ldr	r1, [pc, #48]	; (800ec40 <udp_disconnect+0x48>)
 800ec0e:	480d      	ldr	r0, [pc, #52]	; (800ec44 <udp_disconnect+0x4c>)
 800ec10:	f002 fc78 	bl	8011504 <iprintf>
 800ec14:	e00f      	b.n	800ec36 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	7c1b      	ldrb	r3, [r3, #16]
 800ec2c:	f023 0304 	bic.w	r3, r3, #4
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	741a      	strb	r2, [r3, #16]
}
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	080149dc 	.word	0x080149dc
 800ec40:	08014cf4 	.word	0x08014cf4
 800ec44:	08014a30 	.word	0x08014a30

0800ec48 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d107      	bne.n	800ec6a <udp_recv+0x22>
 800ec5a:	4b08      	ldr	r3, [pc, #32]	; (800ec7c <udp_recv+0x34>)
 800ec5c:	f240 428a 	movw	r2, #1162	; 0x48a
 800ec60:	4907      	ldr	r1, [pc, #28]	; (800ec80 <udp_recv+0x38>)
 800ec62:	4808      	ldr	r0, [pc, #32]	; (800ec84 <udp_recv+0x3c>)
 800ec64:	f002 fc4e 	bl	8011504 <iprintf>
 800ec68:	e005      	b.n	800ec76 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	68ba      	ldr	r2, [r7, #8]
 800ec6e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	61da      	str	r2, [r3, #28]
}
 800ec76:	3710      	adds	r7, #16
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	080149dc 	.word	0x080149dc
 800ec80:	08014d10 	.word	0x08014d10
 800ec84:	08014a30 	.word	0x08014a30

0800ec88 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d107      	bne.n	800eca6 <udp_remove+0x1e>
 800ec96:	4b19      	ldr	r3, [pc, #100]	; (800ecfc <udp_remove+0x74>)
 800ec98:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ec9c:	4918      	ldr	r1, [pc, #96]	; (800ed00 <udp_remove+0x78>)
 800ec9e:	4819      	ldr	r0, [pc, #100]	; (800ed04 <udp_remove+0x7c>)
 800eca0:	f002 fc30 	bl	8011504 <iprintf>
 800eca4:	e026      	b.n	800ecf4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800eca6:	4b18      	ldr	r3, [pc, #96]	; (800ed08 <udp_remove+0x80>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d105      	bne.n	800ecbc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ecb0:	4b15      	ldr	r3, [pc, #84]	; (800ed08 <udp_remove+0x80>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	4a14      	ldr	r2, [pc, #80]	; (800ed08 <udp_remove+0x80>)
 800ecb8:	6013      	str	r3, [r2, #0]
 800ecba:	e017      	b.n	800ecec <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ecbc:	4b12      	ldr	r3, [pc, #72]	; (800ed08 <udp_remove+0x80>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	60fb      	str	r3, [r7, #12]
 800ecc2:	e010      	b.n	800ece6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d009      	beq.n	800ece0 <udp_remove+0x58>
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d104      	bne.n	800ece0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	68da      	ldr	r2, [r3, #12]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	60da      	str	r2, [r3, #12]
        break;
 800ecde:	e005      	b.n	800ecec <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	60fb      	str	r3, [r7, #12]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d1eb      	bne.n	800ecc4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ecec:	6879      	ldr	r1, [r7, #4]
 800ecee:	2000      	movs	r0, #0
 800ecf0:	f7f7 ff8e 	bl	8006c10 <memp_free>
}
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	080149dc 	.word	0x080149dc
 800ed00:	08014d28 	.word	0x08014d28
 800ed04:	08014a30 	.word	0x08014a30
 800ed08:	20008b50 	.word	0x20008b50

0800ed0c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ed12:	2000      	movs	r0, #0
 800ed14:	f7f7 ff30 	bl	8006b78 <memp_malloc>
 800ed18:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d007      	beq.n	800ed30 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ed20:	2220      	movs	r2, #32
 800ed22:	2100      	movs	r1, #0
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f002 fbe5 	bl	80114f4 <memset>
    pcb->ttl = UDP_TTL;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	22ff      	movs	r2, #255	; 0xff
 800ed2e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ed30:	687b      	ldr	r3, [r7, #4]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
	...

0800ed3c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b085      	sub	sp, #20
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d01e      	beq.n	800ed8a <udp_netif_ip_addr_changed+0x4e>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d01a      	beq.n	800ed8a <udp_netif_ip_addr_changed+0x4e>
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d017      	beq.n	800ed8a <udp_netif_ip_addr_changed+0x4e>
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d013      	beq.n	800ed8a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed62:	4b0d      	ldr	r3, [pc, #52]	; (800ed98 <udp_netif_ip_addr_changed+0x5c>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	60fb      	str	r3, [r7, #12]
 800ed68:	e00c      	b.n	800ed84 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d103      	bne.n	800ed7e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	60fb      	str	r3, [r7, #12]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1ef      	bne.n	800ed6a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ed8a:	bf00      	nop
 800ed8c:	3714      	adds	r7, #20
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	20008b50 	.word	0x20008b50

0800ed9c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800eda4:	4915      	ldr	r1, [pc, #84]	; (800edfc <etharp_free_entry+0x60>)
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	4613      	mov	r3, r2
 800edaa:	005b      	lsls	r3, r3, #1
 800edac:	4413      	add	r3, r2
 800edae:	00db      	lsls	r3, r3, #3
 800edb0:	440b      	add	r3, r1
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d013      	beq.n	800ede0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800edb8:	4910      	ldr	r1, [pc, #64]	; (800edfc <etharp_free_entry+0x60>)
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	4613      	mov	r3, r2
 800edbe:	005b      	lsls	r3, r3, #1
 800edc0:	4413      	add	r3, r2
 800edc2:	00db      	lsls	r3, r3, #3
 800edc4:	440b      	add	r3, r1
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	4618      	mov	r0, r3
 800edca:	f7f8 fd33 	bl	8007834 <pbuf_free>
    arp_table[i].q = NULL;
 800edce:	490b      	ldr	r1, [pc, #44]	; (800edfc <etharp_free_entry+0x60>)
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	4613      	mov	r3, r2
 800edd4:	005b      	lsls	r3, r3, #1
 800edd6:	4413      	add	r3, r2
 800edd8:	00db      	lsls	r3, r3, #3
 800edda:	440b      	add	r3, r1
 800eddc:	2200      	movs	r2, #0
 800edde:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ede0:	4906      	ldr	r1, [pc, #24]	; (800edfc <etharp_free_entry+0x60>)
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	4613      	mov	r3, r2
 800ede6:	005b      	lsls	r3, r3, #1
 800ede8:	4413      	add	r3, r2
 800edea:	00db      	lsls	r3, r3, #3
 800edec:	440b      	add	r3, r1
 800edee:	3314      	adds	r3, #20
 800edf0:	2200      	movs	r2, #0
 800edf2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800edf4:	bf00      	nop
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	20000140 	.word	0x20000140

0800ee00 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee06:	2300      	movs	r3, #0
 800ee08:	607b      	str	r3, [r7, #4]
 800ee0a:	e096      	b.n	800ef3a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ee0c:	494f      	ldr	r1, [pc, #316]	; (800ef4c <etharp_tmr+0x14c>)
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	4613      	mov	r3, r2
 800ee12:	005b      	lsls	r3, r3, #1
 800ee14:	4413      	add	r3, r2
 800ee16:	00db      	lsls	r3, r3, #3
 800ee18:	440b      	add	r3, r1
 800ee1a:	3314      	adds	r3, #20
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ee20:	78fb      	ldrb	r3, [r7, #3]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f000 8086 	beq.w	800ef34 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ee28:	4948      	ldr	r1, [pc, #288]	; (800ef4c <etharp_tmr+0x14c>)
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	4413      	add	r3, r2
 800ee32:	00db      	lsls	r3, r3, #3
 800ee34:	440b      	add	r3, r1
 800ee36:	3312      	adds	r3, #18
 800ee38:	881b      	ldrh	r3, [r3, #0]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	b298      	uxth	r0, r3
 800ee3e:	4943      	ldr	r1, [pc, #268]	; (800ef4c <etharp_tmr+0x14c>)
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	4613      	mov	r3, r2
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	4413      	add	r3, r2
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	440b      	add	r3, r1
 800ee4c:	3312      	adds	r3, #18
 800ee4e:	4602      	mov	r2, r0
 800ee50:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ee52:	493e      	ldr	r1, [pc, #248]	; (800ef4c <etharp_tmr+0x14c>)
 800ee54:	687a      	ldr	r2, [r7, #4]
 800ee56:	4613      	mov	r3, r2
 800ee58:	005b      	lsls	r3, r3, #1
 800ee5a:	4413      	add	r3, r2
 800ee5c:	00db      	lsls	r3, r3, #3
 800ee5e:	440b      	add	r3, r1
 800ee60:	3312      	adds	r3, #18
 800ee62:	881b      	ldrh	r3, [r3, #0]
 800ee64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ee68:	d215      	bcs.n	800ee96 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ee6a:	4938      	ldr	r1, [pc, #224]	; (800ef4c <etharp_tmr+0x14c>)
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	005b      	lsls	r3, r3, #1
 800ee72:	4413      	add	r3, r2
 800ee74:	00db      	lsls	r3, r3, #3
 800ee76:	440b      	add	r3, r1
 800ee78:	3314      	adds	r3, #20
 800ee7a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d10e      	bne.n	800ee9e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ee80:	4932      	ldr	r1, [pc, #200]	; (800ef4c <etharp_tmr+0x14c>)
 800ee82:	687a      	ldr	r2, [r7, #4]
 800ee84:	4613      	mov	r3, r2
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	4413      	add	r3, r2
 800ee8a:	00db      	lsls	r3, r3, #3
 800ee8c:	440b      	add	r3, r1
 800ee8e:	3312      	adds	r3, #18
 800ee90:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ee92:	2b04      	cmp	r3, #4
 800ee94:	d903      	bls.n	800ee9e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7ff ff80 	bl	800ed9c <etharp_free_entry>
 800ee9c:	e04a      	b.n	800ef34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ee9e:	492b      	ldr	r1, [pc, #172]	; (800ef4c <etharp_tmr+0x14c>)
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	4613      	mov	r3, r2
 800eea4:	005b      	lsls	r3, r3, #1
 800eea6:	4413      	add	r3, r2
 800eea8:	00db      	lsls	r3, r3, #3
 800eeaa:	440b      	add	r3, r1
 800eeac:	3314      	adds	r3, #20
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	2b03      	cmp	r3, #3
 800eeb2:	d10a      	bne.n	800eeca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800eeb4:	4925      	ldr	r1, [pc, #148]	; (800ef4c <etharp_tmr+0x14c>)
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	4613      	mov	r3, r2
 800eeba:	005b      	lsls	r3, r3, #1
 800eebc:	4413      	add	r3, r2
 800eebe:	00db      	lsls	r3, r3, #3
 800eec0:	440b      	add	r3, r1
 800eec2:	3314      	adds	r3, #20
 800eec4:	2204      	movs	r2, #4
 800eec6:	701a      	strb	r2, [r3, #0]
 800eec8:	e034      	b.n	800ef34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800eeca:	4920      	ldr	r1, [pc, #128]	; (800ef4c <etharp_tmr+0x14c>)
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	4613      	mov	r3, r2
 800eed0:	005b      	lsls	r3, r3, #1
 800eed2:	4413      	add	r3, r2
 800eed4:	00db      	lsls	r3, r3, #3
 800eed6:	440b      	add	r3, r1
 800eed8:	3314      	adds	r3, #20
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	2b04      	cmp	r3, #4
 800eede:	d10a      	bne.n	800eef6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800eee0:	491a      	ldr	r1, [pc, #104]	; (800ef4c <etharp_tmr+0x14c>)
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	4613      	mov	r3, r2
 800eee6:	005b      	lsls	r3, r3, #1
 800eee8:	4413      	add	r3, r2
 800eeea:	00db      	lsls	r3, r3, #3
 800eeec:	440b      	add	r3, r1
 800eeee:	3314      	adds	r3, #20
 800eef0:	2202      	movs	r2, #2
 800eef2:	701a      	strb	r2, [r3, #0]
 800eef4:	e01e      	b.n	800ef34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eef6:	4915      	ldr	r1, [pc, #84]	; (800ef4c <etharp_tmr+0x14c>)
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	4613      	mov	r3, r2
 800eefc:	005b      	lsls	r3, r3, #1
 800eefe:	4413      	add	r3, r2
 800ef00:	00db      	lsls	r3, r3, #3
 800ef02:	440b      	add	r3, r1
 800ef04:	3314      	adds	r3, #20
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d113      	bne.n	800ef34 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ef0c:	490f      	ldr	r1, [pc, #60]	; (800ef4c <etharp_tmr+0x14c>)
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	4613      	mov	r3, r2
 800ef12:	005b      	lsls	r3, r3, #1
 800ef14:	4413      	add	r3, r2
 800ef16:	00db      	lsls	r3, r3, #3
 800ef18:	440b      	add	r3, r1
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	6818      	ldr	r0, [r3, #0]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	4613      	mov	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	4413      	add	r3, r2
 800ef26:	00db      	lsls	r3, r3, #3
 800ef28:	4a08      	ldr	r2, [pc, #32]	; (800ef4c <etharp_tmr+0x14c>)
 800ef2a:	4413      	add	r3, r2
 800ef2c:	3304      	adds	r3, #4
 800ef2e:	4619      	mov	r1, r3
 800ef30:	f000 fe6e 	bl	800fc10 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	3301      	adds	r3, #1
 800ef38:	607b      	str	r3, [r7, #4]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2b09      	cmp	r3, #9
 800ef3e:	f77f af65 	ble.w	800ee0c <etharp_tmr+0xc>
      }
    }
  }
}
 800ef42:	bf00      	nop
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	20000140 	.word	0x20000140

0800ef50 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b08a      	sub	sp, #40	; 0x28
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	460b      	mov	r3, r1
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ef5e:	230a      	movs	r3, #10
 800ef60:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ef62:	230a      	movs	r3, #10
 800ef64:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ef66:	230a      	movs	r3, #10
 800ef68:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ef6e:	230a      	movs	r3, #10
 800ef70:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ef72:	2300      	movs	r3, #0
 800ef74:	83bb      	strh	r3, [r7, #28]
 800ef76:	2300      	movs	r3, #0
 800ef78:	837b      	strh	r3, [r7, #26]
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ef7e:	2300      	movs	r3, #0
 800ef80:	843b      	strh	r3, [r7, #32]
 800ef82:	e0ae      	b.n	800f0e2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ef84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef88:	49a6      	ldr	r1, [pc, #664]	; (800f224 <etharp_find_entry+0x2d4>)
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	4413      	add	r3, r2
 800ef90:	00db      	lsls	r3, r3, #3
 800ef92:	440b      	add	r3, r1
 800ef94:	3314      	adds	r3, #20
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ef9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ef9e:	2b0a      	cmp	r3, #10
 800efa0:	d105      	bne.n	800efae <etharp_find_entry+0x5e>
 800efa2:	7dfb      	ldrb	r3, [r7, #23]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d102      	bne.n	800efae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800efa8:	8c3b      	ldrh	r3, [r7, #32]
 800efaa:	847b      	strh	r3, [r7, #34]	; 0x22
 800efac:	e095      	b.n	800f0da <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800efae:	7dfb      	ldrb	r3, [r7, #23]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	f000 8092 	beq.w	800f0da <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800efb6:	7dfb      	ldrb	r3, [r7, #23]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d009      	beq.n	800efd0 <etharp_find_entry+0x80>
 800efbc:	7dfb      	ldrb	r3, [r7, #23]
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d806      	bhi.n	800efd0 <etharp_find_entry+0x80>
 800efc2:	4b99      	ldr	r3, [pc, #612]	; (800f228 <etharp_find_entry+0x2d8>)
 800efc4:	f240 1223 	movw	r2, #291	; 0x123
 800efc8:	4998      	ldr	r1, [pc, #608]	; (800f22c <etharp_find_entry+0x2dc>)
 800efca:	4899      	ldr	r0, [pc, #612]	; (800f230 <etharp_find_entry+0x2e0>)
 800efcc:	f002 fa9a 	bl	8011504 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d020      	beq.n	800f018 <etharp_find_entry+0xc8>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6819      	ldr	r1, [r3, #0]
 800efda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800efde:	4891      	ldr	r0, [pc, #580]	; (800f224 <etharp_find_entry+0x2d4>)
 800efe0:	4613      	mov	r3, r2
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	4413      	add	r3, r2
 800efe6:	00db      	lsls	r3, r3, #3
 800efe8:	4403      	add	r3, r0
 800efea:	3304      	adds	r3, #4
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4299      	cmp	r1, r3
 800eff0:	d112      	bne.n	800f018 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00c      	beq.n	800f012 <etharp_find_entry+0xc2>
 800eff8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800effc:	4989      	ldr	r1, [pc, #548]	; (800f224 <etharp_find_entry+0x2d4>)
 800effe:	4613      	mov	r3, r2
 800f000:	005b      	lsls	r3, r3, #1
 800f002:	4413      	add	r3, r2
 800f004:	00db      	lsls	r3, r3, #3
 800f006:	440b      	add	r3, r1
 800f008:	3308      	adds	r3, #8
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d102      	bne.n	800f018 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f012:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f016:	e100      	b.n	800f21a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f018:	7dfb      	ldrb	r3, [r7, #23]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d140      	bne.n	800f0a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f01e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f022:	4980      	ldr	r1, [pc, #512]	; (800f224 <etharp_find_entry+0x2d4>)
 800f024:	4613      	mov	r3, r2
 800f026:	005b      	lsls	r3, r3, #1
 800f028:	4413      	add	r3, r2
 800f02a:	00db      	lsls	r3, r3, #3
 800f02c:	440b      	add	r3, r1
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d01a      	beq.n	800f06a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f034:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f038:	497a      	ldr	r1, [pc, #488]	; (800f224 <etharp_find_entry+0x2d4>)
 800f03a:	4613      	mov	r3, r2
 800f03c:	005b      	lsls	r3, r3, #1
 800f03e:	4413      	add	r3, r2
 800f040:	00db      	lsls	r3, r3, #3
 800f042:	440b      	add	r3, r1
 800f044:	3312      	adds	r3, #18
 800f046:	881b      	ldrh	r3, [r3, #0]
 800f048:	8bba      	ldrh	r2, [r7, #28]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d845      	bhi.n	800f0da <etharp_find_entry+0x18a>
            old_queue = i;
 800f04e:	8c3b      	ldrh	r3, [r7, #32]
 800f050:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f056:	4973      	ldr	r1, [pc, #460]	; (800f224 <etharp_find_entry+0x2d4>)
 800f058:	4613      	mov	r3, r2
 800f05a:	005b      	lsls	r3, r3, #1
 800f05c:	4413      	add	r3, r2
 800f05e:	00db      	lsls	r3, r3, #3
 800f060:	440b      	add	r3, r1
 800f062:	3312      	adds	r3, #18
 800f064:	881b      	ldrh	r3, [r3, #0]
 800f066:	83bb      	strh	r3, [r7, #28]
 800f068:	e037      	b.n	800f0da <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f06a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f06e:	496d      	ldr	r1, [pc, #436]	; (800f224 <etharp_find_entry+0x2d4>)
 800f070:	4613      	mov	r3, r2
 800f072:	005b      	lsls	r3, r3, #1
 800f074:	4413      	add	r3, r2
 800f076:	00db      	lsls	r3, r3, #3
 800f078:	440b      	add	r3, r1
 800f07a:	3312      	adds	r3, #18
 800f07c:	881b      	ldrh	r3, [r3, #0]
 800f07e:	8b7a      	ldrh	r2, [r7, #26]
 800f080:	429a      	cmp	r2, r3
 800f082:	d82a      	bhi.n	800f0da <etharp_find_entry+0x18a>
            old_pending = i;
 800f084:	8c3b      	ldrh	r3, [r7, #32]
 800f086:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f088:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f08c:	4965      	ldr	r1, [pc, #404]	; (800f224 <etharp_find_entry+0x2d4>)
 800f08e:	4613      	mov	r3, r2
 800f090:	005b      	lsls	r3, r3, #1
 800f092:	4413      	add	r3, r2
 800f094:	00db      	lsls	r3, r3, #3
 800f096:	440b      	add	r3, r1
 800f098:	3312      	adds	r3, #18
 800f09a:	881b      	ldrh	r3, [r3, #0]
 800f09c:	837b      	strh	r3, [r7, #26]
 800f09e:	e01c      	b.n	800f0da <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f0a0:	7dfb      	ldrb	r3, [r7, #23]
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	d919      	bls.n	800f0da <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f0a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0aa:	495e      	ldr	r1, [pc, #376]	; (800f224 <etharp_find_entry+0x2d4>)
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	005b      	lsls	r3, r3, #1
 800f0b0:	4413      	add	r3, r2
 800f0b2:	00db      	lsls	r3, r3, #3
 800f0b4:	440b      	add	r3, r1
 800f0b6:	3312      	adds	r3, #18
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	8b3a      	ldrh	r2, [r7, #24]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d80c      	bhi.n	800f0da <etharp_find_entry+0x18a>
            old_stable = i;
 800f0c0:	8c3b      	ldrh	r3, [r7, #32]
 800f0c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f0c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0c8:	4956      	ldr	r1, [pc, #344]	; (800f224 <etharp_find_entry+0x2d4>)
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	005b      	lsls	r3, r3, #1
 800f0ce:	4413      	add	r3, r2
 800f0d0:	00db      	lsls	r3, r3, #3
 800f0d2:	440b      	add	r3, r1
 800f0d4:	3312      	adds	r3, #18
 800f0d6:	881b      	ldrh	r3, [r3, #0]
 800f0d8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f0da:	8c3b      	ldrh	r3, [r7, #32]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	843b      	strh	r3, [r7, #32]
 800f0e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f0e6:	2b09      	cmp	r3, #9
 800f0e8:	f77f af4c 	ble.w	800ef84 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f0ec:	7afb      	ldrb	r3, [r7, #11]
 800f0ee:	f003 0302 	and.w	r3, r3, #2
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d108      	bne.n	800f108 <etharp_find_entry+0x1b8>
 800f0f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f0fa:	2b0a      	cmp	r3, #10
 800f0fc:	d107      	bne.n	800f10e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f0fe:	7afb      	ldrb	r3, [r7, #11]
 800f100:	f003 0301 	and.w	r3, r3, #1
 800f104:	2b00      	cmp	r3, #0
 800f106:	d102      	bne.n	800f10e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f108:	f04f 33ff 	mov.w	r3, #4294967295
 800f10c:	e085      	b.n	800f21a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f10e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f112:	2b09      	cmp	r3, #9
 800f114:	dc02      	bgt.n	800f11c <etharp_find_entry+0x1cc>
    i = empty;
 800f116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f118:	843b      	strh	r3, [r7, #32]
 800f11a:	e039      	b.n	800f190 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f11c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f120:	2b09      	cmp	r3, #9
 800f122:	dc14      	bgt.n	800f14e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f126:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f128:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f12c:	493d      	ldr	r1, [pc, #244]	; (800f224 <etharp_find_entry+0x2d4>)
 800f12e:	4613      	mov	r3, r2
 800f130:	005b      	lsls	r3, r3, #1
 800f132:	4413      	add	r3, r2
 800f134:	00db      	lsls	r3, r3, #3
 800f136:	440b      	add	r3, r1
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d018      	beq.n	800f170 <etharp_find_entry+0x220>
 800f13e:	4b3a      	ldr	r3, [pc, #232]	; (800f228 <etharp_find_entry+0x2d8>)
 800f140:	f240 126d 	movw	r2, #365	; 0x16d
 800f144:	493b      	ldr	r1, [pc, #236]	; (800f234 <etharp_find_entry+0x2e4>)
 800f146:	483a      	ldr	r0, [pc, #232]	; (800f230 <etharp_find_entry+0x2e0>)
 800f148:	f002 f9dc 	bl	8011504 <iprintf>
 800f14c:	e010      	b.n	800f170 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f14e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f152:	2b09      	cmp	r3, #9
 800f154:	dc02      	bgt.n	800f15c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f156:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f158:	843b      	strh	r3, [r7, #32]
 800f15a:	e009      	b.n	800f170 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f15c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f160:	2b09      	cmp	r3, #9
 800f162:	dc02      	bgt.n	800f16a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f164:	8bfb      	ldrh	r3, [r7, #30]
 800f166:	843b      	strh	r3, [r7, #32]
 800f168:	e002      	b.n	800f170 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f16a:	f04f 33ff 	mov.w	r3, #4294967295
 800f16e:	e054      	b.n	800f21a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f170:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f174:	2b09      	cmp	r3, #9
 800f176:	dd06      	ble.n	800f186 <etharp_find_entry+0x236>
 800f178:	4b2b      	ldr	r3, [pc, #172]	; (800f228 <etharp_find_entry+0x2d8>)
 800f17a:	f240 127f 	movw	r2, #383	; 0x17f
 800f17e:	492e      	ldr	r1, [pc, #184]	; (800f238 <etharp_find_entry+0x2e8>)
 800f180:	482b      	ldr	r0, [pc, #172]	; (800f230 <etharp_find_entry+0x2e0>)
 800f182:	f002 f9bf 	bl	8011504 <iprintf>
    etharp_free_entry(i);
 800f186:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fe06 	bl	800ed9c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f190:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f194:	2b09      	cmp	r3, #9
 800f196:	dd06      	ble.n	800f1a6 <etharp_find_entry+0x256>
 800f198:	4b23      	ldr	r3, [pc, #140]	; (800f228 <etharp_find_entry+0x2d8>)
 800f19a:	f240 1283 	movw	r2, #387	; 0x183
 800f19e:	4926      	ldr	r1, [pc, #152]	; (800f238 <etharp_find_entry+0x2e8>)
 800f1a0:	4823      	ldr	r0, [pc, #140]	; (800f230 <etharp_find_entry+0x2e0>)
 800f1a2:	f002 f9af 	bl	8011504 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f1a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1aa:	491e      	ldr	r1, [pc, #120]	; (800f224 <etharp_find_entry+0x2d4>)
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	4413      	add	r3, r2
 800f1b2:	00db      	lsls	r3, r3, #3
 800f1b4:	440b      	add	r3, r1
 800f1b6:	3314      	adds	r3, #20
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d006      	beq.n	800f1cc <etharp_find_entry+0x27c>
 800f1be:	4b1a      	ldr	r3, [pc, #104]	; (800f228 <etharp_find_entry+0x2d8>)
 800f1c0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f1c4:	491d      	ldr	r1, [pc, #116]	; (800f23c <etharp_find_entry+0x2ec>)
 800f1c6:	481a      	ldr	r0, [pc, #104]	; (800f230 <etharp_find_entry+0x2e0>)
 800f1c8:	f002 f99c 	bl	8011504 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00b      	beq.n	800f1ea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f1d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6819      	ldr	r1, [r3, #0]
 800f1da:	4812      	ldr	r0, [pc, #72]	; (800f224 <etharp_find_entry+0x2d4>)
 800f1dc:	4613      	mov	r3, r2
 800f1de:	005b      	lsls	r3, r3, #1
 800f1e0:	4413      	add	r3, r2
 800f1e2:	00db      	lsls	r3, r3, #3
 800f1e4:	4403      	add	r3, r0
 800f1e6:	3304      	adds	r3, #4
 800f1e8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f1ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1ee:	490d      	ldr	r1, [pc, #52]	; (800f224 <etharp_find_entry+0x2d4>)
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	005b      	lsls	r3, r3, #1
 800f1f4:	4413      	add	r3, r2
 800f1f6:	00db      	lsls	r3, r3, #3
 800f1f8:	440b      	add	r3, r1
 800f1fa:	3312      	adds	r3, #18
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f200:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f204:	4907      	ldr	r1, [pc, #28]	; (800f224 <etharp_find_entry+0x2d4>)
 800f206:	4613      	mov	r3, r2
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	4413      	add	r3, r2
 800f20c:	00db      	lsls	r3, r3, #3
 800f20e:	440b      	add	r3, r1
 800f210:	3308      	adds	r3, #8
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f216:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3728      	adds	r7, #40	; 0x28
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	20000140 	.word	0x20000140
 800f228:	08014d40 	.word	0x08014d40
 800f22c:	08014d78 	.word	0x08014d78
 800f230:	08014db8 	.word	0x08014db8
 800f234:	08014de0 	.word	0x08014de0
 800f238:	08014df8 	.word	0x08014df8
 800f23c:	08014e0c 	.word	0x08014e0c

0800f240 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b088      	sub	sp, #32
 800f244:	af02      	add	r7, sp, #8
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
 800f24c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f254:	2b06      	cmp	r3, #6
 800f256:	d006      	beq.n	800f266 <etharp_update_arp_entry+0x26>
 800f258:	4b48      	ldr	r3, [pc, #288]	; (800f37c <etharp_update_arp_entry+0x13c>)
 800f25a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f25e:	4948      	ldr	r1, [pc, #288]	; (800f380 <etharp_update_arp_entry+0x140>)
 800f260:	4848      	ldr	r0, [pc, #288]	; (800f384 <etharp_update_arp_entry+0x144>)
 800f262:	f002 f94f 	bl	8011504 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d012      	beq.n	800f292 <etharp_update_arp_entry+0x52>
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00e      	beq.n	800f292 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68f9      	ldr	r1, [r7, #12]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f001 f8fe 	bl	801047c <ip4_addr_isbroadcast_u32>
 800f280:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f282:	2b00      	cmp	r3, #0
 800f284:	d105      	bne.n	800f292 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f28e:	2be0      	cmp	r3, #224	; 0xe0
 800f290:	d102      	bne.n	800f298 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f292:	f06f 030f 	mvn.w	r3, #15
 800f296:	e06c      	b.n	800f372 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f298:	78fb      	ldrb	r3, [r7, #3]
 800f29a:	68fa      	ldr	r2, [r7, #12]
 800f29c:	4619      	mov	r1, r3
 800f29e:	68b8      	ldr	r0, [r7, #8]
 800f2a0:	f7ff fe56 	bl	800ef50 <etharp_find_entry>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f2a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	da02      	bge.n	800f2b6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f2b0:	8afb      	ldrh	r3, [r7, #22]
 800f2b2:	b25b      	sxtb	r3, r3
 800f2b4:	e05d      	b.n	800f372 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f2b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2ba:	4933      	ldr	r1, [pc, #204]	; (800f388 <etharp_update_arp_entry+0x148>)
 800f2bc:	4613      	mov	r3, r2
 800f2be:	005b      	lsls	r3, r3, #1
 800f2c0:	4413      	add	r3, r2
 800f2c2:	00db      	lsls	r3, r3, #3
 800f2c4:	440b      	add	r3, r1
 800f2c6:	3314      	adds	r3, #20
 800f2c8:	2202      	movs	r2, #2
 800f2ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f2cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2d0:	492d      	ldr	r1, [pc, #180]	; (800f388 <etharp_update_arp_entry+0x148>)
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	005b      	lsls	r3, r3, #1
 800f2d6:	4413      	add	r3, r2
 800f2d8:	00db      	lsls	r3, r3, #3
 800f2da:	440b      	add	r3, r1
 800f2dc:	3308      	adds	r3, #8
 800f2de:	68fa      	ldr	r2, [r7, #12]
 800f2e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f2e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	005b      	lsls	r3, r3, #1
 800f2ea:	4413      	add	r3, r2
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	3308      	adds	r3, #8
 800f2f0:	4a25      	ldr	r2, [pc, #148]	; (800f388 <etharp_update_arp_entry+0x148>)
 800f2f2:	4413      	add	r3, r2
 800f2f4:	3304      	adds	r3, #4
 800f2f6:	2206      	movs	r2, #6
 800f2f8:	6879      	ldr	r1, [r7, #4]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f002 f8d2 	bl	80114a4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f300:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f304:	4920      	ldr	r1, [pc, #128]	; (800f388 <etharp_update_arp_entry+0x148>)
 800f306:	4613      	mov	r3, r2
 800f308:	005b      	lsls	r3, r3, #1
 800f30a:	4413      	add	r3, r2
 800f30c:	00db      	lsls	r3, r3, #3
 800f30e:	440b      	add	r3, r1
 800f310:	3312      	adds	r3, #18
 800f312:	2200      	movs	r2, #0
 800f314:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f316:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f31a:	491b      	ldr	r1, [pc, #108]	; (800f388 <etharp_update_arp_entry+0x148>)
 800f31c:	4613      	mov	r3, r2
 800f31e:	005b      	lsls	r3, r3, #1
 800f320:	4413      	add	r3, r2
 800f322:	00db      	lsls	r3, r3, #3
 800f324:	440b      	add	r3, r1
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d021      	beq.n	800f370 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f32c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f330:	4915      	ldr	r1, [pc, #84]	; (800f388 <etharp_update_arp_entry+0x148>)
 800f332:	4613      	mov	r3, r2
 800f334:	005b      	lsls	r3, r3, #1
 800f336:	4413      	add	r3, r2
 800f338:	00db      	lsls	r3, r3, #3
 800f33a:	440b      	add	r3, r1
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f340:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f344:	4910      	ldr	r1, [pc, #64]	; (800f388 <etharp_update_arp_entry+0x148>)
 800f346:	4613      	mov	r3, r2
 800f348:	005b      	lsls	r3, r3, #1
 800f34a:	4413      	add	r3, r2
 800f34c:	00db      	lsls	r3, r3, #3
 800f34e:	440b      	add	r3, r1
 800f350:	2200      	movs	r2, #0
 800f352:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f35a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6939      	ldr	r1, [r7, #16]
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f002 f823 	bl	80113b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f36a:	6938      	ldr	r0, [r7, #16]
 800f36c:	f7f8 fa62 	bl	8007834 <pbuf_free>
  }
  return ERR_OK;
 800f370:	2300      	movs	r3, #0
}
 800f372:	4618      	mov	r0, r3
 800f374:	3718      	adds	r7, #24
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	08014d40 	.word	0x08014d40
 800f380:	08014e38 	.word	0x08014e38
 800f384:	08014db8 	.word	0x08014db8
 800f388:	20000140 	.word	0x20000140

0800f38c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f394:	2300      	movs	r3, #0
 800f396:	60fb      	str	r3, [r7, #12]
 800f398:	e01e      	b.n	800f3d8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f39a:	4913      	ldr	r1, [pc, #76]	; (800f3e8 <etharp_cleanup_netif+0x5c>)
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	005b      	lsls	r3, r3, #1
 800f3a2:	4413      	add	r3, r2
 800f3a4:	00db      	lsls	r3, r3, #3
 800f3a6:	440b      	add	r3, r1
 800f3a8:	3314      	adds	r3, #20
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f3ae:	7afb      	ldrb	r3, [r7, #11]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d00e      	beq.n	800f3d2 <etharp_cleanup_netif+0x46>
 800f3b4:	490c      	ldr	r1, [pc, #48]	; (800f3e8 <etharp_cleanup_netif+0x5c>)
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	005b      	lsls	r3, r3, #1
 800f3bc:	4413      	add	r3, r2
 800f3be:	00db      	lsls	r3, r3, #3
 800f3c0:	440b      	add	r3, r1
 800f3c2:	3308      	adds	r3, #8
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d102      	bne.n	800f3d2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f7ff fce5 	bl	800ed9c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	60fb      	str	r3, [r7, #12]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b09      	cmp	r3, #9
 800f3dc:	dddd      	ble.n	800f39a <etharp_cleanup_netif+0xe>
    }
  }
}
 800f3de:	bf00      	nop
 800f3e0:	bf00      	nop
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	20000140 	.word	0x20000140

0800f3ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f3ec:	b5b0      	push	{r4, r5, r7, lr}
 800f3ee:	b08a      	sub	sp, #40	; 0x28
 800f3f0:	af04      	add	r7, sp, #16
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d107      	bne.n	800f40c <etharp_input+0x20>
 800f3fc:	4b3d      	ldr	r3, [pc, #244]	; (800f4f4 <etharp_input+0x108>)
 800f3fe:	f240 228a 	movw	r2, #650	; 0x28a
 800f402:	493d      	ldr	r1, [pc, #244]	; (800f4f8 <etharp_input+0x10c>)
 800f404:	483d      	ldr	r0, [pc, #244]	; (800f4fc <etharp_input+0x110>)
 800f406:	f002 f87d 	bl	8011504 <iprintf>
 800f40a:	e06f      	b.n	800f4ec <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	881b      	ldrh	r3, [r3, #0]
 800f416:	b29b      	uxth	r3, r3
 800f418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f41c:	d10c      	bne.n	800f438 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f422:	2b06      	cmp	r3, #6
 800f424:	d108      	bne.n	800f438 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d104      	bne.n	800f438 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	885b      	ldrh	r3, [r3, #2]
 800f432:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f434:	2b08      	cmp	r3, #8
 800f436:	d003      	beq.n	800f440 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f7f8 f9fb 	bl	8007834 <pbuf_free>
    return;
 800f43e:	e055      	b.n	800f4ec <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	330e      	adds	r3, #14
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	3318      	adds	r3, #24
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	3304      	adds	r3, #4
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d102      	bne.n	800f460 <etharp_input+0x74>
    for_us = 0;
 800f45a:	2300      	movs	r3, #0
 800f45c:	75fb      	strb	r3, [r7, #23]
 800f45e:	e009      	b.n	800f474 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f460:	68ba      	ldr	r2, [r7, #8]
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	3304      	adds	r3, #4
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	429a      	cmp	r2, r3
 800f46a:	bf0c      	ite	eq
 800f46c:	2301      	moveq	r3, #1
 800f46e:	2300      	movne	r3, #0
 800f470:	b2db      	uxtb	r3, r3
 800f472:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	f103 0208 	add.w	r2, r3, #8
 800f47a:	7dfb      	ldrb	r3, [r7, #23]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <etharp_input+0x98>
 800f480:	2301      	movs	r3, #1
 800f482:	e000      	b.n	800f486 <etharp_input+0x9a>
 800f484:	2302      	movs	r3, #2
 800f486:	f107 010c 	add.w	r1, r7, #12
 800f48a:	6838      	ldr	r0, [r7, #0]
 800f48c:	f7ff fed8 	bl	800f240 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	88db      	ldrh	r3, [r3, #6]
 800f494:	b29b      	uxth	r3, r3
 800f496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f49a:	d003      	beq.n	800f4a4 <etharp_input+0xb8>
 800f49c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4a0:	d01e      	beq.n	800f4e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f4a2:	e020      	b.n	800f4e6 <etharp_input+0xfa>
      if (for_us) {
 800f4a4:	7dfb      	ldrb	r3, [r7, #23]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d01c      	beq.n	800f4e4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f4c4:	2102      	movs	r1, #2
 800f4c6:	9103      	str	r1, [sp, #12]
 800f4c8:	f107 010c 	add.w	r1, r7, #12
 800f4cc:	9102      	str	r1, [sp, #8]
 800f4ce:	9201      	str	r2, [sp, #4]
 800f4d0:	9300      	str	r3, [sp, #0]
 800f4d2:	462b      	mov	r3, r5
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	4601      	mov	r1, r0
 800f4d8:	6838      	ldr	r0, [r7, #0]
 800f4da:	f000 faeb 	bl	800fab4 <etharp_raw>
      break;
 800f4de:	e001      	b.n	800f4e4 <etharp_input+0xf8>
      break;
 800f4e0:	bf00      	nop
 800f4e2:	e000      	b.n	800f4e6 <etharp_input+0xfa>
      break;
 800f4e4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7f8 f9a4 	bl	8007834 <pbuf_free>
}
 800f4ec:	3718      	adds	r7, #24
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	08014d40 	.word	0x08014d40
 800f4f8:	08014e90 	.word	0x08014e90
 800f4fc:	08014db8 	.word	0x08014db8

0800f500 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af02      	add	r7, sp, #8
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	4613      	mov	r3, r2
 800f50c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f50e:	79fa      	ldrb	r2, [r7, #7]
 800f510:	4944      	ldr	r1, [pc, #272]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f512:	4613      	mov	r3, r2
 800f514:	005b      	lsls	r3, r3, #1
 800f516:	4413      	add	r3, r2
 800f518:	00db      	lsls	r3, r3, #3
 800f51a:	440b      	add	r3, r1
 800f51c:	3314      	adds	r3, #20
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	2b01      	cmp	r3, #1
 800f522:	d806      	bhi.n	800f532 <etharp_output_to_arp_index+0x32>
 800f524:	4b40      	ldr	r3, [pc, #256]	; (800f628 <etharp_output_to_arp_index+0x128>)
 800f526:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f52a:	4940      	ldr	r1, [pc, #256]	; (800f62c <etharp_output_to_arp_index+0x12c>)
 800f52c:	4840      	ldr	r0, [pc, #256]	; (800f630 <etharp_output_to_arp_index+0x130>)
 800f52e:	f001 ffe9 	bl	8011504 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f532:	79fa      	ldrb	r2, [r7, #7]
 800f534:	493b      	ldr	r1, [pc, #236]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f536:	4613      	mov	r3, r2
 800f538:	005b      	lsls	r3, r3, #1
 800f53a:	4413      	add	r3, r2
 800f53c:	00db      	lsls	r3, r3, #3
 800f53e:	440b      	add	r3, r1
 800f540:	3314      	adds	r3, #20
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	2b02      	cmp	r3, #2
 800f546:	d153      	bne.n	800f5f0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f548:	79fa      	ldrb	r2, [r7, #7]
 800f54a:	4936      	ldr	r1, [pc, #216]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f54c:	4613      	mov	r3, r2
 800f54e:	005b      	lsls	r3, r3, #1
 800f550:	4413      	add	r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	440b      	add	r3, r1
 800f556:	3312      	adds	r3, #18
 800f558:	881b      	ldrh	r3, [r3, #0]
 800f55a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f55e:	d919      	bls.n	800f594 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f560:	79fa      	ldrb	r2, [r7, #7]
 800f562:	4613      	mov	r3, r2
 800f564:	005b      	lsls	r3, r3, #1
 800f566:	4413      	add	r3, r2
 800f568:	00db      	lsls	r3, r3, #3
 800f56a:	4a2e      	ldr	r2, [pc, #184]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f56c:	4413      	add	r3, r2
 800f56e:	3304      	adds	r3, #4
 800f570:	4619      	mov	r1, r3
 800f572:	68f8      	ldr	r0, [r7, #12]
 800f574:	f000 fb4c 	bl	800fc10 <etharp_request>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d138      	bne.n	800f5f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f57e:	79fa      	ldrb	r2, [r7, #7]
 800f580:	4928      	ldr	r1, [pc, #160]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f582:	4613      	mov	r3, r2
 800f584:	005b      	lsls	r3, r3, #1
 800f586:	4413      	add	r3, r2
 800f588:	00db      	lsls	r3, r3, #3
 800f58a:	440b      	add	r3, r1
 800f58c:	3314      	adds	r3, #20
 800f58e:	2203      	movs	r2, #3
 800f590:	701a      	strb	r2, [r3, #0]
 800f592:	e02d      	b.n	800f5f0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f594:	79fa      	ldrb	r2, [r7, #7]
 800f596:	4923      	ldr	r1, [pc, #140]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f598:	4613      	mov	r3, r2
 800f59a:	005b      	lsls	r3, r3, #1
 800f59c:	4413      	add	r3, r2
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	440b      	add	r3, r1
 800f5a2:	3312      	adds	r3, #18
 800f5a4:	881b      	ldrh	r3, [r3, #0]
 800f5a6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f5aa:	d321      	bcc.n	800f5f0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f5ac:	79fa      	ldrb	r2, [r7, #7]
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	4413      	add	r3, r2
 800f5b4:	00db      	lsls	r3, r3, #3
 800f5b6:	4a1b      	ldr	r2, [pc, #108]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f5b8:	4413      	add	r3, r2
 800f5ba:	1d19      	adds	r1, r3, #4
 800f5bc:	79fa      	ldrb	r2, [r7, #7]
 800f5be:	4613      	mov	r3, r2
 800f5c0:	005b      	lsls	r3, r3, #1
 800f5c2:	4413      	add	r3, r2
 800f5c4:	00db      	lsls	r3, r3, #3
 800f5c6:	3308      	adds	r3, #8
 800f5c8:	4a16      	ldr	r2, [pc, #88]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f5ca:	4413      	add	r3, r2
 800f5cc:	3304      	adds	r3, #4
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f000 fafb 	bl	800fbcc <etharp_request_dst>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d109      	bne.n	800f5f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f5dc:	79fa      	ldrb	r2, [r7, #7]
 800f5de:	4911      	ldr	r1, [pc, #68]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f5e0:	4613      	mov	r3, r2
 800f5e2:	005b      	lsls	r3, r3, #1
 800f5e4:	4413      	add	r3, r2
 800f5e6:	00db      	lsls	r3, r3, #3
 800f5e8:	440b      	add	r3, r1
 800f5ea:	3314      	adds	r3, #20
 800f5ec:	2203      	movs	r2, #3
 800f5ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f5f6:	79fa      	ldrb	r2, [r7, #7]
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	005b      	lsls	r3, r3, #1
 800f5fc:	4413      	add	r3, r2
 800f5fe:	00db      	lsls	r3, r3, #3
 800f600:	3308      	adds	r3, #8
 800f602:	4a08      	ldr	r2, [pc, #32]	; (800f624 <etharp_output_to_arp_index+0x124>)
 800f604:	4413      	add	r3, r2
 800f606:	3304      	adds	r3, #4
 800f608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f60c:	9200      	str	r2, [sp, #0]
 800f60e:	460a      	mov	r2, r1
 800f610:	68b9      	ldr	r1, [r7, #8]
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	f001 fecc 	bl	80113b0 <ethernet_output>
 800f618:	4603      	mov	r3, r0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3710      	adds	r7, #16
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	20000140 	.word	0x20000140
 800f628:	08014d40 	.word	0x08014d40
 800f62c:	08014eb0 	.word	0x08014eb0
 800f630:	08014db8 	.word	0x08014db8

0800f634 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b08a      	sub	sp, #40	; 0x28
 800f638:	af02      	add	r7, sp, #8
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d106      	bne.n	800f658 <etharp_output+0x24>
 800f64a:	4b73      	ldr	r3, [pc, #460]	; (800f818 <etharp_output+0x1e4>)
 800f64c:	f240 321e 	movw	r2, #798	; 0x31e
 800f650:	4972      	ldr	r1, [pc, #456]	; (800f81c <etharp_output+0x1e8>)
 800f652:	4873      	ldr	r0, [pc, #460]	; (800f820 <etharp_output+0x1ec>)
 800f654:	f001 ff56 	bl	8011504 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d106      	bne.n	800f66c <etharp_output+0x38>
 800f65e:	4b6e      	ldr	r3, [pc, #440]	; (800f818 <etharp_output+0x1e4>)
 800f660:	f240 321f 	movw	r2, #799	; 0x31f
 800f664:	496f      	ldr	r1, [pc, #444]	; (800f824 <etharp_output+0x1f0>)
 800f666:	486e      	ldr	r0, [pc, #440]	; (800f820 <etharp_output+0x1ec>)
 800f668:	f001 ff4c 	bl	8011504 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d106      	bne.n	800f680 <etharp_output+0x4c>
 800f672:	4b69      	ldr	r3, [pc, #420]	; (800f818 <etharp_output+0x1e4>)
 800f674:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f678:	496b      	ldr	r1, [pc, #428]	; (800f828 <etharp_output+0x1f4>)
 800f67a:	4869      	ldr	r0, [pc, #420]	; (800f820 <etharp_output+0x1ec>)
 800f67c:	f001 ff42 	bl	8011504 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68f9      	ldr	r1, [r7, #12]
 800f686:	4618      	mov	r0, r3
 800f688:	f000 fef8 	bl	801047c <ip4_addr_isbroadcast_u32>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d002      	beq.n	800f698 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f692:	4b66      	ldr	r3, [pc, #408]	; (800f82c <etharp_output+0x1f8>)
 800f694:	61fb      	str	r3, [r7, #28]
 800f696:	e0af      	b.n	800f7f8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6a0:	2be0      	cmp	r3, #224	; 0xe0
 800f6a2:	d118      	bne.n	800f6d6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f6ac:	235e      	movs	r3, #94	; 0x5e
 800f6ae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	3302      	adds	r3, #2
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3303      	adds	r3, #3
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f6ce:	f107 0310 	add.w	r3, r7, #16
 800f6d2:	61fb      	str	r3, [r7, #28]
 800f6d4:	e090      	b.n	800f7f8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	3304      	adds	r3, #4
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	405a      	eors	r2, r3
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	3308      	adds	r3, #8
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4013      	ands	r3, r2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d012      	beq.n	800f714 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f6f4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d00b      	beq.n	800f714 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	330c      	adds	r3, #12
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d003      	beq.n	800f70e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	330c      	adds	r3, #12
 800f70a:	61bb      	str	r3, [r7, #24]
 800f70c:	e002      	b.n	800f714 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f70e:	f06f 0303 	mvn.w	r3, #3
 800f712:	e07d      	b.n	800f810 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f714:	4b46      	ldr	r3, [pc, #280]	; (800f830 <etharp_output+0x1fc>)
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	4619      	mov	r1, r3
 800f71a:	4a46      	ldr	r2, [pc, #280]	; (800f834 <etharp_output+0x200>)
 800f71c:	460b      	mov	r3, r1
 800f71e:	005b      	lsls	r3, r3, #1
 800f720:	440b      	add	r3, r1
 800f722:	00db      	lsls	r3, r3, #3
 800f724:	4413      	add	r3, r2
 800f726:	3314      	adds	r3, #20
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d925      	bls.n	800f77a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f72e:	4b40      	ldr	r3, [pc, #256]	; (800f830 <etharp_output+0x1fc>)
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	4619      	mov	r1, r3
 800f734:	4a3f      	ldr	r2, [pc, #252]	; (800f834 <etharp_output+0x200>)
 800f736:	460b      	mov	r3, r1
 800f738:	005b      	lsls	r3, r3, #1
 800f73a:	440b      	add	r3, r1
 800f73c:	00db      	lsls	r3, r3, #3
 800f73e:	4413      	add	r3, r2
 800f740:	3308      	adds	r3, #8
 800f742:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	429a      	cmp	r2, r3
 800f748:	d117      	bne.n	800f77a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	4b38      	ldr	r3, [pc, #224]	; (800f830 <etharp_output+0x1fc>)
 800f750:	781b      	ldrb	r3, [r3, #0]
 800f752:	4618      	mov	r0, r3
 800f754:	4937      	ldr	r1, [pc, #220]	; (800f834 <etharp_output+0x200>)
 800f756:	4603      	mov	r3, r0
 800f758:	005b      	lsls	r3, r3, #1
 800f75a:	4403      	add	r3, r0
 800f75c:	00db      	lsls	r3, r3, #3
 800f75e:	440b      	add	r3, r1
 800f760:	3304      	adds	r3, #4
 800f762:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f764:	429a      	cmp	r2, r3
 800f766:	d108      	bne.n	800f77a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f768:	4b31      	ldr	r3, [pc, #196]	; (800f830 <etharp_output+0x1fc>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	461a      	mov	r2, r3
 800f76e:	68b9      	ldr	r1, [r7, #8]
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f7ff fec5 	bl	800f500 <etharp_output_to_arp_index>
 800f776:	4603      	mov	r3, r0
 800f778:	e04a      	b.n	800f810 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f77a:	2300      	movs	r3, #0
 800f77c:	75fb      	strb	r3, [r7, #23]
 800f77e:	e031      	b.n	800f7e4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f780:	7dfa      	ldrb	r2, [r7, #23]
 800f782:	492c      	ldr	r1, [pc, #176]	; (800f834 <etharp_output+0x200>)
 800f784:	4613      	mov	r3, r2
 800f786:	005b      	lsls	r3, r3, #1
 800f788:	4413      	add	r3, r2
 800f78a:	00db      	lsls	r3, r3, #3
 800f78c:	440b      	add	r3, r1
 800f78e:	3314      	adds	r3, #20
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d923      	bls.n	800f7de <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f796:	7dfa      	ldrb	r2, [r7, #23]
 800f798:	4926      	ldr	r1, [pc, #152]	; (800f834 <etharp_output+0x200>)
 800f79a:	4613      	mov	r3, r2
 800f79c:	005b      	lsls	r3, r3, #1
 800f79e:	4413      	add	r3, r2
 800f7a0:	00db      	lsls	r3, r3, #3
 800f7a2:	440b      	add	r3, r1
 800f7a4:	3308      	adds	r3, #8
 800f7a6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d117      	bne.n	800f7de <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	6819      	ldr	r1, [r3, #0]
 800f7b2:	7dfa      	ldrb	r2, [r7, #23]
 800f7b4:	481f      	ldr	r0, [pc, #124]	; (800f834 <etharp_output+0x200>)
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	005b      	lsls	r3, r3, #1
 800f7ba:	4413      	add	r3, r2
 800f7bc:	00db      	lsls	r3, r3, #3
 800f7be:	4403      	add	r3, r0
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f7c4:	4299      	cmp	r1, r3
 800f7c6:	d10a      	bne.n	800f7de <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f7c8:	4a19      	ldr	r2, [pc, #100]	; (800f830 <etharp_output+0x1fc>)
 800f7ca:	7dfb      	ldrb	r3, [r7, #23]
 800f7cc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f7ce:	7dfb      	ldrb	r3, [r7, #23]
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	68b9      	ldr	r1, [r7, #8]
 800f7d4:	68f8      	ldr	r0, [r7, #12]
 800f7d6:	f7ff fe93 	bl	800f500 <etharp_output_to_arp_index>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	e018      	b.n	800f810 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f7de:	7dfb      	ldrb	r3, [r7, #23]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	75fb      	strb	r3, [r7, #23]
 800f7e4:	7dfb      	ldrb	r3, [r7, #23]
 800f7e6:	2b09      	cmp	r3, #9
 800f7e8:	d9ca      	bls.n	800f780 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f7ea:	68ba      	ldr	r2, [r7, #8]
 800f7ec:	69b9      	ldr	r1, [r7, #24]
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f000 f822 	bl	800f838 <etharp_query>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	e00b      	b.n	800f810 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f7fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	68b9      	ldr	r1, [r7, #8]
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f001 fdd1 	bl	80113b0 <ethernet_output>
 800f80e:	4603      	mov	r3, r0
}
 800f810:	4618      	mov	r0, r3
 800f812:	3720      	adds	r7, #32
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	08014d40 	.word	0x08014d40
 800f81c:	08014e90 	.word	0x08014e90
 800f820:	08014db8 	.word	0x08014db8
 800f824:	08014ee0 	.word	0x08014ee0
 800f828:	08014e80 	.word	0x08014e80
 800f82c:	080154e8 	.word	0x080154e8
 800f830:	20000230 	.word	0x20000230
 800f834:	20000140 	.word	0x20000140

0800f838 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b08c      	sub	sp, #48	; 0x30
 800f83c:	af02      	add	r7, sp, #8
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	3326      	adds	r3, #38	; 0x26
 800f848:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f84a:	23ff      	movs	r3, #255	; 0xff
 800f84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f850:	2300      	movs	r3, #0
 800f852:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	68f9      	ldr	r1, [r7, #12]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f000 fe0e 	bl	801047c <ip4_addr_isbroadcast_u32>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d10c      	bne.n	800f880 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f86e:	2be0      	cmp	r3, #224	; 0xe0
 800f870:	d006      	beq.n	800f880 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d003      	beq.n	800f880 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d102      	bne.n	800f886 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f880:	f06f 030f 	mvn.w	r3, #15
 800f884:	e101      	b.n	800fa8a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f886:	68fa      	ldr	r2, [r7, #12]
 800f888:	2101      	movs	r1, #1
 800f88a:	68b8      	ldr	r0, [r7, #8]
 800f88c:	f7ff fb60 	bl	800ef50 <etharp_find_entry>
 800f890:	4603      	mov	r3, r0
 800f892:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f894:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	da02      	bge.n	800f8a2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f89c:	8a7b      	ldrh	r3, [r7, #18]
 800f89e:	b25b      	sxtb	r3, r3
 800f8a0:	e0f3      	b.n	800fa8a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f8a2:	8a7b      	ldrh	r3, [r7, #18]
 800f8a4:	2b7e      	cmp	r3, #126	; 0x7e
 800f8a6:	d906      	bls.n	800f8b6 <etharp_query+0x7e>
 800f8a8:	4b7a      	ldr	r3, [pc, #488]	; (800fa94 <etharp_query+0x25c>)
 800f8aa:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f8ae:	497a      	ldr	r1, [pc, #488]	; (800fa98 <etharp_query+0x260>)
 800f8b0:	487a      	ldr	r0, [pc, #488]	; (800fa9c <etharp_query+0x264>)
 800f8b2:	f001 fe27 	bl	8011504 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f8b6:	8a7b      	ldrh	r3, [r7, #18]
 800f8b8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f8ba:	7c7a      	ldrb	r2, [r7, #17]
 800f8bc:	4978      	ldr	r1, [pc, #480]	; (800faa0 <etharp_query+0x268>)
 800f8be:	4613      	mov	r3, r2
 800f8c0:	005b      	lsls	r3, r3, #1
 800f8c2:	4413      	add	r3, r2
 800f8c4:	00db      	lsls	r3, r3, #3
 800f8c6:	440b      	add	r3, r1
 800f8c8:	3314      	adds	r3, #20
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d115      	bne.n	800f8fc <etharp_query+0xc4>
    is_new_entry = 1;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f8d4:	7c7a      	ldrb	r2, [r7, #17]
 800f8d6:	4972      	ldr	r1, [pc, #456]	; (800faa0 <etharp_query+0x268>)
 800f8d8:	4613      	mov	r3, r2
 800f8da:	005b      	lsls	r3, r3, #1
 800f8dc:	4413      	add	r3, r2
 800f8de:	00db      	lsls	r3, r3, #3
 800f8e0:	440b      	add	r3, r1
 800f8e2:	3314      	adds	r3, #20
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f8e8:	7c7a      	ldrb	r2, [r7, #17]
 800f8ea:	496d      	ldr	r1, [pc, #436]	; (800faa0 <etharp_query+0x268>)
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	005b      	lsls	r3, r3, #1
 800f8f0:	4413      	add	r3, r2
 800f8f2:	00db      	lsls	r3, r3, #3
 800f8f4:	440b      	add	r3, r1
 800f8f6:	3308      	adds	r3, #8
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f8fc:	7c7a      	ldrb	r2, [r7, #17]
 800f8fe:	4968      	ldr	r1, [pc, #416]	; (800faa0 <etharp_query+0x268>)
 800f900:	4613      	mov	r3, r2
 800f902:	005b      	lsls	r3, r3, #1
 800f904:	4413      	add	r3, r2
 800f906:	00db      	lsls	r3, r3, #3
 800f908:	440b      	add	r3, r1
 800f90a:	3314      	adds	r3, #20
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d011      	beq.n	800f936 <etharp_query+0xfe>
 800f912:	7c7a      	ldrb	r2, [r7, #17]
 800f914:	4962      	ldr	r1, [pc, #392]	; (800faa0 <etharp_query+0x268>)
 800f916:	4613      	mov	r3, r2
 800f918:	005b      	lsls	r3, r3, #1
 800f91a:	4413      	add	r3, r2
 800f91c:	00db      	lsls	r3, r3, #3
 800f91e:	440b      	add	r3, r1
 800f920:	3314      	adds	r3, #20
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	2b01      	cmp	r3, #1
 800f926:	d806      	bhi.n	800f936 <etharp_query+0xfe>
 800f928:	4b5a      	ldr	r3, [pc, #360]	; (800fa94 <etharp_query+0x25c>)
 800f92a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f92e:	495d      	ldr	r1, [pc, #372]	; (800faa4 <etharp_query+0x26c>)
 800f930:	485a      	ldr	r0, [pc, #360]	; (800fa9c <etharp_query+0x264>)
 800f932:	f001 fde7 	bl	8011504 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f936:	6a3b      	ldr	r3, [r7, #32]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d102      	bne.n	800f942 <etharp_query+0x10a>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d10c      	bne.n	800f95c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f942:	68b9      	ldr	r1, [r7, #8]
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f000 f963 	bl	800fc10 <etharp_request>
 800f94a:	4603      	mov	r3, r0
 800f94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d102      	bne.n	800f95c <etharp_query+0x124>
      return result;
 800f956:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f95a:	e096      	b.n	800fa8a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d106      	bne.n	800f970 <etharp_query+0x138>
 800f962:	4b4c      	ldr	r3, [pc, #304]	; (800fa94 <etharp_query+0x25c>)
 800f964:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f968:	494f      	ldr	r1, [pc, #316]	; (800faa8 <etharp_query+0x270>)
 800f96a:	484c      	ldr	r0, [pc, #304]	; (800fa9c <etharp_query+0x264>)
 800f96c:	f001 fdca 	bl	8011504 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f970:	7c7a      	ldrb	r2, [r7, #17]
 800f972:	494b      	ldr	r1, [pc, #300]	; (800faa0 <etharp_query+0x268>)
 800f974:	4613      	mov	r3, r2
 800f976:	005b      	lsls	r3, r3, #1
 800f978:	4413      	add	r3, r2
 800f97a:	00db      	lsls	r3, r3, #3
 800f97c:	440b      	add	r3, r1
 800f97e:	3314      	adds	r3, #20
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	2b01      	cmp	r3, #1
 800f984:	d917      	bls.n	800f9b6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f986:	4a49      	ldr	r2, [pc, #292]	; (800faac <etharp_query+0x274>)
 800f988:	7c7b      	ldrb	r3, [r7, #17]
 800f98a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f98c:	7c7a      	ldrb	r2, [r7, #17]
 800f98e:	4613      	mov	r3, r2
 800f990:	005b      	lsls	r3, r3, #1
 800f992:	4413      	add	r3, r2
 800f994:	00db      	lsls	r3, r3, #3
 800f996:	3308      	adds	r3, #8
 800f998:	4a41      	ldr	r2, [pc, #260]	; (800faa0 <etharp_query+0x268>)
 800f99a:	4413      	add	r3, r2
 800f99c:	3304      	adds	r3, #4
 800f99e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9a2:	9200      	str	r2, [sp, #0]
 800f9a4:	697a      	ldr	r2, [r7, #20]
 800f9a6:	6879      	ldr	r1, [r7, #4]
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f001 fd01 	bl	80113b0 <ethernet_output>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f9b4:	e067      	b.n	800fa86 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f9b6:	7c7a      	ldrb	r2, [r7, #17]
 800f9b8:	4939      	ldr	r1, [pc, #228]	; (800faa0 <etharp_query+0x268>)
 800f9ba:	4613      	mov	r3, r2
 800f9bc:	005b      	lsls	r3, r3, #1
 800f9be:	4413      	add	r3, r2
 800f9c0:	00db      	lsls	r3, r3, #3
 800f9c2:	440b      	add	r3, r1
 800f9c4:	3314      	adds	r3, #20
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d15c      	bne.n	800fa86 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f9d4:	e01c      	b.n	800fa10 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	895a      	ldrh	r2, [r3, #10]
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	891b      	ldrh	r3, [r3, #8]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d10a      	bne.n	800f9f8 <etharp_query+0x1c0>
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d006      	beq.n	800f9f8 <etharp_query+0x1c0>
 800f9ea:	4b2a      	ldr	r3, [pc, #168]	; (800fa94 <etharp_query+0x25c>)
 800f9ec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f9f0:	492f      	ldr	r1, [pc, #188]	; (800fab0 <etharp_query+0x278>)
 800f9f2:	482a      	ldr	r0, [pc, #168]	; (800fa9c <etharp_query+0x264>)
 800f9f4:	f001 fd86 	bl	8011504 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	7b1b      	ldrb	r3, [r3, #12]
 800f9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <etharp_query+0x1d2>
        copy_needed = 1;
 800fa04:	2301      	movs	r3, #1
 800fa06:	61bb      	str	r3, [r7, #24]
        break;
 800fa08:	e005      	b.n	800fa16 <etharp_query+0x1de>
      }
      p = p->next;
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1df      	bne.n	800f9d6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d007      	beq.n	800fa2c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fa22:	200e      	movs	r0, #14
 800fa24:	f7f8 fa04 	bl	8007e30 <pbuf_clone>
 800fa28:	61f8      	str	r0, [r7, #28]
 800fa2a:	e004      	b.n	800fa36 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fa30:	69f8      	ldr	r0, [r7, #28]
 800fa32:	f7f7 ff9f 	bl	8007974 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d021      	beq.n	800fa80 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fa3c:	7c7a      	ldrb	r2, [r7, #17]
 800fa3e:	4918      	ldr	r1, [pc, #96]	; (800faa0 <etharp_query+0x268>)
 800fa40:	4613      	mov	r3, r2
 800fa42:	005b      	lsls	r3, r3, #1
 800fa44:	4413      	add	r3, r2
 800fa46:	00db      	lsls	r3, r3, #3
 800fa48:	440b      	add	r3, r1
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d00a      	beq.n	800fa66 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fa50:	7c7a      	ldrb	r2, [r7, #17]
 800fa52:	4913      	ldr	r1, [pc, #76]	; (800faa0 <etharp_query+0x268>)
 800fa54:	4613      	mov	r3, r2
 800fa56:	005b      	lsls	r3, r3, #1
 800fa58:	4413      	add	r3, r2
 800fa5a:	00db      	lsls	r3, r3, #3
 800fa5c:	440b      	add	r3, r1
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7f7 fee7 	bl	8007834 <pbuf_free>
      }
      arp_table[i].q = p;
 800fa66:	7c7a      	ldrb	r2, [r7, #17]
 800fa68:	490d      	ldr	r1, [pc, #52]	; (800faa0 <etharp_query+0x268>)
 800fa6a:	4613      	mov	r3, r2
 800fa6c:	005b      	lsls	r3, r3, #1
 800fa6e:	4413      	add	r3, r2
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	440b      	add	r3, r1
 800fa74:	69fa      	ldr	r2, [r7, #28]
 800fa76:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa7e:	e002      	b.n	800fa86 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fa80:	23ff      	movs	r3, #255	; 0xff
 800fa82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fa86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	3728      	adds	r7, #40	; 0x28
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	08014d40 	.word	0x08014d40
 800fa98:	08014eec 	.word	0x08014eec
 800fa9c:	08014db8 	.word	0x08014db8
 800faa0:	20000140 	.word	0x20000140
 800faa4:	08014efc 	.word	0x08014efc
 800faa8:	08014ee0 	.word	0x08014ee0
 800faac:	20000230 	.word	0x20000230
 800fab0:	08014f24 	.word	0x08014f24

0800fab4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b08a      	sub	sp, #40	; 0x28
 800fab8:	af02      	add	r7, sp, #8
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fac2:	2300      	movs	r3, #0
 800fac4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d106      	bne.n	800fada <etharp_raw+0x26>
 800facc:	4b3a      	ldr	r3, [pc, #232]	; (800fbb8 <etharp_raw+0x104>)
 800face:	f240 4257 	movw	r2, #1111	; 0x457
 800fad2:	493a      	ldr	r1, [pc, #232]	; (800fbbc <etharp_raw+0x108>)
 800fad4:	483a      	ldr	r0, [pc, #232]	; (800fbc0 <etharp_raw+0x10c>)
 800fad6:	f001 fd15 	bl	8011504 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fada:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fade:	211c      	movs	r1, #28
 800fae0:	200e      	movs	r0, #14
 800fae2:	f7f7 fbc3 	bl	800726c <pbuf_alloc>
 800fae6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d102      	bne.n	800faf4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800faee:	f04f 33ff 	mov.w	r3, #4294967295
 800faf2:	e05d      	b.n	800fbb0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	895b      	ldrh	r3, [r3, #10]
 800faf8:	2b1b      	cmp	r3, #27
 800fafa:	d806      	bhi.n	800fb0a <etharp_raw+0x56>
 800fafc:	4b2e      	ldr	r3, [pc, #184]	; (800fbb8 <etharp_raw+0x104>)
 800fafe:	f240 4262 	movw	r2, #1122	; 0x462
 800fb02:	4930      	ldr	r1, [pc, #192]	; (800fbc4 <etharp_raw+0x110>)
 800fb04:	482e      	ldr	r0, [pc, #184]	; (800fbc0 <etharp_raw+0x10c>)
 800fb06:	f001 fcfd 	bl	8011504 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fb10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7f6 fbda 	bl	80062cc <lwip_htons>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fb26:	2b06      	cmp	r3, #6
 800fb28:	d006      	beq.n	800fb38 <etharp_raw+0x84>
 800fb2a:	4b23      	ldr	r3, [pc, #140]	; (800fbb8 <etharp_raw+0x104>)
 800fb2c:	f240 4269 	movw	r2, #1129	; 0x469
 800fb30:	4925      	ldr	r1, [pc, #148]	; (800fbc8 <etharp_raw+0x114>)
 800fb32:	4823      	ldr	r0, [pc, #140]	; (800fbc0 <etharp_raw+0x10c>)
 800fb34:	f001 fce6 	bl	8011504 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	3308      	adds	r3, #8
 800fb3c:	2206      	movs	r2, #6
 800fb3e:	6839      	ldr	r1, [r7, #0]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f001 fcaf 	bl	80114a4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	3312      	adds	r3, #18
 800fb4a:	2206      	movs	r2, #6
 800fb4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f001 fca8 	bl	80114a4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	330e      	adds	r3, #14
 800fb58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb5a:	6812      	ldr	r2, [r2, #0]
 800fb5c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	3318      	adds	r3, #24
 800fb62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb64:	6812      	ldr	r2, [r2, #0]
 800fb66:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	701a      	strb	r2, [r3, #0]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f042 0201 	orr.w	r2, r2, #1
 800fb74:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f042 0208 	orr.w	r2, r2, #8
 800fb7e:	709a      	strb	r2, [r3, #2]
 800fb80:	2200      	movs	r2, #0
 800fb82:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	2206      	movs	r2, #6
 800fb88:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	2204      	movs	r2, #4
 800fb8e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fb90:	f640 0306 	movw	r3, #2054	; 0x806
 800fb94:	9300      	str	r3, [sp, #0]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	69b9      	ldr	r1, [r7, #24]
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f001 fc07 	bl	80113b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fba2:	69b8      	ldr	r0, [r7, #24]
 800fba4:	f7f7 fe46 	bl	8007834 <pbuf_free>
  p = NULL;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fbac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3720      	adds	r7, #32
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	08014d40 	.word	0x08014d40
 800fbbc:	08014e90 	.word	0x08014e90
 800fbc0:	08014db8 	.word	0x08014db8
 800fbc4:	08014f40 	.word	0x08014f40
 800fbc8:	08014f74 	.word	0x08014f74

0800fbcc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b088      	sub	sp, #32
 800fbd0:	af04      	add	r7, sp, #16
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fbe8:	2201      	movs	r2, #1
 800fbea:	9203      	str	r2, [sp, #12]
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	9202      	str	r2, [sp, #8]
 800fbf0:	4a06      	ldr	r2, [pc, #24]	; (800fc0c <etharp_request_dst+0x40>)
 800fbf2:	9201      	str	r2, [sp, #4]
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f7ff ff5a 	bl	800fab4 <etharp_raw>
 800fc00:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	080154f0 	.word	0x080154f0

0800fc10 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fc1a:	4a05      	ldr	r2, [pc, #20]	; (800fc30 <etharp_request+0x20>)
 800fc1c:	6839      	ldr	r1, [r7, #0]
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f7ff ffd4 	bl	800fbcc <etharp_request_dst>
 800fc24:	4603      	mov	r3, r0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3708      	adds	r7, #8
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	080154e8 	.word	0x080154e8

0800fc34 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b08e      	sub	sp, #56	; 0x38
 800fc38:	af04      	add	r7, sp, #16
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fc3e:	4b79      	ldr	r3, [pc, #484]	; (800fe24 <icmp_input+0x1f0>)
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	f003 030f 	and.w	r3, r3, #15
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800fc54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc56:	2b13      	cmp	r3, #19
 800fc58:	f240 80cd 	bls.w	800fdf6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	895b      	ldrh	r3, [r3, #10]
 800fc60:	2b03      	cmp	r3, #3
 800fc62:	f240 80ca 	bls.w	800fdfa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fc70:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f000 80b7 	beq.w	800fde8 <icmp_input+0x1b4>
 800fc7a:	2b08      	cmp	r3, #8
 800fc7c:	f040 80b7 	bne.w	800fdee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fc80:	4b69      	ldr	r3, [pc, #420]	; (800fe28 <icmp_input+0x1f4>)
 800fc82:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fc84:	4b67      	ldr	r3, [pc, #412]	; (800fe24 <icmp_input+0x1f0>)
 800fc86:	695b      	ldr	r3, [r3, #20]
 800fc88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc8c:	2be0      	cmp	r3, #224	; 0xe0
 800fc8e:	f000 80bb 	beq.w	800fe08 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fc92:	4b64      	ldr	r3, [pc, #400]	; (800fe24 <icmp_input+0x1f0>)
 800fc94:	695b      	ldr	r3, [r3, #20]
 800fc96:	4a63      	ldr	r2, [pc, #396]	; (800fe24 <icmp_input+0x1f0>)
 800fc98:	6812      	ldr	r2, [r2, #0]
 800fc9a:	4611      	mov	r1, r2
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f000 fbed 	bl	801047c <ip4_addr_isbroadcast_u32>
 800fca2:	4603      	mov	r3, r0
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	f040 80b1 	bne.w	800fe0c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	891b      	ldrh	r3, [r3, #8]
 800fcae:	2b07      	cmp	r3, #7
 800fcb0:	f240 80a5 	bls.w	800fdfe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fcb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcb6:	330e      	adds	r3, #14
 800fcb8:	4619      	mov	r1, r3
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f7f7 fd24 	bl	8007708 <pbuf_add_header>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d04b      	beq.n	800fd5e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	891a      	ldrh	r2, [r3, #8]
 800fcca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fccc:	4413      	add	r3, r2
 800fcce:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	891b      	ldrh	r3, [r3, #8]
 800fcd4:	8b7a      	ldrh	r2, [r7, #26]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	f0c0 809a 	bcc.w	800fe10 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fcdc:	8b7b      	ldrh	r3, [r7, #26]
 800fcde:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fce2:	4619      	mov	r1, r3
 800fce4:	200e      	movs	r0, #14
 800fce6:	f7f7 fac1 	bl	800726c <pbuf_alloc>
 800fcea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 8090 	beq.w	800fe14 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	895b      	ldrh	r3, [r3, #10]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fcfc:	3308      	adds	r3, #8
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d203      	bcs.n	800fd0a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fd02:	6978      	ldr	r0, [r7, #20]
 800fd04:	f7f7 fd96 	bl	8007834 <pbuf_free>
          goto icmperr;
 800fd08:	e085      	b.n	800fe16 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fd10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd12:	4618      	mov	r0, r3
 800fd14:	f001 fbc6 	bl	80114a4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fd18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	6978      	ldr	r0, [r7, #20]
 800fd1e:	f7f7 fd03 	bl	8007728 <pbuf_remove_header>
 800fd22:	4603      	mov	r3, r0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d009      	beq.n	800fd3c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fd28:	4b40      	ldr	r3, [pc, #256]	; (800fe2c <icmp_input+0x1f8>)
 800fd2a:	22b6      	movs	r2, #182	; 0xb6
 800fd2c:	4940      	ldr	r1, [pc, #256]	; (800fe30 <icmp_input+0x1fc>)
 800fd2e:	4841      	ldr	r0, [pc, #260]	; (800fe34 <icmp_input+0x200>)
 800fd30:	f001 fbe8 	bl	8011504 <iprintf>
          pbuf_free(r);
 800fd34:	6978      	ldr	r0, [r7, #20]
 800fd36:	f7f7 fd7d 	bl	8007834 <pbuf_free>
          goto icmperr;
 800fd3a:	e06c      	b.n	800fe16 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fd3c:	6879      	ldr	r1, [r7, #4]
 800fd3e:	6978      	ldr	r0, [r7, #20]
 800fd40:	f7f7 fea0 	bl	8007a84 <pbuf_copy>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d003      	beq.n	800fd52 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fd4a:	6978      	ldr	r0, [r7, #20]
 800fd4c:	f7f7 fd72 	bl	8007834 <pbuf_free>
          goto icmperr;
 800fd50:	e061      	b.n	800fe16 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7f7 fd6e 	bl	8007834 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	607b      	str	r3, [r7, #4]
 800fd5c:	e00f      	b.n	800fd7e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fd5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd60:	330e      	adds	r3, #14
 800fd62:	4619      	mov	r1, r3
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f7f7 fcdf 	bl	8007728 <pbuf_remove_header>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d006      	beq.n	800fd7e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fd70:	4b2e      	ldr	r3, [pc, #184]	; (800fe2c <icmp_input+0x1f8>)
 800fd72:	22c7      	movs	r2, #199	; 0xc7
 800fd74:	4930      	ldr	r1, [pc, #192]	; (800fe38 <icmp_input+0x204>)
 800fd76:	482f      	ldr	r0, [pc, #188]	; (800fe34 <icmp_input+0x200>)
 800fd78:	f001 fbc4 	bl	8011504 <iprintf>
          goto icmperr;
 800fd7c:	e04b      	b.n	800fe16 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fd84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd86:	4619      	mov	r1, r3
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7f7 fcbd 	bl	8007708 <pbuf_add_header>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d12b      	bne.n	800fdec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fda2:	4b20      	ldr	r3, [pc, #128]	; (800fe24 <icmp_input+0x1f0>)
 800fda4:	691a      	ldr	r2, [r3, #16]
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	2200      	movs	r2, #0
 800fdae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	709a      	strb	r2, [r3, #2]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	22ff      	movs	r2, #255	; 0xff
 800fdbe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	729a      	strb	r2, [r3, #10]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	9302      	str	r3, [sp, #8]
 800fdce:	2301      	movs	r3, #1
 800fdd0:	9301      	str	r3, [sp, #4]
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	9300      	str	r3, [sp, #0]
 800fdd6:	23ff      	movs	r3, #255	; 0xff
 800fdd8:	2200      	movs	r2, #0
 800fdda:	69f9      	ldr	r1, [r7, #28]
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f000 fa75 	bl	80102cc <ip4_output_if>
 800fde2:	4603      	mov	r3, r0
 800fde4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fde6:	e001      	b.n	800fdec <icmp_input+0x1b8>
      break;
 800fde8:	bf00      	nop
 800fdea:	e000      	b.n	800fdee <icmp_input+0x1ba>
      break;
 800fdec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7f7 fd20 	bl	8007834 <pbuf_free>
  return;
 800fdf4:	e013      	b.n	800fe1e <icmp_input+0x1ea>
    goto lenerr;
 800fdf6:	bf00      	nop
 800fdf8:	e002      	b.n	800fe00 <icmp_input+0x1cc>
    goto lenerr;
 800fdfa:	bf00      	nop
 800fdfc:	e000      	b.n	800fe00 <icmp_input+0x1cc>
        goto lenerr;
 800fdfe:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f7f7 fd17 	bl	8007834 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fe06:	e00a      	b.n	800fe1e <icmp_input+0x1ea>
        goto icmperr;
 800fe08:	bf00      	nop
 800fe0a:	e004      	b.n	800fe16 <icmp_input+0x1e2>
        goto icmperr;
 800fe0c:	bf00      	nop
 800fe0e:	e002      	b.n	800fe16 <icmp_input+0x1e2>
          goto icmperr;
 800fe10:	bf00      	nop
 800fe12:	e000      	b.n	800fe16 <icmp_input+0x1e2>
          goto icmperr;
 800fe14:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f7f7 fd0c 	bl	8007834 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fe1c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fe1e:	3728      	adds	r7, #40	; 0x28
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	20003434 	.word	0x20003434
 800fe28:	20003448 	.word	0x20003448
 800fe2c:	08014fb8 	.word	0x08014fb8
 800fe30:	08014ff0 	.word	0x08014ff0
 800fe34:	08015028 	.word	0x08015028
 800fe38:	08015050 	.word	0x08015050

0800fe3c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	460b      	mov	r3, r1
 800fe46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fe48:	78fb      	ldrb	r3, [r7, #3]
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	2103      	movs	r1, #3
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f000 f814 	bl	800fe7c <icmp_send_response>
}
 800fe54:	bf00      	nop
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	460b      	mov	r3, r1
 800fe66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fe68:	78fb      	ldrb	r3, [r7, #3]
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	210b      	movs	r1, #11
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 f804 	bl	800fe7c <icmp_send_response>
}
 800fe74:	bf00      	nop
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b08c      	sub	sp, #48	; 0x30
 800fe80:	af04      	add	r7, sp, #16
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	460b      	mov	r3, r1
 800fe86:	70fb      	strb	r3, [r7, #3]
 800fe88:	4613      	mov	r3, r2
 800fe8a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fe8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe90:	2124      	movs	r1, #36	; 0x24
 800fe92:	2022      	movs	r0, #34	; 0x22
 800fe94:	f7f7 f9ea 	bl	800726c <pbuf_alloc>
 800fe98:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d04c      	beq.n	800ff3a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	895b      	ldrh	r3, [r3, #10]
 800fea4:	2b23      	cmp	r3, #35	; 0x23
 800fea6:	d806      	bhi.n	800feb6 <icmp_send_response+0x3a>
 800fea8:	4b26      	ldr	r3, [pc, #152]	; (800ff44 <icmp_send_response+0xc8>)
 800feaa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800feae:	4926      	ldr	r1, [pc, #152]	; (800ff48 <icmp_send_response+0xcc>)
 800feb0:	4826      	ldr	r0, [pc, #152]	; (800ff4c <icmp_send_response+0xd0>)
 800feb2:	f001 fb27 	bl	8011504 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	78fa      	ldrb	r2, [r7, #3]
 800fec6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	78ba      	ldrb	r2, [r7, #2]
 800fecc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	2200      	movs	r2, #0
 800fed2:	711a      	strb	r2, [r3, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	2200      	movs	r2, #0
 800fedc:	719a      	strb	r2, [r3, #6]
 800fede:	2200      	movs	r2, #0
 800fee0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	f103 0008 	add.w	r0, r3, #8
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	221c      	movs	r2, #28
 800fef0:	4619      	mov	r1, r3
 800fef2:	f001 fad7 	bl	80114a4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	68db      	ldr	r3, [r3, #12]
 800fefa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fefc:	f107 030c 	add.w	r3, r7, #12
 800ff00:	4618      	mov	r0, r3
 800ff02:	f000 f825 	bl	800ff50 <ip4_route>
 800ff06:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d011      	beq.n	800ff32 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	2200      	movs	r2, #0
 800ff12:	709a      	strb	r2, [r3, #2]
 800ff14:	2200      	movs	r2, #0
 800ff16:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ff18:	f107 020c 	add.w	r2, r7, #12
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	9302      	str	r3, [sp, #8]
 800ff20:	2301      	movs	r3, #1
 800ff22:	9301      	str	r3, [sp, #4]
 800ff24:	2300      	movs	r3, #0
 800ff26:	9300      	str	r3, [sp, #0]
 800ff28:	23ff      	movs	r3, #255	; 0xff
 800ff2a:	2100      	movs	r1, #0
 800ff2c:	69f8      	ldr	r0, [r7, #28]
 800ff2e:	f000 f9cd 	bl	80102cc <ip4_output_if>
  }
  pbuf_free(q);
 800ff32:	69f8      	ldr	r0, [r7, #28]
 800ff34:	f7f7 fc7e 	bl	8007834 <pbuf_free>
 800ff38:	e000      	b.n	800ff3c <icmp_send_response+0xc0>
    return;
 800ff3a:	bf00      	nop
}
 800ff3c:	3720      	adds	r7, #32
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	08014fb8 	.word	0x08014fb8
 800ff48:	08015084 	.word	0x08015084
 800ff4c:	08015028 	.word	0x08015028

0800ff50 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ff58:	4b33      	ldr	r3, [pc, #204]	; (8010028 <ip4_route+0xd8>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	60fb      	str	r3, [r7, #12]
 800ff5e:	e036      	b.n	800ffce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff66:	f003 0301 	and.w	r3, r3, #1
 800ff6a:	b2db      	uxtb	r3, r3
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d02b      	beq.n	800ffc8 <ip4_route+0x78>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff76:	089b      	lsrs	r3, r3, #2
 800ff78:	f003 0301 	and.w	r3, r3, #1
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d022      	beq.n	800ffc8 <ip4_route+0x78>
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	3304      	adds	r3, #4
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d01d      	beq.n	800ffc8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	3304      	adds	r3, #4
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	405a      	eors	r2, r3
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	3308      	adds	r3, #8
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4013      	ands	r3, r2
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d101      	bne.n	800ffa8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	e038      	b.n	801001a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffae:	f003 0302 	and.w	r3, r3, #2
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d108      	bne.n	800ffc8 <ip4_route+0x78>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	330c      	adds	r3, #12
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d101      	bne.n	800ffc8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	e028      	b.n	801001a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	60fb      	str	r3, [r7, #12]
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1c5      	bne.n	800ff60 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ffd4:	4b15      	ldr	r3, [pc, #84]	; (801002c <ip4_route+0xdc>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d01a      	beq.n	8010012 <ip4_route+0xc2>
 800ffdc:	4b13      	ldr	r3, [pc, #76]	; (801002c <ip4_route+0xdc>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffe4:	f003 0301 	and.w	r3, r3, #1
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d012      	beq.n	8010012 <ip4_route+0xc2>
 800ffec:	4b0f      	ldr	r3, [pc, #60]	; (801002c <ip4_route+0xdc>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fff4:	f003 0304 	and.w	r3, r3, #4
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d00a      	beq.n	8010012 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fffc:	4b0b      	ldr	r3, [pc, #44]	; (801002c <ip4_route+0xdc>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	3304      	adds	r3, #4
 8010002:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010004:	2b00      	cmp	r3, #0
 8010006:	d004      	beq.n	8010012 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	b2db      	uxtb	r3, r3
 801000e:	2b7f      	cmp	r3, #127	; 0x7f
 8010010:	d101      	bne.n	8010016 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010012:	2300      	movs	r3, #0
 8010014:	e001      	b.n	801001a <ip4_route+0xca>
  }

  return netif_default;
 8010016:	4b05      	ldr	r3, [pc, #20]	; (801002c <ip4_route+0xdc>)
 8010018:	681b      	ldr	r3, [r3, #0]
}
 801001a:	4618      	mov	r0, r3
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	20008b28 	.word	0x20008b28
 801002c:	20008b2c 	.word	0x20008b2c

08010030 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b082      	sub	sp, #8
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801003e:	f003 0301 	and.w	r3, r3, #1
 8010042:	b2db      	uxtb	r3, r3
 8010044:	2b00      	cmp	r3, #0
 8010046:	d016      	beq.n	8010076 <ip4_input_accept+0x46>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	3304      	adds	r3, #4
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d011      	beq.n	8010076 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010052:	4b0b      	ldr	r3, [pc, #44]	; (8010080 <ip4_input_accept+0x50>)
 8010054:	695a      	ldr	r2, [r3, #20]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	3304      	adds	r3, #4
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	429a      	cmp	r2, r3
 801005e:	d008      	beq.n	8010072 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010060:	4b07      	ldr	r3, [pc, #28]	; (8010080 <ip4_input_accept+0x50>)
 8010062:	695b      	ldr	r3, [r3, #20]
 8010064:	6879      	ldr	r1, [r7, #4]
 8010066:	4618      	mov	r0, r3
 8010068:	f000 fa08 	bl	801047c <ip4_addr_isbroadcast_u32>
 801006c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801006e:	2b00      	cmp	r3, #0
 8010070:	d001      	beq.n	8010076 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010072:	2301      	movs	r3, #1
 8010074:	e000      	b.n	8010078 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010076:	2300      	movs	r3, #0
}
 8010078:	4618      	mov	r0, r3
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	20003434 	.word	0x20003434

08010084 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b086      	sub	sp, #24
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	091b      	lsrs	r3, r3, #4
 801009a:	b2db      	uxtb	r3, r3
 801009c:	2b04      	cmp	r3, #4
 801009e:	d004      	beq.n	80100aa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f7f7 fbc7 	bl	8007834 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	e107      	b.n	80102ba <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	f003 030f 	and.w	r3, r3, #15
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	885b      	ldrh	r3, [r3, #2]
 80100be:	b29b      	uxth	r3, r3
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7f6 f903 	bl	80062cc <lwip_htons>
 80100c6:	4603      	mov	r3, r0
 80100c8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	891b      	ldrh	r3, [r3, #8]
 80100ce:	89ba      	ldrh	r2, [r7, #12]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d204      	bcs.n	80100de <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80100d4:	89bb      	ldrh	r3, [r7, #12]
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f7f7 fa25 	bl	8007528 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	895b      	ldrh	r3, [r3, #10]
 80100e2:	89fa      	ldrh	r2, [r7, #14]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d807      	bhi.n	80100f8 <ip4_input+0x74>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	891b      	ldrh	r3, [r3, #8]
 80100ec:	89ba      	ldrh	r2, [r7, #12]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d802      	bhi.n	80100f8 <ip4_input+0x74>
 80100f2:	89fb      	ldrh	r3, [r7, #14]
 80100f4:	2b13      	cmp	r3, #19
 80100f6:	d804      	bhi.n	8010102 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f7f7 fb9b 	bl	8007834 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80100fe:	2300      	movs	r3, #0
 8010100:	e0db      	b.n	80102ba <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	4a6f      	ldr	r2, [pc, #444]	; (80102c4 <ip4_input+0x240>)
 8010108:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	4a6d      	ldr	r2, [pc, #436]	; (80102c4 <ip4_input+0x240>)
 8010110:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010112:	4b6c      	ldr	r3, [pc, #432]	; (80102c4 <ip4_input+0x240>)
 8010114:	695b      	ldr	r3, [r3, #20]
 8010116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801011a:	2be0      	cmp	r3, #224	; 0xe0
 801011c:	d112      	bne.n	8010144 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010124:	f003 0301 	and.w	r3, r3, #1
 8010128:	b2db      	uxtb	r3, r3
 801012a:	2b00      	cmp	r3, #0
 801012c:	d007      	beq.n	801013e <ip4_input+0xba>
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	3304      	adds	r3, #4
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d002      	beq.n	801013e <ip4_input+0xba>
      netif = inp;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	613b      	str	r3, [r7, #16]
 801013c:	e02a      	b.n	8010194 <ip4_input+0x110>
    } else {
      netif = NULL;
 801013e:	2300      	movs	r3, #0
 8010140:	613b      	str	r3, [r7, #16]
 8010142:	e027      	b.n	8010194 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010144:	6838      	ldr	r0, [r7, #0]
 8010146:	f7ff ff73 	bl	8010030 <ip4_input_accept>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <ip4_input+0xd2>
      netif = inp;
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	613b      	str	r3, [r7, #16]
 8010154:	e01e      	b.n	8010194 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010156:	2300      	movs	r3, #0
 8010158:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801015a:	4b5a      	ldr	r3, [pc, #360]	; (80102c4 <ip4_input+0x240>)
 801015c:	695b      	ldr	r3, [r3, #20]
 801015e:	b2db      	uxtb	r3, r3
 8010160:	2b7f      	cmp	r3, #127	; 0x7f
 8010162:	d017      	beq.n	8010194 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010164:	4b58      	ldr	r3, [pc, #352]	; (80102c8 <ip4_input+0x244>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	613b      	str	r3, [r7, #16]
 801016a:	e00e      	b.n	801018a <ip4_input+0x106>
          if (netif == inp) {
 801016c:	693a      	ldr	r2, [r7, #16]
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	429a      	cmp	r2, r3
 8010172:	d006      	beq.n	8010182 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010174:	6938      	ldr	r0, [r7, #16]
 8010176:	f7ff ff5b 	bl	8010030 <ip4_input_accept>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d108      	bne.n	8010192 <ip4_input+0x10e>
 8010180:	e000      	b.n	8010184 <ip4_input+0x100>
            continue;
 8010182:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	613b      	str	r3, [r7, #16]
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d1ed      	bne.n	801016c <ip4_input+0xe8>
 8010190:	e000      	b.n	8010194 <ip4_input+0x110>
            break;
 8010192:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010194:	4b4b      	ldr	r3, [pc, #300]	; (80102c4 <ip4_input+0x240>)
 8010196:	691b      	ldr	r3, [r3, #16]
 8010198:	6839      	ldr	r1, [r7, #0]
 801019a:	4618      	mov	r0, r3
 801019c:	f000 f96e 	bl	801047c <ip4_addr_isbroadcast_u32>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d105      	bne.n	80101b2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80101a6:	4b47      	ldr	r3, [pc, #284]	; (80102c4 <ip4_input+0x240>)
 80101a8:	691b      	ldr	r3, [r3, #16]
 80101aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80101ae:	2be0      	cmp	r3, #224	; 0xe0
 80101b0:	d104      	bne.n	80101bc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f7f7 fb3e 	bl	8007834 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80101b8:	2300      	movs	r3, #0
 80101ba:	e07e      	b.n	80102ba <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d104      	bne.n	80101cc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7f7 fb36 	bl	8007834 <pbuf_free>
    return ERR_OK;
 80101c8:	2300      	movs	r3, #0
 80101ca:	e076      	b.n	80102ba <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	88db      	ldrh	r3, [r3, #6]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	461a      	mov	r2, r3
 80101d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80101d8:	4013      	ands	r3, r2
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00b      	beq.n	80101f6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f000 fd24 	bl	8010c2c <ip4_reass>
 80101e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d101      	bne.n	80101f0 <ip4_input+0x16c>
      return ERR_OK;
 80101ec:	2300      	movs	r3, #0
 80101ee:	e064      	b.n	80102ba <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80101f6:	4a33      	ldr	r2, [pc, #204]	; (80102c4 <ip4_input+0x240>)
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80101fc:	4a31      	ldr	r2, [pc, #196]	; (80102c4 <ip4_input+0x240>)
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010202:	4a30      	ldr	r2, [pc, #192]	; (80102c4 <ip4_input+0x240>)
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	f003 030f 	and.w	r3, r3, #15
 8010210:	b2db      	uxtb	r3, r3
 8010212:	009b      	lsls	r3, r3, #2
 8010214:	b2db      	uxtb	r3, r3
 8010216:	b29a      	uxth	r2, r3
 8010218:	4b2a      	ldr	r3, [pc, #168]	; (80102c4 <ip4_input+0x240>)
 801021a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801021c:	89fb      	ldrh	r3, [r7, #14]
 801021e:	4619      	mov	r1, r3
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f7f7 fa81 	bl	8007728 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	7a5b      	ldrb	r3, [r3, #9]
 801022a:	2b11      	cmp	r3, #17
 801022c:	d006      	beq.n	801023c <ip4_input+0x1b8>
 801022e:	2b11      	cmp	r3, #17
 8010230:	dc13      	bgt.n	801025a <ip4_input+0x1d6>
 8010232:	2b01      	cmp	r3, #1
 8010234:	d00c      	beq.n	8010250 <ip4_input+0x1cc>
 8010236:	2b06      	cmp	r3, #6
 8010238:	d005      	beq.n	8010246 <ip4_input+0x1c2>
 801023a:	e00e      	b.n	801025a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801023c:	6839      	ldr	r1, [r7, #0]
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7fe f988 	bl	800e554 <udp_input>
        break;
 8010244:	e026      	b.n	8010294 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010246:	6839      	ldr	r1, [r7, #0]
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7f9 fd75 	bl	8009d38 <tcp_input>
        break;
 801024e:	e021      	b.n	8010294 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010250:	6839      	ldr	r1, [r7, #0]
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7ff fcee 	bl	800fc34 <icmp_input>
        break;
 8010258:	e01c      	b.n	8010294 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801025a:	4b1a      	ldr	r3, [pc, #104]	; (80102c4 <ip4_input+0x240>)
 801025c:	695b      	ldr	r3, [r3, #20]
 801025e:	6939      	ldr	r1, [r7, #16]
 8010260:	4618      	mov	r0, r3
 8010262:	f000 f90b 	bl	801047c <ip4_addr_isbroadcast_u32>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d10f      	bne.n	801028c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801026c:	4b15      	ldr	r3, [pc, #84]	; (80102c4 <ip4_input+0x240>)
 801026e:	695b      	ldr	r3, [r3, #20]
 8010270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010274:	2be0      	cmp	r3, #224	; 0xe0
 8010276:	d009      	beq.n	801028c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010278:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801027c:	4619      	mov	r1, r3
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f7f7 fac5 	bl	800780e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010284:	2102      	movs	r1, #2
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f7ff fdd8 	bl	800fe3c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f7f7 fad1 	bl	8007834 <pbuf_free>
        break;
 8010292:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010294:	4b0b      	ldr	r3, [pc, #44]	; (80102c4 <ip4_input+0x240>)
 8010296:	2200      	movs	r2, #0
 8010298:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801029a:	4b0a      	ldr	r3, [pc, #40]	; (80102c4 <ip4_input+0x240>)
 801029c:	2200      	movs	r2, #0
 801029e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80102a0:	4b08      	ldr	r3, [pc, #32]	; (80102c4 <ip4_input+0x240>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80102a6:	4b07      	ldr	r3, [pc, #28]	; (80102c4 <ip4_input+0x240>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80102ac:	4b05      	ldr	r3, [pc, #20]	; (80102c4 <ip4_input+0x240>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80102b2:	4b04      	ldr	r3, [pc, #16]	; (80102c4 <ip4_input+0x240>)
 80102b4:	2200      	movs	r2, #0
 80102b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80102b8:	2300      	movs	r3, #0
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3718      	adds	r7, #24
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	20003434 	.word	0x20003434
 80102c8:	20008b28 	.word	0x20008b28

080102cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b08a      	sub	sp, #40	; 0x28
 80102d0:	af04      	add	r7, sp, #16
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	607a      	str	r2, [r7, #4]
 80102d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d009      	beq.n	80102f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d003      	beq.n	80102f2 <ip4_output_if+0x26>
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d102      	bne.n	80102f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80102f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f4:	3304      	adds	r3, #4
 80102f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80102f8:	78fa      	ldrb	r2, [r7, #3]
 80102fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fc:	9302      	str	r3, [sp, #8]
 80102fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010302:	9301      	str	r3, [sp, #4]
 8010304:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010308:	9300      	str	r3, [sp, #0]
 801030a:	4613      	mov	r3, r2
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	6979      	ldr	r1, [r7, #20]
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f000 f805 	bl	8010320 <ip4_output_if_src>
 8010316:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010318:	4618      	mov	r0, r3
 801031a:	3718      	adds	r7, #24
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b088      	sub	sp, #32
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	607a      	str	r2, [r7, #4]
 801032c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	7b9b      	ldrb	r3, [r3, #14]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d006      	beq.n	8010344 <ip4_output_if_src+0x24>
 8010336:	4b4b      	ldr	r3, [pc, #300]	; (8010464 <ip4_output_if_src+0x144>)
 8010338:	f44f 7255 	mov.w	r2, #852	; 0x354
 801033c:	494a      	ldr	r1, [pc, #296]	; (8010468 <ip4_output_if_src+0x148>)
 801033e:	484b      	ldr	r0, [pc, #300]	; (801046c <ip4_output_if_src+0x14c>)
 8010340:	f001 f8e0 	bl	8011504 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d060      	beq.n	801040c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801034a:	2314      	movs	r3, #20
 801034c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801034e:	2114      	movs	r1, #20
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f7f7 f9d9 	bl	8007708 <pbuf_add_header>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d002      	beq.n	8010362 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801035c:	f06f 0301 	mvn.w	r3, #1
 8010360:	e07c      	b.n	801045c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	895b      	ldrh	r3, [r3, #10]
 801036c:	2b13      	cmp	r3, #19
 801036e:	d806      	bhi.n	801037e <ip4_output_if_src+0x5e>
 8010370:	4b3c      	ldr	r3, [pc, #240]	; (8010464 <ip4_output_if_src+0x144>)
 8010372:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010376:	493e      	ldr	r1, [pc, #248]	; (8010470 <ip4_output_if_src+0x150>)
 8010378:	483c      	ldr	r0, [pc, #240]	; (801046c <ip4_output_if_src+0x14c>)
 801037a:	f001 f8c3 	bl	8011504 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	78fa      	ldrb	r2, [r7, #3]
 8010382:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801038a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010394:	8b7b      	ldrh	r3, [r7, #26]
 8010396:	089b      	lsrs	r3, r3, #2
 8010398:	b29b      	uxth	r3, r3
 801039a:	b2db      	uxtb	r3, r3
 801039c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103a0:	b2da      	uxtb	r2, r3
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80103ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	891b      	ldrh	r3, [r3, #8]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7f5 ff8a 	bl	80062cc <lwip_htons>
 80103b8:	4603      	mov	r3, r0
 80103ba:	461a      	mov	r2, r3
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	2200      	movs	r2, #0
 80103c4:	719a      	strb	r2, [r3, #6]
 80103c6:	2200      	movs	r2, #0
 80103c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80103ca:	4b2a      	ldr	r3, [pc, #168]	; (8010474 <ip4_output_if_src+0x154>)
 80103cc:	881b      	ldrh	r3, [r3, #0]
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7f5 ff7c 	bl	80062cc <lwip_htons>
 80103d4:	4603      	mov	r3, r0
 80103d6:	461a      	mov	r2, r3
 80103d8:	69fb      	ldr	r3, [r7, #28]
 80103da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80103dc:	4b25      	ldr	r3, [pc, #148]	; (8010474 <ip4_output_if_src+0x154>)
 80103de:	881b      	ldrh	r3, [r3, #0]
 80103e0:	3301      	adds	r3, #1
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	4b23      	ldr	r3, [pc, #140]	; (8010474 <ip4_output_if_src+0x154>)
 80103e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d104      	bne.n	80103f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80103ee:	4b22      	ldr	r3, [pc, #136]	; (8010478 <ip4_output_if_src+0x158>)
 80103f0:	681a      	ldr	r2, [r3, #0]
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	60da      	str	r2, [r3, #12]
 80103f6:	e003      	b.n	8010400 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	69fb      	ldr	r3, [r7, #28]
 80103fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	2200      	movs	r2, #0
 8010404:	729a      	strb	r2, [r3, #10]
 8010406:	2200      	movs	r2, #0
 8010408:	72da      	strb	r2, [r3, #11]
 801040a:	e00f      	b.n	801042c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	895b      	ldrh	r3, [r3, #10]
 8010410:	2b13      	cmp	r3, #19
 8010412:	d802      	bhi.n	801041a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010414:	f06f 0301 	mvn.w	r3, #1
 8010418:	e020      	b.n	801045c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	691b      	ldr	r3, [r3, #16]
 8010424:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8010426:	f107 0314 	add.w	r3, r7, #20
 801042a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801042c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010430:	2b00      	cmp	r3, #0
 8010432:	d00c      	beq.n	801044e <ip4_output_if_src+0x12e>
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	891a      	ldrh	r2, [r3, #8]
 8010438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801043c:	429a      	cmp	r2, r3
 801043e:	d906      	bls.n	801044e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010444:	68f8      	ldr	r0, [r7, #12]
 8010446:	f000 fddf 	bl	8011008 <ip4_frag>
 801044a:	4603      	mov	r3, r0
 801044c:	e006      	b.n	801045c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801044e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010450:	695b      	ldr	r3, [r3, #20]
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	68f9      	ldr	r1, [r7, #12]
 8010456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010458:	4798      	blx	r3
 801045a:	4603      	mov	r3, r0
}
 801045c:	4618      	mov	r0, r3
 801045e:	3720      	adds	r7, #32
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}
 8010464:	080150b0 	.word	0x080150b0
 8010468:	080150e4 	.word	0x080150e4
 801046c:	080150f0 	.word	0x080150f0
 8010470:	08015118 	.word	0x08015118
 8010474:	20000232 	.word	0x20000232
 8010478:	080154e4 	.word	0x080154e4

0801047c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010490:	d002      	beq.n	8010498 <ip4_addr_isbroadcast_u32+0x1c>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d101      	bne.n	801049c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010498:	2301      	movs	r3, #1
 801049a:	e02a      	b.n	80104f2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104a2:	f003 0302 	and.w	r3, r3, #2
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	e021      	b.n	80104f2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	3304      	adds	r3, #4
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d101      	bne.n	80104be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80104ba:	2300      	movs	r3, #0
 80104bc:	e019      	b.n	80104f2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	3304      	adds	r3, #4
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	405a      	eors	r2, r3
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	3308      	adds	r3, #8
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4013      	ands	r3, r2
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d10d      	bne.n	80104f0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	3308      	adds	r3, #8
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	43da      	mvns	r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	3308      	adds	r3, #8
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d101      	bne.n	80104f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80104ec:	2301      	movs	r3, #1
 80104ee:	e000      	b.n	80104f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80104f0:	2300      	movs	r3, #0
  }
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3714      	adds	r7, #20
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr
	...

08010500 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8010508:	2210      	movs	r2, #16
 801050a:	4904      	ldr	r1, [pc, #16]	; (801051c <ip4addr_ntoa+0x1c>)
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 f807 	bl	8010520 <ip4addr_ntoa_r>
 8010512:	4603      	mov	r3, r0
}
 8010514:	4618      	mov	r0, r3
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	20000234 	.word	0x20000234

08010520 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8010520:	b480      	push	{r7}
 8010522:	b08d      	sub	sp, #52	; 0x34
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801052c:	2300      	movs	r3, #0
 801052e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801053a:	f107 0318 	add.w	r3, r7, #24
 801053e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8010540:	2300      	movs	r3, #0
 8010542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010546:	e059      	b.n	80105fc <ip4addr_ntoa_r+0xdc>
    i = 0;
 8010548:	2300      	movs	r3, #0
 801054a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801054e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010550:	781a      	ldrb	r2, [r3, #0]
 8010552:	4b33      	ldr	r3, [pc, #204]	; (8010620 <ip4addr_ntoa_r+0x100>)
 8010554:	fba3 1302 	umull	r1, r3, r3, r2
 8010558:	08d9      	lsrs	r1, r3, #3
 801055a:	460b      	mov	r3, r1
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	440b      	add	r3, r1
 8010560:	005b      	lsls	r3, r3, #1
 8010562:	1ad3      	subs	r3, r2, r3
 8010564:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8010566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	4a2d      	ldr	r2, [pc, #180]	; (8010620 <ip4addr_ntoa_r+0x100>)
 801056c:	fba2 2303 	umull	r2, r3, r2, r3
 8010570:	08db      	lsrs	r3, r3, #3
 8010572:	b2da      	uxtb	r2, r3
 8010574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010576:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8010578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801057c:	1c5a      	adds	r2, r3, #1
 801057e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8010582:	4619      	mov	r1, r3
 8010584:	7ffb      	ldrb	r3, [r7, #31]
 8010586:	3330      	adds	r3, #48	; 0x30
 8010588:	b2da      	uxtb	r2, r3
 801058a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801058e:	440b      	add	r3, r1
 8010590:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8010594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1d8      	bne.n	801054e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801059c:	e012      	b.n	80105c4 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801059e:	6a3b      	ldr	r3, [r7, #32]
 80105a0:	1c5a      	adds	r2, r3, #1
 80105a2:	623a      	str	r2, [r7, #32]
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	dc01      	bgt.n	80105ae <ip4addr_ntoa_r+0x8e>
        return NULL;
 80105aa:	2300      	movs	r3, #0
 80105ac:	e031      	b.n	8010612 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 80105ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80105b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b4:	1c59      	adds	r1, r3, #1
 80105b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80105b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80105bc:	440a      	add	r2, r1
 80105be:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80105c2:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80105c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80105c8:	1e5a      	subs	r2, r3, #1
 80105ca:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d1e5      	bne.n	801059e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80105d2:	6a3b      	ldr	r3, [r7, #32]
 80105d4:	1c5a      	adds	r2, r3, #1
 80105d6:	623a      	str	r2, [r7, #32]
 80105d8:	687a      	ldr	r2, [r7, #4]
 80105da:	429a      	cmp	r2, r3
 80105dc:	dc01      	bgt.n	80105e2 <ip4addr_ntoa_r+0xc2>
      return NULL;
 80105de:	2300      	movs	r3, #0
 80105e0:	e017      	b.n	8010612 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 80105e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e4:	1c5a      	adds	r2, r3, #1
 80105e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80105e8:	222e      	movs	r2, #46	; 0x2e
 80105ea:	701a      	strb	r2, [r3, #0]
    ap++;
 80105ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ee:	3301      	adds	r3, #1
 80105f0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80105f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105f6:	3301      	adds	r3, #1
 80105f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80105fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010600:	2b03      	cmp	r3, #3
 8010602:	d9a1      	bls.n	8010548 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8010604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010606:	3b01      	subs	r3, #1
 8010608:	62fb      	str	r3, [r7, #44]	; 0x2c
 801060a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060c:	2200      	movs	r2, #0
 801060e:	701a      	strb	r2, [r3, #0]
  return buf;
 8010610:	68bb      	ldr	r3, [r7, #8]
}
 8010612:	4618      	mov	r0, r3
 8010614:	3734      	adds	r7, #52	; 0x34
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	cccccccd 	.word	0xcccccccd

08010624 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801062a:	2300      	movs	r3, #0
 801062c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801062e:	4b12      	ldr	r3, [pc, #72]	; (8010678 <ip_reass_tmr+0x54>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010634:	e018      	b.n	8010668 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	7fdb      	ldrb	r3, [r3, #31]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00b      	beq.n	8010656 <ip_reass_tmr+0x32>
      r->timer--;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	7fdb      	ldrb	r3, [r3, #31]
 8010642:	3b01      	subs	r3, #1
 8010644:	b2da      	uxtb	r2, r3
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	60fb      	str	r3, [r7, #12]
 8010654:	e008      	b.n	8010668 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010660:	68b9      	ldr	r1, [r7, #8]
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f000 f80a 	bl	801067c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1e3      	bne.n	8010636 <ip_reass_tmr+0x12>
    }
  }
}
 801066e:	bf00      	nop
 8010670:	bf00      	nop
 8010672:	3710      	adds	r7, #16
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	20000244 	.word	0x20000244

0801067c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b088      	sub	sp, #32
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010686:	2300      	movs	r3, #0
 8010688:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801068a:	683a      	ldr	r2, [r7, #0]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	429a      	cmp	r2, r3
 8010690:	d105      	bne.n	801069e <ip_reass_free_complete_datagram+0x22>
 8010692:	4b45      	ldr	r3, [pc, #276]	; (80107a8 <ip_reass_free_complete_datagram+0x12c>)
 8010694:	22ab      	movs	r2, #171	; 0xab
 8010696:	4945      	ldr	r1, [pc, #276]	; (80107ac <ip_reass_free_complete_datagram+0x130>)
 8010698:	4845      	ldr	r0, [pc, #276]	; (80107b0 <ip_reass_free_complete_datagram+0x134>)
 801069a:	f000 ff33 	bl	8011504 <iprintf>
  if (prev != NULL) {
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00a      	beq.n	80106ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d005      	beq.n	80106ba <ip_reass_free_complete_datagram+0x3e>
 80106ae:	4b3e      	ldr	r3, [pc, #248]	; (80107a8 <ip_reass_free_complete_datagram+0x12c>)
 80106b0:	22ad      	movs	r2, #173	; 0xad
 80106b2:	4940      	ldr	r1, [pc, #256]	; (80107b4 <ip_reass_free_complete_datagram+0x138>)
 80106b4:	483e      	ldr	r0, [pc, #248]	; (80107b0 <ip_reass_free_complete_datagram+0x134>)
 80106b6:	f000 ff25 	bl	8011504 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	889b      	ldrh	r3, [r3, #4]
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d12a      	bne.n	8010722 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	6858      	ldr	r0, [r3, #4]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	3308      	adds	r3, #8
 80106e2:	2214      	movs	r2, #20
 80106e4:	4619      	mov	r1, r3
 80106e6:	f000 fedd 	bl	80114a4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80106ea:	2101      	movs	r1, #1
 80106ec:	69b8      	ldr	r0, [r7, #24]
 80106ee:	f7ff fbb5 	bl	800fe5c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80106f2:	69b8      	ldr	r0, [r7, #24]
 80106f4:	f7f7 f926 	bl	8007944 <pbuf_clen>
 80106f8:	4603      	mov	r3, r0
 80106fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80106fc:	8bfa      	ldrh	r2, [r7, #30]
 80106fe:	8a7b      	ldrh	r3, [r7, #18]
 8010700:	4413      	add	r3, r2
 8010702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010706:	db05      	blt.n	8010714 <ip_reass_free_complete_datagram+0x98>
 8010708:	4b27      	ldr	r3, [pc, #156]	; (80107a8 <ip_reass_free_complete_datagram+0x12c>)
 801070a:	22bc      	movs	r2, #188	; 0xbc
 801070c:	492a      	ldr	r1, [pc, #168]	; (80107b8 <ip_reass_free_complete_datagram+0x13c>)
 801070e:	4828      	ldr	r0, [pc, #160]	; (80107b0 <ip_reass_free_complete_datagram+0x134>)
 8010710:	f000 fef8 	bl	8011504 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010714:	8bfa      	ldrh	r2, [r7, #30]
 8010716:	8a7b      	ldrh	r3, [r7, #18]
 8010718:	4413      	add	r3, r2
 801071a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801071c:	69b8      	ldr	r0, [r7, #24]
 801071e:	f7f7 f889 	bl	8007834 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010728:	e01f      	b.n	801076a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f7f7 f902 	bl	8007944 <pbuf_clen>
 8010740:	4603      	mov	r3, r0
 8010742:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010744:	8bfa      	ldrh	r2, [r7, #30]
 8010746:	8a7b      	ldrh	r3, [r7, #18]
 8010748:	4413      	add	r3, r2
 801074a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801074e:	db05      	blt.n	801075c <ip_reass_free_complete_datagram+0xe0>
 8010750:	4b15      	ldr	r3, [pc, #84]	; (80107a8 <ip_reass_free_complete_datagram+0x12c>)
 8010752:	22cc      	movs	r2, #204	; 0xcc
 8010754:	4918      	ldr	r1, [pc, #96]	; (80107b8 <ip_reass_free_complete_datagram+0x13c>)
 8010756:	4816      	ldr	r0, [pc, #88]	; (80107b0 <ip_reass_free_complete_datagram+0x134>)
 8010758:	f000 fed4 	bl	8011504 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801075c:	8bfa      	ldrh	r2, [r7, #30]
 801075e:	8a7b      	ldrh	r3, [r7, #18]
 8010760:	4413      	add	r3, r2
 8010762:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f7f7 f865 	bl	8007834 <pbuf_free>
  while (p != NULL) {
 801076a:	69bb      	ldr	r3, [r7, #24]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1dc      	bne.n	801072a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010770:	6839      	ldr	r1, [r7, #0]
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f000 f8c2 	bl	80108fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010778:	4b10      	ldr	r3, [pc, #64]	; (80107bc <ip_reass_free_complete_datagram+0x140>)
 801077a:	881b      	ldrh	r3, [r3, #0]
 801077c:	8bfa      	ldrh	r2, [r7, #30]
 801077e:	429a      	cmp	r2, r3
 8010780:	d905      	bls.n	801078e <ip_reass_free_complete_datagram+0x112>
 8010782:	4b09      	ldr	r3, [pc, #36]	; (80107a8 <ip_reass_free_complete_datagram+0x12c>)
 8010784:	22d2      	movs	r2, #210	; 0xd2
 8010786:	490e      	ldr	r1, [pc, #56]	; (80107c0 <ip_reass_free_complete_datagram+0x144>)
 8010788:	4809      	ldr	r0, [pc, #36]	; (80107b0 <ip_reass_free_complete_datagram+0x134>)
 801078a:	f000 febb 	bl	8011504 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801078e:	4b0b      	ldr	r3, [pc, #44]	; (80107bc <ip_reass_free_complete_datagram+0x140>)
 8010790:	881a      	ldrh	r2, [r3, #0]
 8010792:	8bfb      	ldrh	r3, [r7, #30]
 8010794:	1ad3      	subs	r3, r2, r3
 8010796:	b29a      	uxth	r2, r3
 8010798:	4b08      	ldr	r3, [pc, #32]	; (80107bc <ip_reass_free_complete_datagram+0x140>)
 801079a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801079c:	8bfb      	ldrh	r3, [r7, #30]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3720      	adds	r7, #32
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	08015148 	.word	0x08015148
 80107ac:	08015184 	.word	0x08015184
 80107b0:	08015190 	.word	0x08015190
 80107b4:	080151b8 	.word	0x080151b8
 80107b8:	080151cc 	.word	0x080151cc
 80107bc:	20000248 	.word	0x20000248
 80107c0:	080151ec 	.word	0x080151ec

080107c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b08a      	sub	sp, #40	; 0x28
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80107ce:	2300      	movs	r3, #0
 80107d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80107d2:	2300      	movs	r3, #0
 80107d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80107d6:	2300      	movs	r3, #0
 80107d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80107e2:	4b28      	ldr	r3, [pc, #160]	; (8010884 <ip_reass_remove_oldest_datagram+0xc0>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80107e8:	e030      	b.n	801084c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	695a      	ldr	r2, [r3, #20]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d10c      	bne.n	8010810 <ip_reass_remove_oldest_datagram+0x4c>
 80107f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f8:	699a      	ldr	r2, [r3, #24]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	691b      	ldr	r3, [r3, #16]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d106      	bne.n	8010810 <ip_reass_remove_oldest_datagram+0x4c>
 8010802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010804:	899a      	ldrh	r2, [r3, #12]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	889b      	ldrh	r3, [r3, #4]
 801080a:	b29b      	uxth	r3, r3
 801080c:	429a      	cmp	r2, r3
 801080e:	d014      	beq.n	801083a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	3301      	adds	r3, #1
 8010814:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010816:	6a3b      	ldr	r3, [r7, #32]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d104      	bne.n	8010826 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801081e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	61bb      	str	r3, [r7, #24]
 8010824:	e009      	b.n	801083a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010828:	7fda      	ldrb	r2, [r3, #31]
 801082a:	6a3b      	ldr	r3, [r7, #32]
 801082c:	7fdb      	ldrb	r3, [r3, #31]
 801082e:	429a      	cmp	r2, r3
 8010830:	d803      	bhi.n	801083a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010834:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d001      	beq.n	8010846 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010844:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	2b00      	cmp	r3, #0
 8010850:	d1cb      	bne.n	80107ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010852:	6a3b      	ldr	r3, [r7, #32]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d008      	beq.n	801086a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010858:	69b9      	ldr	r1, [r7, #24]
 801085a:	6a38      	ldr	r0, [r7, #32]
 801085c:	f7ff ff0e 	bl	801067c <ip_reass_free_complete_datagram>
 8010860:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010862:	697a      	ldr	r2, [r7, #20]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	4413      	add	r3, r2
 8010868:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801086a:	697a      	ldr	r2, [r7, #20]
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	429a      	cmp	r2, r3
 8010870:	da02      	bge.n	8010878 <ip_reass_remove_oldest_datagram+0xb4>
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	2b01      	cmp	r3, #1
 8010876:	dcac      	bgt.n	80107d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010878:	697b      	ldr	r3, [r7, #20]
}
 801087a:	4618      	mov	r0, r3
 801087c:	3728      	adds	r7, #40	; 0x28
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	20000244 	.word	0x20000244

08010888 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010892:	2004      	movs	r0, #4
 8010894:	f7f6 f970 	bl	8006b78 <memp_malloc>
 8010898:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d110      	bne.n	80108c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80108a0:	6839      	ldr	r1, [r7, #0]
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7ff ff8e 	bl	80107c4 <ip_reass_remove_oldest_datagram>
 80108a8:	4602      	mov	r2, r0
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	4293      	cmp	r3, r2
 80108ae:	dc03      	bgt.n	80108b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80108b0:	2004      	movs	r0, #4
 80108b2:	f7f6 f961 	bl	8006b78 <memp_malloc>
 80108b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d101      	bne.n	80108c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80108be:	2300      	movs	r3, #0
 80108c0:	e016      	b.n	80108f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80108c2:	2220      	movs	r2, #32
 80108c4:	2100      	movs	r1, #0
 80108c6:	68f8      	ldr	r0, [r7, #12]
 80108c8:	f000 fe14 	bl	80114f4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	220f      	movs	r2, #15
 80108d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80108d2:	4b09      	ldr	r3, [pc, #36]	; (80108f8 <ip_reass_enqueue_new_datagram+0x70>)
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80108da:	4a07      	ldr	r2, [pc, #28]	; (80108f8 <ip_reass_enqueue_new_datagram+0x70>)
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	3308      	adds	r3, #8
 80108e4:	2214      	movs	r2, #20
 80108e6:	6879      	ldr	r1, [r7, #4]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f000 fddb 	bl	80114a4 <memcpy>
  return ipr;
 80108ee:	68fb      	ldr	r3, [r7, #12]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3710      	adds	r7, #16
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	20000244 	.word	0x20000244

080108fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
 8010904:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010906:	4b10      	ldr	r3, [pc, #64]	; (8010948 <ip_reass_dequeue_datagram+0x4c>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	687a      	ldr	r2, [r7, #4]
 801090c:	429a      	cmp	r2, r3
 801090e:	d104      	bne.n	801091a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	4a0c      	ldr	r2, [pc, #48]	; (8010948 <ip_reass_dequeue_datagram+0x4c>)
 8010916:	6013      	str	r3, [r2, #0]
 8010918:	e00d      	b.n	8010936 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d106      	bne.n	801092e <ip_reass_dequeue_datagram+0x32>
 8010920:	4b0a      	ldr	r3, [pc, #40]	; (801094c <ip_reass_dequeue_datagram+0x50>)
 8010922:	f240 1245 	movw	r2, #325	; 0x145
 8010926:	490a      	ldr	r1, [pc, #40]	; (8010950 <ip_reass_dequeue_datagram+0x54>)
 8010928:	480a      	ldr	r0, [pc, #40]	; (8010954 <ip_reass_dequeue_datagram+0x58>)
 801092a:	f000 fdeb 	bl	8011504 <iprintf>
    prev->next = ipr->next;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681a      	ldr	r2, [r3, #0]
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010936:	6879      	ldr	r1, [r7, #4]
 8010938:	2004      	movs	r0, #4
 801093a:	f7f6 f969 	bl	8006c10 <memp_free>
}
 801093e:	bf00      	nop
 8010940:	3708      	adds	r7, #8
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}
 8010946:	bf00      	nop
 8010948:	20000244 	.word	0x20000244
 801094c:	08015148 	.word	0x08015148
 8010950:	08015210 	.word	0x08015210
 8010954:	08015190 	.word	0x08015190

08010958 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b08c      	sub	sp, #48	; 0x30
 801095c:	af00      	add	r7, sp, #0
 801095e:	60f8      	str	r0, [r7, #12]
 8010960:	60b9      	str	r1, [r7, #8]
 8010962:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010964:	2300      	movs	r3, #0
 8010966:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010968:	2301      	movs	r3, #1
 801096a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010972:	69fb      	ldr	r3, [r7, #28]
 8010974:	885b      	ldrh	r3, [r3, #2]
 8010976:	b29b      	uxth	r3, r3
 8010978:	4618      	mov	r0, r3
 801097a:	f7f5 fca7 	bl	80062cc <lwip_htons>
 801097e:	4603      	mov	r3, r0
 8010980:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010982:	69fb      	ldr	r3, [r7, #28]
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	f003 030f 	and.w	r3, r3, #15
 801098a:	b2db      	uxtb	r3, r3
 801098c:	009b      	lsls	r3, r3, #2
 801098e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010990:	7e7b      	ldrb	r3, [r7, #25]
 8010992:	b29b      	uxth	r3, r3
 8010994:	8b7a      	ldrh	r2, [r7, #26]
 8010996:	429a      	cmp	r2, r3
 8010998:	d202      	bcs.n	80109a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801099a:	f04f 33ff 	mov.w	r3, #4294967295
 801099e:	e135      	b.n	8010c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80109a0:	7e7b      	ldrb	r3, [r7, #25]
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	8b7a      	ldrh	r2, [r7, #26]
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	88db      	ldrh	r3, [r3, #6]
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7f5 fc8b 	bl	80062cc <lwip_htons>
 80109b6:	4603      	mov	r3, r0
 80109b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80109bc:	b29b      	uxth	r3, r3
 80109be:	00db      	lsls	r3, r3, #3
 80109c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80109c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ca:	2200      	movs	r2, #0
 80109cc:	701a      	strb	r2, [r3, #0]
 80109ce:	2200      	movs	r2, #0
 80109d0:	705a      	strb	r2, [r3, #1]
 80109d2:	2200      	movs	r2, #0
 80109d4:	709a      	strb	r2, [r3, #2]
 80109d6:	2200      	movs	r2, #0
 80109d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80109da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109dc:	8afa      	ldrh	r2, [r7, #22]
 80109de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80109e0:	8afa      	ldrh	r2, [r7, #22]
 80109e2:	8b7b      	ldrh	r3, [r7, #26]
 80109e4:	4413      	add	r3, r2
 80109e6:	b29a      	uxth	r2, r3
 80109e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80109ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ee:	88db      	ldrh	r3, [r3, #6]
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	8afa      	ldrh	r2, [r7, #22]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d902      	bls.n	80109fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80109f8:	f04f 33ff 	mov.w	r3, #4294967295
 80109fc:	e106      	b.n	8010c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	627b      	str	r3, [r7, #36]	; 0x24
 8010a04:	e068      	b.n	8010ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a08:	685b      	ldr	r3, [r3, #4]
 8010a0a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0e:	889b      	ldrh	r3, [r3, #4]
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	889b      	ldrh	r3, [r3, #4]
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d235      	bcs.n	8010a88 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a20:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d020      	beq.n	8010a6a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2a:	889b      	ldrh	r3, [r3, #4]
 8010a2c:	b29a      	uxth	r2, r3
 8010a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a30:	88db      	ldrh	r3, [r3, #6]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d307      	bcc.n	8010a48 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3a:	88db      	ldrh	r3, [r3, #6]
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	889b      	ldrh	r3, [r3, #4]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d902      	bls.n	8010a4e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a48:	f04f 33ff 	mov.w	r3, #4294967295
 8010a4c:	e0de      	b.n	8010c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a50:	68ba      	ldr	r2, [r7, #8]
 8010a52:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a56:	88db      	ldrh	r3, [r3, #6]
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5c:	889b      	ldrh	r3, [r3, #4]
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d03d      	beq.n	8010ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010a64:	2300      	movs	r3, #0
 8010a66:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010a68:	e03a      	b.n	8010ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6c:	88db      	ldrh	r3, [r3, #6]
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	693b      	ldr	r3, [r7, #16]
 8010a72:	889b      	ldrh	r3, [r3, #4]
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d902      	bls.n	8010a80 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a7e:	e0c5      	b.n	8010c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	68ba      	ldr	r2, [r7, #8]
 8010a84:	605a      	str	r2, [r3, #4]
      break;
 8010a86:	e02b      	b.n	8010ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8a:	889b      	ldrh	r3, [r3, #4]
 8010a8c:	b29a      	uxth	r2, r3
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	889b      	ldrh	r3, [r3, #4]
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d102      	bne.n	8010a9e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a98:	f04f 33ff 	mov.w	r3, #4294967295
 8010a9c:	e0b6      	b.n	8010c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa0:	889b      	ldrh	r3, [r3, #4]
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	88db      	ldrh	r3, [r3, #6]
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d202      	bcs.n	8010ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010aae:	f04f 33ff 	mov.w	r3, #4294967295
 8010ab2:	e0ab      	b.n	8010c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d009      	beq.n	8010ace <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abc:	88db      	ldrh	r3, [r3, #6]
 8010abe:	b29a      	uxth	r2, r3
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	889b      	ldrh	r3, [r3, #4]
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d001      	beq.n	8010ace <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010aca:	2300      	movs	r3, #0
 8010acc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d193      	bne.n	8010a06 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010ade:	e000      	b.n	8010ae2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010ae0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d12d      	bne.n	8010b44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d01c      	beq.n	8010b28 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af0:	88db      	ldrh	r3, [r3, #6]
 8010af2:	b29a      	uxth	r2, r3
 8010af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af6:	889b      	ldrh	r3, [r3, #4]
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d906      	bls.n	8010b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010afe:	4b45      	ldr	r3, [pc, #276]	; (8010c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010b00:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010b04:	4944      	ldr	r1, [pc, #272]	; (8010c18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010b06:	4845      	ldr	r0, [pc, #276]	; (8010c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010b08:	f000 fcfc 	bl	8011504 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0e:	68ba      	ldr	r2, [r7, #8]
 8010b10:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b14:	88db      	ldrh	r3, [r3, #6]
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1a:	889b      	ldrh	r3, [r3, #4]
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d010      	beq.n	8010b44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010b22:	2300      	movs	r3, #0
 8010b24:	623b      	str	r3, [r7, #32]
 8010b26:	e00d      	b.n	8010b44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d006      	beq.n	8010b3e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010b30:	4b38      	ldr	r3, [pc, #224]	; (8010c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010b32:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010b36:	493a      	ldr	r1, [pc, #232]	; (8010c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010b38:	4838      	ldr	r0, [pc, #224]	; (8010c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010b3a:	f000 fce3 	bl	8011504 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	68ba      	ldr	r2, [r7, #8]
 8010b42:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d105      	bne.n	8010b56 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	7f9b      	ldrb	r3, [r3, #30]
 8010b4e:	f003 0301 	and.w	r3, r3, #1
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d059      	beq.n	8010c0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010b56:	6a3b      	ldr	r3, [r7, #32]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d04f      	beq.n	8010bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d006      	beq.n	8010b72 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	889b      	ldrh	r3, [r3, #4]
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d002      	beq.n	8010b78 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010b72:	2300      	movs	r3, #0
 8010b74:	623b      	str	r3, [r7, #32]
 8010b76:	e041      	b.n	8010bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010b82:	e012      	b.n	8010baa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8c:	88db      	ldrh	r3, [r3, #6]
 8010b8e:	b29a      	uxth	r2, r3
 8010b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b92:	889b      	ldrh	r3, [r3, #4]
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d002      	beq.n	8010ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	623b      	str	r3, [r7, #32]
            break;
 8010b9e:	e007      	b.n	8010bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1e9      	bne.n	8010b84 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010bb0:	6a3b      	ldr	r3, [r7, #32]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d022      	beq.n	8010bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d106      	bne.n	8010bcc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010bbe:	4b15      	ldr	r3, [pc, #84]	; (8010c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010bc0:	f240 12df 	movw	r2, #479	; 0x1df
 8010bc4:	4917      	ldr	r1, [pc, #92]	; (8010c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010bc6:	4815      	ldr	r0, [pc, #84]	; (8010c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010bc8:	f000 fc9c 	bl	8011504 <iprintf>
          LWIP_ASSERT("sanity check",
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	685b      	ldr	r3, [r3, #4]
 8010bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d106      	bne.n	8010be6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010bd8:	4b0e      	ldr	r3, [pc, #56]	; (8010c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010bda:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010bde:	4911      	ldr	r1, [pc, #68]	; (8010c24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010be0:	480e      	ldr	r0, [pc, #56]	; (8010c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010be2:	f000 fc8f 	bl	8011504 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d006      	beq.n	8010bfc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010bee:	4b09      	ldr	r3, [pc, #36]	; (8010c14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010bf0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010bf4:	490c      	ldr	r1, [pc, #48]	; (8010c28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010bf6:	4809      	ldr	r0, [pc, #36]	; (8010c1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010bf8:	f000 fc84 	bl	8011504 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010bfc:	6a3b      	ldr	r3, [r7, #32]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	bf14      	ite	ne
 8010c02:	2301      	movne	r3, #1
 8010c04:	2300      	moveq	r3, #0
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	e000      	b.n	8010c0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3730      	adds	r7, #48	; 0x30
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd80      	pop	{r7, pc}
 8010c14:	08015148 	.word	0x08015148
 8010c18:	0801522c 	.word	0x0801522c
 8010c1c:	08015190 	.word	0x08015190
 8010c20:	0801524c 	.word	0x0801524c
 8010c24:	08015284 	.word	0x08015284
 8010c28:	08015294 	.word	0x08015294

08010c2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b08e      	sub	sp, #56	; 0x38
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	685b      	ldr	r3, [r3, #4]
 8010c38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	f003 030f 	and.w	r3, r3, #15
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	2b14      	cmp	r3, #20
 8010c4a:	f040 8167 	bne.w	8010f1c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c50:	88db      	ldrh	r3, [r3, #6]
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7f5 fb39 	bl	80062cc <lwip_htons>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	00db      	lsls	r3, r3, #3
 8010c64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c68:	885b      	ldrh	r3, [r3, #2]
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7f5 fb2d 	bl	80062cc <lwip_htons>
 8010c72:	4603      	mov	r3, r0
 8010c74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	f003 030f 	and.w	r3, r3, #15
 8010c7e:	b2db      	uxtb	r3, r3
 8010c80:	009b      	lsls	r3, r3, #2
 8010c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	f0c0 8146 	bcc.w	8010f20 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010c9c:	1ad3      	subs	r3, r2, r3
 8010c9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7f6 fe4f 	bl	8007944 <pbuf_clen>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010caa:	4b9f      	ldr	r3, [pc, #636]	; (8010f28 <ip4_reass+0x2fc>)
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	461a      	mov	r2, r3
 8010cb0:	8c3b      	ldrh	r3, [r7, #32]
 8010cb2:	4413      	add	r3, r2
 8010cb4:	2b0a      	cmp	r3, #10
 8010cb6:	dd10      	ble.n	8010cda <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010cb8:	8c3b      	ldrh	r3, [r7, #32]
 8010cba:	4619      	mov	r1, r3
 8010cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cbe:	f7ff fd81 	bl	80107c4 <ip_reass_remove_oldest_datagram>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	f000 812d 	beq.w	8010f24 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010cca:	4b97      	ldr	r3, [pc, #604]	; (8010f28 <ip4_reass+0x2fc>)
 8010ccc:	881b      	ldrh	r3, [r3, #0]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	8c3b      	ldrh	r3, [r7, #32]
 8010cd2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010cd4:	2b0a      	cmp	r3, #10
 8010cd6:	f300 8125 	bgt.w	8010f24 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010cda:	4b94      	ldr	r3, [pc, #592]	; (8010f2c <ip4_reass+0x300>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	633b      	str	r3, [r7, #48]	; 0x30
 8010ce0:	e015      	b.n	8010d0e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce4:	695a      	ldr	r2, [r3, #20]
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	68db      	ldr	r3, [r3, #12]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d10c      	bne.n	8010d08 <ip4_reass+0xdc>
 8010cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf0:	699a      	ldr	r2, [r3, #24]
 8010cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf4:	691b      	ldr	r3, [r3, #16]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d106      	bne.n	8010d08 <ip4_reass+0xdc>
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cfc:	899a      	ldrh	r2, [r3, #12]
 8010cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d00:	889b      	ldrh	r3, [r3, #4]
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d006      	beq.n	8010d16 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1e6      	bne.n	8010ce2 <ip4_reass+0xb6>
 8010d14:	e000      	b.n	8010d18 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010d16:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d109      	bne.n	8010d32 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010d1e:	8c3b      	ldrh	r3, [r7, #32]
 8010d20:	4619      	mov	r1, r3
 8010d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d24:	f7ff fdb0 	bl	8010888 <ip_reass_enqueue_new_datagram>
 8010d28:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d11c      	bne.n	8010d6a <ip4_reass+0x13e>
      goto nullreturn;
 8010d30:	e109      	b.n	8010f46 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d34:	88db      	ldrh	r3, [r3, #6]
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7f5 fac7 	bl	80062cc <lwip_htons>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d110      	bne.n	8010d6a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4a:	89db      	ldrh	r3, [r3, #14]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7f5 fabd 	bl	80062cc <lwip_htons>
 8010d52:	4603      	mov	r3, r0
 8010d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d006      	beq.n	8010d6a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5e:	3308      	adds	r3, #8
 8010d60:	2214      	movs	r2, #20
 8010d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d64:	4618      	mov	r0, r3
 8010d66:	f000 fb9d 	bl	80114a4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6c:	88db      	ldrh	r3, [r3, #6]
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	f003 0320 	and.w	r3, r3, #32
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	bf0c      	ite	eq
 8010d78:	2301      	moveq	r3, #1
 8010d7a:	2300      	movne	r3, #0
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00e      	beq.n	8010da4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010d86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d8a:	4413      	add	r3, r2
 8010d8c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010d8e:	8b7a      	ldrh	r2, [r7, #26]
 8010d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010d92:	429a      	cmp	r2, r3
 8010d94:	f0c0 80a0 	bcc.w	8010ed8 <ip4_reass+0x2ac>
 8010d98:	8b7b      	ldrh	r3, [r7, #26]
 8010d9a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	f200 809a 	bhi.w	8010ed8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010da4:	69fa      	ldr	r2, [r7, #28]
 8010da6:	6879      	ldr	r1, [r7, #4]
 8010da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010daa:	f7ff fdd5 	bl	8010958 <ip_reass_chain_frag_into_datagram_and_validate>
 8010dae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010db6:	f000 8091 	beq.w	8010edc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010dba:	4b5b      	ldr	r3, [pc, #364]	; (8010f28 <ip4_reass+0x2fc>)
 8010dbc:	881a      	ldrh	r2, [r3, #0]
 8010dbe:	8c3b      	ldrh	r3, [r7, #32]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	4b58      	ldr	r3, [pc, #352]	; (8010f28 <ip4_reass+0x2fc>)
 8010dc6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010dc8:	69fb      	ldr	r3, [r7, #28]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00d      	beq.n	8010dea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010dce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dd2:	4413      	add	r3, r2
 8010dd4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dd8:	8a7a      	ldrh	r2, [r7, #18]
 8010dda:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dde:	7f9b      	ldrb	r3, [r3, #30]
 8010de0:	f043 0301 	orr.w	r3, r3, #1
 8010de4:	b2da      	uxtb	r2, r3
 8010de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d171      	bne.n	8010ed4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df2:	8b9b      	ldrh	r3, [r3, #28]
 8010df4:	3314      	adds	r3, #20
 8010df6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0c:	3308      	adds	r3, #8
 8010e0e:	2214      	movs	r2, #20
 8010e10:	4619      	mov	r1, r3
 8010e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e14:	f000 fb46 	bl	80114a4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010e18:	8a3b      	ldrh	r3, [r7, #16]
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7f5 fa56 	bl	80062cc <lwip_htons>
 8010e20:	4603      	mov	r3, r0
 8010e22:	461a      	mov	r2, r3
 8010e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	719a      	strb	r2, [r3, #6]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e34:	2200      	movs	r2, #0
 8010e36:	729a      	strb	r2, [r3, #10]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010e42:	e00d      	b.n	8010e60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e46:	685b      	ldr	r3, [r3, #4]
 8010e48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010e4a:	2114      	movs	r1, #20
 8010e4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e4e:	f7f6 fc6b 	bl	8007728 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010e52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7f6 fdaf 	bl	80079b8 <pbuf_cat>
      r = iprh->next_pbuf;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d1ee      	bne.n	8010e44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010e66:	4b31      	ldr	r3, [pc, #196]	; (8010f2c <ip4_reass+0x300>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d102      	bne.n	8010e76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010e70:	2300      	movs	r3, #0
 8010e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e74:	e010      	b.n	8010e98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010e76:	4b2d      	ldr	r3, [pc, #180]	; (8010f2c <ip4_reass+0x300>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e7c:	e007      	b.n	8010e8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d006      	beq.n	8010e96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d1f4      	bne.n	8010e7e <ip4_reass+0x252>
 8010e94:	e000      	b.n	8010e98 <ip4_reass+0x26c>
          break;
 8010e96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e9c:	f7ff fd2e 	bl	80108fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f7f6 fd4f 	bl	8007944 <pbuf_clen>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010eaa:	4b1f      	ldr	r3, [pc, #124]	; (8010f28 <ip4_reass+0x2fc>)
 8010eac:	881b      	ldrh	r3, [r3, #0]
 8010eae:	8c3a      	ldrh	r2, [r7, #32]
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d906      	bls.n	8010ec2 <ip4_reass+0x296>
 8010eb4:	4b1e      	ldr	r3, [pc, #120]	; (8010f30 <ip4_reass+0x304>)
 8010eb6:	f240 229b 	movw	r2, #667	; 0x29b
 8010eba:	491e      	ldr	r1, [pc, #120]	; (8010f34 <ip4_reass+0x308>)
 8010ebc:	481e      	ldr	r0, [pc, #120]	; (8010f38 <ip4_reass+0x30c>)
 8010ebe:	f000 fb21 	bl	8011504 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010ec2:	4b19      	ldr	r3, [pc, #100]	; (8010f28 <ip4_reass+0x2fc>)
 8010ec4:	881a      	ldrh	r2, [r3, #0]
 8010ec6:	8c3b      	ldrh	r3, [r7, #32]
 8010ec8:	1ad3      	subs	r3, r2, r3
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	4b16      	ldr	r3, [pc, #88]	; (8010f28 <ip4_reass+0x2fc>)
 8010ece:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	e03c      	b.n	8010f4e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	e03a      	b.n	8010f4e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8010ed8:	bf00      	nop
 8010eda:	e000      	b.n	8010ede <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010edc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d106      	bne.n	8010ef2 <ip4_reass+0x2c6>
 8010ee4:	4b12      	ldr	r3, [pc, #72]	; (8010f30 <ip4_reass+0x304>)
 8010ee6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010eea:	4914      	ldr	r1, [pc, #80]	; (8010f3c <ip4_reass+0x310>)
 8010eec:	4812      	ldr	r0, [pc, #72]	; (8010f38 <ip4_reass+0x30c>)
 8010eee:	f000 fb09 	bl	8011504 <iprintf>
  if (ipr->p == NULL) {
 8010ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d124      	bne.n	8010f44 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010efa:	4b0c      	ldr	r3, [pc, #48]	; (8010f2c <ip4_reass+0x300>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d006      	beq.n	8010f12 <ip4_reass+0x2e6>
 8010f04:	4b0a      	ldr	r3, [pc, #40]	; (8010f30 <ip4_reass+0x304>)
 8010f06:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010f0a:	490d      	ldr	r1, [pc, #52]	; (8010f40 <ip4_reass+0x314>)
 8010f0c:	480a      	ldr	r0, [pc, #40]	; (8010f38 <ip4_reass+0x30c>)
 8010f0e:	f000 faf9 	bl	8011504 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010f12:	2100      	movs	r1, #0
 8010f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f16:	f7ff fcf1 	bl	80108fc <ip_reass_dequeue_datagram>
 8010f1a:	e014      	b.n	8010f46 <ip4_reass+0x31a>
    goto nullreturn;
 8010f1c:	bf00      	nop
 8010f1e:	e012      	b.n	8010f46 <ip4_reass+0x31a>
    goto nullreturn;
 8010f20:	bf00      	nop
 8010f22:	e010      	b.n	8010f46 <ip4_reass+0x31a>
      goto nullreturn;
 8010f24:	bf00      	nop
 8010f26:	e00e      	b.n	8010f46 <ip4_reass+0x31a>
 8010f28:	20000248 	.word	0x20000248
 8010f2c:	20000244 	.word	0x20000244
 8010f30:	08015148 	.word	0x08015148
 8010f34:	080152b8 	.word	0x080152b8
 8010f38:	08015190 	.word	0x08015190
 8010f3c:	080152d4 	.word	0x080152d4
 8010f40:	080152e0 	.word	0x080152e0
  }

nullreturn:
 8010f44:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7f6 fc74 	bl	8007834 <pbuf_free>
  return NULL;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3738      	adds	r7, #56	; 0x38
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop

08010f58 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010f5c:	2005      	movs	r0, #5
 8010f5e:	f7f5 fe0b 	bl	8006b78 <memp_malloc>
 8010f62:	4603      	mov	r3, r0
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b082      	sub	sp, #8
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d106      	bne.n	8010f84 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010f76:	4b07      	ldr	r3, [pc, #28]	; (8010f94 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010f78:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010f7c:	4906      	ldr	r1, [pc, #24]	; (8010f98 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010f7e:	4807      	ldr	r0, [pc, #28]	; (8010f9c <ip_frag_free_pbuf_custom_ref+0x34>)
 8010f80:	f000 fac0 	bl	8011504 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010f84:	6879      	ldr	r1, [r7, #4]
 8010f86:	2005      	movs	r0, #5
 8010f88:	f7f5 fe42 	bl	8006c10 <memp_free>
}
 8010f8c:	bf00      	nop
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	08015148 	.word	0x08015148
 8010f98:	08015300 	.word	0x08015300
 8010f9c:	08015190 	.word	0x08015190

08010fa0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d106      	bne.n	8010fc0 <ipfrag_free_pbuf_custom+0x20>
 8010fb2:	4b11      	ldr	r3, [pc, #68]	; (8010ff8 <ipfrag_free_pbuf_custom+0x58>)
 8010fb4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010fb8:	4910      	ldr	r1, [pc, #64]	; (8010ffc <ipfrag_free_pbuf_custom+0x5c>)
 8010fba:	4811      	ldr	r0, [pc, #68]	; (8011000 <ipfrag_free_pbuf_custom+0x60>)
 8010fbc:	f000 faa2 	bl	8011504 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d006      	beq.n	8010fd6 <ipfrag_free_pbuf_custom+0x36>
 8010fc8:	4b0b      	ldr	r3, [pc, #44]	; (8010ff8 <ipfrag_free_pbuf_custom+0x58>)
 8010fca:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010fce:	490d      	ldr	r1, [pc, #52]	; (8011004 <ipfrag_free_pbuf_custom+0x64>)
 8010fd0:	480b      	ldr	r0, [pc, #44]	; (8011000 <ipfrag_free_pbuf_custom+0x60>)
 8010fd2:	f000 fa97 	bl	8011504 <iprintf>
  if (pcr->original != NULL) {
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	695b      	ldr	r3, [r3, #20]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d004      	beq.n	8010fe8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	695b      	ldr	r3, [r3, #20]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7f6 fc26 	bl	8007834 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010fe8:	68f8      	ldr	r0, [r7, #12]
 8010fea:	f7ff ffbd 	bl	8010f68 <ip_frag_free_pbuf_custom_ref>
}
 8010fee:	bf00      	nop
 8010ff0:	3710      	adds	r7, #16
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	08015148 	.word	0x08015148
 8010ffc:	0801530c 	.word	0x0801530c
 8011000:	08015190 	.word	0x08015190
 8011004:	08015318 	.word	0x08015318

08011008 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b094      	sub	sp, #80	; 0x50
 801100c:	af02      	add	r7, sp, #8
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011014:	2300      	movs	r3, #0
 8011016:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801101e:	3b14      	subs	r3, #20
 8011020:	2b00      	cmp	r3, #0
 8011022:	da00      	bge.n	8011026 <ip4_frag+0x1e>
 8011024:	3307      	adds	r3, #7
 8011026:	10db      	asrs	r3, r3, #3
 8011028:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801102a:	2314      	movs	r3, #20
 801102c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011036:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	f003 030f 	and.w	r3, r3, #15
 8011040:	b2db      	uxtb	r3, r3
 8011042:	009b      	lsls	r3, r3, #2
 8011044:	b2db      	uxtb	r3, r3
 8011046:	2b14      	cmp	r3, #20
 8011048:	d002      	beq.n	8011050 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801104a:	f06f 0305 	mvn.w	r3, #5
 801104e:	e110      	b.n	8011272 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	895b      	ldrh	r3, [r3, #10]
 8011054:	2b13      	cmp	r3, #19
 8011056:	d809      	bhi.n	801106c <ip4_frag+0x64>
 8011058:	4b88      	ldr	r3, [pc, #544]	; (801127c <ip4_frag+0x274>)
 801105a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801105e:	4988      	ldr	r1, [pc, #544]	; (8011280 <ip4_frag+0x278>)
 8011060:	4888      	ldr	r0, [pc, #544]	; (8011284 <ip4_frag+0x27c>)
 8011062:	f000 fa4f 	bl	8011504 <iprintf>
 8011066:	f06f 0305 	mvn.w	r3, #5
 801106a:	e102      	b.n	8011272 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106e:	88db      	ldrh	r3, [r3, #6]
 8011070:	b29b      	uxth	r3, r3
 8011072:	4618      	mov	r0, r3
 8011074:	f7f5 f92a 	bl	80062cc <lwip_htons>
 8011078:	4603      	mov	r3, r0
 801107a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801107c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801107e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011082:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801108c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	891b      	ldrh	r3, [r3, #8]
 8011092:	3b14      	subs	r3, #20
 8011094:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011098:	e0e1      	b.n	801125e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801109a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801109c:	00db      	lsls	r3, r3, #3
 801109e:	b29b      	uxth	r3, r3
 80110a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110a4:	4293      	cmp	r3, r2
 80110a6:	bf28      	it	cs
 80110a8:	4613      	movcs	r3, r2
 80110aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80110ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80110b0:	2114      	movs	r1, #20
 80110b2:	200e      	movs	r0, #14
 80110b4:	f7f6 f8da 	bl	800726c <pbuf_alloc>
 80110b8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80110ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110bc:	2b00      	cmp	r3, #0
 80110be:	f000 80d5 	beq.w	801126c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80110c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c4:	895b      	ldrh	r3, [r3, #10]
 80110c6:	2b13      	cmp	r3, #19
 80110c8:	d806      	bhi.n	80110d8 <ip4_frag+0xd0>
 80110ca:	4b6c      	ldr	r3, [pc, #432]	; (801127c <ip4_frag+0x274>)
 80110cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80110d0:	496d      	ldr	r1, [pc, #436]	; (8011288 <ip4_frag+0x280>)
 80110d2:	486c      	ldr	r0, [pc, #432]	; (8011284 <ip4_frag+0x27c>)
 80110d4:	f000 fa16 	bl	8011504 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80110d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	2214      	movs	r2, #20
 80110de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80110e0:	4618      	mov	r0, r3
 80110e2:	f000 f9df 	bl	80114a4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80110e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80110ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80110ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80110f2:	e064      	b.n	80111be <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	895a      	ldrh	r2, [r3, #10]
 80110f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80110fa:	1ad3      	subs	r3, r2, r3
 80110fc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	895b      	ldrh	r3, [r3, #10]
 8011102:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011104:	429a      	cmp	r2, r3
 8011106:	d906      	bls.n	8011116 <ip4_frag+0x10e>
 8011108:	4b5c      	ldr	r3, [pc, #368]	; (801127c <ip4_frag+0x274>)
 801110a:	f240 322d 	movw	r2, #813	; 0x32d
 801110e:	495f      	ldr	r1, [pc, #380]	; (801128c <ip4_frag+0x284>)
 8011110:	485c      	ldr	r0, [pc, #368]	; (8011284 <ip4_frag+0x27c>)
 8011112:	f000 f9f7 	bl	8011504 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011116:	8bfa      	ldrh	r2, [r7, #30]
 8011118:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801111c:	4293      	cmp	r3, r2
 801111e:	bf28      	it	cs
 8011120:	4613      	movcs	r3, r2
 8011122:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801112a:	2b00      	cmp	r3, #0
 801112c:	d105      	bne.n	801113a <ip4_frag+0x132>
        poff = 0;
 801112e:	2300      	movs	r3, #0
 8011130:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	60fb      	str	r3, [r7, #12]
        continue;
 8011138:	e041      	b.n	80111be <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801113a:	f7ff ff0d 	bl	8010f58 <ip_frag_alloc_pbuf_custom_ref>
 801113e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d103      	bne.n	801114e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011148:	f7f6 fb74 	bl	8007834 <pbuf_free>
        goto memerr;
 801114c:	e08f      	b.n	801126e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801114e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011154:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011156:	4413      	add	r3, r2
 8011158:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801115c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011160:	9201      	str	r2, [sp, #4]
 8011162:	9300      	str	r3, [sp, #0]
 8011164:	4603      	mov	r3, r0
 8011166:	2241      	movs	r2, #65	; 0x41
 8011168:	2000      	movs	r0, #0
 801116a:	f7f6 f9a9 	bl	80074c0 <pbuf_alloced_custom>
 801116e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d106      	bne.n	8011184 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011176:	69b8      	ldr	r0, [r7, #24]
 8011178:	f7ff fef6 	bl	8010f68 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801117c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801117e:	f7f6 fb59 	bl	8007834 <pbuf_free>
        goto memerr;
 8011182:	e074      	b.n	801126e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011184:	68f8      	ldr	r0, [r7, #12]
 8011186:	f7f6 fbf5 	bl	8007974 <pbuf_ref>
      pcr->original = p;
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	68fa      	ldr	r2, [r7, #12]
 801118e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011190:	69bb      	ldr	r3, [r7, #24]
 8011192:	4a3f      	ldr	r2, [pc, #252]	; (8011290 <ip4_frag+0x288>)
 8011194:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011196:	6979      	ldr	r1, [r7, #20]
 8011198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801119a:	f7f6 fc0d 	bl	80079b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801119e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80111a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80111a6:	1ad3      	subs	r3, r2, r3
 80111a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80111ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d004      	beq.n	80111be <ip4_frag+0x1b6>
        poff = 0;
 80111b4:	2300      	movs	r3, #0
 80111b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80111be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d196      	bne.n	80110f4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80111c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80111c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80111cc:	4413      	add	r3, r2
 80111ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80111d4:	f1a3 0213 	sub.w	r2, r3, #19
 80111d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80111dc:	429a      	cmp	r2, r3
 80111de:	bfcc      	ite	gt
 80111e0:	2301      	movgt	r3, #1
 80111e2:	2300      	movle	r3, #0
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80111e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80111ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80111f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80111f2:	6a3b      	ldr	r3, [r7, #32]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d002      	beq.n	80111fe <ip4_frag+0x1f6>
 80111f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d003      	beq.n	8011206 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80111fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011200:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011204:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011206:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011208:	4618      	mov	r0, r3
 801120a:	f7f5 f85f 	bl	80062cc <lwip_htons>
 801120e:	4603      	mov	r3, r0
 8011210:	461a      	mov	r2, r3
 8011212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011214:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011216:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011218:	3314      	adds	r3, #20
 801121a:	b29b      	uxth	r3, r3
 801121c:	4618      	mov	r0, r3
 801121e:	f7f5 f855 	bl	80062cc <lwip_htons>
 8011222:	4603      	mov	r3, r0
 8011224:	461a      	mov	r2, r3
 8011226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011228:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122c:	2200      	movs	r2, #0
 801122e:	729a      	strb	r2, [r3, #10]
 8011230:	2200      	movs	r2, #0
 8011232:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801123c:	68b8      	ldr	r0, [r7, #8]
 801123e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011242:	f7f6 faf7 	bl	8007834 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801124a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801124c:	1ad3      	subs	r3, r2, r3
 801124e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011252:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011256:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011258:	4413      	add	r3, r2
 801125a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801125e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011262:	2b00      	cmp	r3, #0
 8011264:	f47f af19 	bne.w	801109a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011268:	2300      	movs	r3, #0
 801126a:	e002      	b.n	8011272 <ip4_frag+0x26a>
      goto memerr;
 801126c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011272:	4618      	mov	r0, r3
 8011274:	3748      	adds	r7, #72	; 0x48
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}
 801127a:	bf00      	nop
 801127c:	08015148 	.word	0x08015148
 8011280:	08015324 	.word	0x08015324
 8011284:	08015190 	.word	0x08015190
 8011288:	08015340 	.word	0x08015340
 801128c:	08015360 	.word	0x08015360
 8011290:	08010fa1 	.word	0x08010fa1

08011294 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b086      	sub	sp, #24
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801129e:	230e      	movs	r3, #14
 80112a0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	895b      	ldrh	r3, [r3, #10]
 80112a6:	2b0e      	cmp	r3, #14
 80112a8:	d96e      	bls.n	8011388 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	7bdb      	ldrb	r3, [r3, #15]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d106      	bne.n	80112c0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112b8:	3301      	adds	r3, #1
 80112ba:	b2da      	uxtb	r2, r3
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	7b1a      	ldrb	r2, [r3, #12]
 80112ca:	7b5b      	ldrb	r3, [r3, #13]
 80112cc:	021b      	lsls	r3, r3, #8
 80112ce:	4313      	orrs	r3, r2
 80112d0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	f003 0301 	and.w	r3, r3, #1
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d023      	beq.n	8011326 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	2b01      	cmp	r3, #1
 80112e4:	d10f      	bne.n	8011306 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	785b      	ldrb	r3, [r3, #1]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d11b      	bne.n	8011326 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80112f2:	2b5e      	cmp	r3, #94	; 0x5e
 80112f4:	d117      	bne.n	8011326 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	7b5b      	ldrb	r3, [r3, #13]
 80112fa:	f043 0310 	orr.w	r3, r3, #16
 80112fe:	b2da      	uxtb	r2, r3
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	735a      	strb	r2, [r3, #13]
 8011304:	e00f      	b.n	8011326 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	2206      	movs	r2, #6
 801130a:	4928      	ldr	r1, [pc, #160]	; (80113ac <ethernet_input+0x118>)
 801130c:	4618      	mov	r0, r3
 801130e:	f000 f8bb 	bl	8011488 <memcmp>
 8011312:	4603      	mov	r3, r0
 8011314:	2b00      	cmp	r3, #0
 8011316:	d106      	bne.n	8011326 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	7b5b      	ldrb	r3, [r3, #13]
 801131c:	f043 0308 	orr.w	r3, r3, #8
 8011320:	b2da      	uxtb	r2, r3
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011326:	89fb      	ldrh	r3, [r7, #14]
 8011328:	2b08      	cmp	r3, #8
 801132a:	d003      	beq.n	8011334 <ethernet_input+0xa0>
 801132c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011330:	d014      	beq.n	801135c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011332:	e032      	b.n	801139a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801133a:	f003 0308 	and.w	r3, r3, #8
 801133e:	2b00      	cmp	r3, #0
 8011340:	d024      	beq.n	801138c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011342:	8afb      	ldrh	r3, [r7, #22]
 8011344:	4619      	mov	r1, r3
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f7f6 f9ee 	bl	8007728 <pbuf_remove_header>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d11e      	bne.n	8011390 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f7fe fe95 	bl	8010084 <ip4_input>
      break;
 801135a:	e013      	b.n	8011384 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011362:	f003 0308 	and.w	r3, r3, #8
 8011366:	2b00      	cmp	r3, #0
 8011368:	d014      	beq.n	8011394 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801136a:	8afb      	ldrh	r3, [r7, #22]
 801136c:	4619      	mov	r1, r3
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f7f6 f9da 	bl	8007728 <pbuf_remove_header>
 8011374:	4603      	mov	r3, r0
 8011376:	2b00      	cmp	r3, #0
 8011378:	d10e      	bne.n	8011398 <ethernet_input+0x104>
        etharp_input(p, netif);
 801137a:	6839      	ldr	r1, [r7, #0]
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f7fe f835 	bl	800f3ec <etharp_input>
      break;
 8011382:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	e00c      	b.n	80113a2 <ethernet_input+0x10e>
    goto free_and_return;
 8011388:	bf00      	nop
 801138a:	e006      	b.n	801139a <ethernet_input+0x106>
        goto free_and_return;
 801138c:	bf00      	nop
 801138e:	e004      	b.n	801139a <ethernet_input+0x106>
        goto free_and_return;
 8011390:	bf00      	nop
 8011392:	e002      	b.n	801139a <ethernet_input+0x106>
        goto free_and_return;
 8011394:	bf00      	nop
 8011396:	e000      	b.n	801139a <ethernet_input+0x106>
        goto free_and_return;
 8011398:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f7f6 fa4a 	bl	8007834 <pbuf_free>
  return ERR_OK;
 80113a0:	2300      	movs	r3, #0
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3718      	adds	r7, #24
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	080154e8 	.word	0x080154e8

080113b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	60f8      	str	r0, [r7, #12]
 80113b8:	60b9      	str	r1, [r7, #8]
 80113ba:	607a      	str	r2, [r7, #4]
 80113bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80113be:	8c3b      	ldrh	r3, [r7, #32]
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7f4 ff83 	bl	80062cc <lwip_htons>
 80113c6:	4603      	mov	r3, r0
 80113c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80113ca:	210e      	movs	r1, #14
 80113cc:	68b8      	ldr	r0, [r7, #8]
 80113ce:	f7f6 f99b 	bl	8007708 <pbuf_add_header>
 80113d2:	4603      	mov	r3, r0
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d125      	bne.n	8011424 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	8afa      	ldrh	r2, [r7, #22]
 80113e2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	2206      	movs	r2, #6
 80113e8:	6839      	ldr	r1, [r7, #0]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f000 f85a 	bl	80114a4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	3306      	adds	r3, #6
 80113f4:	2206      	movs	r2, #6
 80113f6:	6879      	ldr	r1, [r7, #4]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f000 f853 	bl	80114a4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011404:	2b06      	cmp	r3, #6
 8011406:	d006      	beq.n	8011416 <ethernet_output+0x66>
 8011408:	4b0a      	ldr	r3, [pc, #40]	; (8011434 <ethernet_output+0x84>)
 801140a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801140e:	490a      	ldr	r1, [pc, #40]	; (8011438 <ethernet_output+0x88>)
 8011410:	480a      	ldr	r0, [pc, #40]	; (801143c <ethernet_output+0x8c>)
 8011412:	f000 f877 	bl	8011504 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	699b      	ldr	r3, [r3, #24]
 801141a:	68b9      	ldr	r1, [r7, #8]
 801141c:	68f8      	ldr	r0, [r7, #12]
 801141e:	4798      	blx	r3
 8011420:	4603      	mov	r3, r0
 8011422:	e002      	b.n	801142a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011424:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011426:	f06f 0301 	mvn.w	r3, #1
}
 801142a:	4618      	mov	r0, r3
 801142c:	3718      	adds	r7, #24
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	08015370 	.word	0x08015370
 8011438:	080153a8 	.word	0x080153a8
 801143c:	080153dc 	.word	0x080153dc

08011440 <__libc_init_array>:
 8011440:	b570      	push	{r4, r5, r6, lr}
 8011442:	4d0d      	ldr	r5, [pc, #52]	; (8011478 <__libc_init_array+0x38>)
 8011444:	4c0d      	ldr	r4, [pc, #52]	; (801147c <__libc_init_array+0x3c>)
 8011446:	1b64      	subs	r4, r4, r5
 8011448:	10a4      	asrs	r4, r4, #2
 801144a:	2600      	movs	r6, #0
 801144c:	42a6      	cmp	r6, r4
 801144e:	d109      	bne.n	8011464 <__libc_init_array+0x24>
 8011450:	4d0b      	ldr	r5, [pc, #44]	; (8011480 <__libc_init_array+0x40>)
 8011452:	4c0c      	ldr	r4, [pc, #48]	; (8011484 <__libc_init_array+0x44>)
 8011454:	f001 fa36 	bl	80128c4 <_init>
 8011458:	1b64      	subs	r4, r4, r5
 801145a:	10a4      	asrs	r4, r4, #2
 801145c:	2600      	movs	r6, #0
 801145e:	42a6      	cmp	r6, r4
 8011460:	d105      	bne.n	801146e <__libc_init_array+0x2e>
 8011462:	bd70      	pop	{r4, r5, r6, pc}
 8011464:	f855 3b04 	ldr.w	r3, [r5], #4
 8011468:	4798      	blx	r3
 801146a:	3601      	adds	r6, #1
 801146c:	e7ee      	b.n	801144c <__libc_init_array+0xc>
 801146e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011472:	4798      	blx	r3
 8011474:	3601      	adds	r6, #1
 8011476:	e7f2      	b.n	801145e <__libc_init_array+0x1e>
 8011478:	0801564c 	.word	0x0801564c
 801147c:	0801564c 	.word	0x0801564c
 8011480:	0801564c 	.word	0x0801564c
 8011484:	08015650 	.word	0x08015650

08011488 <memcmp>:
 8011488:	b530      	push	{r4, r5, lr}
 801148a:	3901      	subs	r1, #1
 801148c:	2400      	movs	r4, #0
 801148e:	42a2      	cmp	r2, r4
 8011490:	d101      	bne.n	8011496 <memcmp+0xe>
 8011492:	2000      	movs	r0, #0
 8011494:	e005      	b.n	80114a2 <memcmp+0x1a>
 8011496:	5d03      	ldrb	r3, [r0, r4]
 8011498:	3401      	adds	r4, #1
 801149a:	5d0d      	ldrb	r5, [r1, r4]
 801149c:	42ab      	cmp	r3, r5
 801149e:	d0f6      	beq.n	801148e <memcmp+0x6>
 80114a0:	1b58      	subs	r0, r3, r5
 80114a2:	bd30      	pop	{r4, r5, pc}

080114a4 <memcpy>:
 80114a4:	440a      	add	r2, r1
 80114a6:	4291      	cmp	r1, r2
 80114a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80114ac:	d100      	bne.n	80114b0 <memcpy+0xc>
 80114ae:	4770      	bx	lr
 80114b0:	b510      	push	{r4, lr}
 80114b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114ba:	4291      	cmp	r1, r2
 80114bc:	d1f9      	bne.n	80114b2 <memcpy+0xe>
 80114be:	bd10      	pop	{r4, pc}

080114c0 <memmove>:
 80114c0:	4288      	cmp	r0, r1
 80114c2:	b510      	push	{r4, lr}
 80114c4:	eb01 0402 	add.w	r4, r1, r2
 80114c8:	d902      	bls.n	80114d0 <memmove+0x10>
 80114ca:	4284      	cmp	r4, r0
 80114cc:	4623      	mov	r3, r4
 80114ce:	d807      	bhi.n	80114e0 <memmove+0x20>
 80114d0:	1e43      	subs	r3, r0, #1
 80114d2:	42a1      	cmp	r1, r4
 80114d4:	d008      	beq.n	80114e8 <memmove+0x28>
 80114d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114de:	e7f8      	b.n	80114d2 <memmove+0x12>
 80114e0:	4402      	add	r2, r0
 80114e2:	4601      	mov	r1, r0
 80114e4:	428a      	cmp	r2, r1
 80114e6:	d100      	bne.n	80114ea <memmove+0x2a>
 80114e8:	bd10      	pop	{r4, pc}
 80114ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80114ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80114f2:	e7f7      	b.n	80114e4 <memmove+0x24>

080114f4 <memset>:
 80114f4:	4402      	add	r2, r0
 80114f6:	4603      	mov	r3, r0
 80114f8:	4293      	cmp	r3, r2
 80114fa:	d100      	bne.n	80114fe <memset+0xa>
 80114fc:	4770      	bx	lr
 80114fe:	f803 1b01 	strb.w	r1, [r3], #1
 8011502:	e7f9      	b.n	80114f8 <memset+0x4>

08011504 <iprintf>:
 8011504:	b40f      	push	{r0, r1, r2, r3}
 8011506:	4b0a      	ldr	r3, [pc, #40]	; (8011530 <iprintf+0x2c>)
 8011508:	b513      	push	{r0, r1, r4, lr}
 801150a:	681c      	ldr	r4, [r3, #0]
 801150c:	b124      	cbz	r4, 8011518 <iprintf+0x14>
 801150e:	69a3      	ldr	r3, [r4, #24]
 8011510:	b913      	cbnz	r3, 8011518 <iprintf+0x14>
 8011512:	4620      	mov	r0, r4
 8011514:	f000 f900 	bl	8011718 <__sinit>
 8011518:	ab05      	add	r3, sp, #20
 801151a:	9a04      	ldr	r2, [sp, #16]
 801151c:	68a1      	ldr	r1, [r4, #8]
 801151e:	9301      	str	r3, [sp, #4]
 8011520:	4620      	mov	r0, r4
 8011522:	f000 fbe3 	bl	8011cec <_vfiprintf_r>
 8011526:	b002      	add	sp, #8
 8011528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801152c:	b004      	add	sp, #16
 801152e:	4770      	bx	lr
 8011530:	20000034 	.word	0x20000034

08011534 <rand>:
 8011534:	4b17      	ldr	r3, [pc, #92]	; (8011594 <rand+0x60>)
 8011536:	b510      	push	{r4, lr}
 8011538:	681c      	ldr	r4, [r3, #0]
 801153a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801153c:	b9b3      	cbnz	r3, 801156c <rand+0x38>
 801153e:	2018      	movs	r0, #24
 8011540:	f000 f99c 	bl	801187c <malloc>
 8011544:	63a0      	str	r0, [r4, #56]	; 0x38
 8011546:	b928      	cbnz	r0, 8011554 <rand+0x20>
 8011548:	4602      	mov	r2, r0
 801154a:	4b13      	ldr	r3, [pc, #76]	; (8011598 <rand+0x64>)
 801154c:	4813      	ldr	r0, [pc, #76]	; (801159c <rand+0x68>)
 801154e:	214e      	movs	r1, #78	; 0x4e
 8011550:	f000 f86c 	bl	801162c <__assert_func>
 8011554:	4a12      	ldr	r2, [pc, #72]	; (80115a0 <rand+0x6c>)
 8011556:	4b13      	ldr	r3, [pc, #76]	; (80115a4 <rand+0x70>)
 8011558:	e9c0 2300 	strd	r2, r3, [r0]
 801155c:	4b12      	ldr	r3, [pc, #72]	; (80115a8 <rand+0x74>)
 801155e:	6083      	str	r3, [r0, #8]
 8011560:	230b      	movs	r3, #11
 8011562:	8183      	strh	r3, [r0, #12]
 8011564:	2201      	movs	r2, #1
 8011566:	2300      	movs	r3, #0
 8011568:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801156c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801156e:	480f      	ldr	r0, [pc, #60]	; (80115ac <rand+0x78>)
 8011570:	690a      	ldr	r2, [r1, #16]
 8011572:	694b      	ldr	r3, [r1, #20]
 8011574:	4c0e      	ldr	r4, [pc, #56]	; (80115b0 <rand+0x7c>)
 8011576:	4350      	muls	r0, r2
 8011578:	fb04 0003 	mla	r0, r4, r3, r0
 801157c:	fba2 3404 	umull	r3, r4, r2, r4
 8011580:	1c5a      	adds	r2, r3, #1
 8011582:	4404      	add	r4, r0
 8011584:	f144 0000 	adc.w	r0, r4, #0
 8011588:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801158c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011590:	bd10      	pop	{r4, pc}
 8011592:	bf00      	nop
 8011594:	20000034 	.word	0x20000034
 8011598:	080154fc 	.word	0x080154fc
 801159c:	08015513 	.word	0x08015513
 80115a0:	abcd330e 	.word	0xabcd330e
 80115a4:	e66d1234 	.word	0xe66d1234
 80115a8:	0005deec 	.word	0x0005deec
 80115ac:	5851f42d 	.word	0x5851f42d
 80115b0:	4c957f2d 	.word	0x4c957f2d

080115b4 <siprintf>:
 80115b4:	b40e      	push	{r1, r2, r3}
 80115b6:	b500      	push	{lr}
 80115b8:	b09c      	sub	sp, #112	; 0x70
 80115ba:	ab1d      	add	r3, sp, #116	; 0x74
 80115bc:	9002      	str	r0, [sp, #8]
 80115be:	9006      	str	r0, [sp, #24]
 80115c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80115c4:	4809      	ldr	r0, [pc, #36]	; (80115ec <siprintf+0x38>)
 80115c6:	9107      	str	r1, [sp, #28]
 80115c8:	9104      	str	r1, [sp, #16]
 80115ca:	4909      	ldr	r1, [pc, #36]	; (80115f0 <siprintf+0x3c>)
 80115cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80115d0:	9105      	str	r1, [sp, #20]
 80115d2:	6800      	ldr	r0, [r0, #0]
 80115d4:	9301      	str	r3, [sp, #4]
 80115d6:	a902      	add	r1, sp, #8
 80115d8:	f000 fa5e 	bl	8011a98 <_svfiprintf_r>
 80115dc:	9b02      	ldr	r3, [sp, #8]
 80115de:	2200      	movs	r2, #0
 80115e0:	701a      	strb	r2, [r3, #0]
 80115e2:	b01c      	add	sp, #112	; 0x70
 80115e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80115e8:	b003      	add	sp, #12
 80115ea:	4770      	bx	lr
 80115ec:	20000034 	.word	0x20000034
 80115f0:	ffff0208 	.word	0xffff0208

080115f4 <strcpy>:
 80115f4:	4603      	mov	r3, r0
 80115f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115fa:	f803 2b01 	strb.w	r2, [r3], #1
 80115fe:	2a00      	cmp	r2, #0
 8011600:	d1f9      	bne.n	80115f6 <strcpy+0x2>
 8011602:	4770      	bx	lr

08011604 <strncpy>:
 8011604:	b510      	push	{r4, lr}
 8011606:	3901      	subs	r1, #1
 8011608:	4603      	mov	r3, r0
 801160a:	b132      	cbz	r2, 801161a <strncpy+0x16>
 801160c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011610:	f803 4b01 	strb.w	r4, [r3], #1
 8011614:	3a01      	subs	r2, #1
 8011616:	2c00      	cmp	r4, #0
 8011618:	d1f7      	bne.n	801160a <strncpy+0x6>
 801161a:	441a      	add	r2, r3
 801161c:	2100      	movs	r1, #0
 801161e:	4293      	cmp	r3, r2
 8011620:	d100      	bne.n	8011624 <strncpy+0x20>
 8011622:	bd10      	pop	{r4, pc}
 8011624:	f803 1b01 	strb.w	r1, [r3], #1
 8011628:	e7f9      	b.n	801161e <strncpy+0x1a>
	...

0801162c <__assert_func>:
 801162c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801162e:	4614      	mov	r4, r2
 8011630:	461a      	mov	r2, r3
 8011632:	4b09      	ldr	r3, [pc, #36]	; (8011658 <__assert_func+0x2c>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	4605      	mov	r5, r0
 8011638:	68d8      	ldr	r0, [r3, #12]
 801163a:	b14c      	cbz	r4, 8011650 <__assert_func+0x24>
 801163c:	4b07      	ldr	r3, [pc, #28]	; (801165c <__assert_func+0x30>)
 801163e:	9100      	str	r1, [sp, #0]
 8011640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011644:	4906      	ldr	r1, [pc, #24]	; (8011660 <__assert_func+0x34>)
 8011646:	462b      	mov	r3, r5
 8011648:	f000 f8e4 	bl	8011814 <fiprintf>
 801164c:	f000 ff38 	bl	80124c0 <abort>
 8011650:	4b04      	ldr	r3, [pc, #16]	; (8011664 <__assert_func+0x38>)
 8011652:	461c      	mov	r4, r3
 8011654:	e7f3      	b.n	801163e <__assert_func+0x12>
 8011656:	bf00      	nop
 8011658:	20000034 	.word	0x20000034
 801165c:	08015572 	.word	0x08015572
 8011660:	0801557f 	.word	0x0801557f
 8011664:	080155ad 	.word	0x080155ad

08011668 <std>:
 8011668:	2300      	movs	r3, #0
 801166a:	b510      	push	{r4, lr}
 801166c:	4604      	mov	r4, r0
 801166e:	e9c0 3300 	strd	r3, r3, [r0]
 8011672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011676:	6083      	str	r3, [r0, #8]
 8011678:	8181      	strh	r1, [r0, #12]
 801167a:	6643      	str	r3, [r0, #100]	; 0x64
 801167c:	81c2      	strh	r2, [r0, #14]
 801167e:	6183      	str	r3, [r0, #24]
 8011680:	4619      	mov	r1, r3
 8011682:	2208      	movs	r2, #8
 8011684:	305c      	adds	r0, #92	; 0x5c
 8011686:	f7ff ff35 	bl	80114f4 <memset>
 801168a:	4b05      	ldr	r3, [pc, #20]	; (80116a0 <std+0x38>)
 801168c:	6263      	str	r3, [r4, #36]	; 0x24
 801168e:	4b05      	ldr	r3, [pc, #20]	; (80116a4 <std+0x3c>)
 8011690:	62a3      	str	r3, [r4, #40]	; 0x28
 8011692:	4b05      	ldr	r3, [pc, #20]	; (80116a8 <std+0x40>)
 8011694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011696:	4b05      	ldr	r3, [pc, #20]	; (80116ac <std+0x44>)
 8011698:	6224      	str	r4, [r4, #32]
 801169a:	6323      	str	r3, [r4, #48]	; 0x30
 801169c:	bd10      	pop	{r4, pc}
 801169e:	bf00      	nop
 80116a0:	08012295 	.word	0x08012295
 80116a4:	080122b7 	.word	0x080122b7
 80116a8:	080122ef 	.word	0x080122ef
 80116ac:	08012313 	.word	0x08012313

080116b0 <_cleanup_r>:
 80116b0:	4901      	ldr	r1, [pc, #4]	; (80116b8 <_cleanup_r+0x8>)
 80116b2:	f000 b8c1 	b.w	8011838 <_fwalk_reent>
 80116b6:	bf00      	nop
 80116b8:	080125fd 	.word	0x080125fd

080116bc <__sfmoreglue>:
 80116bc:	b570      	push	{r4, r5, r6, lr}
 80116be:	1e4a      	subs	r2, r1, #1
 80116c0:	2568      	movs	r5, #104	; 0x68
 80116c2:	4355      	muls	r5, r2
 80116c4:	460e      	mov	r6, r1
 80116c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80116ca:	f000 f92f 	bl	801192c <_malloc_r>
 80116ce:	4604      	mov	r4, r0
 80116d0:	b140      	cbz	r0, 80116e4 <__sfmoreglue+0x28>
 80116d2:	2100      	movs	r1, #0
 80116d4:	e9c0 1600 	strd	r1, r6, [r0]
 80116d8:	300c      	adds	r0, #12
 80116da:	60a0      	str	r0, [r4, #8]
 80116dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80116e0:	f7ff ff08 	bl	80114f4 <memset>
 80116e4:	4620      	mov	r0, r4
 80116e6:	bd70      	pop	{r4, r5, r6, pc}

080116e8 <__sfp_lock_acquire>:
 80116e8:	4801      	ldr	r0, [pc, #4]	; (80116f0 <__sfp_lock_acquire+0x8>)
 80116ea:	f000 b8c5 	b.w	8011878 <__retarget_lock_acquire_recursive>
 80116ee:	bf00      	nop
 80116f0:	20008b60 	.word	0x20008b60

080116f4 <__sfp_lock_release>:
 80116f4:	4801      	ldr	r0, [pc, #4]	; (80116fc <__sfp_lock_release+0x8>)
 80116f6:	f000 b8c0 	b.w	801187a <__retarget_lock_release_recursive>
 80116fa:	bf00      	nop
 80116fc:	20008b60 	.word	0x20008b60

08011700 <__sinit_lock_acquire>:
 8011700:	4801      	ldr	r0, [pc, #4]	; (8011708 <__sinit_lock_acquire+0x8>)
 8011702:	f000 b8b9 	b.w	8011878 <__retarget_lock_acquire_recursive>
 8011706:	bf00      	nop
 8011708:	20008b5b 	.word	0x20008b5b

0801170c <__sinit_lock_release>:
 801170c:	4801      	ldr	r0, [pc, #4]	; (8011714 <__sinit_lock_release+0x8>)
 801170e:	f000 b8b4 	b.w	801187a <__retarget_lock_release_recursive>
 8011712:	bf00      	nop
 8011714:	20008b5b 	.word	0x20008b5b

08011718 <__sinit>:
 8011718:	b510      	push	{r4, lr}
 801171a:	4604      	mov	r4, r0
 801171c:	f7ff fff0 	bl	8011700 <__sinit_lock_acquire>
 8011720:	69a3      	ldr	r3, [r4, #24]
 8011722:	b11b      	cbz	r3, 801172c <__sinit+0x14>
 8011724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011728:	f7ff bff0 	b.w	801170c <__sinit_lock_release>
 801172c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011730:	6523      	str	r3, [r4, #80]	; 0x50
 8011732:	4b13      	ldr	r3, [pc, #76]	; (8011780 <__sinit+0x68>)
 8011734:	4a13      	ldr	r2, [pc, #76]	; (8011784 <__sinit+0x6c>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	62a2      	str	r2, [r4, #40]	; 0x28
 801173a:	42a3      	cmp	r3, r4
 801173c:	bf04      	itt	eq
 801173e:	2301      	moveq	r3, #1
 8011740:	61a3      	streq	r3, [r4, #24]
 8011742:	4620      	mov	r0, r4
 8011744:	f000 f820 	bl	8011788 <__sfp>
 8011748:	6060      	str	r0, [r4, #4]
 801174a:	4620      	mov	r0, r4
 801174c:	f000 f81c 	bl	8011788 <__sfp>
 8011750:	60a0      	str	r0, [r4, #8]
 8011752:	4620      	mov	r0, r4
 8011754:	f000 f818 	bl	8011788 <__sfp>
 8011758:	2200      	movs	r2, #0
 801175a:	60e0      	str	r0, [r4, #12]
 801175c:	2104      	movs	r1, #4
 801175e:	6860      	ldr	r0, [r4, #4]
 8011760:	f7ff ff82 	bl	8011668 <std>
 8011764:	68a0      	ldr	r0, [r4, #8]
 8011766:	2201      	movs	r2, #1
 8011768:	2109      	movs	r1, #9
 801176a:	f7ff ff7d 	bl	8011668 <std>
 801176e:	68e0      	ldr	r0, [r4, #12]
 8011770:	2202      	movs	r2, #2
 8011772:	2112      	movs	r1, #18
 8011774:	f7ff ff78 	bl	8011668 <std>
 8011778:	2301      	movs	r3, #1
 801177a:	61a3      	str	r3, [r4, #24]
 801177c:	e7d2      	b.n	8011724 <__sinit+0xc>
 801177e:	bf00      	nop
 8011780:	080154f8 	.word	0x080154f8
 8011784:	080116b1 	.word	0x080116b1

08011788 <__sfp>:
 8011788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801178a:	4607      	mov	r7, r0
 801178c:	f7ff ffac 	bl	80116e8 <__sfp_lock_acquire>
 8011790:	4b1e      	ldr	r3, [pc, #120]	; (801180c <__sfp+0x84>)
 8011792:	681e      	ldr	r6, [r3, #0]
 8011794:	69b3      	ldr	r3, [r6, #24]
 8011796:	b913      	cbnz	r3, 801179e <__sfp+0x16>
 8011798:	4630      	mov	r0, r6
 801179a:	f7ff ffbd 	bl	8011718 <__sinit>
 801179e:	3648      	adds	r6, #72	; 0x48
 80117a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80117a4:	3b01      	subs	r3, #1
 80117a6:	d503      	bpl.n	80117b0 <__sfp+0x28>
 80117a8:	6833      	ldr	r3, [r6, #0]
 80117aa:	b30b      	cbz	r3, 80117f0 <__sfp+0x68>
 80117ac:	6836      	ldr	r6, [r6, #0]
 80117ae:	e7f7      	b.n	80117a0 <__sfp+0x18>
 80117b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80117b4:	b9d5      	cbnz	r5, 80117ec <__sfp+0x64>
 80117b6:	4b16      	ldr	r3, [pc, #88]	; (8011810 <__sfp+0x88>)
 80117b8:	60e3      	str	r3, [r4, #12]
 80117ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80117be:	6665      	str	r5, [r4, #100]	; 0x64
 80117c0:	f000 f859 	bl	8011876 <__retarget_lock_init_recursive>
 80117c4:	f7ff ff96 	bl	80116f4 <__sfp_lock_release>
 80117c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80117cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80117d0:	6025      	str	r5, [r4, #0]
 80117d2:	61a5      	str	r5, [r4, #24]
 80117d4:	2208      	movs	r2, #8
 80117d6:	4629      	mov	r1, r5
 80117d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80117dc:	f7ff fe8a 	bl	80114f4 <memset>
 80117e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80117e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80117e8:	4620      	mov	r0, r4
 80117ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ec:	3468      	adds	r4, #104	; 0x68
 80117ee:	e7d9      	b.n	80117a4 <__sfp+0x1c>
 80117f0:	2104      	movs	r1, #4
 80117f2:	4638      	mov	r0, r7
 80117f4:	f7ff ff62 	bl	80116bc <__sfmoreglue>
 80117f8:	4604      	mov	r4, r0
 80117fa:	6030      	str	r0, [r6, #0]
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d1d5      	bne.n	80117ac <__sfp+0x24>
 8011800:	f7ff ff78 	bl	80116f4 <__sfp_lock_release>
 8011804:	230c      	movs	r3, #12
 8011806:	603b      	str	r3, [r7, #0]
 8011808:	e7ee      	b.n	80117e8 <__sfp+0x60>
 801180a:	bf00      	nop
 801180c:	080154f8 	.word	0x080154f8
 8011810:	ffff0001 	.word	0xffff0001

08011814 <fiprintf>:
 8011814:	b40e      	push	{r1, r2, r3}
 8011816:	b503      	push	{r0, r1, lr}
 8011818:	4601      	mov	r1, r0
 801181a:	ab03      	add	r3, sp, #12
 801181c:	4805      	ldr	r0, [pc, #20]	; (8011834 <fiprintf+0x20>)
 801181e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011822:	6800      	ldr	r0, [r0, #0]
 8011824:	9301      	str	r3, [sp, #4]
 8011826:	f000 fa61 	bl	8011cec <_vfiprintf_r>
 801182a:	b002      	add	sp, #8
 801182c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011830:	b003      	add	sp, #12
 8011832:	4770      	bx	lr
 8011834:	20000034 	.word	0x20000034

08011838 <_fwalk_reent>:
 8011838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801183c:	4606      	mov	r6, r0
 801183e:	4688      	mov	r8, r1
 8011840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011844:	2700      	movs	r7, #0
 8011846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801184a:	f1b9 0901 	subs.w	r9, r9, #1
 801184e:	d505      	bpl.n	801185c <_fwalk_reent+0x24>
 8011850:	6824      	ldr	r4, [r4, #0]
 8011852:	2c00      	cmp	r4, #0
 8011854:	d1f7      	bne.n	8011846 <_fwalk_reent+0xe>
 8011856:	4638      	mov	r0, r7
 8011858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801185c:	89ab      	ldrh	r3, [r5, #12]
 801185e:	2b01      	cmp	r3, #1
 8011860:	d907      	bls.n	8011872 <_fwalk_reent+0x3a>
 8011862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011866:	3301      	adds	r3, #1
 8011868:	d003      	beq.n	8011872 <_fwalk_reent+0x3a>
 801186a:	4629      	mov	r1, r5
 801186c:	4630      	mov	r0, r6
 801186e:	47c0      	blx	r8
 8011870:	4307      	orrs	r7, r0
 8011872:	3568      	adds	r5, #104	; 0x68
 8011874:	e7e9      	b.n	801184a <_fwalk_reent+0x12>

08011876 <__retarget_lock_init_recursive>:
 8011876:	4770      	bx	lr

08011878 <__retarget_lock_acquire_recursive>:
 8011878:	4770      	bx	lr

0801187a <__retarget_lock_release_recursive>:
 801187a:	4770      	bx	lr

0801187c <malloc>:
 801187c:	4b02      	ldr	r3, [pc, #8]	; (8011888 <malloc+0xc>)
 801187e:	4601      	mov	r1, r0
 8011880:	6818      	ldr	r0, [r3, #0]
 8011882:	f000 b853 	b.w	801192c <_malloc_r>
 8011886:	bf00      	nop
 8011888:	20000034 	.word	0x20000034

0801188c <_free_r>:
 801188c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801188e:	2900      	cmp	r1, #0
 8011890:	d048      	beq.n	8011924 <_free_r+0x98>
 8011892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011896:	9001      	str	r0, [sp, #4]
 8011898:	2b00      	cmp	r3, #0
 801189a:	f1a1 0404 	sub.w	r4, r1, #4
 801189e:	bfb8      	it	lt
 80118a0:	18e4      	addlt	r4, r4, r3
 80118a2:	f000 ff5d 	bl	8012760 <__malloc_lock>
 80118a6:	4a20      	ldr	r2, [pc, #128]	; (8011928 <_free_r+0x9c>)
 80118a8:	9801      	ldr	r0, [sp, #4]
 80118aa:	6813      	ldr	r3, [r2, #0]
 80118ac:	4615      	mov	r5, r2
 80118ae:	b933      	cbnz	r3, 80118be <_free_r+0x32>
 80118b0:	6063      	str	r3, [r4, #4]
 80118b2:	6014      	str	r4, [r2, #0]
 80118b4:	b003      	add	sp, #12
 80118b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118ba:	f000 bf57 	b.w	801276c <__malloc_unlock>
 80118be:	42a3      	cmp	r3, r4
 80118c0:	d90b      	bls.n	80118da <_free_r+0x4e>
 80118c2:	6821      	ldr	r1, [r4, #0]
 80118c4:	1862      	adds	r2, r4, r1
 80118c6:	4293      	cmp	r3, r2
 80118c8:	bf04      	itt	eq
 80118ca:	681a      	ldreq	r2, [r3, #0]
 80118cc:	685b      	ldreq	r3, [r3, #4]
 80118ce:	6063      	str	r3, [r4, #4]
 80118d0:	bf04      	itt	eq
 80118d2:	1852      	addeq	r2, r2, r1
 80118d4:	6022      	streq	r2, [r4, #0]
 80118d6:	602c      	str	r4, [r5, #0]
 80118d8:	e7ec      	b.n	80118b4 <_free_r+0x28>
 80118da:	461a      	mov	r2, r3
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	b10b      	cbz	r3, 80118e4 <_free_r+0x58>
 80118e0:	42a3      	cmp	r3, r4
 80118e2:	d9fa      	bls.n	80118da <_free_r+0x4e>
 80118e4:	6811      	ldr	r1, [r2, #0]
 80118e6:	1855      	adds	r5, r2, r1
 80118e8:	42a5      	cmp	r5, r4
 80118ea:	d10b      	bne.n	8011904 <_free_r+0x78>
 80118ec:	6824      	ldr	r4, [r4, #0]
 80118ee:	4421      	add	r1, r4
 80118f0:	1854      	adds	r4, r2, r1
 80118f2:	42a3      	cmp	r3, r4
 80118f4:	6011      	str	r1, [r2, #0]
 80118f6:	d1dd      	bne.n	80118b4 <_free_r+0x28>
 80118f8:	681c      	ldr	r4, [r3, #0]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	6053      	str	r3, [r2, #4]
 80118fe:	4421      	add	r1, r4
 8011900:	6011      	str	r1, [r2, #0]
 8011902:	e7d7      	b.n	80118b4 <_free_r+0x28>
 8011904:	d902      	bls.n	801190c <_free_r+0x80>
 8011906:	230c      	movs	r3, #12
 8011908:	6003      	str	r3, [r0, #0]
 801190a:	e7d3      	b.n	80118b4 <_free_r+0x28>
 801190c:	6825      	ldr	r5, [r4, #0]
 801190e:	1961      	adds	r1, r4, r5
 8011910:	428b      	cmp	r3, r1
 8011912:	bf04      	itt	eq
 8011914:	6819      	ldreq	r1, [r3, #0]
 8011916:	685b      	ldreq	r3, [r3, #4]
 8011918:	6063      	str	r3, [r4, #4]
 801191a:	bf04      	itt	eq
 801191c:	1949      	addeq	r1, r1, r5
 801191e:	6021      	streq	r1, [r4, #0]
 8011920:	6054      	str	r4, [r2, #4]
 8011922:	e7c7      	b.n	80118b4 <_free_r+0x28>
 8011924:	b003      	add	sp, #12
 8011926:	bd30      	pop	{r4, r5, pc}
 8011928:	2000024c 	.word	0x2000024c

0801192c <_malloc_r>:
 801192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801192e:	1ccd      	adds	r5, r1, #3
 8011930:	f025 0503 	bic.w	r5, r5, #3
 8011934:	3508      	adds	r5, #8
 8011936:	2d0c      	cmp	r5, #12
 8011938:	bf38      	it	cc
 801193a:	250c      	movcc	r5, #12
 801193c:	2d00      	cmp	r5, #0
 801193e:	4606      	mov	r6, r0
 8011940:	db01      	blt.n	8011946 <_malloc_r+0x1a>
 8011942:	42a9      	cmp	r1, r5
 8011944:	d903      	bls.n	801194e <_malloc_r+0x22>
 8011946:	230c      	movs	r3, #12
 8011948:	6033      	str	r3, [r6, #0]
 801194a:	2000      	movs	r0, #0
 801194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801194e:	f000 ff07 	bl	8012760 <__malloc_lock>
 8011952:	4921      	ldr	r1, [pc, #132]	; (80119d8 <_malloc_r+0xac>)
 8011954:	680a      	ldr	r2, [r1, #0]
 8011956:	4614      	mov	r4, r2
 8011958:	b99c      	cbnz	r4, 8011982 <_malloc_r+0x56>
 801195a:	4f20      	ldr	r7, [pc, #128]	; (80119dc <_malloc_r+0xb0>)
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	b923      	cbnz	r3, 801196a <_malloc_r+0x3e>
 8011960:	4621      	mov	r1, r4
 8011962:	4630      	mov	r0, r6
 8011964:	f000 fc86 	bl	8012274 <_sbrk_r>
 8011968:	6038      	str	r0, [r7, #0]
 801196a:	4629      	mov	r1, r5
 801196c:	4630      	mov	r0, r6
 801196e:	f000 fc81 	bl	8012274 <_sbrk_r>
 8011972:	1c43      	adds	r3, r0, #1
 8011974:	d123      	bne.n	80119be <_malloc_r+0x92>
 8011976:	230c      	movs	r3, #12
 8011978:	6033      	str	r3, [r6, #0]
 801197a:	4630      	mov	r0, r6
 801197c:	f000 fef6 	bl	801276c <__malloc_unlock>
 8011980:	e7e3      	b.n	801194a <_malloc_r+0x1e>
 8011982:	6823      	ldr	r3, [r4, #0]
 8011984:	1b5b      	subs	r3, r3, r5
 8011986:	d417      	bmi.n	80119b8 <_malloc_r+0x8c>
 8011988:	2b0b      	cmp	r3, #11
 801198a:	d903      	bls.n	8011994 <_malloc_r+0x68>
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	441c      	add	r4, r3
 8011990:	6025      	str	r5, [r4, #0]
 8011992:	e004      	b.n	801199e <_malloc_r+0x72>
 8011994:	6863      	ldr	r3, [r4, #4]
 8011996:	42a2      	cmp	r2, r4
 8011998:	bf0c      	ite	eq
 801199a:	600b      	streq	r3, [r1, #0]
 801199c:	6053      	strne	r3, [r2, #4]
 801199e:	4630      	mov	r0, r6
 80119a0:	f000 fee4 	bl	801276c <__malloc_unlock>
 80119a4:	f104 000b 	add.w	r0, r4, #11
 80119a8:	1d23      	adds	r3, r4, #4
 80119aa:	f020 0007 	bic.w	r0, r0, #7
 80119ae:	1ac2      	subs	r2, r0, r3
 80119b0:	d0cc      	beq.n	801194c <_malloc_r+0x20>
 80119b2:	1a1b      	subs	r3, r3, r0
 80119b4:	50a3      	str	r3, [r4, r2]
 80119b6:	e7c9      	b.n	801194c <_malloc_r+0x20>
 80119b8:	4622      	mov	r2, r4
 80119ba:	6864      	ldr	r4, [r4, #4]
 80119bc:	e7cc      	b.n	8011958 <_malloc_r+0x2c>
 80119be:	1cc4      	adds	r4, r0, #3
 80119c0:	f024 0403 	bic.w	r4, r4, #3
 80119c4:	42a0      	cmp	r0, r4
 80119c6:	d0e3      	beq.n	8011990 <_malloc_r+0x64>
 80119c8:	1a21      	subs	r1, r4, r0
 80119ca:	4630      	mov	r0, r6
 80119cc:	f000 fc52 	bl	8012274 <_sbrk_r>
 80119d0:	3001      	adds	r0, #1
 80119d2:	d1dd      	bne.n	8011990 <_malloc_r+0x64>
 80119d4:	e7cf      	b.n	8011976 <_malloc_r+0x4a>
 80119d6:	bf00      	nop
 80119d8:	2000024c 	.word	0x2000024c
 80119dc:	20000250 	.word	0x20000250

080119e0 <__ssputs_r>:
 80119e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119e4:	688e      	ldr	r6, [r1, #8]
 80119e6:	429e      	cmp	r6, r3
 80119e8:	4682      	mov	sl, r0
 80119ea:	460c      	mov	r4, r1
 80119ec:	4690      	mov	r8, r2
 80119ee:	461f      	mov	r7, r3
 80119f0:	d838      	bhi.n	8011a64 <__ssputs_r+0x84>
 80119f2:	898a      	ldrh	r2, [r1, #12]
 80119f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80119f8:	d032      	beq.n	8011a60 <__ssputs_r+0x80>
 80119fa:	6825      	ldr	r5, [r4, #0]
 80119fc:	6909      	ldr	r1, [r1, #16]
 80119fe:	eba5 0901 	sub.w	r9, r5, r1
 8011a02:	6965      	ldr	r5, [r4, #20]
 8011a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	444b      	add	r3, r9
 8011a10:	106d      	asrs	r5, r5, #1
 8011a12:	429d      	cmp	r5, r3
 8011a14:	bf38      	it	cc
 8011a16:	461d      	movcc	r5, r3
 8011a18:	0553      	lsls	r3, r2, #21
 8011a1a:	d531      	bpl.n	8011a80 <__ssputs_r+0xa0>
 8011a1c:	4629      	mov	r1, r5
 8011a1e:	f7ff ff85 	bl	801192c <_malloc_r>
 8011a22:	4606      	mov	r6, r0
 8011a24:	b950      	cbnz	r0, 8011a3c <__ssputs_r+0x5c>
 8011a26:	230c      	movs	r3, #12
 8011a28:	f8ca 3000 	str.w	r3, [sl]
 8011a2c:	89a3      	ldrh	r3, [r4, #12]
 8011a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a32:	81a3      	strh	r3, [r4, #12]
 8011a34:	f04f 30ff 	mov.w	r0, #4294967295
 8011a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a3c:	6921      	ldr	r1, [r4, #16]
 8011a3e:	464a      	mov	r2, r9
 8011a40:	f7ff fd30 	bl	80114a4 <memcpy>
 8011a44:	89a3      	ldrh	r3, [r4, #12]
 8011a46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a4e:	81a3      	strh	r3, [r4, #12]
 8011a50:	6126      	str	r6, [r4, #16]
 8011a52:	6165      	str	r5, [r4, #20]
 8011a54:	444e      	add	r6, r9
 8011a56:	eba5 0509 	sub.w	r5, r5, r9
 8011a5a:	6026      	str	r6, [r4, #0]
 8011a5c:	60a5      	str	r5, [r4, #8]
 8011a5e:	463e      	mov	r6, r7
 8011a60:	42be      	cmp	r6, r7
 8011a62:	d900      	bls.n	8011a66 <__ssputs_r+0x86>
 8011a64:	463e      	mov	r6, r7
 8011a66:	4632      	mov	r2, r6
 8011a68:	6820      	ldr	r0, [r4, #0]
 8011a6a:	4641      	mov	r1, r8
 8011a6c:	f7ff fd28 	bl	80114c0 <memmove>
 8011a70:	68a3      	ldr	r3, [r4, #8]
 8011a72:	6822      	ldr	r2, [r4, #0]
 8011a74:	1b9b      	subs	r3, r3, r6
 8011a76:	4432      	add	r2, r6
 8011a78:	60a3      	str	r3, [r4, #8]
 8011a7a:	6022      	str	r2, [r4, #0]
 8011a7c:	2000      	movs	r0, #0
 8011a7e:	e7db      	b.n	8011a38 <__ssputs_r+0x58>
 8011a80:	462a      	mov	r2, r5
 8011a82:	f000 fe79 	bl	8012778 <_realloc_r>
 8011a86:	4606      	mov	r6, r0
 8011a88:	2800      	cmp	r0, #0
 8011a8a:	d1e1      	bne.n	8011a50 <__ssputs_r+0x70>
 8011a8c:	6921      	ldr	r1, [r4, #16]
 8011a8e:	4650      	mov	r0, sl
 8011a90:	f7ff fefc 	bl	801188c <_free_r>
 8011a94:	e7c7      	b.n	8011a26 <__ssputs_r+0x46>
	...

08011a98 <_svfiprintf_r>:
 8011a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a9c:	4698      	mov	r8, r3
 8011a9e:	898b      	ldrh	r3, [r1, #12]
 8011aa0:	061b      	lsls	r3, r3, #24
 8011aa2:	b09d      	sub	sp, #116	; 0x74
 8011aa4:	4607      	mov	r7, r0
 8011aa6:	460d      	mov	r5, r1
 8011aa8:	4614      	mov	r4, r2
 8011aaa:	d50e      	bpl.n	8011aca <_svfiprintf_r+0x32>
 8011aac:	690b      	ldr	r3, [r1, #16]
 8011aae:	b963      	cbnz	r3, 8011aca <_svfiprintf_r+0x32>
 8011ab0:	2140      	movs	r1, #64	; 0x40
 8011ab2:	f7ff ff3b 	bl	801192c <_malloc_r>
 8011ab6:	6028      	str	r0, [r5, #0]
 8011ab8:	6128      	str	r0, [r5, #16]
 8011aba:	b920      	cbnz	r0, 8011ac6 <_svfiprintf_r+0x2e>
 8011abc:	230c      	movs	r3, #12
 8011abe:	603b      	str	r3, [r7, #0]
 8011ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ac4:	e0d1      	b.n	8011c6a <_svfiprintf_r+0x1d2>
 8011ac6:	2340      	movs	r3, #64	; 0x40
 8011ac8:	616b      	str	r3, [r5, #20]
 8011aca:	2300      	movs	r3, #0
 8011acc:	9309      	str	r3, [sp, #36]	; 0x24
 8011ace:	2320      	movs	r3, #32
 8011ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ad8:	2330      	movs	r3, #48	; 0x30
 8011ada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011c84 <_svfiprintf_r+0x1ec>
 8011ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ae2:	f04f 0901 	mov.w	r9, #1
 8011ae6:	4623      	mov	r3, r4
 8011ae8:	469a      	mov	sl, r3
 8011aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011aee:	b10a      	cbz	r2, 8011af4 <_svfiprintf_r+0x5c>
 8011af0:	2a25      	cmp	r2, #37	; 0x25
 8011af2:	d1f9      	bne.n	8011ae8 <_svfiprintf_r+0x50>
 8011af4:	ebba 0b04 	subs.w	fp, sl, r4
 8011af8:	d00b      	beq.n	8011b12 <_svfiprintf_r+0x7a>
 8011afa:	465b      	mov	r3, fp
 8011afc:	4622      	mov	r2, r4
 8011afe:	4629      	mov	r1, r5
 8011b00:	4638      	mov	r0, r7
 8011b02:	f7ff ff6d 	bl	80119e0 <__ssputs_r>
 8011b06:	3001      	adds	r0, #1
 8011b08:	f000 80aa 	beq.w	8011c60 <_svfiprintf_r+0x1c8>
 8011b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b0e:	445a      	add	r2, fp
 8011b10:	9209      	str	r2, [sp, #36]	; 0x24
 8011b12:	f89a 3000 	ldrb.w	r3, [sl]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	f000 80a2 	beq.w	8011c60 <_svfiprintf_r+0x1c8>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8011b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b26:	f10a 0a01 	add.w	sl, sl, #1
 8011b2a:	9304      	str	r3, [sp, #16]
 8011b2c:	9307      	str	r3, [sp, #28]
 8011b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b32:	931a      	str	r3, [sp, #104]	; 0x68
 8011b34:	4654      	mov	r4, sl
 8011b36:	2205      	movs	r2, #5
 8011b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b3c:	4851      	ldr	r0, [pc, #324]	; (8011c84 <_svfiprintf_r+0x1ec>)
 8011b3e:	f7ee fb6f 	bl	8000220 <memchr>
 8011b42:	9a04      	ldr	r2, [sp, #16]
 8011b44:	b9d8      	cbnz	r0, 8011b7e <_svfiprintf_r+0xe6>
 8011b46:	06d0      	lsls	r0, r2, #27
 8011b48:	bf44      	itt	mi
 8011b4a:	2320      	movmi	r3, #32
 8011b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b50:	0711      	lsls	r1, r2, #28
 8011b52:	bf44      	itt	mi
 8011b54:	232b      	movmi	r3, #43	; 0x2b
 8011b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8011b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8011b60:	d015      	beq.n	8011b8e <_svfiprintf_r+0xf6>
 8011b62:	9a07      	ldr	r2, [sp, #28]
 8011b64:	4654      	mov	r4, sl
 8011b66:	2000      	movs	r0, #0
 8011b68:	f04f 0c0a 	mov.w	ip, #10
 8011b6c:	4621      	mov	r1, r4
 8011b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b72:	3b30      	subs	r3, #48	; 0x30
 8011b74:	2b09      	cmp	r3, #9
 8011b76:	d94e      	bls.n	8011c16 <_svfiprintf_r+0x17e>
 8011b78:	b1b0      	cbz	r0, 8011ba8 <_svfiprintf_r+0x110>
 8011b7a:	9207      	str	r2, [sp, #28]
 8011b7c:	e014      	b.n	8011ba8 <_svfiprintf_r+0x110>
 8011b7e:	eba0 0308 	sub.w	r3, r0, r8
 8011b82:	fa09 f303 	lsl.w	r3, r9, r3
 8011b86:	4313      	orrs	r3, r2
 8011b88:	9304      	str	r3, [sp, #16]
 8011b8a:	46a2      	mov	sl, r4
 8011b8c:	e7d2      	b.n	8011b34 <_svfiprintf_r+0x9c>
 8011b8e:	9b03      	ldr	r3, [sp, #12]
 8011b90:	1d19      	adds	r1, r3, #4
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	9103      	str	r1, [sp, #12]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	bfbb      	ittet	lt
 8011b9a:	425b      	neglt	r3, r3
 8011b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8011ba0:	9307      	strge	r3, [sp, #28]
 8011ba2:	9307      	strlt	r3, [sp, #28]
 8011ba4:	bfb8      	it	lt
 8011ba6:	9204      	strlt	r2, [sp, #16]
 8011ba8:	7823      	ldrb	r3, [r4, #0]
 8011baa:	2b2e      	cmp	r3, #46	; 0x2e
 8011bac:	d10c      	bne.n	8011bc8 <_svfiprintf_r+0x130>
 8011bae:	7863      	ldrb	r3, [r4, #1]
 8011bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8011bb2:	d135      	bne.n	8011c20 <_svfiprintf_r+0x188>
 8011bb4:	9b03      	ldr	r3, [sp, #12]
 8011bb6:	1d1a      	adds	r2, r3, #4
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	9203      	str	r2, [sp, #12]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	bfb8      	it	lt
 8011bc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bc4:	3402      	adds	r4, #2
 8011bc6:	9305      	str	r3, [sp, #20]
 8011bc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011c94 <_svfiprintf_r+0x1fc>
 8011bcc:	7821      	ldrb	r1, [r4, #0]
 8011bce:	2203      	movs	r2, #3
 8011bd0:	4650      	mov	r0, sl
 8011bd2:	f7ee fb25 	bl	8000220 <memchr>
 8011bd6:	b140      	cbz	r0, 8011bea <_svfiprintf_r+0x152>
 8011bd8:	2340      	movs	r3, #64	; 0x40
 8011bda:	eba0 000a 	sub.w	r0, r0, sl
 8011bde:	fa03 f000 	lsl.w	r0, r3, r0
 8011be2:	9b04      	ldr	r3, [sp, #16]
 8011be4:	4303      	orrs	r3, r0
 8011be6:	3401      	adds	r4, #1
 8011be8:	9304      	str	r3, [sp, #16]
 8011bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bee:	4826      	ldr	r0, [pc, #152]	; (8011c88 <_svfiprintf_r+0x1f0>)
 8011bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bf4:	2206      	movs	r2, #6
 8011bf6:	f7ee fb13 	bl	8000220 <memchr>
 8011bfa:	2800      	cmp	r0, #0
 8011bfc:	d038      	beq.n	8011c70 <_svfiprintf_r+0x1d8>
 8011bfe:	4b23      	ldr	r3, [pc, #140]	; (8011c8c <_svfiprintf_r+0x1f4>)
 8011c00:	bb1b      	cbnz	r3, 8011c4a <_svfiprintf_r+0x1b2>
 8011c02:	9b03      	ldr	r3, [sp, #12]
 8011c04:	3307      	adds	r3, #7
 8011c06:	f023 0307 	bic.w	r3, r3, #7
 8011c0a:	3308      	adds	r3, #8
 8011c0c:	9303      	str	r3, [sp, #12]
 8011c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c10:	4433      	add	r3, r6
 8011c12:	9309      	str	r3, [sp, #36]	; 0x24
 8011c14:	e767      	b.n	8011ae6 <_svfiprintf_r+0x4e>
 8011c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c1a:	460c      	mov	r4, r1
 8011c1c:	2001      	movs	r0, #1
 8011c1e:	e7a5      	b.n	8011b6c <_svfiprintf_r+0xd4>
 8011c20:	2300      	movs	r3, #0
 8011c22:	3401      	adds	r4, #1
 8011c24:	9305      	str	r3, [sp, #20]
 8011c26:	4619      	mov	r1, r3
 8011c28:	f04f 0c0a 	mov.w	ip, #10
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c32:	3a30      	subs	r2, #48	; 0x30
 8011c34:	2a09      	cmp	r2, #9
 8011c36:	d903      	bls.n	8011c40 <_svfiprintf_r+0x1a8>
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d0c5      	beq.n	8011bc8 <_svfiprintf_r+0x130>
 8011c3c:	9105      	str	r1, [sp, #20]
 8011c3e:	e7c3      	b.n	8011bc8 <_svfiprintf_r+0x130>
 8011c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c44:	4604      	mov	r4, r0
 8011c46:	2301      	movs	r3, #1
 8011c48:	e7f0      	b.n	8011c2c <_svfiprintf_r+0x194>
 8011c4a:	ab03      	add	r3, sp, #12
 8011c4c:	9300      	str	r3, [sp, #0]
 8011c4e:	462a      	mov	r2, r5
 8011c50:	4b0f      	ldr	r3, [pc, #60]	; (8011c90 <_svfiprintf_r+0x1f8>)
 8011c52:	a904      	add	r1, sp, #16
 8011c54:	4638      	mov	r0, r7
 8011c56:	f3af 8000 	nop.w
 8011c5a:	1c42      	adds	r2, r0, #1
 8011c5c:	4606      	mov	r6, r0
 8011c5e:	d1d6      	bne.n	8011c0e <_svfiprintf_r+0x176>
 8011c60:	89ab      	ldrh	r3, [r5, #12]
 8011c62:	065b      	lsls	r3, r3, #25
 8011c64:	f53f af2c 	bmi.w	8011ac0 <_svfiprintf_r+0x28>
 8011c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c6a:	b01d      	add	sp, #116	; 0x74
 8011c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c70:	ab03      	add	r3, sp, #12
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	462a      	mov	r2, r5
 8011c76:	4b06      	ldr	r3, [pc, #24]	; (8011c90 <_svfiprintf_r+0x1f8>)
 8011c78:	a904      	add	r1, sp, #16
 8011c7a:	4638      	mov	r0, r7
 8011c7c:	f000 f9d4 	bl	8012028 <_printf_i>
 8011c80:	e7eb      	b.n	8011c5a <_svfiprintf_r+0x1c2>
 8011c82:	bf00      	nop
 8011c84:	08015610 	.word	0x08015610
 8011c88:	0801561a 	.word	0x0801561a
 8011c8c:	00000000 	.word	0x00000000
 8011c90:	080119e1 	.word	0x080119e1
 8011c94:	08015616 	.word	0x08015616

08011c98 <__sfputc_r>:
 8011c98:	6893      	ldr	r3, [r2, #8]
 8011c9a:	3b01      	subs	r3, #1
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	b410      	push	{r4}
 8011ca0:	6093      	str	r3, [r2, #8]
 8011ca2:	da08      	bge.n	8011cb6 <__sfputc_r+0x1e>
 8011ca4:	6994      	ldr	r4, [r2, #24]
 8011ca6:	42a3      	cmp	r3, r4
 8011ca8:	db01      	blt.n	8011cae <__sfputc_r+0x16>
 8011caa:	290a      	cmp	r1, #10
 8011cac:	d103      	bne.n	8011cb6 <__sfputc_r+0x1e>
 8011cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cb2:	f000 bb33 	b.w	801231c <__swbuf_r>
 8011cb6:	6813      	ldr	r3, [r2, #0]
 8011cb8:	1c58      	adds	r0, r3, #1
 8011cba:	6010      	str	r0, [r2, #0]
 8011cbc:	7019      	strb	r1, [r3, #0]
 8011cbe:	4608      	mov	r0, r1
 8011cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cc4:	4770      	bx	lr

08011cc6 <__sfputs_r>:
 8011cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cc8:	4606      	mov	r6, r0
 8011cca:	460f      	mov	r7, r1
 8011ccc:	4614      	mov	r4, r2
 8011cce:	18d5      	adds	r5, r2, r3
 8011cd0:	42ac      	cmp	r4, r5
 8011cd2:	d101      	bne.n	8011cd8 <__sfputs_r+0x12>
 8011cd4:	2000      	movs	r0, #0
 8011cd6:	e007      	b.n	8011ce8 <__sfputs_r+0x22>
 8011cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cdc:	463a      	mov	r2, r7
 8011cde:	4630      	mov	r0, r6
 8011ce0:	f7ff ffda 	bl	8011c98 <__sfputc_r>
 8011ce4:	1c43      	adds	r3, r0, #1
 8011ce6:	d1f3      	bne.n	8011cd0 <__sfputs_r+0xa>
 8011ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011cec <_vfiprintf_r>:
 8011cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cf0:	460d      	mov	r5, r1
 8011cf2:	b09d      	sub	sp, #116	; 0x74
 8011cf4:	4614      	mov	r4, r2
 8011cf6:	4698      	mov	r8, r3
 8011cf8:	4606      	mov	r6, r0
 8011cfa:	b118      	cbz	r0, 8011d04 <_vfiprintf_r+0x18>
 8011cfc:	6983      	ldr	r3, [r0, #24]
 8011cfe:	b90b      	cbnz	r3, 8011d04 <_vfiprintf_r+0x18>
 8011d00:	f7ff fd0a 	bl	8011718 <__sinit>
 8011d04:	4b89      	ldr	r3, [pc, #548]	; (8011f2c <_vfiprintf_r+0x240>)
 8011d06:	429d      	cmp	r5, r3
 8011d08:	d11b      	bne.n	8011d42 <_vfiprintf_r+0x56>
 8011d0a:	6875      	ldr	r5, [r6, #4]
 8011d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d0e:	07d9      	lsls	r1, r3, #31
 8011d10:	d405      	bmi.n	8011d1e <_vfiprintf_r+0x32>
 8011d12:	89ab      	ldrh	r3, [r5, #12]
 8011d14:	059a      	lsls	r2, r3, #22
 8011d16:	d402      	bmi.n	8011d1e <_vfiprintf_r+0x32>
 8011d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d1a:	f7ff fdad 	bl	8011878 <__retarget_lock_acquire_recursive>
 8011d1e:	89ab      	ldrh	r3, [r5, #12]
 8011d20:	071b      	lsls	r3, r3, #28
 8011d22:	d501      	bpl.n	8011d28 <_vfiprintf_r+0x3c>
 8011d24:	692b      	ldr	r3, [r5, #16]
 8011d26:	b9eb      	cbnz	r3, 8011d64 <_vfiprintf_r+0x78>
 8011d28:	4629      	mov	r1, r5
 8011d2a:	4630      	mov	r0, r6
 8011d2c:	f000 fb5a 	bl	80123e4 <__swsetup_r>
 8011d30:	b1c0      	cbz	r0, 8011d64 <_vfiprintf_r+0x78>
 8011d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d34:	07dc      	lsls	r4, r3, #31
 8011d36:	d50e      	bpl.n	8011d56 <_vfiprintf_r+0x6a>
 8011d38:	f04f 30ff 	mov.w	r0, #4294967295
 8011d3c:	b01d      	add	sp, #116	; 0x74
 8011d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d42:	4b7b      	ldr	r3, [pc, #492]	; (8011f30 <_vfiprintf_r+0x244>)
 8011d44:	429d      	cmp	r5, r3
 8011d46:	d101      	bne.n	8011d4c <_vfiprintf_r+0x60>
 8011d48:	68b5      	ldr	r5, [r6, #8]
 8011d4a:	e7df      	b.n	8011d0c <_vfiprintf_r+0x20>
 8011d4c:	4b79      	ldr	r3, [pc, #484]	; (8011f34 <_vfiprintf_r+0x248>)
 8011d4e:	429d      	cmp	r5, r3
 8011d50:	bf08      	it	eq
 8011d52:	68f5      	ldreq	r5, [r6, #12]
 8011d54:	e7da      	b.n	8011d0c <_vfiprintf_r+0x20>
 8011d56:	89ab      	ldrh	r3, [r5, #12]
 8011d58:	0598      	lsls	r0, r3, #22
 8011d5a:	d4ed      	bmi.n	8011d38 <_vfiprintf_r+0x4c>
 8011d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d5e:	f7ff fd8c 	bl	801187a <__retarget_lock_release_recursive>
 8011d62:	e7e9      	b.n	8011d38 <_vfiprintf_r+0x4c>
 8011d64:	2300      	movs	r3, #0
 8011d66:	9309      	str	r3, [sp, #36]	; 0x24
 8011d68:	2320      	movs	r3, #32
 8011d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d72:	2330      	movs	r3, #48	; 0x30
 8011d74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011f38 <_vfiprintf_r+0x24c>
 8011d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d7c:	f04f 0901 	mov.w	r9, #1
 8011d80:	4623      	mov	r3, r4
 8011d82:	469a      	mov	sl, r3
 8011d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d88:	b10a      	cbz	r2, 8011d8e <_vfiprintf_r+0xa2>
 8011d8a:	2a25      	cmp	r2, #37	; 0x25
 8011d8c:	d1f9      	bne.n	8011d82 <_vfiprintf_r+0x96>
 8011d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8011d92:	d00b      	beq.n	8011dac <_vfiprintf_r+0xc0>
 8011d94:	465b      	mov	r3, fp
 8011d96:	4622      	mov	r2, r4
 8011d98:	4629      	mov	r1, r5
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	f7ff ff93 	bl	8011cc6 <__sfputs_r>
 8011da0:	3001      	adds	r0, #1
 8011da2:	f000 80aa 	beq.w	8011efa <_vfiprintf_r+0x20e>
 8011da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011da8:	445a      	add	r2, fp
 8011daa:	9209      	str	r2, [sp, #36]	; 0x24
 8011dac:	f89a 3000 	ldrb.w	r3, [sl]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	f000 80a2 	beq.w	8011efa <_vfiprintf_r+0x20e>
 8011db6:	2300      	movs	r3, #0
 8011db8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dc0:	f10a 0a01 	add.w	sl, sl, #1
 8011dc4:	9304      	str	r3, [sp, #16]
 8011dc6:	9307      	str	r3, [sp, #28]
 8011dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8011dce:	4654      	mov	r4, sl
 8011dd0:	2205      	movs	r2, #5
 8011dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dd6:	4858      	ldr	r0, [pc, #352]	; (8011f38 <_vfiprintf_r+0x24c>)
 8011dd8:	f7ee fa22 	bl	8000220 <memchr>
 8011ddc:	9a04      	ldr	r2, [sp, #16]
 8011dde:	b9d8      	cbnz	r0, 8011e18 <_vfiprintf_r+0x12c>
 8011de0:	06d1      	lsls	r1, r2, #27
 8011de2:	bf44      	itt	mi
 8011de4:	2320      	movmi	r3, #32
 8011de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011dea:	0713      	lsls	r3, r2, #28
 8011dec:	bf44      	itt	mi
 8011dee:	232b      	movmi	r3, #43	; 0x2b
 8011df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011df4:	f89a 3000 	ldrb.w	r3, [sl]
 8011df8:	2b2a      	cmp	r3, #42	; 0x2a
 8011dfa:	d015      	beq.n	8011e28 <_vfiprintf_r+0x13c>
 8011dfc:	9a07      	ldr	r2, [sp, #28]
 8011dfe:	4654      	mov	r4, sl
 8011e00:	2000      	movs	r0, #0
 8011e02:	f04f 0c0a 	mov.w	ip, #10
 8011e06:	4621      	mov	r1, r4
 8011e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e0c:	3b30      	subs	r3, #48	; 0x30
 8011e0e:	2b09      	cmp	r3, #9
 8011e10:	d94e      	bls.n	8011eb0 <_vfiprintf_r+0x1c4>
 8011e12:	b1b0      	cbz	r0, 8011e42 <_vfiprintf_r+0x156>
 8011e14:	9207      	str	r2, [sp, #28]
 8011e16:	e014      	b.n	8011e42 <_vfiprintf_r+0x156>
 8011e18:	eba0 0308 	sub.w	r3, r0, r8
 8011e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8011e20:	4313      	orrs	r3, r2
 8011e22:	9304      	str	r3, [sp, #16]
 8011e24:	46a2      	mov	sl, r4
 8011e26:	e7d2      	b.n	8011dce <_vfiprintf_r+0xe2>
 8011e28:	9b03      	ldr	r3, [sp, #12]
 8011e2a:	1d19      	adds	r1, r3, #4
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	9103      	str	r1, [sp, #12]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	bfbb      	ittet	lt
 8011e34:	425b      	neglt	r3, r3
 8011e36:	f042 0202 	orrlt.w	r2, r2, #2
 8011e3a:	9307      	strge	r3, [sp, #28]
 8011e3c:	9307      	strlt	r3, [sp, #28]
 8011e3e:	bfb8      	it	lt
 8011e40:	9204      	strlt	r2, [sp, #16]
 8011e42:	7823      	ldrb	r3, [r4, #0]
 8011e44:	2b2e      	cmp	r3, #46	; 0x2e
 8011e46:	d10c      	bne.n	8011e62 <_vfiprintf_r+0x176>
 8011e48:	7863      	ldrb	r3, [r4, #1]
 8011e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8011e4c:	d135      	bne.n	8011eba <_vfiprintf_r+0x1ce>
 8011e4e:	9b03      	ldr	r3, [sp, #12]
 8011e50:	1d1a      	adds	r2, r3, #4
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	9203      	str	r2, [sp, #12]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	bfb8      	it	lt
 8011e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e5e:	3402      	adds	r4, #2
 8011e60:	9305      	str	r3, [sp, #20]
 8011e62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011f48 <_vfiprintf_r+0x25c>
 8011e66:	7821      	ldrb	r1, [r4, #0]
 8011e68:	2203      	movs	r2, #3
 8011e6a:	4650      	mov	r0, sl
 8011e6c:	f7ee f9d8 	bl	8000220 <memchr>
 8011e70:	b140      	cbz	r0, 8011e84 <_vfiprintf_r+0x198>
 8011e72:	2340      	movs	r3, #64	; 0x40
 8011e74:	eba0 000a 	sub.w	r0, r0, sl
 8011e78:	fa03 f000 	lsl.w	r0, r3, r0
 8011e7c:	9b04      	ldr	r3, [sp, #16]
 8011e7e:	4303      	orrs	r3, r0
 8011e80:	3401      	adds	r4, #1
 8011e82:	9304      	str	r3, [sp, #16]
 8011e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e88:	482c      	ldr	r0, [pc, #176]	; (8011f3c <_vfiprintf_r+0x250>)
 8011e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e8e:	2206      	movs	r2, #6
 8011e90:	f7ee f9c6 	bl	8000220 <memchr>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	d03f      	beq.n	8011f18 <_vfiprintf_r+0x22c>
 8011e98:	4b29      	ldr	r3, [pc, #164]	; (8011f40 <_vfiprintf_r+0x254>)
 8011e9a:	bb1b      	cbnz	r3, 8011ee4 <_vfiprintf_r+0x1f8>
 8011e9c:	9b03      	ldr	r3, [sp, #12]
 8011e9e:	3307      	adds	r3, #7
 8011ea0:	f023 0307 	bic.w	r3, r3, #7
 8011ea4:	3308      	adds	r3, #8
 8011ea6:	9303      	str	r3, [sp, #12]
 8011ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eaa:	443b      	add	r3, r7
 8011eac:	9309      	str	r3, [sp, #36]	; 0x24
 8011eae:	e767      	b.n	8011d80 <_vfiprintf_r+0x94>
 8011eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eb4:	460c      	mov	r4, r1
 8011eb6:	2001      	movs	r0, #1
 8011eb8:	e7a5      	b.n	8011e06 <_vfiprintf_r+0x11a>
 8011eba:	2300      	movs	r3, #0
 8011ebc:	3401      	adds	r4, #1
 8011ebe:	9305      	str	r3, [sp, #20]
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	f04f 0c0a 	mov.w	ip, #10
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ecc:	3a30      	subs	r2, #48	; 0x30
 8011ece:	2a09      	cmp	r2, #9
 8011ed0:	d903      	bls.n	8011eda <_vfiprintf_r+0x1ee>
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d0c5      	beq.n	8011e62 <_vfiprintf_r+0x176>
 8011ed6:	9105      	str	r1, [sp, #20]
 8011ed8:	e7c3      	b.n	8011e62 <_vfiprintf_r+0x176>
 8011eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ede:	4604      	mov	r4, r0
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e7f0      	b.n	8011ec6 <_vfiprintf_r+0x1da>
 8011ee4:	ab03      	add	r3, sp, #12
 8011ee6:	9300      	str	r3, [sp, #0]
 8011ee8:	462a      	mov	r2, r5
 8011eea:	4b16      	ldr	r3, [pc, #88]	; (8011f44 <_vfiprintf_r+0x258>)
 8011eec:	a904      	add	r1, sp, #16
 8011eee:	4630      	mov	r0, r6
 8011ef0:	f3af 8000 	nop.w
 8011ef4:	4607      	mov	r7, r0
 8011ef6:	1c78      	adds	r0, r7, #1
 8011ef8:	d1d6      	bne.n	8011ea8 <_vfiprintf_r+0x1bc>
 8011efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011efc:	07d9      	lsls	r1, r3, #31
 8011efe:	d405      	bmi.n	8011f0c <_vfiprintf_r+0x220>
 8011f00:	89ab      	ldrh	r3, [r5, #12]
 8011f02:	059a      	lsls	r2, r3, #22
 8011f04:	d402      	bmi.n	8011f0c <_vfiprintf_r+0x220>
 8011f06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f08:	f7ff fcb7 	bl	801187a <__retarget_lock_release_recursive>
 8011f0c:	89ab      	ldrh	r3, [r5, #12]
 8011f0e:	065b      	lsls	r3, r3, #25
 8011f10:	f53f af12 	bmi.w	8011d38 <_vfiprintf_r+0x4c>
 8011f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f16:	e711      	b.n	8011d3c <_vfiprintf_r+0x50>
 8011f18:	ab03      	add	r3, sp, #12
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	462a      	mov	r2, r5
 8011f1e:	4b09      	ldr	r3, [pc, #36]	; (8011f44 <_vfiprintf_r+0x258>)
 8011f20:	a904      	add	r1, sp, #16
 8011f22:	4630      	mov	r0, r6
 8011f24:	f000 f880 	bl	8012028 <_printf_i>
 8011f28:	e7e4      	b.n	8011ef4 <_vfiprintf_r+0x208>
 8011f2a:	bf00      	nop
 8011f2c:	080155d0 	.word	0x080155d0
 8011f30:	080155f0 	.word	0x080155f0
 8011f34:	080155b0 	.word	0x080155b0
 8011f38:	08015610 	.word	0x08015610
 8011f3c:	0801561a 	.word	0x0801561a
 8011f40:	00000000 	.word	0x00000000
 8011f44:	08011cc7 	.word	0x08011cc7
 8011f48:	08015616 	.word	0x08015616

08011f4c <_printf_common>:
 8011f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f50:	4616      	mov	r6, r2
 8011f52:	4699      	mov	r9, r3
 8011f54:	688a      	ldr	r2, [r1, #8]
 8011f56:	690b      	ldr	r3, [r1, #16]
 8011f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	bfb8      	it	lt
 8011f60:	4613      	movlt	r3, r2
 8011f62:	6033      	str	r3, [r6, #0]
 8011f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f68:	4607      	mov	r7, r0
 8011f6a:	460c      	mov	r4, r1
 8011f6c:	b10a      	cbz	r2, 8011f72 <_printf_common+0x26>
 8011f6e:	3301      	adds	r3, #1
 8011f70:	6033      	str	r3, [r6, #0]
 8011f72:	6823      	ldr	r3, [r4, #0]
 8011f74:	0699      	lsls	r1, r3, #26
 8011f76:	bf42      	ittt	mi
 8011f78:	6833      	ldrmi	r3, [r6, #0]
 8011f7a:	3302      	addmi	r3, #2
 8011f7c:	6033      	strmi	r3, [r6, #0]
 8011f7e:	6825      	ldr	r5, [r4, #0]
 8011f80:	f015 0506 	ands.w	r5, r5, #6
 8011f84:	d106      	bne.n	8011f94 <_printf_common+0x48>
 8011f86:	f104 0a19 	add.w	sl, r4, #25
 8011f8a:	68e3      	ldr	r3, [r4, #12]
 8011f8c:	6832      	ldr	r2, [r6, #0]
 8011f8e:	1a9b      	subs	r3, r3, r2
 8011f90:	42ab      	cmp	r3, r5
 8011f92:	dc26      	bgt.n	8011fe2 <_printf_common+0x96>
 8011f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f98:	1e13      	subs	r3, r2, #0
 8011f9a:	6822      	ldr	r2, [r4, #0]
 8011f9c:	bf18      	it	ne
 8011f9e:	2301      	movne	r3, #1
 8011fa0:	0692      	lsls	r2, r2, #26
 8011fa2:	d42b      	bmi.n	8011ffc <_printf_common+0xb0>
 8011fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011fa8:	4649      	mov	r1, r9
 8011faa:	4638      	mov	r0, r7
 8011fac:	47c0      	blx	r8
 8011fae:	3001      	adds	r0, #1
 8011fb0:	d01e      	beq.n	8011ff0 <_printf_common+0xa4>
 8011fb2:	6823      	ldr	r3, [r4, #0]
 8011fb4:	68e5      	ldr	r5, [r4, #12]
 8011fb6:	6832      	ldr	r2, [r6, #0]
 8011fb8:	f003 0306 	and.w	r3, r3, #6
 8011fbc:	2b04      	cmp	r3, #4
 8011fbe:	bf08      	it	eq
 8011fc0:	1aad      	subeq	r5, r5, r2
 8011fc2:	68a3      	ldr	r3, [r4, #8]
 8011fc4:	6922      	ldr	r2, [r4, #16]
 8011fc6:	bf0c      	ite	eq
 8011fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011fcc:	2500      	movne	r5, #0
 8011fce:	4293      	cmp	r3, r2
 8011fd0:	bfc4      	itt	gt
 8011fd2:	1a9b      	subgt	r3, r3, r2
 8011fd4:	18ed      	addgt	r5, r5, r3
 8011fd6:	2600      	movs	r6, #0
 8011fd8:	341a      	adds	r4, #26
 8011fda:	42b5      	cmp	r5, r6
 8011fdc:	d11a      	bne.n	8012014 <_printf_common+0xc8>
 8011fde:	2000      	movs	r0, #0
 8011fe0:	e008      	b.n	8011ff4 <_printf_common+0xa8>
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	4652      	mov	r2, sl
 8011fe6:	4649      	mov	r1, r9
 8011fe8:	4638      	mov	r0, r7
 8011fea:	47c0      	blx	r8
 8011fec:	3001      	adds	r0, #1
 8011fee:	d103      	bne.n	8011ff8 <_printf_common+0xac>
 8011ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ff8:	3501      	adds	r5, #1
 8011ffa:	e7c6      	b.n	8011f8a <_printf_common+0x3e>
 8011ffc:	18e1      	adds	r1, r4, r3
 8011ffe:	1c5a      	adds	r2, r3, #1
 8012000:	2030      	movs	r0, #48	; 0x30
 8012002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012006:	4422      	add	r2, r4
 8012008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801200c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012010:	3302      	adds	r3, #2
 8012012:	e7c7      	b.n	8011fa4 <_printf_common+0x58>
 8012014:	2301      	movs	r3, #1
 8012016:	4622      	mov	r2, r4
 8012018:	4649      	mov	r1, r9
 801201a:	4638      	mov	r0, r7
 801201c:	47c0      	blx	r8
 801201e:	3001      	adds	r0, #1
 8012020:	d0e6      	beq.n	8011ff0 <_printf_common+0xa4>
 8012022:	3601      	adds	r6, #1
 8012024:	e7d9      	b.n	8011fda <_printf_common+0x8e>
	...

08012028 <_printf_i>:
 8012028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801202c:	460c      	mov	r4, r1
 801202e:	4691      	mov	r9, r2
 8012030:	7e27      	ldrb	r7, [r4, #24]
 8012032:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012034:	2f78      	cmp	r7, #120	; 0x78
 8012036:	4680      	mov	r8, r0
 8012038:	469a      	mov	sl, r3
 801203a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801203e:	d807      	bhi.n	8012050 <_printf_i+0x28>
 8012040:	2f62      	cmp	r7, #98	; 0x62
 8012042:	d80a      	bhi.n	801205a <_printf_i+0x32>
 8012044:	2f00      	cmp	r7, #0
 8012046:	f000 80d8 	beq.w	80121fa <_printf_i+0x1d2>
 801204a:	2f58      	cmp	r7, #88	; 0x58
 801204c:	f000 80a3 	beq.w	8012196 <_printf_i+0x16e>
 8012050:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012058:	e03a      	b.n	80120d0 <_printf_i+0xa8>
 801205a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801205e:	2b15      	cmp	r3, #21
 8012060:	d8f6      	bhi.n	8012050 <_printf_i+0x28>
 8012062:	a001      	add	r0, pc, #4	; (adr r0, 8012068 <_printf_i+0x40>)
 8012064:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012068:	080120c1 	.word	0x080120c1
 801206c:	080120d5 	.word	0x080120d5
 8012070:	08012051 	.word	0x08012051
 8012074:	08012051 	.word	0x08012051
 8012078:	08012051 	.word	0x08012051
 801207c:	08012051 	.word	0x08012051
 8012080:	080120d5 	.word	0x080120d5
 8012084:	08012051 	.word	0x08012051
 8012088:	08012051 	.word	0x08012051
 801208c:	08012051 	.word	0x08012051
 8012090:	08012051 	.word	0x08012051
 8012094:	080121e1 	.word	0x080121e1
 8012098:	08012105 	.word	0x08012105
 801209c:	080121c3 	.word	0x080121c3
 80120a0:	08012051 	.word	0x08012051
 80120a4:	08012051 	.word	0x08012051
 80120a8:	08012203 	.word	0x08012203
 80120ac:	08012051 	.word	0x08012051
 80120b0:	08012105 	.word	0x08012105
 80120b4:	08012051 	.word	0x08012051
 80120b8:	08012051 	.word	0x08012051
 80120bc:	080121cb 	.word	0x080121cb
 80120c0:	680b      	ldr	r3, [r1, #0]
 80120c2:	1d1a      	adds	r2, r3, #4
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	600a      	str	r2, [r1, #0]
 80120c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80120cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80120d0:	2301      	movs	r3, #1
 80120d2:	e0a3      	b.n	801221c <_printf_i+0x1f4>
 80120d4:	6825      	ldr	r5, [r4, #0]
 80120d6:	6808      	ldr	r0, [r1, #0]
 80120d8:	062e      	lsls	r6, r5, #24
 80120da:	f100 0304 	add.w	r3, r0, #4
 80120de:	d50a      	bpl.n	80120f6 <_printf_i+0xce>
 80120e0:	6805      	ldr	r5, [r0, #0]
 80120e2:	600b      	str	r3, [r1, #0]
 80120e4:	2d00      	cmp	r5, #0
 80120e6:	da03      	bge.n	80120f0 <_printf_i+0xc8>
 80120e8:	232d      	movs	r3, #45	; 0x2d
 80120ea:	426d      	negs	r5, r5
 80120ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120f0:	485e      	ldr	r0, [pc, #376]	; (801226c <_printf_i+0x244>)
 80120f2:	230a      	movs	r3, #10
 80120f4:	e019      	b.n	801212a <_printf_i+0x102>
 80120f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80120fa:	6805      	ldr	r5, [r0, #0]
 80120fc:	600b      	str	r3, [r1, #0]
 80120fe:	bf18      	it	ne
 8012100:	b22d      	sxthne	r5, r5
 8012102:	e7ef      	b.n	80120e4 <_printf_i+0xbc>
 8012104:	680b      	ldr	r3, [r1, #0]
 8012106:	6825      	ldr	r5, [r4, #0]
 8012108:	1d18      	adds	r0, r3, #4
 801210a:	6008      	str	r0, [r1, #0]
 801210c:	0628      	lsls	r0, r5, #24
 801210e:	d501      	bpl.n	8012114 <_printf_i+0xec>
 8012110:	681d      	ldr	r5, [r3, #0]
 8012112:	e002      	b.n	801211a <_printf_i+0xf2>
 8012114:	0669      	lsls	r1, r5, #25
 8012116:	d5fb      	bpl.n	8012110 <_printf_i+0xe8>
 8012118:	881d      	ldrh	r5, [r3, #0]
 801211a:	4854      	ldr	r0, [pc, #336]	; (801226c <_printf_i+0x244>)
 801211c:	2f6f      	cmp	r7, #111	; 0x6f
 801211e:	bf0c      	ite	eq
 8012120:	2308      	moveq	r3, #8
 8012122:	230a      	movne	r3, #10
 8012124:	2100      	movs	r1, #0
 8012126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801212a:	6866      	ldr	r6, [r4, #4]
 801212c:	60a6      	str	r6, [r4, #8]
 801212e:	2e00      	cmp	r6, #0
 8012130:	bfa2      	ittt	ge
 8012132:	6821      	ldrge	r1, [r4, #0]
 8012134:	f021 0104 	bicge.w	r1, r1, #4
 8012138:	6021      	strge	r1, [r4, #0]
 801213a:	b90d      	cbnz	r5, 8012140 <_printf_i+0x118>
 801213c:	2e00      	cmp	r6, #0
 801213e:	d04d      	beq.n	80121dc <_printf_i+0x1b4>
 8012140:	4616      	mov	r6, r2
 8012142:	fbb5 f1f3 	udiv	r1, r5, r3
 8012146:	fb03 5711 	mls	r7, r3, r1, r5
 801214a:	5dc7      	ldrb	r7, [r0, r7]
 801214c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012150:	462f      	mov	r7, r5
 8012152:	42bb      	cmp	r3, r7
 8012154:	460d      	mov	r5, r1
 8012156:	d9f4      	bls.n	8012142 <_printf_i+0x11a>
 8012158:	2b08      	cmp	r3, #8
 801215a:	d10b      	bne.n	8012174 <_printf_i+0x14c>
 801215c:	6823      	ldr	r3, [r4, #0]
 801215e:	07df      	lsls	r7, r3, #31
 8012160:	d508      	bpl.n	8012174 <_printf_i+0x14c>
 8012162:	6923      	ldr	r3, [r4, #16]
 8012164:	6861      	ldr	r1, [r4, #4]
 8012166:	4299      	cmp	r1, r3
 8012168:	bfde      	ittt	le
 801216a:	2330      	movle	r3, #48	; 0x30
 801216c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012170:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012174:	1b92      	subs	r2, r2, r6
 8012176:	6122      	str	r2, [r4, #16]
 8012178:	f8cd a000 	str.w	sl, [sp]
 801217c:	464b      	mov	r3, r9
 801217e:	aa03      	add	r2, sp, #12
 8012180:	4621      	mov	r1, r4
 8012182:	4640      	mov	r0, r8
 8012184:	f7ff fee2 	bl	8011f4c <_printf_common>
 8012188:	3001      	adds	r0, #1
 801218a:	d14c      	bne.n	8012226 <_printf_i+0x1fe>
 801218c:	f04f 30ff 	mov.w	r0, #4294967295
 8012190:	b004      	add	sp, #16
 8012192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012196:	4835      	ldr	r0, [pc, #212]	; (801226c <_printf_i+0x244>)
 8012198:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801219c:	6823      	ldr	r3, [r4, #0]
 801219e:	680e      	ldr	r6, [r1, #0]
 80121a0:	061f      	lsls	r7, r3, #24
 80121a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80121a6:	600e      	str	r6, [r1, #0]
 80121a8:	d514      	bpl.n	80121d4 <_printf_i+0x1ac>
 80121aa:	07d9      	lsls	r1, r3, #31
 80121ac:	bf44      	itt	mi
 80121ae:	f043 0320 	orrmi.w	r3, r3, #32
 80121b2:	6023      	strmi	r3, [r4, #0]
 80121b4:	b91d      	cbnz	r5, 80121be <_printf_i+0x196>
 80121b6:	6823      	ldr	r3, [r4, #0]
 80121b8:	f023 0320 	bic.w	r3, r3, #32
 80121bc:	6023      	str	r3, [r4, #0]
 80121be:	2310      	movs	r3, #16
 80121c0:	e7b0      	b.n	8012124 <_printf_i+0xfc>
 80121c2:	6823      	ldr	r3, [r4, #0]
 80121c4:	f043 0320 	orr.w	r3, r3, #32
 80121c8:	6023      	str	r3, [r4, #0]
 80121ca:	2378      	movs	r3, #120	; 0x78
 80121cc:	4828      	ldr	r0, [pc, #160]	; (8012270 <_printf_i+0x248>)
 80121ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80121d2:	e7e3      	b.n	801219c <_printf_i+0x174>
 80121d4:	065e      	lsls	r6, r3, #25
 80121d6:	bf48      	it	mi
 80121d8:	b2ad      	uxthmi	r5, r5
 80121da:	e7e6      	b.n	80121aa <_printf_i+0x182>
 80121dc:	4616      	mov	r6, r2
 80121de:	e7bb      	b.n	8012158 <_printf_i+0x130>
 80121e0:	680b      	ldr	r3, [r1, #0]
 80121e2:	6826      	ldr	r6, [r4, #0]
 80121e4:	6960      	ldr	r0, [r4, #20]
 80121e6:	1d1d      	adds	r5, r3, #4
 80121e8:	600d      	str	r5, [r1, #0]
 80121ea:	0635      	lsls	r5, r6, #24
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	d501      	bpl.n	80121f4 <_printf_i+0x1cc>
 80121f0:	6018      	str	r0, [r3, #0]
 80121f2:	e002      	b.n	80121fa <_printf_i+0x1d2>
 80121f4:	0671      	lsls	r1, r6, #25
 80121f6:	d5fb      	bpl.n	80121f0 <_printf_i+0x1c8>
 80121f8:	8018      	strh	r0, [r3, #0]
 80121fa:	2300      	movs	r3, #0
 80121fc:	6123      	str	r3, [r4, #16]
 80121fe:	4616      	mov	r6, r2
 8012200:	e7ba      	b.n	8012178 <_printf_i+0x150>
 8012202:	680b      	ldr	r3, [r1, #0]
 8012204:	1d1a      	adds	r2, r3, #4
 8012206:	600a      	str	r2, [r1, #0]
 8012208:	681e      	ldr	r6, [r3, #0]
 801220a:	6862      	ldr	r2, [r4, #4]
 801220c:	2100      	movs	r1, #0
 801220e:	4630      	mov	r0, r6
 8012210:	f7ee f806 	bl	8000220 <memchr>
 8012214:	b108      	cbz	r0, 801221a <_printf_i+0x1f2>
 8012216:	1b80      	subs	r0, r0, r6
 8012218:	6060      	str	r0, [r4, #4]
 801221a:	6863      	ldr	r3, [r4, #4]
 801221c:	6123      	str	r3, [r4, #16]
 801221e:	2300      	movs	r3, #0
 8012220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012224:	e7a8      	b.n	8012178 <_printf_i+0x150>
 8012226:	6923      	ldr	r3, [r4, #16]
 8012228:	4632      	mov	r2, r6
 801222a:	4649      	mov	r1, r9
 801222c:	4640      	mov	r0, r8
 801222e:	47d0      	blx	sl
 8012230:	3001      	adds	r0, #1
 8012232:	d0ab      	beq.n	801218c <_printf_i+0x164>
 8012234:	6823      	ldr	r3, [r4, #0]
 8012236:	079b      	lsls	r3, r3, #30
 8012238:	d413      	bmi.n	8012262 <_printf_i+0x23a>
 801223a:	68e0      	ldr	r0, [r4, #12]
 801223c:	9b03      	ldr	r3, [sp, #12]
 801223e:	4298      	cmp	r0, r3
 8012240:	bfb8      	it	lt
 8012242:	4618      	movlt	r0, r3
 8012244:	e7a4      	b.n	8012190 <_printf_i+0x168>
 8012246:	2301      	movs	r3, #1
 8012248:	4632      	mov	r2, r6
 801224a:	4649      	mov	r1, r9
 801224c:	4640      	mov	r0, r8
 801224e:	47d0      	blx	sl
 8012250:	3001      	adds	r0, #1
 8012252:	d09b      	beq.n	801218c <_printf_i+0x164>
 8012254:	3501      	adds	r5, #1
 8012256:	68e3      	ldr	r3, [r4, #12]
 8012258:	9903      	ldr	r1, [sp, #12]
 801225a:	1a5b      	subs	r3, r3, r1
 801225c:	42ab      	cmp	r3, r5
 801225e:	dcf2      	bgt.n	8012246 <_printf_i+0x21e>
 8012260:	e7eb      	b.n	801223a <_printf_i+0x212>
 8012262:	2500      	movs	r5, #0
 8012264:	f104 0619 	add.w	r6, r4, #25
 8012268:	e7f5      	b.n	8012256 <_printf_i+0x22e>
 801226a:	bf00      	nop
 801226c:	08015621 	.word	0x08015621
 8012270:	08015632 	.word	0x08015632

08012274 <_sbrk_r>:
 8012274:	b538      	push	{r3, r4, r5, lr}
 8012276:	4d06      	ldr	r5, [pc, #24]	; (8012290 <_sbrk_r+0x1c>)
 8012278:	2300      	movs	r3, #0
 801227a:	4604      	mov	r4, r0
 801227c:	4608      	mov	r0, r1
 801227e:	602b      	str	r3, [r5, #0]
 8012280:	f7ee ff8a 	bl	8001198 <_sbrk>
 8012284:	1c43      	adds	r3, r0, #1
 8012286:	d102      	bne.n	801228e <_sbrk_r+0x1a>
 8012288:	682b      	ldr	r3, [r5, #0]
 801228a:	b103      	cbz	r3, 801228e <_sbrk_r+0x1a>
 801228c:	6023      	str	r3, [r4, #0]
 801228e:	bd38      	pop	{r3, r4, r5, pc}
 8012290:	20008b54 	.word	0x20008b54

08012294 <__sread>:
 8012294:	b510      	push	{r4, lr}
 8012296:	460c      	mov	r4, r1
 8012298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801229c:	f000 fa92 	bl	80127c4 <_read_r>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	bfab      	itete	ge
 80122a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122a6:	89a3      	ldrhlt	r3, [r4, #12]
 80122a8:	181b      	addge	r3, r3, r0
 80122aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122ae:	bfac      	ite	ge
 80122b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80122b2:	81a3      	strhlt	r3, [r4, #12]
 80122b4:	bd10      	pop	{r4, pc}

080122b6 <__swrite>:
 80122b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ba:	461f      	mov	r7, r3
 80122bc:	898b      	ldrh	r3, [r1, #12]
 80122be:	05db      	lsls	r3, r3, #23
 80122c0:	4605      	mov	r5, r0
 80122c2:	460c      	mov	r4, r1
 80122c4:	4616      	mov	r6, r2
 80122c6:	d505      	bpl.n	80122d4 <__swrite+0x1e>
 80122c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122cc:	2302      	movs	r3, #2
 80122ce:	2200      	movs	r2, #0
 80122d0:	f000 f9d0 	bl	8012674 <_lseek_r>
 80122d4:	89a3      	ldrh	r3, [r4, #12]
 80122d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122de:	81a3      	strh	r3, [r4, #12]
 80122e0:	4632      	mov	r2, r6
 80122e2:	463b      	mov	r3, r7
 80122e4:	4628      	mov	r0, r5
 80122e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122ea:	f000 b869 	b.w	80123c0 <_write_r>

080122ee <__sseek>:
 80122ee:	b510      	push	{r4, lr}
 80122f0:	460c      	mov	r4, r1
 80122f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122f6:	f000 f9bd 	bl	8012674 <_lseek_r>
 80122fa:	1c43      	adds	r3, r0, #1
 80122fc:	89a3      	ldrh	r3, [r4, #12]
 80122fe:	bf15      	itete	ne
 8012300:	6560      	strne	r0, [r4, #84]	; 0x54
 8012302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801230a:	81a3      	strheq	r3, [r4, #12]
 801230c:	bf18      	it	ne
 801230e:	81a3      	strhne	r3, [r4, #12]
 8012310:	bd10      	pop	{r4, pc}

08012312 <__sclose>:
 8012312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012316:	f000 b8db 	b.w	80124d0 <_close_r>
	...

0801231c <__swbuf_r>:
 801231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801231e:	460e      	mov	r6, r1
 8012320:	4614      	mov	r4, r2
 8012322:	4605      	mov	r5, r0
 8012324:	b118      	cbz	r0, 801232e <__swbuf_r+0x12>
 8012326:	6983      	ldr	r3, [r0, #24]
 8012328:	b90b      	cbnz	r3, 801232e <__swbuf_r+0x12>
 801232a:	f7ff f9f5 	bl	8011718 <__sinit>
 801232e:	4b21      	ldr	r3, [pc, #132]	; (80123b4 <__swbuf_r+0x98>)
 8012330:	429c      	cmp	r4, r3
 8012332:	d12b      	bne.n	801238c <__swbuf_r+0x70>
 8012334:	686c      	ldr	r4, [r5, #4]
 8012336:	69a3      	ldr	r3, [r4, #24]
 8012338:	60a3      	str	r3, [r4, #8]
 801233a:	89a3      	ldrh	r3, [r4, #12]
 801233c:	071a      	lsls	r2, r3, #28
 801233e:	d52f      	bpl.n	80123a0 <__swbuf_r+0x84>
 8012340:	6923      	ldr	r3, [r4, #16]
 8012342:	b36b      	cbz	r3, 80123a0 <__swbuf_r+0x84>
 8012344:	6923      	ldr	r3, [r4, #16]
 8012346:	6820      	ldr	r0, [r4, #0]
 8012348:	1ac0      	subs	r0, r0, r3
 801234a:	6963      	ldr	r3, [r4, #20]
 801234c:	b2f6      	uxtb	r6, r6
 801234e:	4283      	cmp	r3, r0
 8012350:	4637      	mov	r7, r6
 8012352:	dc04      	bgt.n	801235e <__swbuf_r+0x42>
 8012354:	4621      	mov	r1, r4
 8012356:	4628      	mov	r0, r5
 8012358:	f000 f950 	bl	80125fc <_fflush_r>
 801235c:	bb30      	cbnz	r0, 80123ac <__swbuf_r+0x90>
 801235e:	68a3      	ldr	r3, [r4, #8]
 8012360:	3b01      	subs	r3, #1
 8012362:	60a3      	str	r3, [r4, #8]
 8012364:	6823      	ldr	r3, [r4, #0]
 8012366:	1c5a      	adds	r2, r3, #1
 8012368:	6022      	str	r2, [r4, #0]
 801236a:	701e      	strb	r6, [r3, #0]
 801236c:	6963      	ldr	r3, [r4, #20]
 801236e:	3001      	adds	r0, #1
 8012370:	4283      	cmp	r3, r0
 8012372:	d004      	beq.n	801237e <__swbuf_r+0x62>
 8012374:	89a3      	ldrh	r3, [r4, #12]
 8012376:	07db      	lsls	r3, r3, #31
 8012378:	d506      	bpl.n	8012388 <__swbuf_r+0x6c>
 801237a:	2e0a      	cmp	r6, #10
 801237c:	d104      	bne.n	8012388 <__swbuf_r+0x6c>
 801237e:	4621      	mov	r1, r4
 8012380:	4628      	mov	r0, r5
 8012382:	f000 f93b 	bl	80125fc <_fflush_r>
 8012386:	b988      	cbnz	r0, 80123ac <__swbuf_r+0x90>
 8012388:	4638      	mov	r0, r7
 801238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801238c:	4b0a      	ldr	r3, [pc, #40]	; (80123b8 <__swbuf_r+0x9c>)
 801238e:	429c      	cmp	r4, r3
 8012390:	d101      	bne.n	8012396 <__swbuf_r+0x7a>
 8012392:	68ac      	ldr	r4, [r5, #8]
 8012394:	e7cf      	b.n	8012336 <__swbuf_r+0x1a>
 8012396:	4b09      	ldr	r3, [pc, #36]	; (80123bc <__swbuf_r+0xa0>)
 8012398:	429c      	cmp	r4, r3
 801239a:	bf08      	it	eq
 801239c:	68ec      	ldreq	r4, [r5, #12]
 801239e:	e7ca      	b.n	8012336 <__swbuf_r+0x1a>
 80123a0:	4621      	mov	r1, r4
 80123a2:	4628      	mov	r0, r5
 80123a4:	f000 f81e 	bl	80123e4 <__swsetup_r>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	d0cb      	beq.n	8012344 <__swbuf_r+0x28>
 80123ac:	f04f 37ff 	mov.w	r7, #4294967295
 80123b0:	e7ea      	b.n	8012388 <__swbuf_r+0x6c>
 80123b2:	bf00      	nop
 80123b4:	080155d0 	.word	0x080155d0
 80123b8:	080155f0 	.word	0x080155f0
 80123bc:	080155b0 	.word	0x080155b0

080123c0 <_write_r>:
 80123c0:	b538      	push	{r3, r4, r5, lr}
 80123c2:	4d07      	ldr	r5, [pc, #28]	; (80123e0 <_write_r+0x20>)
 80123c4:	4604      	mov	r4, r0
 80123c6:	4608      	mov	r0, r1
 80123c8:	4611      	mov	r1, r2
 80123ca:	2200      	movs	r2, #0
 80123cc:	602a      	str	r2, [r5, #0]
 80123ce:	461a      	mov	r2, r3
 80123d0:	f7ee fe91 	bl	80010f6 <_write>
 80123d4:	1c43      	adds	r3, r0, #1
 80123d6:	d102      	bne.n	80123de <_write_r+0x1e>
 80123d8:	682b      	ldr	r3, [r5, #0]
 80123da:	b103      	cbz	r3, 80123de <_write_r+0x1e>
 80123dc:	6023      	str	r3, [r4, #0]
 80123de:	bd38      	pop	{r3, r4, r5, pc}
 80123e0:	20008b54 	.word	0x20008b54

080123e4 <__swsetup_r>:
 80123e4:	4b32      	ldr	r3, [pc, #200]	; (80124b0 <__swsetup_r+0xcc>)
 80123e6:	b570      	push	{r4, r5, r6, lr}
 80123e8:	681d      	ldr	r5, [r3, #0]
 80123ea:	4606      	mov	r6, r0
 80123ec:	460c      	mov	r4, r1
 80123ee:	b125      	cbz	r5, 80123fa <__swsetup_r+0x16>
 80123f0:	69ab      	ldr	r3, [r5, #24]
 80123f2:	b913      	cbnz	r3, 80123fa <__swsetup_r+0x16>
 80123f4:	4628      	mov	r0, r5
 80123f6:	f7ff f98f 	bl	8011718 <__sinit>
 80123fa:	4b2e      	ldr	r3, [pc, #184]	; (80124b4 <__swsetup_r+0xd0>)
 80123fc:	429c      	cmp	r4, r3
 80123fe:	d10f      	bne.n	8012420 <__swsetup_r+0x3c>
 8012400:	686c      	ldr	r4, [r5, #4]
 8012402:	89a3      	ldrh	r3, [r4, #12]
 8012404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012408:	0719      	lsls	r1, r3, #28
 801240a:	d42c      	bmi.n	8012466 <__swsetup_r+0x82>
 801240c:	06dd      	lsls	r5, r3, #27
 801240e:	d411      	bmi.n	8012434 <__swsetup_r+0x50>
 8012410:	2309      	movs	r3, #9
 8012412:	6033      	str	r3, [r6, #0]
 8012414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012418:	81a3      	strh	r3, [r4, #12]
 801241a:	f04f 30ff 	mov.w	r0, #4294967295
 801241e:	e03e      	b.n	801249e <__swsetup_r+0xba>
 8012420:	4b25      	ldr	r3, [pc, #148]	; (80124b8 <__swsetup_r+0xd4>)
 8012422:	429c      	cmp	r4, r3
 8012424:	d101      	bne.n	801242a <__swsetup_r+0x46>
 8012426:	68ac      	ldr	r4, [r5, #8]
 8012428:	e7eb      	b.n	8012402 <__swsetup_r+0x1e>
 801242a:	4b24      	ldr	r3, [pc, #144]	; (80124bc <__swsetup_r+0xd8>)
 801242c:	429c      	cmp	r4, r3
 801242e:	bf08      	it	eq
 8012430:	68ec      	ldreq	r4, [r5, #12]
 8012432:	e7e6      	b.n	8012402 <__swsetup_r+0x1e>
 8012434:	0758      	lsls	r0, r3, #29
 8012436:	d512      	bpl.n	801245e <__swsetup_r+0x7a>
 8012438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801243a:	b141      	cbz	r1, 801244e <__swsetup_r+0x6a>
 801243c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012440:	4299      	cmp	r1, r3
 8012442:	d002      	beq.n	801244a <__swsetup_r+0x66>
 8012444:	4630      	mov	r0, r6
 8012446:	f7ff fa21 	bl	801188c <_free_r>
 801244a:	2300      	movs	r3, #0
 801244c:	6363      	str	r3, [r4, #52]	; 0x34
 801244e:	89a3      	ldrh	r3, [r4, #12]
 8012450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012454:	81a3      	strh	r3, [r4, #12]
 8012456:	2300      	movs	r3, #0
 8012458:	6063      	str	r3, [r4, #4]
 801245a:	6923      	ldr	r3, [r4, #16]
 801245c:	6023      	str	r3, [r4, #0]
 801245e:	89a3      	ldrh	r3, [r4, #12]
 8012460:	f043 0308 	orr.w	r3, r3, #8
 8012464:	81a3      	strh	r3, [r4, #12]
 8012466:	6923      	ldr	r3, [r4, #16]
 8012468:	b94b      	cbnz	r3, 801247e <__swsetup_r+0x9a>
 801246a:	89a3      	ldrh	r3, [r4, #12]
 801246c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012474:	d003      	beq.n	801247e <__swsetup_r+0x9a>
 8012476:	4621      	mov	r1, r4
 8012478:	4630      	mov	r0, r6
 801247a:	f000 f931 	bl	80126e0 <__smakebuf_r>
 801247e:	89a0      	ldrh	r0, [r4, #12]
 8012480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012484:	f010 0301 	ands.w	r3, r0, #1
 8012488:	d00a      	beq.n	80124a0 <__swsetup_r+0xbc>
 801248a:	2300      	movs	r3, #0
 801248c:	60a3      	str	r3, [r4, #8]
 801248e:	6963      	ldr	r3, [r4, #20]
 8012490:	425b      	negs	r3, r3
 8012492:	61a3      	str	r3, [r4, #24]
 8012494:	6923      	ldr	r3, [r4, #16]
 8012496:	b943      	cbnz	r3, 80124aa <__swsetup_r+0xc6>
 8012498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801249c:	d1ba      	bne.n	8012414 <__swsetup_r+0x30>
 801249e:	bd70      	pop	{r4, r5, r6, pc}
 80124a0:	0781      	lsls	r1, r0, #30
 80124a2:	bf58      	it	pl
 80124a4:	6963      	ldrpl	r3, [r4, #20]
 80124a6:	60a3      	str	r3, [r4, #8]
 80124a8:	e7f4      	b.n	8012494 <__swsetup_r+0xb0>
 80124aa:	2000      	movs	r0, #0
 80124ac:	e7f7      	b.n	801249e <__swsetup_r+0xba>
 80124ae:	bf00      	nop
 80124b0:	20000034 	.word	0x20000034
 80124b4:	080155d0 	.word	0x080155d0
 80124b8:	080155f0 	.word	0x080155f0
 80124bc:	080155b0 	.word	0x080155b0

080124c0 <abort>:
 80124c0:	b508      	push	{r3, lr}
 80124c2:	2006      	movs	r0, #6
 80124c4:	f000 f9b8 	bl	8012838 <raise>
 80124c8:	2001      	movs	r0, #1
 80124ca:	f7ee fded 	bl	80010a8 <_exit>
	...

080124d0 <_close_r>:
 80124d0:	b538      	push	{r3, r4, r5, lr}
 80124d2:	4d06      	ldr	r5, [pc, #24]	; (80124ec <_close_r+0x1c>)
 80124d4:	2300      	movs	r3, #0
 80124d6:	4604      	mov	r4, r0
 80124d8:	4608      	mov	r0, r1
 80124da:	602b      	str	r3, [r5, #0]
 80124dc:	f7ee fe27 	bl	800112e <_close>
 80124e0:	1c43      	adds	r3, r0, #1
 80124e2:	d102      	bne.n	80124ea <_close_r+0x1a>
 80124e4:	682b      	ldr	r3, [r5, #0]
 80124e6:	b103      	cbz	r3, 80124ea <_close_r+0x1a>
 80124e8:	6023      	str	r3, [r4, #0]
 80124ea:	bd38      	pop	{r3, r4, r5, pc}
 80124ec:	20008b54 	.word	0x20008b54

080124f0 <__sflush_r>:
 80124f0:	898a      	ldrh	r2, [r1, #12]
 80124f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f6:	4605      	mov	r5, r0
 80124f8:	0710      	lsls	r0, r2, #28
 80124fa:	460c      	mov	r4, r1
 80124fc:	d458      	bmi.n	80125b0 <__sflush_r+0xc0>
 80124fe:	684b      	ldr	r3, [r1, #4]
 8012500:	2b00      	cmp	r3, #0
 8012502:	dc05      	bgt.n	8012510 <__sflush_r+0x20>
 8012504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012506:	2b00      	cmp	r3, #0
 8012508:	dc02      	bgt.n	8012510 <__sflush_r+0x20>
 801250a:	2000      	movs	r0, #0
 801250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012512:	2e00      	cmp	r6, #0
 8012514:	d0f9      	beq.n	801250a <__sflush_r+0x1a>
 8012516:	2300      	movs	r3, #0
 8012518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801251c:	682f      	ldr	r7, [r5, #0]
 801251e:	602b      	str	r3, [r5, #0]
 8012520:	d032      	beq.n	8012588 <__sflush_r+0x98>
 8012522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012524:	89a3      	ldrh	r3, [r4, #12]
 8012526:	075a      	lsls	r2, r3, #29
 8012528:	d505      	bpl.n	8012536 <__sflush_r+0x46>
 801252a:	6863      	ldr	r3, [r4, #4]
 801252c:	1ac0      	subs	r0, r0, r3
 801252e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012530:	b10b      	cbz	r3, 8012536 <__sflush_r+0x46>
 8012532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012534:	1ac0      	subs	r0, r0, r3
 8012536:	2300      	movs	r3, #0
 8012538:	4602      	mov	r2, r0
 801253a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801253c:	6a21      	ldr	r1, [r4, #32]
 801253e:	4628      	mov	r0, r5
 8012540:	47b0      	blx	r6
 8012542:	1c43      	adds	r3, r0, #1
 8012544:	89a3      	ldrh	r3, [r4, #12]
 8012546:	d106      	bne.n	8012556 <__sflush_r+0x66>
 8012548:	6829      	ldr	r1, [r5, #0]
 801254a:	291d      	cmp	r1, #29
 801254c:	d82c      	bhi.n	80125a8 <__sflush_r+0xb8>
 801254e:	4a2a      	ldr	r2, [pc, #168]	; (80125f8 <__sflush_r+0x108>)
 8012550:	40ca      	lsrs	r2, r1
 8012552:	07d6      	lsls	r6, r2, #31
 8012554:	d528      	bpl.n	80125a8 <__sflush_r+0xb8>
 8012556:	2200      	movs	r2, #0
 8012558:	6062      	str	r2, [r4, #4]
 801255a:	04d9      	lsls	r1, r3, #19
 801255c:	6922      	ldr	r2, [r4, #16]
 801255e:	6022      	str	r2, [r4, #0]
 8012560:	d504      	bpl.n	801256c <__sflush_r+0x7c>
 8012562:	1c42      	adds	r2, r0, #1
 8012564:	d101      	bne.n	801256a <__sflush_r+0x7a>
 8012566:	682b      	ldr	r3, [r5, #0]
 8012568:	b903      	cbnz	r3, 801256c <__sflush_r+0x7c>
 801256a:	6560      	str	r0, [r4, #84]	; 0x54
 801256c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801256e:	602f      	str	r7, [r5, #0]
 8012570:	2900      	cmp	r1, #0
 8012572:	d0ca      	beq.n	801250a <__sflush_r+0x1a>
 8012574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012578:	4299      	cmp	r1, r3
 801257a:	d002      	beq.n	8012582 <__sflush_r+0x92>
 801257c:	4628      	mov	r0, r5
 801257e:	f7ff f985 	bl	801188c <_free_r>
 8012582:	2000      	movs	r0, #0
 8012584:	6360      	str	r0, [r4, #52]	; 0x34
 8012586:	e7c1      	b.n	801250c <__sflush_r+0x1c>
 8012588:	6a21      	ldr	r1, [r4, #32]
 801258a:	2301      	movs	r3, #1
 801258c:	4628      	mov	r0, r5
 801258e:	47b0      	blx	r6
 8012590:	1c41      	adds	r1, r0, #1
 8012592:	d1c7      	bne.n	8012524 <__sflush_r+0x34>
 8012594:	682b      	ldr	r3, [r5, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d0c4      	beq.n	8012524 <__sflush_r+0x34>
 801259a:	2b1d      	cmp	r3, #29
 801259c:	d001      	beq.n	80125a2 <__sflush_r+0xb2>
 801259e:	2b16      	cmp	r3, #22
 80125a0:	d101      	bne.n	80125a6 <__sflush_r+0xb6>
 80125a2:	602f      	str	r7, [r5, #0]
 80125a4:	e7b1      	b.n	801250a <__sflush_r+0x1a>
 80125a6:	89a3      	ldrh	r3, [r4, #12]
 80125a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125ac:	81a3      	strh	r3, [r4, #12]
 80125ae:	e7ad      	b.n	801250c <__sflush_r+0x1c>
 80125b0:	690f      	ldr	r7, [r1, #16]
 80125b2:	2f00      	cmp	r7, #0
 80125b4:	d0a9      	beq.n	801250a <__sflush_r+0x1a>
 80125b6:	0793      	lsls	r3, r2, #30
 80125b8:	680e      	ldr	r6, [r1, #0]
 80125ba:	bf08      	it	eq
 80125bc:	694b      	ldreq	r3, [r1, #20]
 80125be:	600f      	str	r7, [r1, #0]
 80125c0:	bf18      	it	ne
 80125c2:	2300      	movne	r3, #0
 80125c4:	eba6 0807 	sub.w	r8, r6, r7
 80125c8:	608b      	str	r3, [r1, #8]
 80125ca:	f1b8 0f00 	cmp.w	r8, #0
 80125ce:	dd9c      	ble.n	801250a <__sflush_r+0x1a>
 80125d0:	6a21      	ldr	r1, [r4, #32]
 80125d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80125d4:	4643      	mov	r3, r8
 80125d6:	463a      	mov	r2, r7
 80125d8:	4628      	mov	r0, r5
 80125da:	47b0      	blx	r6
 80125dc:	2800      	cmp	r0, #0
 80125de:	dc06      	bgt.n	80125ee <__sflush_r+0xfe>
 80125e0:	89a3      	ldrh	r3, [r4, #12]
 80125e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125e6:	81a3      	strh	r3, [r4, #12]
 80125e8:	f04f 30ff 	mov.w	r0, #4294967295
 80125ec:	e78e      	b.n	801250c <__sflush_r+0x1c>
 80125ee:	4407      	add	r7, r0
 80125f0:	eba8 0800 	sub.w	r8, r8, r0
 80125f4:	e7e9      	b.n	80125ca <__sflush_r+0xda>
 80125f6:	bf00      	nop
 80125f8:	20400001 	.word	0x20400001

080125fc <_fflush_r>:
 80125fc:	b538      	push	{r3, r4, r5, lr}
 80125fe:	690b      	ldr	r3, [r1, #16]
 8012600:	4605      	mov	r5, r0
 8012602:	460c      	mov	r4, r1
 8012604:	b913      	cbnz	r3, 801260c <_fflush_r+0x10>
 8012606:	2500      	movs	r5, #0
 8012608:	4628      	mov	r0, r5
 801260a:	bd38      	pop	{r3, r4, r5, pc}
 801260c:	b118      	cbz	r0, 8012616 <_fflush_r+0x1a>
 801260e:	6983      	ldr	r3, [r0, #24]
 8012610:	b90b      	cbnz	r3, 8012616 <_fflush_r+0x1a>
 8012612:	f7ff f881 	bl	8011718 <__sinit>
 8012616:	4b14      	ldr	r3, [pc, #80]	; (8012668 <_fflush_r+0x6c>)
 8012618:	429c      	cmp	r4, r3
 801261a:	d11b      	bne.n	8012654 <_fflush_r+0x58>
 801261c:	686c      	ldr	r4, [r5, #4]
 801261e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d0ef      	beq.n	8012606 <_fflush_r+0xa>
 8012626:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012628:	07d0      	lsls	r0, r2, #31
 801262a:	d404      	bmi.n	8012636 <_fflush_r+0x3a>
 801262c:	0599      	lsls	r1, r3, #22
 801262e:	d402      	bmi.n	8012636 <_fflush_r+0x3a>
 8012630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012632:	f7ff f921 	bl	8011878 <__retarget_lock_acquire_recursive>
 8012636:	4628      	mov	r0, r5
 8012638:	4621      	mov	r1, r4
 801263a:	f7ff ff59 	bl	80124f0 <__sflush_r>
 801263e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012640:	07da      	lsls	r2, r3, #31
 8012642:	4605      	mov	r5, r0
 8012644:	d4e0      	bmi.n	8012608 <_fflush_r+0xc>
 8012646:	89a3      	ldrh	r3, [r4, #12]
 8012648:	059b      	lsls	r3, r3, #22
 801264a:	d4dd      	bmi.n	8012608 <_fflush_r+0xc>
 801264c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801264e:	f7ff f914 	bl	801187a <__retarget_lock_release_recursive>
 8012652:	e7d9      	b.n	8012608 <_fflush_r+0xc>
 8012654:	4b05      	ldr	r3, [pc, #20]	; (801266c <_fflush_r+0x70>)
 8012656:	429c      	cmp	r4, r3
 8012658:	d101      	bne.n	801265e <_fflush_r+0x62>
 801265a:	68ac      	ldr	r4, [r5, #8]
 801265c:	e7df      	b.n	801261e <_fflush_r+0x22>
 801265e:	4b04      	ldr	r3, [pc, #16]	; (8012670 <_fflush_r+0x74>)
 8012660:	429c      	cmp	r4, r3
 8012662:	bf08      	it	eq
 8012664:	68ec      	ldreq	r4, [r5, #12]
 8012666:	e7da      	b.n	801261e <_fflush_r+0x22>
 8012668:	080155d0 	.word	0x080155d0
 801266c:	080155f0 	.word	0x080155f0
 8012670:	080155b0 	.word	0x080155b0

08012674 <_lseek_r>:
 8012674:	b538      	push	{r3, r4, r5, lr}
 8012676:	4d07      	ldr	r5, [pc, #28]	; (8012694 <_lseek_r+0x20>)
 8012678:	4604      	mov	r4, r0
 801267a:	4608      	mov	r0, r1
 801267c:	4611      	mov	r1, r2
 801267e:	2200      	movs	r2, #0
 8012680:	602a      	str	r2, [r5, #0]
 8012682:	461a      	mov	r2, r3
 8012684:	f7ee fd7a 	bl	800117c <_lseek>
 8012688:	1c43      	adds	r3, r0, #1
 801268a:	d102      	bne.n	8012692 <_lseek_r+0x1e>
 801268c:	682b      	ldr	r3, [r5, #0]
 801268e:	b103      	cbz	r3, 8012692 <_lseek_r+0x1e>
 8012690:	6023      	str	r3, [r4, #0]
 8012692:	bd38      	pop	{r3, r4, r5, pc}
 8012694:	20008b54 	.word	0x20008b54

08012698 <__swhatbuf_r>:
 8012698:	b570      	push	{r4, r5, r6, lr}
 801269a:	460e      	mov	r6, r1
 801269c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126a0:	2900      	cmp	r1, #0
 80126a2:	b096      	sub	sp, #88	; 0x58
 80126a4:	4614      	mov	r4, r2
 80126a6:	461d      	mov	r5, r3
 80126a8:	da07      	bge.n	80126ba <__swhatbuf_r+0x22>
 80126aa:	2300      	movs	r3, #0
 80126ac:	602b      	str	r3, [r5, #0]
 80126ae:	89b3      	ldrh	r3, [r6, #12]
 80126b0:	061a      	lsls	r2, r3, #24
 80126b2:	d410      	bmi.n	80126d6 <__swhatbuf_r+0x3e>
 80126b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126b8:	e00e      	b.n	80126d8 <__swhatbuf_r+0x40>
 80126ba:	466a      	mov	r2, sp
 80126bc:	f000 f8d8 	bl	8012870 <_fstat_r>
 80126c0:	2800      	cmp	r0, #0
 80126c2:	dbf2      	blt.n	80126aa <__swhatbuf_r+0x12>
 80126c4:	9a01      	ldr	r2, [sp, #4]
 80126c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80126ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80126ce:	425a      	negs	r2, r3
 80126d0:	415a      	adcs	r2, r3
 80126d2:	602a      	str	r2, [r5, #0]
 80126d4:	e7ee      	b.n	80126b4 <__swhatbuf_r+0x1c>
 80126d6:	2340      	movs	r3, #64	; 0x40
 80126d8:	2000      	movs	r0, #0
 80126da:	6023      	str	r3, [r4, #0]
 80126dc:	b016      	add	sp, #88	; 0x58
 80126de:	bd70      	pop	{r4, r5, r6, pc}

080126e0 <__smakebuf_r>:
 80126e0:	898b      	ldrh	r3, [r1, #12]
 80126e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80126e4:	079d      	lsls	r5, r3, #30
 80126e6:	4606      	mov	r6, r0
 80126e8:	460c      	mov	r4, r1
 80126ea:	d507      	bpl.n	80126fc <__smakebuf_r+0x1c>
 80126ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	6123      	str	r3, [r4, #16]
 80126f4:	2301      	movs	r3, #1
 80126f6:	6163      	str	r3, [r4, #20]
 80126f8:	b002      	add	sp, #8
 80126fa:	bd70      	pop	{r4, r5, r6, pc}
 80126fc:	ab01      	add	r3, sp, #4
 80126fe:	466a      	mov	r2, sp
 8012700:	f7ff ffca 	bl	8012698 <__swhatbuf_r>
 8012704:	9900      	ldr	r1, [sp, #0]
 8012706:	4605      	mov	r5, r0
 8012708:	4630      	mov	r0, r6
 801270a:	f7ff f90f 	bl	801192c <_malloc_r>
 801270e:	b948      	cbnz	r0, 8012724 <__smakebuf_r+0x44>
 8012710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012714:	059a      	lsls	r2, r3, #22
 8012716:	d4ef      	bmi.n	80126f8 <__smakebuf_r+0x18>
 8012718:	f023 0303 	bic.w	r3, r3, #3
 801271c:	f043 0302 	orr.w	r3, r3, #2
 8012720:	81a3      	strh	r3, [r4, #12]
 8012722:	e7e3      	b.n	80126ec <__smakebuf_r+0xc>
 8012724:	4b0d      	ldr	r3, [pc, #52]	; (801275c <__smakebuf_r+0x7c>)
 8012726:	62b3      	str	r3, [r6, #40]	; 0x28
 8012728:	89a3      	ldrh	r3, [r4, #12]
 801272a:	6020      	str	r0, [r4, #0]
 801272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012730:	81a3      	strh	r3, [r4, #12]
 8012732:	9b00      	ldr	r3, [sp, #0]
 8012734:	6163      	str	r3, [r4, #20]
 8012736:	9b01      	ldr	r3, [sp, #4]
 8012738:	6120      	str	r0, [r4, #16]
 801273a:	b15b      	cbz	r3, 8012754 <__smakebuf_r+0x74>
 801273c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012740:	4630      	mov	r0, r6
 8012742:	f000 f8a7 	bl	8012894 <_isatty_r>
 8012746:	b128      	cbz	r0, 8012754 <__smakebuf_r+0x74>
 8012748:	89a3      	ldrh	r3, [r4, #12]
 801274a:	f023 0303 	bic.w	r3, r3, #3
 801274e:	f043 0301 	orr.w	r3, r3, #1
 8012752:	81a3      	strh	r3, [r4, #12]
 8012754:	89a0      	ldrh	r0, [r4, #12]
 8012756:	4305      	orrs	r5, r0
 8012758:	81a5      	strh	r5, [r4, #12]
 801275a:	e7cd      	b.n	80126f8 <__smakebuf_r+0x18>
 801275c:	080116b1 	.word	0x080116b1

08012760 <__malloc_lock>:
 8012760:	4801      	ldr	r0, [pc, #4]	; (8012768 <__malloc_lock+0x8>)
 8012762:	f7ff b889 	b.w	8011878 <__retarget_lock_acquire_recursive>
 8012766:	bf00      	nop
 8012768:	20008b5c 	.word	0x20008b5c

0801276c <__malloc_unlock>:
 801276c:	4801      	ldr	r0, [pc, #4]	; (8012774 <__malloc_unlock+0x8>)
 801276e:	f7ff b884 	b.w	801187a <__retarget_lock_release_recursive>
 8012772:	bf00      	nop
 8012774:	20008b5c 	.word	0x20008b5c

08012778 <_realloc_r>:
 8012778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801277a:	4607      	mov	r7, r0
 801277c:	4614      	mov	r4, r2
 801277e:	460e      	mov	r6, r1
 8012780:	b921      	cbnz	r1, 801278c <_realloc_r+0x14>
 8012782:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012786:	4611      	mov	r1, r2
 8012788:	f7ff b8d0 	b.w	801192c <_malloc_r>
 801278c:	b922      	cbnz	r2, 8012798 <_realloc_r+0x20>
 801278e:	f7ff f87d 	bl	801188c <_free_r>
 8012792:	4625      	mov	r5, r4
 8012794:	4628      	mov	r0, r5
 8012796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012798:	f000 f88c 	bl	80128b4 <_malloc_usable_size_r>
 801279c:	42a0      	cmp	r0, r4
 801279e:	d20f      	bcs.n	80127c0 <_realloc_r+0x48>
 80127a0:	4621      	mov	r1, r4
 80127a2:	4638      	mov	r0, r7
 80127a4:	f7ff f8c2 	bl	801192c <_malloc_r>
 80127a8:	4605      	mov	r5, r0
 80127aa:	2800      	cmp	r0, #0
 80127ac:	d0f2      	beq.n	8012794 <_realloc_r+0x1c>
 80127ae:	4631      	mov	r1, r6
 80127b0:	4622      	mov	r2, r4
 80127b2:	f7fe fe77 	bl	80114a4 <memcpy>
 80127b6:	4631      	mov	r1, r6
 80127b8:	4638      	mov	r0, r7
 80127ba:	f7ff f867 	bl	801188c <_free_r>
 80127be:	e7e9      	b.n	8012794 <_realloc_r+0x1c>
 80127c0:	4635      	mov	r5, r6
 80127c2:	e7e7      	b.n	8012794 <_realloc_r+0x1c>

080127c4 <_read_r>:
 80127c4:	b538      	push	{r3, r4, r5, lr}
 80127c6:	4d07      	ldr	r5, [pc, #28]	; (80127e4 <_read_r+0x20>)
 80127c8:	4604      	mov	r4, r0
 80127ca:	4608      	mov	r0, r1
 80127cc:	4611      	mov	r1, r2
 80127ce:	2200      	movs	r2, #0
 80127d0:	602a      	str	r2, [r5, #0]
 80127d2:	461a      	mov	r2, r3
 80127d4:	f7ee fc72 	bl	80010bc <_read>
 80127d8:	1c43      	adds	r3, r0, #1
 80127da:	d102      	bne.n	80127e2 <_read_r+0x1e>
 80127dc:	682b      	ldr	r3, [r5, #0]
 80127de:	b103      	cbz	r3, 80127e2 <_read_r+0x1e>
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	bd38      	pop	{r3, r4, r5, pc}
 80127e4:	20008b54 	.word	0x20008b54

080127e8 <_raise_r>:
 80127e8:	291f      	cmp	r1, #31
 80127ea:	b538      	push	{r3, r4, r5, lr}
 80127ec:	4604      	mov	r4, r0
 80127ee:	460d      	mov	r5, r1
 80127f0:	d904      	bls.n	80127fc <_raise_r+0x14>
 80127f2:	2316      	movs	r3, #22
 80127f4:	6003      	str	r3, [r0, #0]
 80127f6:	f04f 30ff 	mov.w	r0, #4294967295
 80127fa:	bd38      	pop	{r3, r4, r5, pc}
 80127fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80127fe:	b112      	cbz	r2, 8012806 <_raise_r+0x1e>
 8012800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012804:	b94b      	cbnz	r3, 801281a <_raise_r+0x32>
 8012806:	4620      	mov	r0, r4
 8012808:	f000 f830 	bl	801286c <_getpid_r>
 801280c:	462a      	mov	r2, r5
 801280e:	4601      	mov	r1, r0
 8012810:	4620      	mov	r0, r4
 8012812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012816:	f000 b817 	b.w	8012848 <_kill_r>
 801281a:	2b01      	cmp	r3, #1
 801281c:	d00a      	beq.n	8012834 <_raise_r+0x4c>
 801281e:	1c59      	adds	r1, r3, #1
 8012820:	d103      	bne.n	801282a <_raise_r+0x42>
 8012822:	2316      	movs	r3, #22
 8012824:	6003      	str	r3, [r0, #0]
 8012826:	2001      	movs	r0, #1
 8012828:	e7e7      	b.n	80127fa <_raise_r+0x12>
 801282a:	2400      	movs	r4, #0
 801282c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012830:	4628      	mov	r0, r5
 8012832:	4798      	blx	r3
 8012834:	2000      	movs	r0, #0
 8012836:	e7e0      	b.n	80127fa <_raise_r+0x12>

08012838 <raise>:
 8012838:	4b02      	ldr	r3, [pc, #8]	; (8012844 <raise+0xc>)
 801283a:	4601      	mov	r1, r0
 801283c:	6818      	ldr	r0, [r3, #0]
 801283e:	f7ff bfd3 	b.w	80127e8 <_raise_r>
 8012842:	bf00      	nop
 8012844:	20000034 	.word	0x20000034

08012848 <_kill_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4d07      	ldr	r5, [pc, #28]	; (8012868 <_kill_r+0x20>)
 801284c:	2300      	movs	r3, #0
 801284e:	4604      	mov	r4, r0
 8012850:	4608      	mov	r0, r1
 8012852:	4611      	mov	r1, r2
 8012854:	602b      	str	r3, [r5, #0]
 8012856:	f7ee fc15 	bl	8001084 <_kill>
 801285a:	1c43      	adds	r3, r0, #1
 801285c:	d102      	bne.n	8012864 <_kill_r+0x1c>
 801285e:	682b      	ldr	r3, [r5, #0]
 8012860:	b103      	cbz	r3, 8012864 <_kill_r+0x1c>
 8012862:	6023      	str	r3, [r4, #0]
 8012864:	bd38      	pop	{r3, r4, r5, pc}
 8012866:	bf00      	nop
 8012868:	20008b54 	.word	0x20008b54

0801286c <_getpid_r>:
 801286c:	f7ee bc02 	b.w	8001074 <_getpid>

08012870 <_fstat_r>:
 8012870:	b538      	push	{r3, r4, r5, lr}
 8012872:	4d07      	ldr	r5, [pc, #28]	; (8012890 <_fstat_r+0x20>)
 8012874:	2300      	movs	r3, #0
 8012876:	4604      	mov	r4, r0
 8012878:	4608      	mov	r0, r1
 801287a:	4611      	mov	r1, r2
 801287c:	602b      	str	r3, [r5, #0]
 801287e:	f7ee fc62 	bl	8001146 <_fstat>
 8012882:	1c43      	adds	r3, r0, #1
 8012884:	d102      	bne.n	801288c <_fstat_r+0x1c>
 8012886:	682b      	ldr	r3, [r5, #0]
 8012888:	b103      	cbz	r3, 801288c <_fstat_r+0x1c>
 801288a:	6023      	str	r3, [r4, #0]
 801288c:	bd38      	pop	{r3, r4, r5, pc}
 801288e:	bf00      	nop
 8012890:	20008b54 	.word	0x20008b54

08012894 <_isatty_r>:
 8012894:	b538      	push	{r3, r4, r5, lr}
 8012896:	4d06      	ldr	r5, [pc, #24]	; (80128b0 <_isatty_r+0x1c>)
 8012898:	2300      	movs	r3, #0
 801289a:	4604      	mov	r4, r0
 801289c:	4608      	mov	r0, r1
 801289e:	602b      	str	r3, [r5, #0]
 80128a0:	f7ee fc61 	bl	8001166 <_isatty>
 80128a4:	1c43      	adds	r3, r0, #1
 80128a6:	d102      	bne.n	80128ae <_isatty_r+0x1a>
 80128a8:	682b      	ldr	r3, [r5, #0]
 80128aa:	b103      	cbz	r3, 80128ae <_isatty_r+0x1a>
 80128ac:	6023      	str	r3, [r4, #0]
 80128ae:	bd38      	pop	{r3, r4, r5, pc}
 80128b0:	20008b54 	.word	0x20008b54

080128b4 <_malloc_usable_size_r>:
 80128b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128b8:	1f18      	subs	r0, r3, #4
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	bfbc      	itt	lt
 80128be:	580b      	ldrlt	r3, [r1, r0]
 80128c0:	18c0      	addlt	r0, r0, r3
 80128c2:	4770      	bx	lr

080128c4 <_init>:
 80128c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128c6:	bf00      	nop
 80128c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128ca:	bc08      	pop	{r3}
 80128cc:	469e      	mov	lr, r3
 80128ce:	4770      	bx	lr

080128d0 <_fini>:
 80128d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128d2:	bf00      	nop
 80128d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128d6:	bc08      	pop	{r3}
 80128d8:	469e      	mov	lr, r3
 80128da:	4770      	bx	lr
